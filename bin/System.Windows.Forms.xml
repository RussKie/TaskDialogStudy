<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Forms</name>
    </assembly>
    <members>
        <member name="T:System.ComponentModel.WeakHashtable">
            <summary>
             This is a hashtable that stores object keys as weak references.
             It monitors memory usage and will periodically scavenge the
             hash table to clean out dead references.
            </summary>
        </member>
        <member name="M:System.ComponentModel.WeakHashtable.Clear">
            <summary>
             Override of clear that performs a scavenge.
            </summary>
        </member>
        <member name="M:System.ComponentModel.WeakHashtable.Remove(System.Object)">
            <summary>
             Override of remove that performs a scavenge.
            </summary>
        </member>
        <member name="M:System.ComponentModel.WeakHashtable.SetWeak(System.Object,System.Object)">
            <summary>
             Override of Item that wraps a weak reference around the
             key and performs a scavenge.
            </summary>
        </member>
        <member name="M:System.ComponentModel.WeakHashtable.ScavengeKeys">
            <summary>
             This method checks to see if it is necessary to
             scavenge keys, and if it is it performs a scan
             of all keys to see which ones are no longer valid.
             To determine if we need to scavenge keys we need to
             try to track the current GC memory.  Our rule of
             thumb is that if GC memory is decreasing and our
             key count is constant we need to scavenge.  We
             will need to see if this is too often for extreme
             use cases like the CompactFramework (they add
             custom type data for every object at design time).
            </summary>
        </member>
        <member name="T:System.ComponentModel.WeakHashtable.EqualityWeakReference">
            <summary>
             A subclass of WeakReference that overrides GetHashCode and
             Equals so that the weak reference returns the same equality
             semantics as the object it wraps.  This will always return
             the object's hash code and will return True for a Equals
             comparison of the object it is wrapping.  If the object
             it is wrapping has finalized, Equals always returns false.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Internal.DbgUtil">
            <summary>
             Debug help utility.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DbgUtil.AssertFinalization(System.Object,System.Boolean)">
            <summary>
             Call this method from your Dispose(bool) to assert that unmanaged resources has been explicitly disposed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DbgUtil.IsCriticalException(System.Exception)">
            <summary>
             Duplicated here from ClientUtils not to depend on that code because this class is to be
             compiled into System.Drawing and System.Windows.Forms.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DbgUtil.StackFramesToStr(System.Int32)">
            <summary>
             Returns information about the top stack frames in a string format.  The input param determines the number of
             frames to include.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DbgUtil.StackTraceToStr(System.String,System.Int32)">
            <summary>
             Returns information about the top stack frames in a string format.  The input param determines the number of
             frames to include.  The 'message' parameter is used as the header of the returned string.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DbgUtil.StackTraceToStr(System.String)">
            <summary>
             Returns information about the top stack frames in a string format. The 'message' parameter is used as the header of the returned string.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Internal.ApplyGraphicsProperties">
            <summary>
             Enumeration defining the different Graphics properties to apply to a WindowsGraphics when creating it
             from a Graphics object.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Internal.DeviceContext">
             <summary>
              Represents a Win32 device context.  Provides operations for setting some of the properties
              of a device context.  It's the managed wrapper for an HDC.
            
              This class is divided into two files separating the code that needs to be compiled into
              reatail builds and debugging code.
             </summary>
             <summary>
              Represents a Win32 device context.  Provides operations for setting some of the properties
              of a device context.  It's the managed wrapper for an HDC.
            
              This class is divided into two files separating the code that needs to be compiled into
              reatail builds and debugging code.
            
              WARNING: The properties of the dc are obtained on-demand, this object is light-weight because
              of that; if you need to put back the old value after changing a property you need to get it
              first and cache it.
             </summary>
        </member>
        <member name="F:System.Windows.Forms.Internal.DeviceContext._hDC">
             <summary>
              This class is a wrapper to a Win32 device context, and the Hdc property is the way to get a
              handle to it.
            
              The hDc is released/deleted only when owned by the object, meaning it was created internally;
              in this case, the object is responsible for releasing/deleting it.
              In the case the object is created from an exisiting hdc, it is not released; this is consistent
              with the Win32 guideline that says if you call GetDC/CreateDC/CreatIC/CreateEnhMetafile, you are
              responsible for calling ReleaseDC/DeleteDC/DeleteEnhMetafile respectivelly.
            
              This class implements some of the operations commonly performed on the properties of a dc  in WinForms,
              specially for interacting with GDI+, like clipping and coordinate transformation.
              Several properties are not persisted in the dc but instead they are set/reset during a more comprehensive
              operation like text rendering or painting; for instance text alignment is set and reset during DrawText (GDI),
              DrawString (GDI+).
            
              Other properties are persisted from operation to operation until they are reset, like clipping,
              one can make several calls to Graphics or WindowsGraphics obect after setting the dc clip area and
              before resetting it; these kinds of properties are the ones implemented in this class.
              This kind of properties place an extra chanllenge in the scenario where a DeviceContext is obtained
              from a Graphics object that has been used with GDI+, because GDI+ saves the hdc internally, rendering the
              DeviceContext underlying hdc out of sync.  DeviceContext needs to support these kind of properties to
              be able to keep the GDI+ and GDI HDCs in sync.
            
              A few other persisting properties have been implemented in DeviceContext2, among them:
              
               1. Window origin.
               2. Bounding rectangle.
               3. DC origin.
               4. View port extent.
               5. View port origin.
               6. Window extent
            
              Other non-persisted properties just for information: Background/Forground color, Palette, Color adjustment,
              Color space, ICM mode and profile, Current pen position, Binary raster op (not supported by GDI+),
              Background mode, Logical Pen, DC pen color, ARc direction, Miter limit, Logical brush, DC brush color,
              Brush origin, Polygon filling mode, Bitmap stretching mode, Logical font, Intercharacter spacing,
              Font mapper flags, Text alignment, Test justification, Layout, Path, Meta region.
              See book "Windows Graphics Programming - Feng Yuang", P315 - Device Context Attributes.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.DeviceContext.DeviceContextType">
            
              Class properties...
            
            <summary>
             The device type the context refers to.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.DeviceContext.Hdc">
            <summary>
             This object's hdc.  If this property is called, then the object will be used as an HDC wrapper,
             so the hdc is cached and calls to GetHdc/ReleaseHdc won't PInvoke into GDI.
             Call Dispose to properly release the hdc.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.#ctor(System.IntPtr)">
            <summary>
             Constructor to contruct a DeviceContext object from an window handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.#ctor(System.IntPtr,System.Windows.Forms.Internal.DeviceContextType)">
            <summary>
             Constructor to contruct a DeviceContext object from an existing Win32 device context handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.FromCompatibleDC(System.IntPtr)">
            <summary>
             Creates a DeviceContext object wrapping a memory DC compatible with the specified device.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.FromHdc(System.IntPtr)">
            <summary>
             Used for wrapping an existing hdc.  In this case, this object doesn't own the hdc
             so calls to GetHdc/ReleaseHdc don't PInvoke into GDI.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.FromHwnd(System.IntPtr)">
            <summary>
             When hwnd is null, we are getting the screen DC.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.System#Drawing#IDeviceContext#GetHdc">
            <summary>
             Explicit interface method implementation to hide them a bit for usability reasons so the object is seen
             as a wrapper around an hdc that is always available, and for performance reasons since it caches the hdc
             if used in this way.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.System#Drawing#IDeviceContext#ReleaseHdc">
            <summary>
              If the object was created from a DC, this object doesn't 'own' the dc so we just ignore
              this call.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.RestoreHdc">
            <summary>
             Restores the device context to the specified state. The DC is restored by popping state information off a
             stack created by earlier calls to the SaveHdc function.
             The stack can contain the state information for several instances of the DC. If the state specified by the
             specified parameter is not at the top of the stack, RestoreDC deletes all state information between the top
             of the stack and the specified instance.
             Specifies the saved state to be restored. If this parameter is positive, nSavedDC represents a specific
             instance of the state to be restored. If this parameter is negative, nSavedDC represents an instance relative
             to the current state. For example, -1 restores the most recently saved state.
             See MSDN for more info.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.SaveHdc">
            <summary>
             Saves the current state of the device context by copying data describing selected objects and graphic
             modes (such as the bitmap, brush, palette, font, pen, region, drawing mode, and mapping mode) to a
             context stack.
             The SaveDC function can be used any number of times to save any number of instances of the DC state.
             A saved state can be restored by using the RestoreHdc method.
             See MSDN for more details.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.SetClip(System.Windows.Forms.Internal.WindowsRegion)">
            <summary>
             Selects a region as the current clipping region for the device context.
             Remarks (From MSDN):
             - Only a copy of the selected region is used. The region itself can be selected for any number of other device contexts or it can be deleted.
             - The SelectClipRgn function assumes that the coordinates for a region are specified in device units.
             - To remove a device-context's clipping region, specify a NULL region handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.IntersectClip(System.Windows.Forms.Internal.WindowsRegion)">
            <summary>
              Creates a new clipping region from the intersection of the current clipping region and
              the specified rectangle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.TranslateTransform(System.Int32,System.Int32)">
            <summary>
             Modifies the viewport origin for a device context using the specified horizontal and vertical offsets in logical units.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.GetHashCode">
            <summary>
             This allows collections to treat DeviceContext objects wrapping the same HDC as the same objects.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.DeviceContext.ActiveFont">
            <summary>
             See DeviceContext.cs for information about this class.  The class has been split to be able
             to compile the right set of functionalities into different assemblies.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.DeviceContext.BackgroundColor">
            <summary>
             DC background color.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.DeviceContext.BackgroundMode">
            <summary>
             DC background mode.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.SetBackgroundMode(Interop.Gdi32.BKMODE)">
            <summary>
             Sets the DC background mode and returns the old value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.DeviceContext.BinaryRasterOperation">
            <summary>
             ROP2 currently on the DC.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.SetRasterOperation(Interop.Gdi32.R2)">
            <summary>
             Sets the DC ROP2 and returns the old value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.DeviceContext.Dpi">
            <summary>
             Get the number of pixels per logical inch along the device axes. In a system with multiple display
             monitors, this value is the same for all monitors.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.DeviceContext.DpiX">
            <summary>
             Get the number of pixels per logical inch along the device width. In a system with multiple display
             monitors, this value is the same for all monitors.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.DeviceContext.DpiY">
            <summary>
             Get the number of pixels per logical inch along the device (screen) height. In a system with multiple
             display monitors, this value is the same for all monitors.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.DeviceContext.Font">
            <summary>
             The font selected into the device context.
             It's OK to call dispose on it, the HFONT won't be deleted since the WindowsFont did not create it,
             it got it from the HDC.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.DeviceContext.ScreenDC">
            <summary>
             Gets a DeviceContext object initialized to refer to the primary screen device.
             Consider using WindowsGraphicsCacheManager.MeasurementGraphics instead.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.SelectFont(System.Windows.Forms.Internal.WindowsFont)">
            <summary>
             Selects the specified object into the dc.  If the specified object is the same as the one currently selected
             in the dc, the object is not set and a null value is returned.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.DeviceContext.MapMode">
            <summary>
             DC map mode.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.SetMapMode(Interop.Gdi32.MM)">
            <summary>
             Sets the DC map mode and returns the old value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.DeviceContext.SelectObject(System.IntPtr,System.Windows.Forms.Internal.GdiObjectType)">
            <summary>
             Selects the specified object into the dc and returns the old object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.DeviceContext.TextAlignment">
            <summary>
             DC text alignment.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.DeviceContext.TextColor">
            <summary>
             DC current text color.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.DeviceContext.ViewportExtent">
            <summary>
             DC Viewport Extent in device units.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.DeviceContext.ViewportOrigin">
            <summary>
             DC Viewport Origin in device units.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Internal.DeviceContexts">
            <summary>
             Keeps a cache of some graphics primitives.
             Created to improve performance of TextRenderer.MeasureText methods that don't receive a WindowsGraphics.
             This class mantains a cache of MRU WindowsFont objects in the process.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.Internal.DeviceContexts.AddDeviceContext(System.Windows.Forms.Internal.DeviceContext)" -->
        <member name="T:System.Windows.Forms.Internal.DeviceContextType">
            <summary>
             Represent the device type the context refers to.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Internal.GdiObjectType">
            <summary>
             Specifies the the type of a GDI object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Internal.MeasurementDCInfo.cachedMeasurementDCInfo">
             MeasurementDCInfo
             This class optimizes the MeasurmentGraphics as it caches in the last used font and TextMargins used.
             This prevents unnecessary p/invoke calls to GetCurrentObject, etc
             It has been found to give close to 2x performance when drawing lots of text in rapid succession
             DataGridView with lots of text, etc.
             To turn it on for your DLL, use the OPTIMIZED_MEASUREMENTDC compiler switch and add this class to the sources.
        </member>
        <member name="M:System.Windows.Forms.Internal.MeasurementDCInfo.IsMeasurementDC(System.Windows.Forms.Internal.DeviceContext)">
             IsMeasurementDC
             Returns whether the IDeviceContext passed in is our static MeasurementDC.
             If it is, we know a bit more information about it.
        </member>
        <member name="P:System.Windows.Forms.Internal.MeasurementDCInfo.LastUsedFont">
              LastUsedFont -
              Returns the font we think was last selected into the MeasurementGraphics.
            
        </member>
        <member name="M:System.Windows.Forms.Internal.MeasurementDCInfo.GetTextMargins(System.Windows.Forms.Internal.WindowsGraphics,System.Windows.Forms.Internal.WindowsFont)">
             GetTextMargins - checks to see if we have cached information about the current font,
             returns info about it.
             An MRU of Font margins was considered, but seems like overhead.
        </member>
        <member name="M:System.Windows.Forms.Internal.MeasurementDCInfo.Reset">
             Reset
             clear the current cached information about the measurement dc.
        </member>
        <member name="T:System.Windows.Forms.Internal.MeasurementDCInfo.CachedInfo">
             CachedInfo
             store all the thread statics together so we dont have to fetch individual fields out of TLS
        </member>
        <member name="T:System.Windows.Forms.Internal.TextPaddingOptions">
            <summary>
             Adds padding related to the drawing bounding box, computed according to the font size.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Internal.WindowsBrush">
            <summary>
             Encapsulates a GDI Brush object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsBrush.#ctor(System.Windows.Forms.Internal.DeviceContext)">
            <summary>
             Parameterless constructor to use default color.
             Notice that the actual object construction is done in the derived classes.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.WindowsBrush.HBrush">
            <summary>
             Gets the native Win32 brush handle. It creates it on demand.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Internal.WindowsFont">
            <summary>
             Encapsulates a GDI Font object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsFont.#ctor(Interop.User32.LOGFONTW,System.Drawing.FontStyle,System.Boolean)">
            <summary>
             Creates the font handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsFont.FromFont(System.Drawing.Font,Interop.Gdi32.QUALITY)">
            <summary>
             Contructs a WindowsFont object from an existing System.Drawing.Font object (GDI+), based on the screen dc MapMode
             and resolution (normally: MM_TEXT and 96 dpi).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsFont.FromHdc(System.IntPtr)">
            <summary>
             Creates a WindowsFont from the font selected in the supplied dc.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsFont.FromHfont(System.IntPtr,System.Boolean)">
            <summary>
             Creates a WindowsFont from the handle to a native GDI font and optionally takes ownership of managing
             the lifetime of the handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsFont.Equals(System.Object)">
            <summary>
             Returns a value indicating whether the specified object is a WindowsFont equivalent to this object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsFont.GetHashCode">
            <summary>
             Gets the hash code for this WindowsFont.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsFont.Clone">
            <summary>
             Clones this object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.WindowsFont.Hfont">
             Properties
            <summary>
             Returns this object's native Win32 font handle.  Should NOT be deleted externally.
             Compare with ToHfont method.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.WindowsFont.Italic">
            <summary>
             Determines whether the font has the italic style or not.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.WindowsFont.Quality">
            <summary>
             Rendering quality.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.WindowsFont.Style">
            <summary>
             Gets the font style.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.WindowsFont.Height">
            <summary>
             Gets the line spacing (cell height) of this font in (screen) pixels using the screen resolution.
             Gets the line spacing (cell height), in pixels (using the screen DC resolution), of this font.
             The line spacing is the vertical distance between the base lines of two consecutive lines of text.
             Thus, the line spacing includes the blank space between lines along with the height of the character
             itself.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.WindowsFont.CharSet">
            <summary>
             Gets the font character set.
             This is used by the system font mapper when searching for the physical font that best matches the logical font.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.WindowsFont.LogFontHeight">
            <summary>
             Specifies the height, in logical units, of the font's character cell or character. The character height value (em height)
             is the character cell height value minus the internal-leading value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.WindowsFont.Name">
            <summary>
             The font's face name.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.WindowsFont.Size">
            <summary>
             Gets the character height (as opposed to the cell height) of the font represented by this object in points.
             Consider
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsFont.WindowsFontQualityFromTextRenderingHint(System.Drawing.Graphics)">
            <summary>
             Attempts to match the TextRenderingHint of the specified Graphics object with a LOGFONT.lfQuality value.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Internal.WindowsGraphics">
             <summary>
              WindowsGraphics is a library for rendering text and drawing using GDI; it was
              created to address performance and compatibility issues found in GDI+ Graphics
              class.
            
              Note: WindowsGraphics is a stateful component, DC properties are persisted from
              method calls, as opposed to Graphics (GDI+) which performs attomic operations and
              always restores the hdc.
            
              The underlying hdc is always saved and restored on dispose so external HDCs won't
              be modified by WindowsGraphics.  So we don't need to restore previous objects into
              the dc in method calls.
            </summary>
            <summary>
             See notes on WindowsGraphics.cs file.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.CreateMeasurementWindowsGraphics">
            <summary>
             Creates a WindowsGraphics from a memory DeviceContext object compatible with the primary screen device.
             This object is suitable for performing text measuring but not for drawing into it because it does
             not have a backup bitmap.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.FromGraphics(System.Drawing.Graphics)">
             <summary>
              Creates a WindowsGraphics object from a Graphics object.  Clipping and coordinate transforms
              are preserved.
            
              Notes:
              - The passed Graphics object cannot be used until the WindowsGraphics is disposed
              since it borrows the hdc from the Graphics object locking it.
              - Changes to the hdc using the WindowsGraphics object are not preserved into the Graphics object;
              the hdc is returned to the Graphics object intact.
            
              Some background about how Graphics uses the internal hdc when created from an existing one
              (mail from GillesK from GDI+ team):
              User has an HDC with a particular state:
              Graphics object gets created based on that HDC. We query the HDC for its state and apply it to the Graphics.
              At this stage, we do a SaveHDC and clear everything out of it.
              User calls GetHdc. We restore the HDC to the state it was in and give it to the user.
              User calls ReleaseHdc, we save the current state of the HDC and clear everything
              (so that the graphics state gets applied next time we use it).
              Next time the user calls GetHdc we give him back the state after the second ReleaseHdc.
              (But the state changes between the GetHdc and ReleaseHdc are not applied to the Graphics).
              Please note that this only applies the HDC created graphics, for Bitmap derived graphics, GetHdc creates a new DIBSection and
              things get a lot more complicated.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.WindowsGraphics.TextPadding">
            <summary>
             The padding options to be applied to the text bounding box internally.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.DrawEllipse(System.Windows.Forms.Internal.WindowsPen,System.Windows.Forms.Internal.WindowsBrush,System.Int32,System.Int32,System.Int32,System.Int32)">
             Drawing methods.
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.DrawText(System.String,System.Windows.Forms.Internal.WindowsFont,System.Drawing.Point,System.Drawing.Color)">
             Text rendering methods
            <summary>
             Draws the text at the specified point, using the given Font and foreColor.
             CR/LF are honored.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.DrawText(System.String,System.Windows.Forms.Internal.WindowsFont,System.Drawing.Point,System.Drawing.Color,System.Drawing.Color)">
            <summary>
             Draws the text at the specified point, using the given Font, foreColor and backColor.
             CR/LF are honored.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.DrawText(System.String,System.Windows.Forms.Internal.WindowsFont,System.Drawing.Point,System.Drawing.Color,Interop.User32.DT)">
            <summary>
             Draws the text at the specified point, using the given Font and foreColor, and according to the
             specified flags.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.DrawText(System.String,System.Windows.Forms.Internal.WindowsFont,System.Drawing.Point,System.Drawing.Color,System.Drawing.Color,Interop.User32.DT)">
            <summary>
             Draws the text at the specified point, using the given Font, foreColor and backColor, and according
             to the specified flags.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.DrawText(System.String,System.Windows.Forms.Internal.WindowsFont,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
             Draws the text centered in the given rectangle and using the given Font and foreColor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.DrawText(System.String,System.Windows.Forms.Internal.WindowsFont,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
             Draws the text centered in the given rectangle and using the given Font, foreColor and backColor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.DrawText(System.String,System.Windows.Forms.Internal.WindowsFont,System.Drawing.Rectangle,System.Drawing.Color,Interop.User32.DT)">
            <summary>
             Draws the text in the given bounds, using the given Font and foreColor, and according to the specified flags.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.DrawText(System.String,System.Windows.Forms.Internal.WindowsFont,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,Interop.User32.DT)">
            <summary>
             Draws the text in the given bounds, using the given Font, foreColor and backColor, and according to the specified
             TextFormatFlags flags.
             
             If font is null, the font currently selected in the hdc is used.
             
             If foreColor and/or backColor are Color.Empty, the hdc current text and/or background color are used.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.GetOverhangPadding(System.Windows.Forms.Internal.WindowsFont)">
            <summary>
             Calculates the spacing required for drawing text w/o clipping parts of a glyph.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.GetTextMargins(System.Windows.Forms.Internal.WindowsFont)">
            <summary>
             Get the bounding box internal text padding to be used when drawing text.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.GetTextExtent(System.String,System.Windows.Forms.Internal.WindowsFont)">
            <summary>
             Returns the Size of the given text using the specified font if not null, otherwise the font currently
             set in the dc is used.
             This method is used to get the size in points of a line of text; it uses GetTextExtentPoint32 function
             which computes the width and height of the text ignoring TAB\CR\LF characters.
             A text extent is the distance between the beginning of the space and a character that will fit in the space.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.MeasureText(System.String,System.Windows.Forms.Internal.WindowsFont)">
            <summary>
             Returns the Size in logical units of the given text using the given Font.
             CR/LF/TAB are taken into account.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.MeasureText(System.String,System.Windows.Forms.Internal.WindowsFont,System.Drawing.Size)">
            <summary>
             Returns the Size in logical units of the given text using the given Font and using the specified rectangle
             as the text bounding box (see overload below for more info).
             TAB/CR/LF are taken into account.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.MeasureText(System.String,System.Windows.Forms.Internal.WindowsFont,System.Drawing.Size,Interop.User32.DT)">
             <summary>
              Returns the Size in logical units of the given text using the given Font, and according to the formatting flags.
              The proposed size is used to create a bounding rectangle as follows:
              - If there are multiple lines of text, DrawText uses the width of the rectangle pointed to by
              the lpRect parameter and extends the base of the rectangle to bound the last line of text.
              - If the largest word is wider than the rectangle, the width is expanded.
              - If the text is less than the width of the rectangle, the width is reduced.
              - If there is only one line of text, DrawText modifies the right side of the rectangle so that
              it bounds the last character in the line.
              If the font is null, the hdc's current font will be used.
            
              Note for vertical fonts (if ever supported): DrawTextEx uses GetTextExtentPoint32 for measuring the text and this
              function has the following limitation (from MSDN):
              - This function assumes that the text is horizontal, that is, that the escapement is always 0. This is true for both
              the horizontal and vertical measurements of the text.  The application must convert it explicitly.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.AdjustForVerticalAlignment(IHandle,System.String,System.Drawing.Rectangle,Interop.User32.DT,Interop.User32.DRAWTEXTPARAMS@)">
             <summary>
              The GDI DrawText does not do multiline alignment when User32.DT.SINGLELINE is not set. This
              adjustment is to workaround that limitation. We don't want to duplicate SelectObject calls here,
              so put your Font in the dc before calling this.
            
              AdjustForVerticalAlignment is only used when the text is multiline and it fits inside the bounds passed in.
              In that case we want the horizontal center of the multiline text to be at the horizontal center of the bounds.
            
              If the text is multiline and it does not fit inside the bounds passed in, then return the bounds that were passed in.
              This way we paint the top of the text at the top of the bounds passed in.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.DrawLine(System.Windows.Forms.Internal.WindowsPen,System.Drawing.Point,System.Drawing.Point)">
            <summary>
             Draws a line starting from p1 (included) to p2 (excluded).  LineTo doesn't paint the last
             pixel because if it did the intersection points of connected lines would be drawn multiple
             times turning them back to the background color.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphics.GetTextMetrics">
            <summary>
             Returns a TEXTMETRIC structure for the font selected in the device context
             represented by this object, in units of pixels.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Internal.WindowsGraphicsCacheManager">
            <summary>
             Keeps a cache of some graphics primitives.
             Created to improve performance of TextRenderer.MeasureText methods that don't receive a WindowsGraphics.
             This class mantains a cache of MRU WindowsFont objects in the process.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphicsCacheManager.#cctor">
            <summary>
             Static constructor since this is a utility class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphicsCacheManager.#ctor">
            <summary>
             Class is never instantiated, private constructor prevents the compiler from generating a default constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.WindowsGraphicsCacheManager.WindowsFontCache">
            <summary>
             Initializes the WindowsFontCache object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Internal.WindowsGraphicsCacheManager.MeasurementGraphics">
            <summary>
             Get the cached screen (primary monitor) memory dc.
             Users of this class should always use this property to get the WindowsGraphics and never cache it, it could be mistakenly
             disposed and we would recreate it if needed.
             Users should not dispose of the WindowsGraphics so it can be reused for the lifetime of the thread.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsGraphicsCacheManager.GetWindowsFont(System.Drawing.Font)">
            <summary>
             Get the cached WindowsFont associated with the specified font if one exists, otherwise create one and
             add it to the cache.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Internal.WindowsPen">
            <summary>
             Encapsulates a GDI Pen object.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Internal.WindowsRegion">
            <summary>
             Encapsulates a GDI Region object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.Internal.WindowsRegion.FromHregion(System.IntPtr,System.Boolean)" -->
        <member name="M:System.Windows.Forms.Internal.WindowsRegion.FromRegion(System.Drawing.Region,System.Drawing.Graphics)">
            <summary>
             Creates a WindowsRegion from a System.Drawing.Region.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.Internal.WindowsRegion.CombineRegion(System.Windows.Forms.Internal.WindowsRegion,System.Windows.Forms.Internal.WindowsRegion,Interop.Gdi32.CombineMode)" -->
        <member name="P:System.Windows.Forms.Internal.WindowsRegion.HRegion">
            <summary>
             The native region handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Internal.WindowsRegion.ToRectangle">
            <summary>
             A rectangle representing the window region set with the SetWindowRgn function.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AccessibleEvents">
            <summary>
             Specifies events that are reported by accessible applications.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemSound">
            <summary>
            <c>EVENT_SYSTEM_SOUND</c>
             Sent when a sound is played. Currently nothing is generating this, we
             are going to be cleaning up the SOUNDSENTRY feature in the control panel
             and will use this at that time. Applications implementing WinEvents
             are perfectly welcome to use it. Clients of IAccessible* will simply
             turn around and get back a non-visual object that describes the sound.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemAlert">
            <summary>
            <c>EVENT_SYSTEM_ALERT</c>
             Sent when an alert needs to be given to the user. MessageBoxes generate
             alerts for example.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemForeground">
            <summary>
            <c>EVENT_SYSTEM_FOREGROUND</c>
             Sent when the foreground (active) window changes, even if it is changing
             to another window in the same thread as the previous one.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemMenuStart">
            <summary>
            <c>EVENT_SYSTEM_MENUSTART</c>
             Sent when entering into menu mode (system, app bar, and track popups).
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemMenuEnd"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemMenuEnd">
            <summary>
            <c>EVENT_SYSTEM_MENUEND</c>
             Sent when leaving from menu mode (system, app bar, and track popups).
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemMenuStart"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemMenuPopupStart">
            <summary>
            <c>EVENT_SYSTEM_MENUPOPUPSTART</c>
             Sent when a menu popup comes up. 
            </summary>
            <remarks>
             Note that for a call to TrackPopupMenu(), a client will see <c>EVENT_SYSTEM_MENUSTART</c>
             followed almost immediately by <c>EVENT_SYSTEM_MENUPOPUPSTART</c> for the popup being shown.
            </remarks>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemMenuPopupEnd"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemMenuPopupEnd">
            <summary>
            <c>EVENT_SYSTEM_MENUPOPUPEND</c>
             Sent when a menu popup just before it is taken down. 
            </summary>
            <remarks>
             Note that for a call to TrackPopupMenu(), a client will see <c>EVENT_SYSTEM_MENUSTART</c>
             followed almost immediately by <c>EVENT_SYSTEM_MENUPOPUPSTART</c> for the popup being shown.
            </remarks>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemMenuPopupStart"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemCaptureStart">
            <summary>
            <c>EVENT_SYSTEM_CAPTURESTART</c>
             Sent when a window takes the capture.
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemCaptureEnd"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemCaptureEnd">
            <summary>
            <c>EVENT_SYSTEM_CAPTUREEND</c>
             Sent when a window releases the capture.
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemCaptureStart"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemMoveSizeStart">
            <summary>
            <c>EVENT_SYSTEM_MOVESIZESTART</c>
             Sent when a window enters move-size dragging mode.
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemMoveSizeEnd"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemMoveSizeEnd">
            <summary>
            <c>EVENT_SYSTEM_MOVESIZEEND</c>
             Sent when a window leaves move-size dragging mode.
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemMoveSizeStart"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemContextHelpStart">
            <summary>
            <c>EVENT_SYSTEM_CONTEXTHELPSTART</c>
             Sent when a window enters context sensitive help mode.
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemContextHelpEnd"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemContextHelpEnd">
            <summary>
             <c>EVENT_SYSTEM_CONTEXTHELPEND</c>
             Sent when a window leaves context sensitive help mode.
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemContextHelpStart"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemDragDropStart">
            <summary>
             <c>EVENT_SYSTEM_DRAGDROPSTART</c>
             Sent when a window enters drag drop mode.
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemDragDropEnd"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemDragDropEnd">
            <summary>
             <c>EVENT_SYSTEM_DRAGDROPEND</c>
             Sent when a window leaves drag drop mode.
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemDragDropStart"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemDialogStart">
            <summary>
             <c>EVENT_SYSTEM_DIALOGSTART</c>
             Sent when a dialog comes up.
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemDialogEnd"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemDialogEnd">
            <summary>
             <c>EVENT_SYSTEM_DIALOGEND</c>
             Sent when a dialog just before it goes away.
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemDialogStart"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemScrollingStart">
            <summary>
             <c>EVENT_SYSTEM_SCROLLINGSTART</c>
             Sent when beginning the tracking of a scrollbar in a window, and also for scrollbar controls.
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemScrollingEnd"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemScrollingEnd">
            <summary>
             <c>EVENT_SYSTEM_SCROLLINGEND</c>
             Sent when ending the tracking of a scrollbar in a window, and also for scrollbar controls.
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemScrollingStart"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemSwitchStart">
            <summary>
             <c>EVENT_SYSTEM_SWITCHSTART</c>
             Sent when beginning alt-tab mode with the switch window.
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemSwitchEnd"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemSwitchEnd">
            <summary>
             <c>EVENT_SYSTEM_SWITCHEND</c>
             Sent when ending alt-tab mode with the switch window.
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemSwitchStart"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemMinimizeStart">
            <summary>
             <c>EVENT_SYSTEM_MINIMIZESTART</c>
             Sent when a window minimizes and just before it restores.
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemMinimizeEnd"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.SystemMinimizeEnd">
            <summary>
             <c>EVENT_SYSTEM_MINIMIZEEND</c>
             Sent when a window minimizes and just before it restores.
            </summary>
            <seealso cref="F:System.Windows.Forms.AccessibleEvents.SystemMinimizeStart"/>.
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.Create">
            <summary>
             <c>EVENT_OBJECT_CREATE</c>
             Sent when an object has been created. 
             The system sends this event for the following user interface elements:
             caret, header control, list-view control, tab control, toolbar control, tree view control, 
             and window object. Server applications send this event for their accessible objects.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.Destroy">
            <summary>
             <c>EVENT_OBJECT_DESTROY</c>
             Sent when an object has been destroyed. 
             The system sends this event for the following user interface elements:
             caret, header control, list-view control, tab control, toolbar control, tree view control, 
             and window object. Server applications send this event for their accessible objects.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.Show">
            <summary>
            <c>EVENT_OBJECT_SHOW</c>
             Sent when a hidden object is shown. 
             The system sends this event for the following user interface elements:
             caret, cursor, and window object. Server applications send this event for their accessible objects.
             Clients assume that when this event is sent by a parent object, all child objects are already displayed. 
             Therefore, server applications do not send this event for the child objects.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.Hide">
            <summary>
            <c>EVENT_OBJECT_HIDE</c>
             Sent when an object is hidden. 
             The system sends this event for the following user interface elements: caret and cursor. 
             Server applications send this event for their accessible objects.
             When this event is generated for a parent object, all child objects are already hidden.
             Server applications do not send this event for the child objects.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.Reorder">
            <summary>
            <c>EVENT_OBJECT_REORDER</c>
             Sent when a container object has added, removed, or reordered its children.
             The system sends this event for the following user interface elements: 
             header control, list-view control, toolbar control, and window object.
             Server applications send this event as appropriate for their accessible objects.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.Focus">
            <summary>
             Minimize the number of notifications!
             When you are hiding a parent object, obviously all child objects are no
             longer visible on screen. They still have the same "visible" status,
             but are not truly visible. Hence do not send HIDE notifications for the
             children also. One implies all. The same goes for SHOW.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleEvents.StateChange">
             <summary>
              There is only one "focused" child item in a parent. This is the place
              keystrokes are going at a given moment. Hence only send a notification
              about where the NEW focus is going. A NEW item getting the focus already
              implies that the OLD item is losing it.
            
              SELECTION however can be multiple. Hence the different SELECTION
              notifications. Here's when to use each:
            
              (1) Send a SELECTION notification in the simple single selection
              case (like the focus) when the item with the selection is
              merely moving to a different item within a container. hwnd + ID
              is the container control, idChildItem is the new child with the
              selection.
            
              (2) Send a SELECTIONADD notification when a new item has simply been added
              to the selection within a container. This is appropriate when the
              number of newly selected items is very small. hwnd + ID is the
              container control, idChildItem is the new child added to the selection.
            
              (3) Send a SELECTIONREMOVE notification when a new item has simply been
              removed from the selection within a container. This is appropriate
              when the number of newly selected items is very small, just like
              SELECTIONADD. hwnd + ID is the container control, idChildItem is the
              new child removed from the selection.
            
              (4) Send a SELECTIONWITHIN notification when the selected items within a
              control have changed substantially. Rather than propagate a large
              number of changes to reflect removal for some items, addition of
              others, just tell somebody who cares that a lot happened. It will
              be faster an easier for somebody watching to just turn around and
              query the container control what the new bunch of selected items
              are.
             </summary>
        </member>
        <member name="T:System.Windows.Forms.AccessibleNavigation">
            <summary>
             Specifies values for navigating between accessible objects.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleNavigation.Down">
            <summary>
             Navigation to a sibling object located below the starting object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleNavigation.FirstChild">
            <summary>
             Navigation to the first child of the object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleNavigation.LastChild">
            <summary>
             Navigation to the last child of the object
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleNavigation.Left">
            <summary>
             Navigation to the sibling object located to the left of the
             starting object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleNavigation.Next">
            <summary>
             Navigation to the next logical object, generally from the starting
             object to a sibling object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleNavigation.Previous">
            <summary>
             Navigation to the previous logical object, generally from a sibling
             object to the starting object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleNavigation.Right">
            <summary>
             Navigation to the sibling object located to the right of the
             starting object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleNavigation.Up">
            <summary>
             Navigation to a sibling object located above the starting object.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AccessibleObject">
            <summary>
             Provides an implementation for an object that can be inspected by an
             accessibility application.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleObject.systemIAccessible">
            <summary>
             Specifies the <see cref='T:Accessibility.IAccessible'/> interface used by this <see cref='T:System.Windows.Forms.AccessibleObject'/>.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleObject.systemIEnumVariant">
            <summary>
             Specifies the <see cref='T:Interop.OleAut32.IEnumVariant'/> used by this
            <see cref='T:System.Windows.Forms.AccessibleObject'/> .
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.Bounds">
            <summary>
             Gets the bounds of the accessible object, in screen coordinates.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.DefaultAction">
            <summary>
             Gets a description of the default action for an object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.Description">
            <summary>
             Gets a description of the object's visual appearance to the user.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.Help">
            <summary>
             Gets a description of what the object does or how the object is used.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.KeyboardShortcut">
            <summary>
             Gets the object shortcut key or access key for an accessible object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.Name">
            <summary>
             Gets or sets the object name.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.Parent">
            <summary>
             When overridden in a derived class, gets or sets the parent of an
             accessible object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.Role">
            <summary>
             Gets the role of this accessible object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.State">
            <summary>
             Gets the state of this accessible object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.Value">
            <summary>
             Gets or sets the value of an accessible object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.GetChild(System.Int32)">
            <summary>
             When overridden in a derived class, gets the accessible child
             corresponding to the specified index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.GetChildCount">
            <summary>
             When overridden in a derived class, gets the number of children
             belonging to an accessible object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.GetSysChildOrder">
             <summary>
              Mechanism for overriding default IEnumVariant behavior of the 'inner'
              system accessible object (IEnumVariant is how a system accessible
              object exposes its ordered list of child objects).
            
              USAGE: Overridden method in derived class should return array of
              integers representing new order to be imposed on the child accessible
              object collection returned by the system (which we assume will be a
              set of accessible objects that represent the child windows, in z-order).
              Each array element contains the original z-order based rank of the
              child window that is to appear at that position in the new ordering.
              Note: This array could also be used to filter out unwanted child
              windows too, if necessary (not recommended).
             </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.GetSysChild(System.Windows.Forms.AccessibleNavigation,System.Windows.Forms.AccessibleObject@)">
             <summary>
              Mechanism for overriding default IAccessible.accNavigate behavior of
              the 'inner' system accessible object (accNavigate is how you move
              between parent, child and sibling accessible objects).
            
              USAGE: 'navdir' indicates navigation operation to perform, relative to
              this accessible object.
              If operation is unsupported, return false to allow fall-back to default
              system behavior. Otherwise return destination object in the out
              parameter, or null to indicate 'off end of list'.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.GetFocused">
            <summary>
             When overridden in a derived class, gets the object that has the
             keyboard focus.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.GetHelpTopic(System.String@)">
            <summary>
             Gets an identifier for a Help topic and the path to the Help file
             associated with this accessible object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.GetSelected">
            <summary>
             When overridden in a derived class, gets the currently selected child.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.HitTest(System.Int32,System.Int32)">
            <summary>
             Return the child object at the given screen coordinates.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.SetParent(System.Windows.Forms.AccessibleObject)">
            <summary>
             Sets the parent accessible object for the node which can be added or removed to/from hierachy nodes.
            </summary>
            <param name="parent">The parent accessible object.</param>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.SetDetachableChild(System.Windows.Forms.AccessibleObject)">
            <summary>
             Sets the detachable child accessible object which may be added or removed to/from hierachy nodes.
            </summary>
            <param name="child">The child accessible object.</param>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#accDoDefaultAction(System.Object)">
            <summary>
             Perform the default action
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#accHitTest(System.Int32,System.Int32)">
            <summary>
             Perform a hit test
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#accLocation(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Object)">
            <summary>
             The location of the Accessible object
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#accNavigate(System.Int32,System.Object)">
            <summary>
             Navigate to another accessible object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#accSelect(System.Int32,System.Object)">
            <summary>
             Select an accessible object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.DoDefaultAction">
            <summary>
             Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#get_accChild(System.Object)">
            <summary>
             Returns a child Accessible object
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#accChildCount">
            <summary>
             Return the number of children
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#get_accDefaultAction(System.Object)">
            <summary>
             Return the default action
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#get_accDescription(System.Object)">
            <summary>
             Return the object or child description
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.GetAccessibleChild(System.Object)">
            <summary>
             Returns the appropriate child from the Accessible Child Collection, if available
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#accFocus">
            <summary>
             Return the object or child focus
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#get_accHelp(System.Object)">
            <summary>
             Return help for this accessible object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#get_accHelpTopic(System.String@,System.Object)">
            <summary>
             Return the object or child help topic
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#get_accKeyboardShortcut(System.Object)">
            <summary>
             Return the object or child keyboard shortcut
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#get_accName(System.Object)">
            <summary>
             Return the object or child name
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#accParent">
            <summary>
             Return the parent object
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#get_accRole(System.Object)">
            <summary>
             The role property describes an object's purpose in terms of its
             relationship with sibling or child objects.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#accSelection">
            <summary>
             Return the object or child selection
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#get_accState(System.Object)">
            <summary>
             Return the object or child state
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#get_accValue(System.Object)">
            <summary>
             Return the object or child value
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#set_accName(System.Object,System.String)">
            <summary>
             Set the object or child name
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Accessibility#IAccessible#set_accValue(System.Object,System.String)">
            <summary>
             Set the object or child value
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Interop#Ole32#IOleWindow#GetWindow(System.IntPtr*)">
             <summary>
              Now that AccessibleObject is used to wrap all system-provided (OLEACC.DLL) accessible
              objects, it needs to implement IOleWindow and pass this down to the inner object. This is
              necessary because the OS function WindowFromAccessibleObject() walks up the parent chain
              looking for the first object that implements IOleWindow, and uses that to get the hwnd.
            
              But this creates a new problem for AccessibleObjects that do NOT have windows, ie. which
              represent simple elements. To the OS, these simple elements will now appear to implement
              IOleWindow, so it will try to get hwnds from them - which they simply cannot provide.
            
              To work around this problem, the AccessibleObject for a simple element will delegate all
              IOleWindow calls up the parent chain itself. This will stop at the first window-based
              accessible object, which will be able to return an hwnd back to the OS. So we are
              effectively 'preempting' what WindowFromAccessibleObject() would do.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Interop#Ole32#IOleWindow#ContextSensitiveHelp(Interop.BOOL)">
            <summary>
             See GetWindow() above for details.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Interop#OleAut32#IEnumVariant#Clone(Interop.OleAut32.IEnumVariant[])">
            <summary>
             Clone this accessible object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Interop#OleAut32#IEnumVariant#Next(System.UInt32,System.IntPtr,System.UInt32*)">
            <summary>
             Obtain the next n children of this accessible object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Interop#OleAut32#IEnumVariant#Reset">
            <summary>
             Resets the child accessible object enumerator.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Interop#OleAut32#IEnumVariant#Skip(System.UInt32)">
            <summary>
             Skip the next n child accessible objects
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
             When overridden in a derived class, navigates to another object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.Select(System.Windows.Forms.AccessibleSelection)">
            <summary>
             Selects this accessible object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.AccessibleObjectId">
             <summary>
              Indicates what kind of 'inner' system accessible object we are using as our fall-back
              implementation of IAccessible (when the systemIAccessible member is not null). The inner
              object is provided by OLEACC.DLL. Note that although the term 'id' is used, this value
              really represents a category or type of accessible object. Ids are only unique among
              accessible objects associated with the same window handle. Currently supported ids are...
            
              OBJID_CLIENT - represents the window's client area (including any child windows)
              OBJID_WINDOW - represents the window's non-client area (including caption, frame controls and scrollbars)
            
              NOTE: When the id is OBJID_WINDOW, we short-circuit most of the virtual override behavior of
              AccessibleObject, and turn the object into a simple wrapper around the inner system object. So
              for a *user-defined* accessible object, that has NO inner object, its important that the id is
              left as OBJID_CLIENT, otherwise the object will be short-circuited into a total NOP!
             </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.IsClientObject">
            <summary>
             Indicates whether this accessible object represents the client area of
             the window.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.IsNonClientObject">
            <summary>
             Indicates whether this accessible object represents the non-client
             area of the window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.SysNavigate(System.Int32,System.Object,System.Object@)">
            <summary>
             Performs custom navigation between parent/child/sibling accessible
             objects. This is basically just a wrapper for GetSysChild(), that
             does some of the dirty work, such as wrapping the returned object
             in a VARIANT. Usage is similar to GetSysChild(). Called prior to
             calling IAccessible.accNavigate on the 'inner' system accessible
             object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.ValidateChildID(System.Object@)">
            <summary>
             Make sure that the childID is valid.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.System#Reflection#IReflect#GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
             Return the requested method if it is implemented by the Reflection object. The
             match is based upon the name and DescriptorInfo which describes the signature
             of the method.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.System#Reflection#IReflect#GetMethod(System.String,System.Reflection.BindingFlags)">
            <summary>
             Return the requested method if it is implemented by the Reflection object. The
             match is based upon the name of the method. If the object implementes multiple methods
             with the same name an AmbiguousMatchException is thrown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.System#Reflection#IReflect#GetField(System.String,System.Reflection.BindingFlags)">
            <summary>
             Return the requestion field if it is implemented by the Reflection
             object. The match is based upon a name. There cannot be more than
             a single field with a name.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.System#Reflection#IReflect#GetProperty(System.String,System.Reflection.BindingFlags)">
            <summary>
             Return the property based upon name. If more than one property has
             the given name an AmbiguousMatchException will be thrown. Returns
             null if no property is found.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.System#Reflection#IReflect#GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
             Return the property based upon the name and Descriptor info describing
             the property indexing. Return null if no property is found.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.System#Reflection#IReflect#GetProperties(System.Reflection.BindingFlags)">
            <summary>
             Returns an array of PropertyInfos for all the properties defined on
             the Reflection object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.System#Reflection#IReflect#GetMember(System.String,System.Reflection.BindingFlags)">
            <summary>
             Return an array of members which match the passed in name.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.System#Reflection#IReflect#GetMembers(System.Reflection.BindingFlags)">
            <summary>
             Return an array of all of the members defined for this object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.System#Reflection#IReflect#InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
             <summary>
              Description of the Binding Process.
              We must invoke a method that is accessable and for which the provided
              parameters have the most specific match. A method may be called if
              1. The number of parameters in the method declaration equals the number of
              arguments provided to the invocation
              2. The type of each argument can be converted by the binder to the
              type of the type of the parameter.
            
              The binder will find all of the matching methods. These method are found based
              upon the type of binding requested (MethodInvoke, Get/Set Properties). The set
              of methods is filtered by the name, number of arguments and a set of search modifiers
              defined in the Binder.
            
              After the method is selected, it will be invoked. Accessability is checked
              at that point. The search may be control which set of methods are searched based
              upon the accessibility attribute associated with the method.
            
              The BindToMethod method is responsible for selecting the method to be invoked.
              For the default binder, the most specific method will be selected.
            
              This will invoke a specific member...
              @exception If <var>invokeAttr</var> is CreateInstance then all other
              Access types must be undefined. If not we throw an ArgumentException.
              @exception If the <var>invokeAttr</var> is not CreateInstance then an
              ArgumentException when <var>name</var> is null.
              @exception ArgumentException when <var>invokeAttr</var> does not specify the type
              @exception ArgumentException when <var>invokeAttr</var> specifies both get and set of
              a property or field.
              @exception ArgumentException when <var>invokeAttr</var> specifies property set and
              invoke method.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.AccessibleObject.System#Reflection#IReflect#UnderlyingSystemType">
            <summary>
             Return the underlying Type that represents the IReflect Object. For
             expando object, this is the (Object) IReflectInstance.GetType().
             For Type object it is this.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.RaiseAutomationNotification(System.Windows.Forms.Automation.AutomationNotificationKind,System.Windows.Forms.Automation.AutomationNotificationProcessing,System.String)">
            <summary>
             Raises the UIA Notification event.
             The event is available starting with Windows 10, version 1709.
            </summary>
            <param name="notificationKind">The type of notification</param>
            <param name="notificationProcessing">Indicates how to process notifications</param>
            <param name="notificationText">Notification text</param>
            <returns>
             True if operation succeeds.
             False if the underlying windows infrastructure is not available or the operation had failed.
             Use Marshal.GetLastWin32Error for details.
            </returns>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.RaiseLiveRegionChanged">
            <summary>
             Raises the LiveRegionChanged UIA event.
             This method must be overridden in derived classes that support the UIA live region feature.
            </summary>
            <returns>True if operation succeeds, False otherwise.</returns>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.EnumVariantObject.Interop#OleAut32#IEnumVariant#Reset">
            <summary>
             Resets the child accessible object enumerator.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.AccessibleObject.EnumVariantObject.Interop#OleAut32#IEnumVariant#Skip(System.UInt32)" -->
        <member name="M:System.Windows.Forms.AccessibleObject.EnumVariantObject.Interop#OleAut32#IEnumVariant#Next(System.UInt32,System.IntPtr,System.UInt32*)">
            <summary>
             Gets the next n child accessible objects.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.EnumVariantObject.NextFromSystem(System.UInt32,System.IntPtr,System.UInt32*)">
            <summary>
             When we have the IEnumVariant of an accessible proxy provided by the system (ie.
             OLEACC.DLL), we can fall back on that to return the children. Generally, the system
             proxy will enumerate the child windows, create a suitable kind of child accessible
             proxy for each one, and return a set of IDispatch interfaces to these proxy objects.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.EnumVariantObject.NextFromSystemReordered(System.UInt32,System.IntPtr,System.UInt32*,System.Int32[])">
             <summary>
              Sometimes we want to rely on the system-provided behavior to create
              and return child accessible objects, but we want to impose a new
              order on those objects (or even filter some objects out).
            
              This method takes an array of ints that dictates the new order.
              It queries the system for each child individually, and inserts the
              result into the correct *new* position.
            
              Note: This code has to make certain *assumptions* about OLEACC.DLL
              proxy object behavior. However, this behavior is well documented.
              We *assume* the proxy will return a set of child accessible objects
              that correspond 1:1 with the owning control's child windows, and
              that the default order it returns these objects in is z-order
              (which also happens to be the order that children appear in the
              Control.Controls[] collection).
             </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.EnumVariantObject.NextFromChildCollection(System.UInt32,System.IntPtr,System.UInt32*,System.Int32)">
            <summary>
             If we have our own custom accessible child collection, return a set
             of 1-based integer child ids, that the caller will eventually pass
             back to us via IAccessible.get_accChild().
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.EnumVariantObject.NextEmpty(System.UInt32,System.IntPtr,System.UInt32*)">
            <summary>
             Default behavior if there is no custom child collection or
             system-provided proxy to fall back on. In this case, we return
             an empty child collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.EnumVariantObject.GotoItem(Interop.OleAut32.IEnumVariant,System.Int32,System.IntPtr)">
            <summary>
             Given an IEnumVariant interface, this method jumps to a specific
             item in the collection and extracts the result for that one item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AccessibleObject.EnumVariantObject.GetAddressOfVariantAtIndex(System.IntPtr,System.UInt32)">
            <summary>
             Given an array of pointers to variants, calculate address of a given array element.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.InternalAccessibleObject">
            <Summary>
             Internal object passed out to OLEACC clients via WM_GETOBJECT.
            </Summary>
        </member>
        <member name="M:System.Windows.Forms.InternalAccessibleObject.#ctor(System.Windows.Forms.AccessibleObject)">
            <summary>
             Create a new wrapper.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InternalAccessibleObject.AsNativeAccessible(System.Object)">
            <summary>
             If the given object is an AccessibleObject return it as a InternalAccessibleObject
             This ensures we wrap all AccessibleObjects before handing them out to OLEACC
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InternalAccessibleObject.AsArrayOfNativeAccessibles(System.Object[])">
            <summary>
             Wraps AccessibleObject elements of a given array into InternalAccessibleObjects
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InternalAccessibleObject.Interop#UiaCore#ISelectionProvider#GetSelection">
            <summary>
             Get the currently selected elements
            </summary>
            <returns>An AutomationElement array containing the currently selected elements</returns>
        </member>
        <member name="P:System.Windows.Forms.InternalAccessibleObject.Interop#UiaCore#ISelectionProvider#CanSelectMultiple">
            <summary>
             Indicates whether the control allows more than one element to be selected
            </summary>
            <returns>Boolean indicating whether the control allows more than one element to be selected</returns>
            <remarks>If this is false, then the control is a single-select ccntrol</remarks>
        </member>
        <member name="P:System.Windows.Forms.InternalAccessibleObject.Interop#UiaCore#ISelectionProvider#IsSelectionRequired">
            <summary>
             Indicates whether the control requires at least one element to be selected
            </summary>
            <returns>Boolean indicating whether the control requires at least one element to be selected</returns>
            <remarks>If this is false, then the control allows all elements to be unselected</remarks>
        </member>
        <member name="M:System.Windows.Forms.InternalAccessibleObject.Interop#UiaCore#ISelectionItemProvider#Select">
            <summary>
             Sets the current element as the selection
             This clears the selection from other elements in the container.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InternalAccessibleObject.Interop#UiaCore#ISelectionItemProvider#AddToSelection">
            <summary>
             Adds current element to selection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InternalAccessibleObject.Interop#UiaCore#ISelectionItemProvider#RemoveFromSelection">
            <summary>
             Removes current element from selection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.InternalAccessibleObject.Interop#UiaCore#ISelectionItemProvider#IsSelected">
            <summary>
             Check whether an element is selected.
            </summary>
            <returns>Returns true if the element is selected.</returns>
        </member>
        <member name="P:System.Windows.Forms.InternalAccessibleObject.Interop#UiaCore#ISelectionItemProvider#SelectionContainer">
            <summary>
             The logical element that supports the SelectionPattern for this Item.
            </summary>
            <returns>Returns a IRawElementProviderSimple.</returns>
        </member>
        <member name="M:System.Windows.Forms.InternalAccessibleObject.Interop#UiaCore#IRawElementProviderHwndOverride#GetOverrideProviderForHwnd(System.IntPtr)">
            <summary>
             Request a provider for the specified component. The returned provider can supply additional
             properties or override properties of the specified component.
            </summary>
            <param name="hwnd">The window handle of the component.</param>
            <returns>Return the provider for the specified component, or null if the component is not being overridden.</returns>
        </member>
        <member name="T:System.Windows.Forms.AccessibleRole">
            <summary>
             Specifies values representing possible roles for an accessible object.
            </summary>
            <remarks>
             if adding to this enumeration please update Control and ToolStripItem
             AccessibleRole to ensure the new member is valid.
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Default">
            <summary>
             A system provided role.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.None">
            <summary>
             No role.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.TitleBar">
            <summary>
             A title or caption bar for a window.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.MenuBar">
            <summary>
             A menu bar, usually beneath the title bar of a window, from which menus
             can be selected by the user.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.ScrollBar">
            <summary>
             A vertical or horizontal scroll bar, which can be either part of the
             client area or used in a control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Grip">
            <summary>
             A special mouse pointer, which allows a user to manipulate user interface
             elements such as a window. For example, a user can click and drag a
             sizing grip in the lower-right corner of a window to resize it.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Sound">
            <summary>
             A system sound, which is associated with various system events.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Cursor">
            <summary>
             A mouse pointer.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Caret">
            <summary>
             A caret, which is a flashing line, block, or bitmap that marks the
             location of the insertion point in a window's client area.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Alert">
            <summary>
             An alert or condition that a user should be notified about. This role
             should be used only for objects that embody an alert but are not
             associated with another user interface element, such as a message box,
             graphic, text, or sound.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Window">
            <summary>
             A window frame, which usually contains child objects such as a title
             bar, client, and other objects typically contained in a window.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Client">
            <summary>
             A window's user area.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.MenuPopup">
            <summary>
             A menu, which presents a list of options from which the user can make
             a selection to perform an action. All menu types must have this role,
             including drop-down menus that are displayed by selection from a menu
             bar, and shortcut menus that are displayed when the right mouse
             button is clicked.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.MenuItem">
            <summary>
             A menu item, which is an entry in a menu that a user can choose to
             carry out a command, select an option, or display another menu.
             Functionally, a menu item can be equivalent to a push button, radio
             button, check box, or menu.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.ToolTip">
            <summary>
             A tool tip, which is a small rectangular pop-up window that displays
             a brief description of a command bar button's purpose.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Application">
            <summary>
             The main window for an application.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Document">
            <summary>
             A document window, which is always contained within an application
             window. This role applies only to multiple document interface (MDI)
             windows and refers to an object that contains the MDI title bar.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Pane">
            <summary>
             One of the separate areas in a frame, a split document window, or a
             rectangular area of the status bar that can be used to display
             information. Users can navigate between panes and within the contents
             of the current pane, but cannot navigate between items in different
             panes. Thus, panes represent a level of grouping lower than frame
             windows or documents, but above individual controls. Typically the
             user navigates between panes by pressing TAB, F6, or CTRL+TAB, depending
             on the context.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Chart">
            <summary>
             A graphical image used to represent data.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Dialog">
            <summary>
             A dialog box or message box.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Border">
            <summary>
             A window border. The entire border is represented by a single object,
             rather than by separate objects for each side.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Grouping">
            <summary>
             Objects grouped in a logical manner. There can be a parent-child
             relationship between the grouping object and the objects it contains.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Separator">
            <summary>
             Visually divides a space into two regions, such as a separator menu
             item or a bar dividing split panes within a window.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.ToolBar">
            <summary>
             A toolbar, which is a grouping of controls that provide easy access
             to frequently used features.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.StatusBar">
            <summary>
             A status bar, which is an area typically at the bottom of an application
             window that displays information about the current operation, state of
             the application, or selected object. The status bar can have multiple
             fields that display different kinds of information, such as an
             explanation of the currently selected menu command in the status bar.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Table">
            <summary>
             A table containing rows and columns of cells, and optionally, row
             headers and column headers.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.ColumnHeader">
            <summary>
             A column header, which provides a visual label for a column in a table.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.RowHeader">
            <summary>
             A row header, which provides a visual label for a table row.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Column">
            <summary>
             A column of cells within a table.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Row">
            <summary>
             A row of cells within a table.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Cell">
            <summary>
             A cell within a table.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Link">
            <summary>
             A link, which is a connection between a source document and a destination
             document. This object might look like text or a graphic, but it acts like
             a button.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.HelpBalloon">
            <summary>
             A Help display in the form of a ToolTip or Help balloon, which contains
             buttons and labels that users can click to open custom Help topics.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Character">
            <summary>
             A cartoon-like graphic object, such as Microsoft Office Assistant, which
             is typically displayed to provide help to users of an application.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.List">
            <summary>
             A list box, which allows the user to select one or more items.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.ListItem">
            <summary>
             An item in a list box or the list portion of a combo box, drop-down
             list box, or drop-down combo box.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Outline">
            <summary>
             An outline or tree structure, such as a tree view control, which
             displays a hierarchical list and usually allows the user to expand
             and collapse branches.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.OutlineItem">
            <summary>
             An item in an outline or tree structure.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.PageTab">
            <summary>
             A property page that allows a user to view the attributes for a page,
             such as the page's title, whether it is a home page, or whether the
             page has been modified.
             Normally the only child of this control is a grouped object that contains
             the contents of the associated page.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.PropertyPage">
            <summary>
             A property page, which is a dialog box that controls the appearance
             and the behavior of an object, such as a file or resource. A property
             page's appearance differs according to its purpose.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Indicator">
            <summary>
             An indicator, such as a pointer graphic, that points to the current item.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Graphic">
            <summary>
             A picture.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.StaticText">
            <summary>
             Read-only text, such as in a label, for other controls or instructions
             in a dialog box. Static text cannot be modified or selected.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Text">
            <summary>
             Selectable text that can be editable or read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.PushButton">
            <summary>
             A push button control, which is a small rectangular control that a user
             can turn on or off. A push button, also known as a command button, has
             a raised appearance in its default off state and a sunken appearance
             when it is turned on.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.CheckButton">
            <summary>
             A check box control, which is an option that can be turned on or off
             independently of other options.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.RadioButton">
            <summary>
             An option button, also known as a radio button. All objects sharing the
             same parent that have this attribute are assumed to be part of a single
             mutually exclusive group. You can use grouped objects to divide option
             buttons into separate groups when necessary.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.ComboBox">
            <summary>
             A combo box, which is an edit control with an associated list box that
             provides a set of predefined choices.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.DropList">
            <summary>
             A drop-down list box. This control shows one item and allows the user
             to display and select another from a list of alternative choices.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.ProgressBar">
            <summary>
             A progress bar, which indicates the progress of a lengthy operation by
             displaying a colored bar inside a horizontal rectangle. The length of
             the bar in relation to the length of the rectangle corresponds to
             the percentage of the operation that is complete. This control does
             not take user input.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Dial">
            <summary>
             A dial or knob. This can also be a read-only object, like a speedometer.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.HotkeyField">
            <summary>
             A hot-key field that allows the user to enter a combination or sequence
             of keystrokes to be used as a hot key, which enables users to perform
             an action quickly. A hot-key control displays the keystrokes entered
             by the user and ensures that the user selects a valid key combination.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Slider">
            <summary>
             A control, sometimes called a trackbar, that allows a user to adjust
             a setting in given increments between minimum and maximum values by
             moving a slider. The volume controls in the Windows operating system
             are slider controls.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.SpinButton">
            <summary>
             A spin box, also known as an up-down control, which contains a pair
             of arrow buttons that a user click with a mouse to increment or
             decrement a value. A spin button control is most often used with a
             companion control, called a buddy window, where the current value is
             displayed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Diagram">
            <summary>
             A graphical image used to diagram data.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Animation">
            <summary>
             An animation control, which contains content that is changing over
             time, such as a control that displays a series of bitmap frames, like
             a film strip. Animation controls are usually displayed when files
             are being copied, or when some other time-consuming task is being
             performed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Equation">
            <summary>
             A mathematical equation.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.ButtonDropDown">
            <summary>
             A button that drops down a list of items.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.ButtonMenu">
            <summary>
             A button that drops down a menu.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.ButtonDropDownGrid">
            <summary>
             A button that drops down a grid.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.WhiteSpace">
            <summary>
             A blank space between other objects.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.PageTabList">
            <summary>
             A container of page tab controls.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.Clock">
            <summary>
             A control that displays the time.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.SplitButton">
            <summary>
             A toolbar button that jas a drop-down list icon directly adjacent to
             the button.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.IpAddress">
            <summary>
             A control designed for entering Internet Protocol (IP) addresses.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleRole.OutlineButton">
            <summary>
             A control that navigates like an outline item.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AccessibleSelection">
            <summary>
             Specifies how an accessible object will be selected or receive focus.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleSelection.None">
            <summary>
             The selection or focus of an object is unchanged.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleSelection.TakeFocus">
            <summary>
             Assigns focus to an object and makes it the anchor, which is the
             starting point for the selection. Can be combined with
            <see cref='F:System.Windows.Forms.AccessibleSelection.TakeSelection'/>, <see cref='F:System.Windows.Forms.AccessibleSelection.ExtendSelection'/>,
            <see cref='F:System.Windows.Forms.AccessibleSelection.AddSelection'/>, or  <see cref='F:System.Windows.Forms.AccessibleSelection.RemoveSelection'/>.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleSelection.TakeSelection">
            <summary>
             Selects the object and deselects all other objects in the container.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleSelection.ExtendSelection">
            <summary>
             Selects all objects between the anchor and the selected object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleSelection.AddSelection">
            <summary>
             Adds the object to the selection.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleSelection.RemoveSelection">
            <summary>
             Removes the object from the selection.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AccessibleStates">
            <summary>
             Specifies values representing possible states for an accessible object
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.None">
            <summary>
             No state.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Unavailable">
            <summary>
             An unavailable object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Selected">
            <summary>
             A selected object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Focused">
            <summary>
             An object with the keyboard focus.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Pressed">
            <summary>
             A pressed object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Checked">
            <summary>
             An object with a selected check box.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Mixed">
            <summary>
             A three-state check box or toolbar button whose state is indeterminate.
             The check box is neither checked nor unchecked and it is in the third
             or mixed state.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Indeterminate">
            <summary>
             A three-state check box or toolbar button whose state is indeterminate.
             The check box is neither checked nor unchecked and it is in the third
             or mixed state.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.ReadOnly">
            <summary>
             A read-only object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.HotTracked">
            <summary>
             The object is hot-tracked by the mouse, meaning its appearance is
             highlighted to indicate the mouse pointer is located over it.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Default">
            <summary>
             The default button or menu item.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Expanded">
            <summary>
             Children of the object that are items in an outline or tree structure
             are displayed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Collapsed">
            <summary>
             Children of the object that are items in an outline or tree structure
             are hidden.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Busy">
            <summary>
             A control that cannot accept input in its current condition.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Floating">
            <summary>
             The object is not fixed to the boundary of its parent object, and
             does not move automatically along with the parent.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Marqueed">
            <summary>
             An object with scrolling or moving text or graphics.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Animated">
            <summary>
             The object has a rapidly or constantly changing appearance. Graphics
             that are occasionally animated, but not always, should be defined as
            <see cref='F:System.Windows.Forms.AccessibleRole.Graphic'/>|<see cref='F:System.Windows.Forms.AccessibleStates.Animated'/>.
             This state should not be used to indicate that the object's location
             is changing.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Invisible">
            <summary>
             An object that is currently invisible.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Offscreen">
            <summary>
             No on-screen representation. A sound or alert object would have this
             state, or a hidden window that is never made visible.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Sizeable">
            <summary>
             A sizable object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Moveable">
            <summary>
             A movable object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.SelfVoicing">
            <summary>
             The object or child can use text-to-speech (TTS) to describe itself. A
             speech-based accessibility aid should not announce information when an
             object with this state has the focus because the object will
             automatically announce information about itself.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Focusable">
            <summary>
             The object is on the active window and can receive keyboard focus.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Selectable">
            <summary>
             An object that can accept selection.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Linked">
            <summary>
             A linked object that has not been previously selected.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Traversed">
            <summary>
             A linked object that has previously been selected.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.MultiSelectable">
            <summary>
             An object that accepts multiple selected items.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.ExtSelectable">
            <summary>
             Alters the selection so that all objects between the selection anchor,
             which is the object with the keyboard focus, and this object take on
             the anchor object's selection state. If the anchor object is not
             selected, the objects are removed from the selection. If the anchor
             object is selected, the selection is extended to include this object
             and all the objects in between. You can set the selection state by
             combining this flag with <see cref='F:System.Windows.Forms.AccessibleSelection.AddSelection'/>
             or <see cref='F:System.Windows.Forms.AccessibleSelection.RemoveSelection'/>. This flag does
             not change the focus or the selection anchor unless it is combined with
            <see cref='F:System.Windows.Forms.AccessibleSelection.TakeFocus'/>. The behavior of
            <see cref='!:AccessibleStates.ExtendSelection'/>|<see cref='F:System.Windows.Forms.AccessibleSelection.TakeFocus'/>
             is equivalent to adding an item to a selection manually by holding down
             the SHIFT key and clicking an unselected object.
             This flag may not be combined with <see cref='F:System.Windows.Forms.AccessibleSelection.TakeSelection'/>.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.AlertLow">
            <summary>
             Low-priority information that may not be important to the user.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.AlertMedium">
            <summary>
             Important information that does not need to be conveyed to the user
             immediately. For example, when a battery level indicator is starting
             to reach a low level, it could generate a medium-level alert. Blind
             access utilities could then generate a sound to let the user know that
             important information is available, without actually interrupting the
             user's work. The user could then query the alert information at their
             leisure.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.AlertHigh">
            <summary>
             Important information that should be conveyed to the user immediately.
             For example, a battery level indicator reaching a critical low level
             would transition to this state, in which case a blind access utility
             would announce this information immediately to the user, and a screen
             magnification program would scroll the screen so that the battery
             indicator is in view. This state is also appropriate for any prompt
             or operation that must be completed before the user can continue.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.Protected">
            <summary>
             A password-protected edit control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AccessibleStates.HasPopup">
            <summary>
             Object displays a pop-up menu or window when invoked.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AmbientProperties">
            <summary>
             Provides ambient property values to top-level controls.
             NOTE: internally, this class does double duty as storage for
             Control's inherited properties.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AmbientProperties.BackColor">
            <summary>
             Gets the ambient BackColor, or Color.Empty if there is none.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AmbientProperties.Cursor">
            <summary>
             Gets the ambient BackColor, or null if there is none.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AmbientProperties.Font">
            <summary>
             Gets the ambient Font, or null if there is none.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AmbientProperties.ForeColor">
            <summary>
             Gets the ambient ForeColor, or Color.Empty if there is none.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AnchorStyles">
            <summary>
             Specifies how a control anchors to the edges of its container.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AnchorStyles.Top">
            <summary>
             The control is anchored to the top edge of its container.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AnchorStyles.Bottom">
            <summary>
             The control is anchored to the bottom edge of its container.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AnchorStyles.Left">
            <summary>
             The control is anchored to the left edge of its container.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AnchorStyles.Right">
            <summary>
             The control is anchored to the right edge of its container.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AnchorStyles.None">
            <summary>
             The control is not anchored to any edges of its container.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Appearance">
            <summary>
             Specifies the appearance of a control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Appearance.Normal">
            <summary>
             The default appearance defined by the control class.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Appearance.Button">
            <summary>
             The appearance of a Windows button.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Application">
            <summary>
             Provides <see langword='static'/> methods and properties to manage an application, such as methods to run and quit an application,
             to process Windows messages, and properties to get information about an application. 
             This class cannot be inherited.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Application.ComponentManager">
             <summary>
              This is our implementation of the MSO ComponentManager.  The Componoent Manager is
              an object that is responsible for handling all message loop activity in a process.
              The idea is that someone in the process implements the component manager and then
              anyone who wants access to the message loop can get to it.  We implement this
              so we have good interop with office and VS.  The first time we need a
              component manager, we search the OLE message filter for one.  If that fails, we
              create our own and install it in the message filter.
            
              This class is not used when running inside the Visual Studio shell.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ComponentManager.Interop#Mso#IMsoComponentManager#QueryService(System.Guid*,System.Guid*,System.Void**)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.Application.ComponentManager.Interop#Mso#IMsoComponentManager#FDebugMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.Application.ComponentManager.Interop#Mso#IMsoComponentManager#FRegisterComponent(Interop.Mso.IMsoComponent,Interop.Mso.MSOCRINFO*,System.UIntPtr*)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.Application.ComponentManager.Interop#Mso#IMsoComponentManager#FRevokeComponent(System.UIntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.Application.ComponentManager.Interop#Mso#IMsoComponentManager#FUpdateComponentRegistration(System.UIntPtr,Interop.Mso.MSOCRINFO*)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.Application.ComponentManager.Interop#Mso#IMsoComponentManager#FOnComponentActivate(System.UIntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.Application.ComponentManager.Interop#Mso#IMsoComponentManager#FSetTrackingComponent(System.UIntPtr,Interop.BOOL)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.Application.ComponentManager.Interop#Mso#IMsoComponentManager#OnComponentEnterState(System.UIntPtr,Interop.Mso.msocstate,Interop.Mso.msoccontext,System.UInt32,System.Void**,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.Application.ComponentManager.Interop#Mso#IMsoComponentManager#FOnComponentExitState(System.UIntPtr,Interop.Mso.msocstate,Interop.Mso.msoccontext,System.UInt32,System.Void**)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.Application.ComponentManager.Interop#Mso#IMsoComponentManager#FInState(Interop.Mso.msocstate,System.Void*)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.Application.ComponentManager.Interop#Mso#IMsoComponentManager#FContinueIdle">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.Application.ComponentManager.Interop#Mso#IMsoComponentManager#FPushMessageLoop(System.UIntPtr,Interop.Mso.msoloop,System.Void*)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.Application.ComponentManager.Interop#Mso#IMsoComponentManager#FCreateSubComponentManager(System.IntPtr,System.IntPtr,System.Guid*,System.Void**)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.Application.ComponentManager.Interop#Mso#IMsoComponentManager#FGetParentComponentManager(System.Void**)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.Application.ComponentManager.Interop#Mso#IMsoComponentManager#FGetActiveComponent(Interop.Mso.msogac,System.Void**,Interop.Mso.MSOCRINFO*,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="F:System.Windows.Forms.Application.s_eventHandlers">
            <summary>
             Hash table for our event list
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Application.s_exiting">
            <summary>
             In case Application.exit gets called recursively
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Application.EVENT_APPLICATIONEXIT">
            <summary>
             Events the user can hook into
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.#ctor">
            <summary>
             This class is static, there is no need to ever create it.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.AllowQuit">
            <summary>
             Determines if the caller should be allowed to quit the application.  This will return false,
             for example, if being called from a windows forms control being hosted within a web browser.  The
             windows forms control should not attempt to quit the application.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.CanContinueIdle">
            <summary>
             Returns True if it is OK to continue idle processing. Typically called in an Application.Idle event handler.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.ComCtlSupportsVisualStyles">
            <summary>
             Typically, you shouldn't need to use this directly - use RenderWithVisualStyles instead.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.CommonAppDataRegistry">
            <summary>
             Gets the registry key for the application data that is shared among all users.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.CommonAppDataPath">
            <summary>
             Gets the path for the application data that is shared among all users.
            </summary>
            <remarks>
             Don't obsolete these. GetDataPath isn't on SystemInformation, and it provides
             the Windows logo required adornments to the directory (Company\Product\Version)
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.Application.CompanyName">
            <summary>
             Gets the company name associated with the application.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.CurrentCulture">
            <summary>
             Gets or sets the locale information for the current thread.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.CurrentInputLanguage">
            <summary>
             Gets or sets the current input language for the current thread.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.ExecutablePath">
            <summary>
             Gets the path for the executable file that started the application.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.HighDpiMode">
            <summary>
             Gets the current <see cref="P:System.Windows.Forms.Application.HighDpiMode"/> mode for the process.
            </summary>
            <value>One of the enumeration values that indicates the high DPI mode.</value>
        </member>
        <member name="M:System.Windows.Forms.Application.SetHighDpiMode(System.Windows.Forms.HighDpiMode)">
            <summary>
             Sets the <see cref="P:System.Windows.Forms.Application.HighDpiMode"/> mode for process.
            </summary>
            <param name="highDpiMode">One of the enumeration values that specifies the high DPI mode to set.</param>
            <returns><see langword="true" /> if the high DPI mode was set; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Windows.Forms.Application.LocalUserAppDataPath">
            <summary>
             Gets the path for the application data specific to a local, non-roaming user.
            </summary>
            <remarks>
             Don't obsolete these. GetDataPath isn't on SystemInformation, and it provides
             the Windows logo required adornments to the directory (Company\Product\Version)
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.Application.MessageLoop">
            <summary>
             Determines if a message loop exists on this thread.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.OpenForms">
            <summary>
             Gets the forms collection associated with this application.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.ProductName">
            <summary>
             Gets
             the product name associated with this application.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.ProductVersion">
            <summary>
             Gets the product version associated with this application.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.RenderWithVisualStyles">
            <summary>
             Magic property that answers a simple question - are my controls currently going to render with
             visual styles? If you are doing visual styles rendering, use this to be consistent with the rest
             of the controls in your app.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.SafeTopLevelCaptionFormat">
            <summary>
             Gets or sets the format string to apply to top level window captions
             when they are displayed with a warning banner.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.StartupPath">
            <summary>
             Gets the path for the executable file that started the application.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.UseWaitCursor">
            <summary>
             Gets or sets whether the wait cursor is used for all open forms of the application.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.UserAppDataPath">
            <summary>
             Gets the path for the application data specific to the roaming user.
            </summary>
            <remarks>
             Don't obsolete these. GetDataPath isn't on SystemInformation, and it provides
             the Windows logo required adornments to the directory (Company\Product\Version)
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.Application.UserAppDataRegistry">
            <summary>
             Gets the registry key of
             the application data specific to the roaming user.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.UseVisualStyles">
            <summary>
             Gets a value that indicates whether visual styles are enabled for the application.
            </summary>
            <value><see langword="true" /> if visual styles are enabled; otherwise, <see langword="false" />.</value>
            <remarks>
             The visual styles can be enabled by calling <see cref="M:System.Windows.Forms.Application.EnableVisualStyles"/>.
             The visual styles will not be enabled if the OS does not support them, or theming is disabled at the OS level.
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.Application.WindowsFormsVersion">
            <remarks>
             Don't never ever change this name, since the window class and partner teams
             dependent on this. Changing this will introduce breaking changes.
             If there is some reason need to change this, notify any partner teams affected.
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.Application.VisualStyleState">
             <summary>
              Use this property to determine how visual styles will be applied to this application.
              This property is meaningful only if visual styles are supported on the current
              platform (VisualStyleInformation.SupportedByOS is true).
            
              This property can be set only to one of the S.W.F.VisualStyles.VisualStyleState enum values.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.SendThemeChanged(System.IntPtr,System.IntPtr)">
            <summary>
             This helper broadcasts out a WM_THEMECHANGED to appropriate top level windows of this app.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.SendThemeChangedRecursive(System.IntPtr,System.IntPtr)">
            <summary>
             This helper broadcasts out a WM_THEMECHANGED this window and all children.
             It is assumed at this point that the handle belongs to the current process
             and has a visible top level window.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Application.ApplicationExit">
            <summary>
             Occurs when the application is about to shut down.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)">
            <summary>
             Adds a message filter to monitor Windows messages as they are routed to their
             destinations.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.FilterMessage(System.Windows.Forms.Message@)">
            <summary>
             Processes all message filters for given message
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Application.Idle">
            <summary>
             Occurs when the application has finished processing and is about to enter the
             idle state.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Application.EnterThreadModal">
            <summary>
             Occurs when the application is about to enter a modal state
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Application.LeaveThreadModal">
            <summary>
             Occurs when the application is about to leave a modal state
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Application.ThreadException">
            <summary>
             Occurs when an untrapped thread exception is thrown.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Application.ThreadExit">
            <summary>
             Occurs when a thread is about to shut down.  When the main thread for an
             application is about to be shut down, this event will be raised first,
             followed by an <see cref="E:System.Windows.Forms.Application.ApplicationExit"/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.BeginModalMessageLoop">
            <summary>
             Called immediately before we begin pumping messages for a modal message loop.
             Does not actually start a message pump; that's the caller's responsibility.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.DoEvents">
            <summary>
             Processes all Windows messages currently in the message queue.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.EnableVisualStyles">
            <summary>
             Enables visual styles for all subsequent <see cref="M:System.Windows.Forms.Application.Run"/> and <see cref="!:CreateHandle"/> calls.
             Uses the default theming manifest file shipped with the redist.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.EndModalMessageLoop">
            <summary>
             Called immediately after we stop pumping messages for a modal message loop.
             Does not actually end the message pump itself.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.Exit">
            <summary>
             Overload of Exit that does not care about e.Cancel.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.Exit(System.ComponentModel.CancelEventArgs)">
            <summary>
             Informs all message pumps that they are to terminate and
             then closes all application windows after the messages have been processed.
             e.Cancel indicates whether any of the open forms cancelled the exit call.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ExitInternal">
            <summary>
             Private version of Exit which does not do any security checks.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ExitThread">
            <summary>
             Exits the message loop on the
             current thread and closes all windows on the thread.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.GetAppFileVersionInfo">
            <summary>
             Retrieves the FileVersionInfo associated with the main module for
             the application.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.GetAppMainType">
            <summary>
             Retrieves the Type that contains the "Main" method.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.GetContextForHandle(System.Runtime.InteropServices.HandleRef)">
            <summary>
             Locates a thread context given a window handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.GetDataPath(System.String)">
            <summary>
             Returns a string that is the combination of the basePath + CompanyName + ProducName + ProductVersion. This
             will also create the directory if it doesn't exist.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.RaiseExit">
            <summary>
             Called by the last thread context before it shuts down.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.RaiseThreadExit">
            <summary>
             Called by the each thread context before it shuts down.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ParkHandle(System.Runtime.InteropServices.HandleRef,System.Windows.Forms.DpiAwarenessContext)">
            <summary>
             "Parks" the given HWND to a temporary HWND.  This allows WS_CHILD windows to
             be parked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ParkHandle(System.Windows.Forms.CreateParams,System.Windows.Forms.DpiAwarenessContext)">
            <summary>
             Park control handle on a parkingwindow that has matching DpiAwareness.
            </summary>
            <param name="cp"> create params for control handle</param>
            <param name="dpiContext"> dpi awareness</param>
        </member>
        <member name="M:System.Windows.Forms.Application.OleRequired">
            <summary>
             Initializes OLE on the current thread.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.OnThreadException(System.Exception)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Application.ThreadException'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.UnparkHandle(System.Runtime.InteropServices.HandleRef,System.Windows.Forms.DpiAwarenessContext)">
            <summary>
             "Unparks" the given HWND to a temporary HWND.  This allows WS_CHILD windows to
             be parked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.RaiseIdle(System.EventArgs)">
            <summary>
             Raises the Idle event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.RemoveMessageFilter(System.Windows.Forms.IMessageFilter)">
            <summary>
             Removes a message filter from the application's message pump.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.Restart">
            <summary>
             Restarts the application.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.Run">
            <summary>
             Begins running a standard application message loop on the current thread,
             without a form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.Run(System.Windows.Forms.Form)">
            <summary>
             Begins running a standard application message loop on the current
             thread, and makes the specified form visible.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.Run(System.Windows.Forms.ApplicationContext)">
            <summary>
             Begins running a standard application message loop on the current thread,
             without a form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.RunDialog(System.Windows.Forms.Form)">
            <summary>
             Runs a modal dialog.  This starts a special type of message loop that runs until
             the dialog has a valid DialogResult.  This is called internally by a form
             when an application calls System.Windows.Forms.Form.ShowDialog().
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault(System.Boolean)">
            <summary>
             Sets the static UseCompatibleTextRenderingDefault field on Control to the value passed in.
             This switch determines the default text rendering engine to use by some controls that support
             switching rendering engine.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.SetSuspendState(System.Windows.Forms.PowerState,System.Boolean,System.Boolean)">
            <summary>
             Sets the suspend/hibernate state of the machine.
             Returns true if the call succeeded, else false.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)">
            <summary>
             Overload version of SetUnhandledExceptionMode that sets the UnhandledExceptionMode
             mode at the current thread level.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode,System.Boolean)">
             <summary>
              This method can be used to modify the exception handling behavior of
              NativeWindow.  By default, NativeWindow will detect if an application
              is running under a debugger, or is running on a machine with a debugger
              installed.  In this case, an unhandled exception in the NativeWindow's
              WndProc method will remain unhandled so the debugger can trap it.  If
              there is no debugger installed NativeWindow will trap the exception
              and route it to the Application class's unhandled exception filter.
            
              You can control this behavior via a config file, or directly through
              code using this method.  Setting the unhandled exception mode does
              not change the behavior of any NativeWindow objects that are currently
              connected to window handles; it only affects new handle connections.
            
              The parameter threadScope defines the scope of the setting: either
              the current thread or the application.
              When a thread exception mode isn't UnhandledExceptionMode.Automatic, it takes
              precedence over the application exception mode.
             </summary>
        </member>
        <member name="T:System.Windows.Forms.Application.MarshalingControl">
            <summary>
             This class allows us to handle sends/posts in our winformssynchcontext on the correct thread via
             control.invoke().
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Application.ParkingWindow">
            <summary>
             This class embodies our parking window, which we create when the
             first message loop is pushed onto the thread.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ParkingWindow.ParkHandle(System.Runtime.InteropServices.HandleRef)">
            <summary>
             "Parks" the given HWND to a temporary HWND.  This allows WS_CHILD windows to
             be parked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ParkingWindow.UnparkHandle(System.Runtime.InteropServices.HandleRef)">
            <summary>
             "Unparks" the given HWND to a temporary HWND.  This allows WS_CHILD windows to
             be parked.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Application.ThreadContext">
            <summary>
             This class is the embodiment of TLS for windows forms.  We do not expose this to end users because
             TLS is really just an unfortunate artifact of using Win 32.  We want the world to be free
             threaded.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.#ctor">
            <summary>
             Creates a new thread context object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Application.ThreadContext.ComponentManager">
            <summary>
             Retrieves the component manager for this process.  If there is no component manager
             currently installed, we install our own.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.GetParkingWindow(System.Windows.Forms.DpiAwarenessContext)">
            <summary>
             Retrieves the actual parking form.  This will demand create the parking window
             if it needs to.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.GetParkingWindowForContext(System.Windows.Forms.DpiAwarenessContext)">
            <summary>
             Returns parking window that matches dpi awareness context. return null if not found.
            </summary>
            <returns>return matching parking window from list. returns null if not found</returns>
        </member>
        <member name="P:System.Windows.Forms.Application.ThreadContext.MarshalingControl">
            <summary>
             Retrieves the actual parking form.  This will demand create the MarshalingControl window
             if it needs to.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.AddMessageFilter(System.Windows.Forms.IMessageFilter)">
            <summary>
             Allows you to setup a message filter for the application's message pump.  This
             installs the filter on the current thread.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.Dispose(System.Boolean)">
            <summary>
             Disposes this thread context object.  Note that this will marshal to the owning thread.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.DisposeParkingWindow">
            <summary>
             Disposes of this thread's parking form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.DisposeThreadWindows">
            <summary>
             Gets rid of all windows in this thread context.  Nulls out
             window objects that we hang on to.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.ExitApplication">
            <summary>
             Exits the program by disposing of all thread contexts and message loops.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.Finalize">
            <summary>
             Our finalization. This shouldn't be called as we should always be disposed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.TrackInput(System.Boolean)">
            <summary>
             Sets this component as the tracking component - trumping any active component
             for message filtering.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.FromCurrent">
            <summary>
             Retrieves a ThreadContext object for the current thread
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.FromId(System.UInt32)">
            <summary>
             Retrieves a ThreadContext object for the given thread ID
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.GetAllowQuit">
            <summary>
             Determines if it is OK to allow an application to quit and shutdown
             the runtime.  We only allow this if we own the base message pump.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.GetHandle">
            <summary>
             Retrieves the handle to this thread.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.GetId">
            <summary>
             Retrieves the ID of this thread.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.GetCulture">
            <summary>
             Retrieves the culture for this thread.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.GetMessageLoop">
            <summary>
             Determines if a message loop exists on this thread.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.GetMessageLoop(System.Boolean)">
            <summary>
             Determines if a message loop exists on this thread.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.IsValidComponentId">
            <summary>
             A method of determining whether we are handling messages that does not demand register
             the componentmanager
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.OnThreadException(System.Exception)">
            <summary>
             Called when an untrapped exception occurs in a thread.  This allows the
             programmer to trap these, and, if left untrapped, throws a standard error
             dialog.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.RegisterMessageLoop(System.Windows.Forms.Application.MessageLoopCallback)">
            <summary>
             Allows the hosting environment to register a callback
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.RemoveMessageFilter(System.Windows.Forms.IMessageFilter)">
            <summary>
             Removes a message filter previously installed with addMessageFilter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Interop.Mso.msoloop,System.Windows.Forms.ApplicationContext)">
            <summary>
             Starts a message loop for the given reason.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.PreTranslateMessage(Interop.User32.MSG@)">
            <summary>
             Message filtering routine that is called before dispatching a message.
             If this returns true, the message is already processed.  If it returns
             false, the message should be allowed to continue through the dispatch
             mechanism.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.RevokeComponent">
            <summary>
             Revokes our component from the active component manager.  Does
             nothing if there is no active component manager or we are
             already invoked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.SetCulture(System.Globalization.CultureInfo)">
            <summary>
             Sets the culture for this thread.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.Interop#Mso#IMsoComponent#FDebugMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.Interop#Mso#IMsoComponent#FPreTranslateMessage(Interop.User32.MSG*)">
            <inheritdoc />
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.Interop#Mso#IMsoComponent#OnEnterState(Interop.Mso.msocstate,Interop.BOOL)">
            <inheritdoc />
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.Interop#Mso#IMsoComponent#OnAppActivate(Interop.BOOL,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.Interop#Mso#IMsoComponent#OnLoseActivation">
            <inheritdoc />
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.Interop#Mso#IMsoComponent#OnActivationChange(Interop.Mso.IMsoComponent,Interop.BOOL,Interop.Mso.MSOCRINFO*,Interop.BOOL,System.IntPtr,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.Interop#Mso#IMsoComponent#FDoIdle(Interop.Mso.msoidlef)">
            <inheritdoc />
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.Interop#Mso#IMsoComponent#FContinueMessageLoop(Interop.Mso.msoloop,System.Void*,Interop.User32.MSG*)">
            <inheritdoc />
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.Interop#Mso#IMsoComponent#FQueryTerminate(Interop.BOOL)">
            <inheritdoc />
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.Interop#Mso#IMsoComponent#Terminate">
            <inheritdoc />
        </member>
        <member name="M:System.Windows.Forms.Application.ThreadContext.Interop#Mso#IMsoComponent#HwndGetWindow(Interop.Mso.msocWindow,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="T:System.Windows.Forms.Application.ThreadWindows">
            <summary>
             This class enables or disables all windows in the current thread.  We use this to
             disable other windows on the thread when a modal dialog is to be shown.  It can also
             be used to dispose all windows in a thread, which we do before returning from a message
             loop.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ApplicationContext">
            <summary>
             ApplicationContext provides contextual information about an application
             thread. Specifically this allows an application author to redifine what
             circurmstances cause a message loop to exit. By default the application
             context listens to the close event on the mainForm, then exits the
             thread's message loop.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ApplicationContext.#ctor">
            <summary>
             Creates a new ApplicationContext with no mainForm.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ApplicationContext.#ctor(System.Windows.Forms.Form)">
            <summary>
             Creates a new ApplicationContext with the specified mainForm.
             If OnMainFormClosed is not overriden, the thread's message
             loop will be terminated when mainForm is closed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ApplicationContext.MainForm">
            <summary>
             Determines the mainForm for this context. This may be changed
             at anytime.
             If OnMainFormClosed is not overriden, the thread's message
             loop will be terminated when mainForm is closed.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ApplicationContext.ThreadExit">
            <summary>
             Is raised when the thread's message loop should be terminated.
             This is raised by calling ExitThread.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ApplicationContext.Dispose">
            <summary>
             Disposes the context. This should dispose the mainForm. This is
             called immediately after the thread's message loop is terminated.
             Application will dispose all forms on this thread by default.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ApplicationContext.ExitThread">
            <summary>
             Causes the thread's message loop to be terminated. This will call ExitThreadCore.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ApplicationContext.ExitThreadCore">
            <summary>
             Causes the thread's message loop to be terminated.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ApplicationContext.OnMainFormClosed(System.Object,System.EventArgs)">
            <summary>
             Called when the mainForm is closed. The default implementation
             of this will call ExitThreadCore.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ApplicationContext.OnMainFormDestroy(System.Object,System.EventArgs)">
            <summary>
             Called when the mainForm is closed. The default implementation
             of this will call ExitThreadCore.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ArrangeDirection">
            <summary>
             Specifies the direction the system uses to arrange minimized windows.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ArrangeDirection.Down">
            <summary>
             Arranges vertically, from top to bottom.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ArrangeDirection.Left">
            <summary>
             Arranges horizontally, from left to right.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ArrangeDirection.Right">
            <summary>
             Arranges horizontally, from right to left.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ArrangeDirection.Up">
            <summary>
             Arranges vertically, from bottom to top.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ArrangeStartingPosition">
            <summary>
             Specifies the starting position that the system uses to arrange minimized
             windows.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ArrangeStartingPosition.BottomLeft">
            <summary>
             Starts at the lower-left corner of the screen, which is the default position.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ArrangeStartingPosition.BottomRight">
            <summary>
             Starts at the lower-right corner of the screen.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ArrangeStartingPosition.Hide">
            <summary>
             Hides minimized windows by moving them off the visible area of the
             screen.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ArrangeStartingPosition.TopLeft">
            <summary>
             Starts at the upper-left corner of the screen.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ArrangeStartingPosition.TopRight">
            <summary>
             Starts at the upper-right corner of the screen.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Windows.Forms.ArrowDirection" -->
        <member name="T:System.Windows.Forms.AutoCompleteMode">
            <summary>
             Specifies the autocomplete mode for ComboBox and TextBox AutoComplete Feature.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoCompleteMode.None">
            <summary>
             Disables the AutoComplete Feature for ComboBox and TextBox.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoCompleteMode.Suggest">
            <summary>
             Displays the auxiliary drop-down list associated with the edit control,
             this drop-down is populated with one or more suggested completed strings.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoCompleteMode.Append">
            <summary>
             Appends the remainder of the most likely candidate string to the existing
             characters, hightlighting the appended characters.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoCompleteMode.SuggestAppend">
            <summary>
             The AutoSuggest and AutoAppend are applied in conjuction.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AutoCompleteSource">
            <summary>
             Specifies the AutoCompleteSource for ComboBox and TextBox AutoComplete Feature.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoCompleteSource.FileSystem">
            <summary>
             This option includes the file system as the source.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoCompleteSource.HistoryList">
            <summary>
             This option includes the URL's in the users history list.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoCompleteSource.RecentlyUsedList">
            <summary>
             This option includes the URL's in the users recently used list.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoCompleteSource.AllUrl">
            <summary>
             This option is equivalent to HistoryList | RecentlyUsedList.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoCompleteSource.AllSystemSources">
            <summary>
             This option is equivalent to FILESYSTEM | AllUrl. This is the default
             value when the AutoCompleteMode has been set to a non default value.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoCompleteSource.FileSystemDirectories">
            <summary>
             This option is allows to autoComplete just directory names and not
             the files inside.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoCompleteSource.CustomSource">
            <summary>
             This option includes stirngs from a built in String Collection object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoCompleteSource.None">
            <summary>
             The default value specifying the no AutoCompleteSource is currently
             in use.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoCompleteSource.ListItems">
            <summary>
             The items of the combobox represent the source.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AutoCompleteStringCollection">
            <summary>
             Represents a collection of strings.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AutoCompleteStringCollection.Item(System.Int32)">
            <summary>
             Represents the entry at the specified index of the <see cref='T:System.Windows.Forms.AutoCompleteStringCollection'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AutoCompleteStringCollection.Count">
            <summary>
             Gets the number of strings in the
             <see cref='T:System.Windows.Forms.AutoCompleteStringCollection'/> .
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AutoCompleteStringCollection.Add(System.String)">
            <summary>
             Adds a string with the specified value to the
             <see cref='T:System.Windows.Forms.AutoCompleteStringCollection'/> .
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AutoCompleteStringCollection.AddRange(System.String[])">
            <summary>
             Copies the elements of a string array to the end of the <see cref='T:System.Windows.Forms.AutoCompleteStringCollection'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AutoCompleteStringCollection.Clear">
            <summary>
             Removes all the strings from the
             <see cref='T:System.Windows.Forms.AutoCompleteStringCollection'/> .
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AutoCompleteStringCollection.Contains(System.String)">
            <summary>
             Gets a value indicating whether the
             <see cref='T:System.Windows.Forms.AutoCompleteStringCollection'/> contains a string with the specified
             value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AutoCompleteStringCollection.CopyTo(System.String[],System.Int32)">
            <summary>
             Copies the <see cref='T:System.Windows.Forms.AutoCompleteStringCollection'/> values to a one-dimensional <see cref='T:System.Array'/> instance at the
             specified index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AutoCompleteStringCollection.IndexOf(System.String)">
            <summary>
             Returns the index of the first occurrence of a string in
             the <see cref='T:System.Windows.Forms.AutoCompleteStringCollection'/> .
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AutoCompleteStringCollection.Insert(System.Int32,System.String)">
            <summary>
             Inserts a string into the <see cref='T:System.Windows.Forms.AutoCompleteStringCollection'/> at the specified
             index.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AutoCompleteStringCollection.IsReadOnly">
            <summary>
             Gets a value indicating whether the <see cref='T:System.Windows.Forms.AutoCompleteStringCollection'/> is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AutoCompleteStringCollection.IsSynchronized">
            <summary>
             Gets a value indicating whether access to the
             <see cref='!:Collections.Specialized.AutoCompleteStringCollection'/>
             is synchronized (thread-safe).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AutoCompleteStringCollection.Remove(System.String)">
            <summary>
             Removes a specific string from the <see cref='T:System.Windows.Forms.AutoCompleteStringCollection'/> .
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AutoCompleteStringCollection.RemoveAt(System.Int32)">
            <summary>
             Removes the string at the specified index of the <see cref='T:System.Windows.Forms.AutoCompleteStringCollection'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AutoCompleteStringCollection.SyncRoot">
            <summary>
             Gets an object that can be used to synchronize access to the <see cref='T:System.Windows.Forms.AutoCompleteStringCollection'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Automation.IAutomationLiveRegion.LiveSetting">
            <summary>
             Gets or sets notification characteristics of the live region.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AutoScaleMode">
            <summary>
             Specifies the auto scaling mode used by a container control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoScaleMode.None">
            <summary>
             AutoScale is turned off.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoScaleMode.Font">
            <summary>
             Controls scale according to the dimensions of the font they are using.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoScaleMode.Dpi">
            <summary>
             Controls scale according to the display Dpi.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoScaleMode.Inherit">
            <summary>
             Controls scale according to their parent's scaling mode.
             If there is no parent, this behaves as if AutoScaleMode.None were set.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AutoSizeMode">
            <summary>
             Specifies how the control will behave when its AutoSize property is enabled
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoSizeMode.GrowAndShrink">
            <summary>
             The same behavior as you get for controls with AutoSize and no AutoSizeMode
             property. The control will grow or shrink to encompass the contents (e.g.
             text for a Button, child controls for a container). The MinimumSize and
             MaximumSize are followed, but the current value of the Size property is
             ignored.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoSizeMode.GrowOnly">
            <summary>
             The control will grow as much as it needs to encompass its contents (e.g.
             text for a button, child controls for a container), but will not shrink
             smaller than its Size, whichever is larger.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AutoValidate">
            <summary>
             For a given container control, determines whether the data in child controls
             will automatically be validated when the user attempts to change the focus.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoValidate.Disable">
            <summary>
             Controls in this container will not be validated when the focus changes.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoValidate.EnablePreventFocusChange">
            <summary>
             Controls in this container will be validated when the focus changes.
             If a validation error occurs, the focus is forced to stay in the
             current control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoValidate.EnableAllowFocusChange">
            <summary>
             Controls in this container will be validated when the focus changes.
             If a validation error occurs, the focus is allowed to move to the other
             control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AutoValidate.Inherit">
            <summary>
             AutoValidate setting for this container is determined by its parent container.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AxHost">
            <summary>
             Wraps ActiveX controls and exposes them as fully featured windows forms controls.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AxHost.AxPerPropertyBrowsingEnum">
            <summary>
             This exists for perf reasons. We delay doing this until we are actually asked for the
             array of values.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AxHost.AxPerPropertyBrowsingEnum.Values">
            <summary>
             Retrieve a copy of the value array
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AxHost.AxPerPropertyBrowsingEnum.Names">
            <summary>
             Retrieve a copy of the nme array.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.AxPropertyDescriptor.UpdateTypeConverterAndTypeEditor(System.Boolean)">
            <summary>
             Called externally to update the editor or type converter.
             This simply sets flags so this will happen, it doesn't actually to the update...
             we wait and do that on-demand for perf.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.AxPropertyDescriptor.UpdateTypeConverterAndTypeEditorInternal(System.Boolean,Interop.Ole32.DispatchID)">
            <summary>
             Called externally to update the editor or type converter.
             This simply sets flags so this will happen, it doesn't actually to the update...
             we wait and do that on-demand for perf.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.AxPropertyTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
             Takes the value returned from valueAccess.getValue() and modifies or replaces
             the value, passing the result into valueAccess.setValue().  This is where
             an editor can launch a modal dialog or create a drop down editor to allow
             the user to modify the value.  Host assistance in presenting UI to the user
             can be found through the valueAccess.getService function.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.AxPropertyTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Retrieves the editing style of the Edit method.  If the method
             is not supported, this will return None.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AxHost.AxEnumConverter">
            <summary>
             simple derivation of the com2enumconverter that allows us to intercept
             the call to GetStandardValues so we can on-demand update the enum values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.ConnectionPointCookie.#ctor(System.Object,System.Object,System.Type)">
            <summary>
             Creates a connection point to of the given interface type.
             which will call on a managed code sink that implements that interface.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.ConnectionPointCookie.Disconnect">
            <summary>
             Disconnect the current connection point.  If the object is not connected,
             this method will do nothing.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AxHost.AxFlags">
            <summary>
             Flags which may be passed to the AxHost constructor
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AxHost.AxFlags.PreventEditMode">
            <summary>
             Indicates that the context menu for the control should not contain an
             "Edit" verb unless the activeX controls itself decides to proffer it.
             By default, all wrapped activeX controls will contain an edit verb.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AxHost.AxFlags.IncludePropertiesVerb">
            <summary>
             Indicated that the context menu for the control should contain
             a "Properties..." verb which may be used to show the property
             pages for the control.  Note that even if this flag is
             specified, the verb will not appear unless the control
             proffers a set of property pages.
             [Since most activeX controls alreay have their own properties verb
             on the context menu, the default is not to include one specified by
             this flag.]
            </summary>
        </member>
        <member name="F:System.Windows.Forms.AxHost.AxFlags.IgnoreThreadModel">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.#ctor(System.String)">
            <summary>
             Creates a new instance of a control which wraps an activeX control given by the
             clsid parameter and flags of 0.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.#ctor(System.String,System.Int32)">
            <summary>
             Creates a new instance of a control which wraps an activeX control given by the
             clsid and flags parameters.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AxHost.CreateParams">
            <summary>
             Returns the CreateParams used to create the handle for this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.AttachInterfaces">
            <summary>
             AxHost will call this when it is ready to create the underlying ActiveX object.
             Wrappers will override this and cast the pointer obtained by calling getOcx() to
             their own interfaces.  getOcx() should not usually be called before this function.
             Note: calling begin will result in a call to this function.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AxHost.ImeMode">
            <summary>
             Hide ImeMode: it doesn't make sense for this control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AxHost.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.EndInit">
            <summary>
             Signals the object that loading of all peer components and property
             sets are complete.
             It should be possible to invoke any property get or set after calling this method.
             Note that a sideeffect of this method is the creation of the parent control's
             handle, therefore, this control must be parented before begin is called
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AxHost.EditMode">
            <summary>
             Determines if the control is in edit mode.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AxHost.HasAboutBox">
            <summary>
             Determines if this control has an about box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.ShowAboutBox">
            <summary>
             Shows the about box for this control.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.AxHost.EnabledChanged">
            <summary>
             Occurs when the control is enabled.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.AxHost.Click">
            <summary>
             Occurs when the control is clicked.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.AxHost.DoubleClick">
            <summary>
             Occurs when the control is double clicked.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.AxHost.KeyDown">
            <summary>
             Occurs when a key is pressed down while the control has focus.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.AxHost.KeyPress">
            <summary>
             Occurs when a key is pressed while the control has focus.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.AxHost.KeyUp">
            <summary>
             Occurs when a key is released while the control has focus.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.AxHost.MouseDown">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is
             pressed.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.AxHost.MouseEnter">
            <summary>
             Occurs when the mouse pointer enters the AxHost.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.AxHost.MouseLeave">
            <summary>
             Occurs when the mouse pointer leaves the AxHost.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.AxHost.MouseHover">
            <summary>
             Occurs when the mouse pointer hovers over the contro.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.AxHost.MouseMove">
            <summary>
             Occurs when the mouse pointer is moved over the AxHost.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.AxHost.MouseUp">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is released.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.AxHost.MouseWheel">
            <summary>
             Occurs when the mouse wheel moves while the control has focus.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AxHost.Site">
            <summary>
             Sets the site of this component. A non-null value indicates that the
             component has been added to a container, and a null value indicates that
             the component is being removed from a container.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.OnLostFocus(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.LostFocus'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.CreateHandle">
            <summary>
             Creates a handle for this control. This method is called by the framework, this should
             not be called directly.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <summary>
             ActiveX controls scale themselves, so GetScaledBounds simply returns their
             original unscaled bounds.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Performs the work of setting the bounds of this control.
             User code should usually not call this function.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.DestroyHandle">
            <summary>
             Destroys the handle associated with this control.
             User code should in general not call this function.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.IsInputChar(System.Char)">
            <summary>
             Determines if charCode is an input character that the control
             wants. This method is called during window message pre-processing to
             determine whether the given input character should be pre-processed or
             sent directly to the control. If isInputChar returns true, the
             given character is sent directly to the control. If isInputChar
             returns false, the character is pre-processed and only sent to the
             control if it is not consumed by the pre-processing phase. The
             pre-processing of a character includes checking whether the character
             is a mnemonic of another control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.PreProcessMessage(System.Windows.Forms.Message@)">
             <summary>
              This method is called by the application's message loop to pre-process
              input messages before they are dispatched. Possible values for the
              msg.message field are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.
              If this method processes the message it must return true, in which case
              the message loop will not dispatch the message.
              This method should not be called directly by the user.
            
              The keyboard processing of input keys to AxHost controls go in 3 steps inside AxHost.PreProcessMessage()
            
              (1) Call the OCX's TranslateAccelarator. This may or may not call back into us using IOleControlSite::TranslateAccelarator()
            
              (2) If the control completely processed this without calling us back:
              -- If this returns S_OK, then it means that the control already processed this message and we return true,
              forcing us to not do any more processing or dispatch the message.
              -- If this returns S_FALSE, then it means that the control wants us to dispatch the message without doing any processing on our side.
            
              (3) If the control completely processed this by calling us back:
              -- If this returns S_OK, then it means that the control processed this message and we return true,
              forcing us to not do any more processing or dispatch the message.
              -- If this returns S_FALSE, then it means that the control did not process this message,
              but we did, and so we should route it through our PreProcessMessage().
             </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.ProcessMnemonic(System.Char)">
            <summary>
             Process a mnemonic character.
             This is done by manufacturing a WM_SYSKEYDOWN message and passing it to the
             ActiveX control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.SetAboutBoxDelegate(System.Windows.Forms.AxHost.AboutBoxDelegate)">
            <summary>
             Sets the delegate which will be called when the user selects the "About..."
             entry on the context menu.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AxHost.OcxState">
            <summary>
             Sets the persisted state of the control.
             This should either be null, obtained from getOcxState, or
             read from a resource.  The value of this property will
             be used after the control is created but before it is
             shown.
             Computes the persisted state of the underlying ActiveX control and
             returns it in the encapsulated State object.
             If the control has been modified since it was last saved to a
             persisted state, it will be asked to save itself.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.AxHost.ContainingControl">
            <summary>
             Returns this control's logicaly containing form.
             At design time this is always the form being designed.
             At runtime it is either the form set with setContainingForm or,
             by default, the parent form.
             Sets the form which is the logical container of this control.
             By default, the parent form performs that function.  It is
             however possible for another form higher in the parent chain
             to serve in that role.  The logical container of this
             control determines the set of logical sibling control.
             In general this property exists only to enable some speficic
             behaviours of ActiveX controls and should in general not be set
             by the user.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.ShouldSerializeText">
            <summary>
             Determines if the Text property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.ShouldSerializeContainingControl">
            <summary>
             Determines whether to persist the ContainingControl property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.CreateInstanceCore(System.Guid)">
            <summary>
             Called to create the ActiveX control.  Override this member to perform your own creation logic
             or call base to do the default creation logic.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
            <summary>
             Retrieves the class name for this object.  If null is returned,
             the type name is used.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
            <summary>
             Retrieves the name for this object.  If null is returned,
             the default is used.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
            <summary>
             Retrieves the type converter for this object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
            <summary>
             Retrieves the an editor for this object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.GetOcx">
            <summary>
             Returns the IUnknown pointer to the enclosed ActiveX control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.WndProc(System.Windows.Forms.Message@)">
            <summary>
             AxHost wndProc. All messages are sent to wndProc after getting filtered
             through the preProcessMessage function.
             Certain messages are forwarder directly to the ActiveX control,
             others are first processed by the wndProc of Control
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.OnHandleCreated(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to find out when the
             handle has been created.
             Call base.OnHandleCreated first.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.Dispose(System.Boolean)">
            <summary>
             Frees all resources assocaited with this control. This method may not be
             called at runtime. Any resources used by the control should be setup to
             be released when the control is garbage collected. Inheriting classes should always
             call base.dispose.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.GetIPictureFromPicture(System.Drawing.Image)">
            <summary>
             Maps from a System.Drawing.Image to an OLE IPicture
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.GetIPictureFromCursor(System.Windows.Forms.Cursor)">
            <summary>
             Maps from a System.Drawing.Cursor to an OLE IPicture
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.GetIPictureDispFromPicture(System.Drawing.Image)">
            <summary>
             Maps from a System.Drawing.Image to an OLE IPictureDisp
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.GetPictureFromIPicture(System.Object)">
            <summary>
             Maps from an OLE IPicture to a System.Drawing.Image
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.GetPictureFromIPictureDisp(System.Object)">
            <summary>
             Maps from an OLE IPictureDisp to a System.Drawing.Image
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.GetColorFromOleColor(System.UInt32)">
            <summary>
             Maps from an OLE COLOR to a System.Drawing.Color
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.GetOleColorFromColor(System.Drawing.Color)">
            <summary>
             Maps from an System.Drawing.Color to an OLE COLOR
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.GetIFontFromFont(System.Drawing.Font)">
            <summary>
             Maps from a System.Drawing.Font object to an OLE IFont
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.GetFontFromIFont(System.Object)">
            <summary>
             Maps from an OLE IFont to a System.Drawing.Font object
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.GetIFontDispFromFont(System.Drawing.Font)">
            <summary>
             Maps from a System.Drawing.Font object to an OLE IFontDisp
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.GetFontFromIFontDisp(System.Object)">
            <summary>
             Maps from an IFontDisp to a System.Drawing.Font object
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.GetOADateFromTime(System.DateTime)">
            <summary>
             Maps from a DateTime object to an OLE DATE (expressed as a double)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.GetTimeFromOADate(System.Double)">
            <summary>
             Maps from an OLE DATE (expressed as a double) to a DateTime object
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AxHost.OleInterfaces">
            <summary>
             This private class encapsulates all of the ole interfaces so that users cannot access
             and call them directly.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AxHost.State">
            <summary>
             The class which encapsulates the persisted state of the underlying activeX control
             An instance of this class my be obtained either by calling getOcxState on an
             AxHost object, or by reading in from a stream.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.State.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            Constructor used in deserialization
        </member>
        <member name="M:System.Windows.Forms.AxHost.State.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             ISerializable private implementation
            </summary>
        </member>
        <member name="T:System.Windows.Forms.AxHost.StateConverter">
            <summary>
             StateConverter is a class that can be used to convert State from one data type to another.
             Access this class through the TypeDescriptor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.StateConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Gets a value indicating whether this converter can
             convert an object in the given source type to the native type of the converter
             using the context.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.StateConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Gets a value indicating whether this converter can
             convert an object to the given destination type using the context.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.StateConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
             Converts the given object to the converter's native type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AxHost.StateConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type.  The most common types to convert
             are to and from a string object.  The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string.  If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.BaseCollection">
            <summary>
             Provides the base functionality for creating collections.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BaseCollection.Count">
            <summary>
             Gets the total number of elements in a collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BaseCollection.GetEnumerator">
            <summary>
             Gets an IEnumerator for the collection.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Binding">
            <summary>
             Represents a simple binding of a value in a list and the property of a control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Binding'/> class
             that binds a property on the owning control to a property on a data source.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Binding.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Binding'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Binding.BindableComponent">
            <summary>
             Gets the control to which the binding belongs.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Binding.Control">
            <summary>
             Gets the control to which the binding belongs.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Binding.IsComponentCreated(System.Windows.Forms.IBindableComponent)">
            <summary>
             Is the binadable component in a 'created' (ready-to-use) state? For controls,
             this depends on whether the window handle has been created yet. For everything
             else, we'll assume they are always in a created state.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Binding.ComponentCreated">
             Instance-specific property equivalent to the static method above
        </member>
        <member name="P:System.Windows.Forms.Binding.IsBinding">
            <summary>
             Gets a value indicating whether the binding is active.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Binding.BindingManagerBase">
            <summary>
             Gets the <see cref='T:System.Windows.Forms.BindingManagerBase'/> of this binding that
             allows enumeration of a set of bindings.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Binding.PropertyName">
            <summary>
             Gets or sets the property on the control to bind to.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Binding.PullData">
             <summary>
              Pulls data from control property into data source. Returns bool indicating whether caller
              should cancel the higher level operation. Raises a BindingComplete event regardless of
              success or failure.
            
              When the user leaves the control, it will raise a Validating event, calling the Binding.Target_Validate
              method, which in turn calls PullData. PullData is also called by the binding manager when pulling data
              from all bounds properties in one go.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Binding.PushData">
            <summary>
             Pushes data from data source into control property. Returns bool indicating whether caller
             should cancel the higher level operation. Raises a BindingComplete event regardless of
             success or failure.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Binding.ReadValue">
            <summary>
             Reads current value from data source, and sends this to the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Binding.WriteValue">
            <summary>
             Takes current value from control, and writes this out to the data source.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Binding.Target_Validate(System.Object,System.ComponentModel.CancelEventArgs)">
             <summary>
              Event handler for the Control.Validating event on the control that we are bound to.
            
              If value in control has changed, we want to send that value back up to the data source
              when the control undergoes validation (eg. on loss of focus). If an error occurs, we
              will set e.Cancel=true to make validation fail and force focus to remain on the control.
            
              NOTE: If no error occurs, we MUST leave e.Cancel alone, to respect any value put in there
              by event handlers high up the event chain.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Binding.BindToObject.GetErrorText(System.Object)">
            <summary>
             Returns any data error info on the data source for the bound data field
             in the current row
            </summary>
        </member>
        <member name="T:System.Windows.Forms.BindingCompleteContext">
            <summary>
             Indicates the direction of a binding operation.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BindingCompleteContext.ControlUpdate">
            <summary>
             Control value is being updated from data source value.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BindingCompleteContext.DataSourceUpdate">
            <summary>
             Data source value is being updated from control value.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.BindingCompleteEventArgs">
            <summary>
             Provides information about a Binding Completed event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingCompleteEventArgs.#ctor(System.Windows.Forms.Binding,System.Windows.Forms.BindingCompleteState,System.Windows.Forms.BindingCompleteContext,System.String,System.Exception,System.Boolean)">
            <summary>
             Constructor for BindingCompleteEventArgs.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingCompleteEventArgs.#ctor(System.Windows.Forms.Binding,System.Windows.Forms.BindingCompleteState,System.Windows.Forms.BindingCompleteContext,System.String,System.Exception)">
            <summary>
             Constructor for BindingCompleteEventArgs.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingCompleteEventArgs.#ctor(System.Windows.Forms.Binding,System.Windows.Forms.BindingCompleteState,System.Windows.Forms.BindingCompleteContext,System.String)">
            <summary>
             Constructor for BindingCompleteEventArgs.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingCompleteEventArgs.#ctor(System.Windows.Forms.Binding,System.Windows.Forms.BindingCompleteState,System.Windows.Forms.BindingCompleteContext)">
            <summary>
             Constructor for BindingCompleteEventArgs.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.BindingCompleteEventHandler">
            <summary>
             Represents a method that will handle the Binding Complete event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.BindingCompleteState">
            <summary>
             Indicates the result of a completed binding operation.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BindingCompleteState.Success">
            <summary>
             Binding operation completed successfully.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BindingCompleteState.DataError">
            <summary>
             Binding operation failed with a data error.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BindingCompleteState.Exception">
            <summary>
             Binding operation failed with an exception.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.BindingContext">
            <summary>
             Manages the collection of System.Windows.Forms.BindingManagerBase
             objects for a Win Form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingContext.#ctor">
            <summary>
             Initializes a new instance of the System.Windows.Forms.BindingContext class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingContext.System#Collections#ICollection#Count">
            <summary>
             Gets the total number of System.Windows.Forms.BindingManagerBases objects.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingContext.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
             Copies the elements of the collection into a specified array, starting
             at the collection index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingContext.System#Collections#IEnumerable#GetEnumerator">
            <summary>
             Gets an enumerator for the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingContext.IsReadOnly">
            <summary>
             Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingContext.System#Collections#ICollection#IsSynchronized">
            <summary>
             Gets a value indicating whether the collection is synchronized.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingContext.System#Collections#ICollection#SyncRoot">
            <summary>
             Gets an object to use for synchronization (thread safety).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingContext.Item(System.Object)">
            <summary>
             Gets the System.Windows.Forms.BindingManagerBase associated with the specified
             data source.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingContext.Item(System.Object,System.String)">
            <summary>
             Gets the System.Windows.Forms.BindingManagerBase associated with the specified
             data source and data member.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingContext.Add(System.Object,System.Windows.Forms.BindingManagerBase)">
            <summary>
             Adds the listManager to the collection. An ArgumentNullException is thrown if this
             listManager is null. An exception is thrown if a listManager to the same target
             and Property as an existing listManager or if the listManager's column isn't a
             valid column given this DataSource.Table's schema.
             Fires the CollectionChangedEvent.
            </summary>
            <remarks>
             This method is obsolete and unused.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.BindingContext.AddCore(System.Object,System.Windows.Forms.BindingManagerBase)">
            <remarks>
             This method is obsolete and unused.
            </remarks>
        </member>
        <member name="E:System.Windows.Forms.BindingContext.CollectionChanged">
            <summary>
             Occurs when the collection has changed.
            </summary>
            <remarks>
             This method is obsolete and unused.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.BindingContext.Clear">
            <summary>
             Clears the collection of any bindings.
             Fires the CollectionChangedEvent.
            </summary>
            <remarks>
             This method is obsolete and unused.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.BindingContext.ClearCore">
            <summary>
             Clears the collection.
            </summary>
            <remarks>
             This method is obsolete and unused.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.BindingContext.Contains(System.Object)">
            <summary>
             Gets a value indicating whether the System.Windows.Forms.BindingContext contains
             the specified data source.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingContext.Contains(System.Object,System.String)">
            <summary>
             Gets a value indicating whether the System.Windows.Forms.BindingContext
             contains the specified data source and data member.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingContext.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
             This method is called whenever the collection changes. Overriders of this method
             should call the base implementation of this method.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingContext.Remove(System.Object)">
            <summary>
             Removes the given listManager from the collection.
             An ArgumentNullException is thrown if this listManager is null. An ArgumentException
             is thrown if this listManager doesn't belong to this collection.
             The CollectionChanged event is fired if it succeeds.
            </summary>
            <remarks>
             This method is obsolete and unused.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.BindingContext.RemoveCore(System.Object)">
            <remarks>
             This method is obsolete and unused.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.BindingContext.EnsureListManager(System.Object,System.String)">
            <summary>
             Create a suitable binding manager for the specified dataSource/dataMember combination.
             - If one has already been created and cached by this BindingContext, return that
             instead.
             - If the data source is an ICurrencyManagerProvider, just delegate to the data
             source.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingContext.UpdateBinding(System.Windows.Forms.BindingContext,System.Windows.Forms.Binding)">
            <summary>
             Associates a Binding with a different BindingContext. Intended for use by components
             that support IBindableComponent, to update their Bindings when the value of
             IBindableComponent.BindingContext is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingManagerBase.OnBindingsCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
             <summary>
              BindingComplete events on individual Bindings are propagated up through the BindingComplete event on
              the owning BindingManagerBase. To do this, we have to track changes to the bindings collection, adding
              or removing handlers on items in the collection as appropriate.
            
              For the Add and Remove cases, we hook the collection 'changed' event, and add or remove handler for
              specific binding.
            
              For the Refresh case, we hook both the 'changing' and 'changed' events, removing handlers for all
              items that were in the collection before the change, then adding handlers for whatever items are
              in the collection after the change.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.#ctor">
            <summary>
             Creates an empty BindingNavigator tool strip.
             Call AddStandardItems() to add standard tool strip items.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.#ctor(System.Windows.Forms.BindingSource)">
            <summary>
             Creates a BindingNavigator strip containing standard items, bound to the specified BindingSource.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.#ctor(System.ComponentModel.IContainer)">
            <summary>
             Creates an empty BindingNavigator tool strip, and adds the strip to the specified container.
             Call AddStandardItems() to add standard tool strip items.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.#ctor(System.Boolean)">
            <summary>
             Creates a BindingNavigator strip, optionally containing a set of standard tool strip items.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.BeginInit">
            <summary>
             ISupportInitialize support. Disables updates to tool strip items during initialization.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.EndInit">
            <summary>
             ISupportInitialize support. Enables updates to tool strip items after initialization.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.Dispose(System.Boolean)">
            <summary>
             Unhooks the BindingNavigator from the BindingSource.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.AddStandardItems">
             <summary>
              Adds standard set of tool strip items to a BindingNavigator tool strip, for basic
              navigation operations such as Move First, Move Next, Add New, etc.
            
              This method is called by the Windows Form Designer when a new BindingNavigator is
              added to a Form. When creating a BindingNavigator programmatically, this method
              must be called explicitly.
            
              Override this method in derived classes to define additional or alternative standard items.
              To ensure optimal design-time support for your derived class, make sure each item has a
              meaningful value in its Name property. At design time, this will be used to generate a unique
              name for the corresponding member variable. The item's Name property will then be updated
              to match the name given to the member variable.
            
              Note: This method does NOT remove any previous items from the strip, or suspend
              layout while items are being added. Those are responsibilities of the caller.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingNavigator.BindingSource">
            <summary>
             The BindingSource who's list we are currently navigating, or null.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingNavigator.MoveFirstItem">
            <summary>
             The ToolStripItem that triggers the 'Move first' action, or null.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingNavigator.MovePreviousItem">
            <summary>
             The ToolStripItem that triggers the 'Move previous' action, or null.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingNavigator.MoveNextItem">
            <summary>
             The ToolStripItem that triggers the 'Move next' action, or null.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingNavigator.MoveLastItem">
            <summary>
             The ToolStripItem that triggers the 'Move last' action, or null.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingNavigator.AddNewItem">
            <summary>
             The ToolStripItem that triggers the 'Add new' action, or null.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingNavigator.DeleteItem">
            <summary>
             The ToolStripItem that triggers the 'Delete' action, or null.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingNavigator.PositionItem">
            <summary>
             The ToolStripItem that displays the current position, or null.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingNavigator.CountItem">
            <summary>
             The ToolStripItem that displays the total number of items, or null.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingNavigator.CountItemFormat">
            <summary>
             Formatting to apply to count displayed in the CountItem tool strip item.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.BindingNavigator.RefreshItems">
            <summary>
             Event raised when the state of the tool strip items needs to be
             refreshed to reflect the current state of the data.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.RefreshItemsCore">
            <summary>
             Refreshes the state of the standard items to reflect the current state of the data.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.BindingNavigator.OnRefreshItems" -->
        <member name="M:System.Windows.Forms.BindingNavigator.Validate">
            <summary>
             Triggers form validation. Used by the BindingNavigator's standard items when clicked. If a validation error occurs
             on the form, focus remains on the active control and the standard item does not perform its standard click action.
             Custom items may also use this method to trigger form validation and check for success before performing an action.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.AcceptNewPosition">
            <summary>
             Accept new row position entered into PositionItem.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.CancelNewPosition">
            <summary>
             Cancel new row position entered into PositionItem.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.OnMoveFirst(System.Object,System.EventArgs)">
            <summary>
             Navigates to first item in BindingSource's list when the MoveFirstItem is clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.OnMovePrevious(System.Object,System.EventArgs)">
            <summary>
             Navigates to previous item in BindingSource's list when the MovePreviousItem is clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.OnMoveNext(System.Object,System.EventArgs)">
            <summary>
             Navigates to next item in BindingSource's list when the MoveNextItem is clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.OnMoveLast(System.Object,System.EventArgs)">
            <summary>
             Navigates to last item in BindingSource's list when the MoveLastItem is clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.OnAddNew(System.Object,System.EventArgs)">
            <summary>
             Adds new item to BindingSource's list when the AddNewItem is clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.OnDelete(System.Object,System.EventArgs)">
            <summary>
             Deletes current item from BindingSource's list when the DeleteItem is clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.OnPositionKey(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
             Navigates to specific item in BindingSource's list when a value is entered into the PositionItem.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.OnPositionLostFocus(System.Object,System.EventArgs)">
            <summary>
             Navigates to specific item in BindingSource's list when a value is entered into the PositionItem.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.OnBindingSourceStateChanged(System.Object,System.EventArgs)">
            <summary>
             Refresh tool strip items when something changes in the BindingSource.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.OnBindingSourceListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
             Refresh tool strip items when something changes in the BindingSource's list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.RefreshItemsInternal">
            <summary>
             Refresh the state of the items when the state of the data changes.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.WireUpButton(System.Windows.Forms.ToolStripItem@,System.Windows.Forms.ToolStripItem,System.EventHandler)">
            <summary>
             Wire up some member variable to the specified button item, hooking events
             on the new button and unhooking them from the previous button, if required.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.WireUpTextBox(System.Windows.Forms.ToolStripItem@,System.Windows.Forms.ToolStripItem,System.Windows.Forms.KeyEventHandler,System.EventHandler)">
            <summary>
             Wire up some member variable to the specified text box item, hooking events
             on the new text box and unhooking them from the previous text box, if required.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.WireUpLabel(System.Windows.Forms.ToolStripItem@,System.Windows.Forms.ToolStripItem)">
            <summary>
             Wire up some member variable to the specified label item, hooking events
             on the new label and unhooking them from the previous label, if required.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingNavigator.WireUpBindingSource(System.Windows.Forms.BindingSource@,System.Windows.Forms.BindingSource)">
            <summary>
             Wire up some member variable to the specified binding source, hooking events
             on the new binding source and unhooking them from the previous one, if required.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.BindingsCollection">
            <summary>
             Represents a collection of data bindings on a control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingsCollection.List">
            <summary>
             Gets the bindings in the collection as an object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingsCollection.Item(System.Int32)">
            <summary>
             Gets the <see cref='T:System.Windows.Forms.Binding'/> at the specified index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingsCollection.AddCore(System.Windows.Forms.Binding)">
            <summary>
             Adds a <see cref='T:System.Windows.Forms.Binding'/> to the collection.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.BindingsCollection.CollectionChanging">
            <summary>
             Occurs when the collection is about to change.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.BindingsCollection.CollectionChanged">
            <summary>
             Occurs when the collection is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingsCollection.ClearCore">
            <summary>
             Clears the collection of any members.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingsCollection.OnCollectionChanging(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.BindingsCollection.CollectionChanging'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingsCollection.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.BindingsCollection.CollectionChanged'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingsCollection.RemoveCore(System.Windows.Forms.Binding)">
            <summary>
             Removes the specified <see cref='T:System.Windows.Forms.Binding'/> from the collection.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.BindingSource.CreateBindingList(System.Type)" -->
        <member name="M:System.Windows.Forms.BindingSource.CreateInstanceOfType(System.Type)">
            <summary>
             Create an object of the given type. Throw an exception if this fails.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingSource.Dispose(System.Boolean)">
            <summary>
             Unhook BindingSource from its data source, since the data source could be some
             global object who's lifetime exceeds the lifetime of the parent form. Otherwise
             the BindingSource (and any components bound through it) will end up in limbo,
             still processing list change events, etc. And when unhooking from the data source,
             take care not to trigger any events that could confuse compoents bound to us.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingSource.EnsureInnerList">
            <summary>
             Ensures that the inner list has been set up. Handles the case of ResetList() being
             called during initialization, which sets a flag to defer ResetList() work until
             after initialization is complete.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingSource.Find(System.String,System.Object)">
            <summary>
             Overload of IBindingList.Find that takes a string instead of a property
             descriptor (for convenience).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingSource.GetListFromType(System.Type)">
            <summary>
             Given a type, create a list based on that type. If the type represents a list type,
             we create an instance of that type (or throw if we cannot instance that type).
             Otherwise we assume the type represents the item type, in which case we create
             a typed BindingList of that item type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingSource.GetListFromEnumerable(System.Collections.IEnumerable)">
            <summary>
             Creates a list based on an enumerable object. We rip through the enumerable,
             extract all its items, and stuff these items into a typed BindingList, using
             the type of the first item to determine the type of the list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingSource.IsDataMemberValid">
            <summary>
             Used when we change data sources or when the properties of the current data source change.
             Decides whether this would be a good time to blow away the data member field, since it
             might not refer to a valid data source property any more.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingSource.OnSimpleListChanged(System.ComponentModel.ListChangedType,System.Int32)">
            <remarks>
             This method is used to fire ListChanged events when the inner list
             is not an IBindingList (and therefore cannot fire them itself).
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.BindingSource.ParentCurrencyManager_CurrentItemChanged(System.Object,System.EventArgs)">
            <summary>
             When the data member is set, and the data source signals a change of current item,
             we need to query its new current item for the list specified by the data member.
             Or if there is no longer a current item on the data source, we use an empty list.
             In either case, we only have to change lists, not metadata, since we can assume
             that the new list has the same item properties as the old list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingSource.ParentCurrencyManager_MetaDataChanged(System.Object,System.EventArgs)">
            <summary>
             When the data source signals a change of metadata, we need to re-query for the
             list specified by the data member field. If the data member is no longer valid
             under the data source's new metadata, we have no choice but to clear the data
             member field and just bind directly to the data source itself.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingSource.ResetList">
            <summary>
             Binds the BindingSource to the list specified by its DataSource and DataMember
             properties.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingSource.SetList(System.Collections.IList,System.Boolean,System.Boolean)">
            <summary>
             Binds the BindingSource to the specified list, rewiring internal event handlers,
             firing any appropriate external events, and updating all relevant field members.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.BindingSource.HookItemChangedEventsForNewCurrent" -->
        <member name="M:System.Windows.Forms.BindingSource.UnhookItemChangedEventsForOldCurrent">
            <summary>
             Unhooks property changed events for the OLD current item, if necessary
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingSource.System#ComponentModel#ISupportInitialize#BeginInit">
            <summary>
             Begin bulk member initialization - deferring calculation of inner list until
             EndInit is reached
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingSource.EndInitCore">
            <summary>
             End bulk member initialization - updating the inner list and notifying any
             dependents of our completion
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingSource.System#ComponentModel#ISupportInitialize#EndInit">
            <summary>
             Check to see if DataSource has completed its initialization, before ending our
             initialization.
             If DataSource is still initializing, hook its Initialized event and wait for it
             to signal completion.
             If DataSource is already initialized, just go ahead and complete our
             initialization now.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.BindingSource.DataSource_Initialized(System.Object,System.EventArgs)">
            <summary>
             Respond to late completion of the DataSource's initialization, by completing our
             own initialization. This situation can arise if the call to the DataSource's
             EndInit() method comes after the call to the BindingSource's EndInit() method
             (since code-generated ordering of these calls is non-deterministic).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.BindingSource.System#ComponentModel#ISupportInitializeNotification#IsInitialized">
            <summary>
             Report to any dependents whether we are still in bulk member initialization
            </summary>
        </member>
        <member name="E:System.Windows.Forms.BindingSource.System#ComponentModel#ISupportInitializeNotification#Initialized">
            <summary>
             Event used to signal to our dependents that we have completed bulk member
             initialization and updated our inner list
            </summary>
        </member>
        <member name="T:System.Windows.Forms.BootMode">
            <summary>
             Specifies the mode to start the computer in.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BootMode.Normal">
            <summary>
             Starts the computer in standard mode.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BootMode.FailSafe">
            <summary>
             Starts the computer by using only the basic files and drivers.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BootMode.FailSafeWithNetwork">
            <summary>
             Starts the computer by using the basic files, drivers and the services
             and drivers necessary to start networking.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Border3DSide">
            <summary>
             Specifies the sides of a rectangle to apply a three-dimensional border to.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Border3DSide.Left">
            <summary>
             A three-dimensional border on the left edge of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Border3DSide.Top">
            <summary>
             A three-dimensional border on the top edge of the rectangle.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Border3DSide.Right">
            <summary>
             A three-dimensional border on the right side of the rectangle.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Border3DSide.Bottom">
            <summary>
             A three-dimensional border on the bottom side of the rectangle.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Border3DSide.Middle">
            <summary>
             The interior of the rectangle is filled with the color defined for
             three-dimensional controls instead of the background color for the form.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Border3DSide.All">
            <summary>
             A three-dimensional border on all four edges and fill the middle of
             the rectangle with the color defeined for three-dimensional controls.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Border3DStyle">
            <summary>
             Specifies the style of a three-dimensional border.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Border3DStyle.Adjust">
            <summary>
             The border is drawn outside the specified rectangle, preserving the
             dimensions of the rectangle for drawing.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Border3DStyle.Bump">
            <summary>
             The border has a raised outer edge and a sunken inner edge.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Border3DStyle.Etched">
            <summary>
             The border has a with a sunken inner edge and a raised outer edge.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Border3DStyle.Flat">
            <summary>
             The border has a with no three-dimensional effects.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Border3DStyle.Raised">
            <summary>
             The border has a with raised inner and outer edges.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Border3DStyle.RaisedInner">
            <summary>
             The border has a with a raised inner edge and no outer edge.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Border3DStyle.RaisedOuter">
            <summary>
             The border has a with a raised outer edge and no inner edge.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Border3DStyle.Sunken">
            <summary>
             The border has a with sunken inner and outer edges.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Border3DStyle.SunkenInner">
            <summary>
             The border has a with a sunken inner edge and no outer edge.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Border3DStyle.SunkenOuter">
            <summary>
             The border has a with a sunken outer edge and no inner edge.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.BorderStyle">
            <summary>
             Specifies the border style for a control or form.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BorderStyle.None">
            <summary>
             No border.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BorderStyle.FixedSingle">
            <summary>
             A single-line border.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BorderStyle.Fixed3D">
            <summary>
             A three-dimensional border.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.BoundsSpecified">
            <summary>
             Specifies the bounds of the control to use when defining a control's size
             and position.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BoundsSpecified.X">
            <summary>
             Specifies the left edge of the control is defined.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BoundsSpecified.Y">
            <summary>
             Specifies the top edge of the control of the control is defined.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BoundsSpecified.Width">
            <summary>
             Specifies the width of the control is defined.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BoundsSpecified.Height">
            <summary>
             Specifies the height of the control is defined.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BoundsSpecified.Location">
            <summary>
             Both <see cref='F:System.Windows.Forms.BoundsSpecified.X'/> and <see cref='F:System.Windows.Forms.BoundsSpecified.Y'/> coordinates of the
             control are defined.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BoundsSpecified.Size">
            <summary>
             Both <see cref='P:System.Windows.Forms.Control.Width'/> and <see cref='P:System.Windows.Forms.Control.Height'/>
             property values of the control are defined.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BoundsSpecified.All">
            <summary>
             Both <see cref='P:System.Windows.Forms.Control.Location'/> and <see cref='P:System.Windows.Forms.Control.Size'/>
             property values are defined.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.BoundsSpecified.None">
            <summary>
             No bounds are specified.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Button">
            <summary>
             Represents a
             Windows button.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Button.dialogResult">
            <summary>
             The dialog result that will be sent to the parent dialog form when
             we are clicked.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Button.systemSize">
            <summary>
             For buttons whose FaltStyle = FlatStyle.Flat, this property specifies the size, in pixels
             of the border around the button.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Button.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Button'/>
             class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Button.AutoSizeMode">
            <summary>
             Allows the control to optionally shrink when AutoSize is true.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Button.CreateParams">
            <summary>
             This is called when creating a window. Inheriting classes can overide
             this to add extra functionality, but should not forget to first call
             base.CreateParams() to make sure the control continues to work
             correctly.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Button.DialogResult">
            <summary>
             Gets or sets a value that is returned to the
             parent form when the button
             is clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Button.OnMouseEnter(System.EventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Button.OnMouseLeave(System.EventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)'/> event.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Button.DoubleClick">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.Button.MouseDoubleClick">
            <hideinheritance/>
        </member>
        <member name="M:System.Windows.Forms.Button.NotifyDefault(System.Boolean)">
            <summary>
             Notifies the <see cref='T:System.Windows.Forms.Button'/>
             whether it is the default button so that it can adjust its appearance
             accordingly.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Button.OnClick(System.EventArgs)">
            <summary>
             This method actually raises the Click event. Inheriting classes should
             override this if they wish to be notified of a Click event. (This is far
             preferable to actually adding an event handler.) They should not,
             however, forget to call base.onClick(e); before exiting, to ensure that
             other recipients do actually get the event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Button.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.ButtonBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Button.RescaleConstantsForDpi(System.Int32,System.Int32)">
            <summary>
             When overridden in a derived class, handles rescaling of any magic numbers used in control painting.
             Must call the base class method to get the current DPI values. This method is invoked only when
             Application opts-in into the Per-monitor V2 support, targets .NETFX 4.7 and has
             EnableDpiChangedMessageHandling and EnableDpiChangedHighDpiImprovements config switches turned on.
            </summary>
            <param name="deviceDpiOld">Old DPI value</param>
            <param name="deviceDpiNew">New DPI value</param>
        </member>
        <member name="M:System.Windows.Forms.Button.PerformClick">
            <summary>
             Generates a <see cref='E:System.Windows.Forms.Control.Click'/> event for a
             button.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Button.ProcessMnemonic(System.Char)">
            <summary>
             Lets a control process mnmemonic characters. Inheriting classes can
             override this to add extra functionality, but should not forget to call
             base.ProcessMnemonic(charCode); to ensure basic functionality
             remains unchanged.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Button.ToString">
            <summary>
             Provides some interesting information for the Button control in
             String form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Button.WndProc(System.Windows.Forms.Message@)">
            <summary>
             The button's window procedure.  Inheriting classes can override this
             to add extra functionality, but should not forget to call
             base.wndProc(m); to ensure the button continues to function properly.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ButtonBase">
            <summary>
             Implements the basic functionality required by a button control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonBase.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.ButtonBase'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.AutoEllipsis">
            <summary>
             This property controls the activation handling of bleedover for the text that
             extends beyond the width of the button.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.AutoSize">
            <summary>
             Indicates whether the control is automatically resized to fit its contents
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.BackColor">
            <summary>
             The background color of this control. This is an ambient property and
             will always return a non-null value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.FlatStyle">
            <summary>
             Gets or
             sets
             the flat style appearance of the button control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.Image">
            <summary>
             Gets or sets the image
             that is displayed on a button control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.ImageAlign">
            <summary>
             Gets or sets the alignment of the image on the button control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.ImageIndex">
            <summary>
             Gets or sets the image list index value of the image
             displayed on the button control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.ImageKey">
            <summary>
             Gets or sets the image list index key of the image
             displayed on the button control.  Note - setting this unsets the ImageIndex
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.ImageList">
            <summary>
             Gets or sets the <see cref='T:System.Windows.Forms.ImageList'/> that contains the <see cref='T:System.Drawing.Image'/> displayed on a button control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.IsMnemonicsListenerAxSourced">
            <summary>
             Specifies whether the control is willing to process mnemonics when hosted in an container ActiveX (Ax Sourcing).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.OverChangeRectangle">
            <summary>
             The area of the button encompassing any changes between the button's
             resting appearance and its appearance when the mouse is over it.
             Consider overriding this property if you override any painting methods,
             or your button may not paint correctly or may have flicker. Returning
             ClientRectangle is safe for correct painting but may still cause flicker.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.DownChangeRectangle">
            <summary>
             The area of the button encompassing any changes between the button's
             appearance when the mouse is over it but not pressed and when it is pressed.
             Consider overriding this property if you override any painting methods,
             or your button may not paint correctly or may have flicker. Returning
             ClientRectangle is safe for correct painting but may still cause flicker.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.ShowToolTip">
            <summary>
             Indicates whether the tooltip should be shown
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.TextAlign">
            <summary>
             Gets or sets the alignment of the text on the button control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.UseMnemonic">
            <summary>
             Gets or sets a value indicating whether an ampersand (&amp;) included in the text of
             the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonBase.OnGotFocus(System.EventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.ButtonBase.OnGotFocus(System.EventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonBase.OnLostFocus(System.EventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.ButtonBase.OnLostFocus(System.EventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonBase.OnMouseEnter(System.EventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonBase.OnMouseLeave(System.EventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonBase.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.ButtonBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonBase.ResetFlagsandPaint">
            <summary>
             Used for quick re-painting of the button after the pressed state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonBase.PaintControl(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Central paint dispatcher to one of the three styles of painting.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonBase.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.ButtonBase.OnKeyDown(System.Windows.Forms.KeyEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonBase.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.ButtonBase.OnKeyUp(System.Windows.Forms.KeyEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.ButtonBase.OnPaint(System.Windows.Forms.PaintEventArgs)'/> event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.UseCompatibleTextRendering">
            <summary>
             Determines whether to use compatible text rendering engine (GDI+) or not (GDI).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonBase.SupportsUseCompatibleTextRendering">
            <summary>
             Determines whether the control supports rendering text using GDI+ and GDI.
             This is provided for container controls to iterate through its children to set UseCompatibleTextRendering to the same
             value if the child control supports it.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ButtonBorderStyle">
            <summary>
             Specifies the border style for a button control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ButtonBorderStyle.None">
            <summary>
             No border.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ButtonBorderStyle.Dotted">
            <summary>
             A dotted-line border.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ButtonBorderStyle.Dashed">
            <summary>
             A dashed border.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ButtonBorderStyle.Solid">
            <summary>
             A solid border.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ButtonBorderStyle.Inset">
            <summary>
             A sunken border.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ButtonBorderStyle.Outset">
            <summary>
             A raised border.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ButtonInternal.ButtonBaseAdapter">
            <summary>
                   PLEASE READ
                   -----------
             This class is used for more than just Button:
             it's used for things that derive from ButtonBase,
             parts of ToolStripItem, and parts of the DataGridView.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.CreateStringFormat">
            <summary>
             Get StringFormat object for rendering text using GDI+ (Graphics).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.CreateTextFormatFlags">
            <summary>
             Get TextFormatFlags flags for rendering text using GDI (TextRenderer).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.Draw3DLiteBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.ColorData,System.Boolean)">
            <summary>
             Draws a border for the in the 3D style of the popup button.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.DrawFlatBorderWithSize(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Int32)">
            <summary>
             Draws the flat border with specified bordersize.
             This function gets called only for Flatstyle == Flatstyle.Flat.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.DrawFocus(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Draws the focus rectangle if the control has focus.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.DrawImage(System.Drawing.Graphics,System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.LayoutData)">
            <summary>
             Draws the button's image.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.DrawText(System.Drawing.Graphics,System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.LayoutData,System.Drawing.Color,System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.ColorData)">
            <summary>
             Draws the button's text. Color c is the foreground color set with enabled/disabled state in mind.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.LayoutOptions.StringFormat">
            <summary>
             We don't cache the StringFormat itself because we don't have a deterministic way of disposing it, instead
             we cache the flags that make it up and create it on demand so it can be disposed by calling code.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.LayoutOptions.TextFormatFlags">
            <summary>
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ButtonInternal.CheckableControlBaseAdapter">
            <summary>
             Common class for RadioButtonBaseAdapter and CheckBoxBaseAdapter
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ButtonRenderer">
            <summary>
             This is a rendering class for the Button control. It works downlevel too (obviously
             without visual styles applied.)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ButtonRenderer.RenderMatchingApplicationState">
            <summary>
             If this property is true, then the renderer will use the setting from Application.RenderWithVisualStyles to
             determine how to render.
             If this property is false, the renderer will always render with visualstyles.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonRenderer.IsBackgroundPartiallyTransparent(System.Windows.Forms.VisualStyles.PushButtonState)">
            <summary>
             Returns true if the background corresponding to the given state is partially transparent, else false.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonRenderer.DrawParentBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.Control)">
            <summary>
             This is just a convenience wrapper for VisualStyleRenderer.DrawThemeParentBackground. For downlevel,
             this isn't required and does nothing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonRenderer.DrawButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.PushButtonState)">
            <summary>
             Renders a Button control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonRenderer.DrawButtonForHandle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Windows.Forms.VisualStyles.PushButtonState,System.IntPtr)">
            <summary>
             Method to draw visualstyle themes in case of per-monitor scenarios where Hwnd is necessary
            </summary>
            <param name="g"> graphics object</param>
            <param name="bounds"> button bounds</param>
            <param name="focused"> is focused?</param>
            <param name="state"> state</param>
            <param name="handle"> handle to the control</param>
        </member>
        <member name="M:System.Windows.Forms.ButtonRenderer.DrawButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Windows.Forms.VisualStyles.PushButtonState)">
            <summary>
             Renders a Button control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonRenderer.DrawButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Boolean,System.Windows.Forms.VisualStyles.PushButtonState)">
            <summary>
             Renders a Button control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonRenderer.DrawButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Windows.Forms.TextFormatFlags,System.Boolean,System.Windows.Forms.VisualStyles.PushButtonState)">
            <summary>
             Renders a Button control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonRenderer.DrawButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,System.Drawing.Rectangle,System.Boolean,System.Windows.Forms.VisualStyles.PushButtonState)">
            <summary>
             Renders a Button control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonRenderer.DrawButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Drawing.Image,System.Drawing.Rectangle,System.Boolean,System.Windows.Forms.VisualStyles.PushButtonState)">
            <summary>
             Renders a Button control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ButtonRenderer.DrawButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Windows.Forms.TextFormatFlags,System.Drawing.Image,System.Drawing.Rectangle,System.Boolean,System.Windows.Forms.VisualStyles.PushButtonState)">
            <summary>
             Renders a Button control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ButtonState">
            <summary>
             Specifies the appearance of a button.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ButtonState.Checked">
            <summary>
             The button has a checked or latched appearance. Use this appearance to
             show that a toggle button has been pressed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ButtonState.Flat">
            <summary>
             The button has a flat, two-dimensional appearance.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ButtonState.Inactive">
            <summary>
             The button is inactive (grayed).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ButtonState.Normal">
            <summary>
             The button has its normal appearance (three-dimensional and not pressed).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ButtonState.Pushed">
            <summary>
             The button is currently pressed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ButtonState.All">
            <summary>
             All viable flags in the bit mask are used.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.CacheVirtualItemsEventHandler">
            <summary>
             Represents a method that will handle the <see cref="E:System.Windows.Forms.ListView.CacheVirtualItems"/> event of a <see cref="T:System.Windows.Forms.ListView"/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.CaptionButton">
            <summary>
             Specifies the type of caption button to display.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CaptionButton.Close">
            <summary>
             A Close button.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CaptionButton.Help">
            <summary>
             A Help button.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CaptionButton.Maximize">
            <summary>
             A Maximize button.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CaptionButton.Minimize">
            <summary>
             A Minimize button.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CaptionButton.Restore">
            <summary>
             A Restore button.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.CharacterCasing">
            <summary>
             Specifies the case of characters in a Textbox control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CharacterCasing.Normal">
            <summary>
             The case of characters is left unchanged.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CharacterCasing.Upper">
            <summary>
             Converts all characters to uppercase.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CharacterCasing.Lower">
            <summary>
             Converts all characters to lowercase.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.CheckBox">
            <summary>
             Represents a Windows
             check box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBox.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.CheckBox'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckBox.Appearance">
            <summary>
             Gets
             or sets the value that determines the appearance of a
             check box control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckBox.AutoCheck">
            <summary>
             Gets or sets a value indicating whether the <see cref='P:System.Windows.Forms.CheckBox.Checked'/> or <see cref='P:System.Windows.Forms.CheckBox.CheckState'/>
             value and the check box's appearance are automatically
             changed when it is clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckBox.CheckAlign">
            <summary>
             Gets or sets
             the horizontal and vertical alignment of a check box on a check box
             control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckBox.Checked">
            <summary>
             Gets
             or sets a value indicating whether the
             check box
             is checked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckBox.CheckState">
            <summary>
             Gets
             or sets a value indicating whether the check box is checked.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.CheckBox.DoubleClick">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.CheckBox.MouseDoubleClick">
            <hideinheritance/>
        </member>
        <member name="P:System.Windows.Forms.CheckBox.CreateParams">
            <summary>
             Gets the information used to create the handle for the
             <see cref='T:System.Windows.Forms.CheckBox'/>
             control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckBox.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBox.RescaleConstantsForDpi(System.Int32,System.Int32)">
            <summary>
             When overridden in a derived class, handles rescaling of any magic numbers used in control painting.
             For CheckBox controls, scale the width of the system-style padding, and height of the box.
             Must call the base class method to get the current DPI values. This method is invoked only when
             Application opts-in into the Per-monitor V2 support, targets .NETFX 4.7 and has
             EnableDpiChangedMessageHandling and EnableDpiChangedHighDpiImprovements config switches turned on.
            </summary>
            <param name="deviceDpiOld">Old DPI value</param>
            <param name="deviceDpiNew">New DPI value</param>
        </member>
        <member name="P:System.Windows.Forms.CheckBox.TextAlign">
            <summary>
             Gets or sets a value indicating the alignment of the
             text on the checkbox control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckBox.ThreeState">
            <summary>
             Gets or sets a value indicating
             whether the check box will allow three check states rather than two.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.CheckBox.CheckedChanged">
            <summary>
             Occurs when the
             value of the <see cref='P:System.Windows.Forms.CheckBox.Checked'/>
             property changes.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.CheckBox.CheckStateChanged">
            <summary>
             Occurs when the
             value of the <see cref='P:System.Windows.Forms.CheckBox.CheckState'/>
             property changes.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBox.CreateAccessibilityInstance">
            <summary>
             Constructs the new instance of the accessibility object for this control. Subclasses
             should not call base.CreateAccessibilityObject.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBox.OnCheckedChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.CheckBox.CheckedChanged'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBox.OnCheckStateChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.CheckBox.CheckStateChanged'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBox.OnClick(System.EventArgs)">
            <summary>
             Fires the event indicating that the control has been clicked.
             Inheriting controls should use this in favour of actually listening to
             the event, but should not forget to call base.onClicked() to
             ensure that the event is still fired for external listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBox.OnHandleCreated(System.EventArgs)">
            <summary>
             We override this to ensure that the control's click values are set up
             correctly.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
             We override this to ensure that press '+' or '=' checks the box,
             while pressing '-' unchecks the box
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.ButtonBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBox.ProcessMnemonic(System.Char)">
            <summary>
             Overridden to handle mnemonics properly.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBox.ToString">
            <summary>
             Provides some interesting information for the CheckBox control in
             String form.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.CheckBoxRenderer">
            <summary>
             This is a rendering class for the CheckBox control. It works downlevel too (obviously
             without visual styles applied.)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckBoxRenderer.RenderMatchingApplicationState">
            <summary>
             If this property is true, then the renderer will use the setting from Application.RenderWithVisualStyles to
             determine how to render.
             If this property is false, the renderer will always render with visualstyles.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBoxRenderer.IsBackgroundPartiallyTransparent(System.Windows.Forms.VisualStyles.CheckBoxState)">
            <summary>
             Returns true if the background corresponding to the given state is partially transparent, else false.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBoxRenderer.DrawParentBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.Control)">
            <summary>
             This is just a convenience wrapper for VisualStyleRenderer.DrawThemeParentBackground. For downlevel,
             this isn't required and does nothing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBoxRenderer.DrawCheckBox(System.Drawing.Graphics,System.Drawing.Point,System.Windows.Forms.VisualStyles.CheckBoxState)">
            <summary>
             Renders a CheckBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBoxRenderer.DrawCheckBox(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Boolean,System.Windows.Forms.VisualStyles.CheckBoxState)">
            <summary>
             Renders a CheckBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBoxRenderer.DrawCheckBox(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Windows.Forms.TextFormatFlags,System.Boolean,System.Windows.Forms.VisualStyles.CheckBoxState)">
            <summary>
             Renders a CheckBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBoxRenderer.DrawCheckBox(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Drawing.Image,System.Drawing.Rectangle,System.Boolean,System.Windows.Forms.VisualStyles.CheckBoxState)">
            <summary>
             Renders a CheckBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBoxRenderer.DrawCheckBox(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Windows.Forms.TextFormatFlags,System.Drawing.Image,System.Drawing.Rectangle,System.Boolean,System.Windows.Forms.VisualStyles.CheckBoxState)">
            <summary>
             Renders a CheckBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckBoxRenderer.GetGlyphSize(System.Drawing.Graphics,System.Windows.Forms.VisualStyles.CheckBoxState)">
            <summary>
             Returns the size of the CheckBox glyph.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.CheckedListBox">
             <summary>
            
              Displays a list with a checkbox to the left
            
              of each item.
             </summary>
        </member>
        <member name="F:System.Windows.Forms.CheckedListBox.killnextselect">
            <summary>
             Decides whether or not to ignore the next LBN_SELCHANGE
             message - used to prevent cursor keys from toggling checkboxes
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CheckedListBox.onItemCheck">
            <summary>
             Current listener of the onItemCheck event.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CheckedListBox.checkOnClick">
            <summary>
             Indicates whether or not we should toggle check state on the first
             click on an item, or whether we should wait for the user to click
             again.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CheckedListBox.flat">
            <summary>
             Should we use 3d checkboxes or flat ones?
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CheckedListBox.lastSelected">
            <summary>
             Indicates which item was last selected.  We want to keep track
             of this so we can be a little less aggressive about checking/
             unchecking the items as the user moves around.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CheckedListBox.checkedItemCollection">
            <summary>
             The collection of checked items in the CheckedListBox.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.#ctor">
            <summary>
             Creates a new CheckedListBox for the user.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.CheckOnClick">
            <summary>
             Indicates whether or not the checkbox should be toggled whenever an
             item is selected.  The default behaviour is to just change the
             selection, and then make the user click again to check it.  However,
             some may prefer checking the item as soon as it is clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.CheckedIndices">
            <summary>
             Collection of checked indices in this CheckedListBox.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.CheckedItems">
            <summary>
             Collection of checked items in this CheckedListBox.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.CreateParams">
            <summary>
             This is called when creating a window.  Inheriting classes can ovveride
             this to add extra functionality, but should not forget to first call
             base.CreateParams() to make sure the control continues to work
             correctly.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.DataSource">
            <summary>
             CheckedListBox DataSource.
            </summary>
            <hideinheritance/>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.DisplayMember">
            <summary>
             CheckedListBox DisplayMember.
            </summary>
            <hideinheritance/>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.Items">
            <summary>
             Collection of items in this listbox.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.SelectionMode">
            <summary>
             For CheckedListBoxes, multi-selection is not supported.  You can set
             selection to be able to select one item or no items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.ThreeDCheckBoxes">
            <summary>
             Indicates if the CheckBoxes should show up as flat or 3D in appearance.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.UseCompatibleTextRendering">
            <summary>
             Determines whether to use compatible text rendering engine (GDI+) or not (GDI).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.SupportsUseCompatibleTextRendering">
            <summary>
             Determines whether the control supports rendering text using GDI+ and GDI.
             This is provided for container controls to iterate through its children to set UseCompatibleTextRendering to the same
             value if the child control supports it.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.ValueMember">
            <summary>
             CheckedListBox ValueMember.
            </summary>
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.CheckedListBox.Click">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.CheckedListBox.MouseClick">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.CheckedListBox.DrawItem">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.CheckedListBox.MeasureItem">
            <hideinheritance/>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.CreateAccessibilityInstance">
            <summary>
             Constructs the new instance of the accessibility object for this control. Subclasses
             should not call base.CreateAccessibilityObject.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.GetItemCheckState(System.Int32)">
            <summary>
             Gets the check value of the current item.  This value will be from the
             System.Windows.Forms.CheckState enumeration.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.GetItemChecked(System.Int32)">
            <summary>
             Indicates if the given item is, in any way, shape, or form, checked.
             This will return true if the item is fully or indeterminately checked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.InvalidateItem(System.Int32)">
            <summary>
             Invalidates the given item in the listbox
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.LbnSelChange">
            <summary>
             A redirected LBN_SELCHANGE message notification.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.OnClick(System.EventArgs)">
            <summary>
             Ensures that mouse clicks can toggle...
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.OnHandleCreated(System.EventArgs)">
            <summary>
             When the handle is created we can dump any cached item-check pairs.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
             Actually goes and fires the drawItem event.  Inheriting controls
             should use this to know when the event is fired [this is preferable to
             adding an event handler yourself for this event].  They should,
             however, remember to call base.OnDrawItem(e); to ensure the event is
             still fired to external listeners
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
             This is the code that actually fires the "keyPress" event.  The Checked
             ListBox overrides this to look for space characters, since we
             want to use those to check or uncheck items periodically.  Don't
             forget to call base.OnKeyPress() to ensure that KeyPrese events
             are correctly fired for all other keys.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)">
            <summary>
             This is the code that actually fires the itemCheck event.  Don't
             forget to call base.onItemCheck() to ensure that itemCheck vents
             are correctly fired for all other keys.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
             Actually goes and fires the selectedIndexChanged event.  Inheriting controls
             should use this to know when the event is fired [this is preferable to
             adding an event handler on yourself for this event].  They should,
             however, remember to call base.OnSelectedIndexChanged(e); to ensure the event is
             still fired to external listeners
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.RefreshItems">
            <summary>
             Reparses the objects, getting new text strings for them.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.SetItemCheckState(System.Int32,System.Windows.Forms.CheckState)">
            <summary>
             Sets the checked value of the given item.  This value should be from
             the System.Windows.Forms.CheckState enumeration.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.SetItemChecked(System.Int32,System.Boolean)">
            <summary>
             Sets the checked value of the given item.  This value should be a
             boolean.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.WmReflectCommand(System.Windows.Forms.Message@)">
            <summary>
             We need to get LBN_SELCHANGE notifications
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.WmReflectVKeyToItem(System.Windows.Forms.Message@)">
            <summary>
             Handle keyboard input to prevent arrow keys from toggling
             checkboxes in CheckOnClick mode.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
             The listbox's window procedure.  Inheriting classes can override this
             to add extra functionality, but should not forget to call
             base.wndProc(m); to ensure the button continues to function properly.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.ObjectCollection.Add(System.Object,System.Boolean)">
            <summary>
             Lets the user add an item to the listbox with the given initial value
             for the Checked portion of the item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.ObjectCollection.Add(System.Object,System.Windows.Forms.CheckState)">
            <summary>
             Lets the user add an item to the listbox with the given initial value
             for the Checked portion of the item.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.CheckedIndexCollection.Count">
            <summary>
             Number of current checked items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.CheckedIndexCollection.Item(System.Int32)">
            <summary>
             Retrieves the specified checked item.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.CheckedIndexCollection.InnerArray">
            <summary>
             This is the item array that stores our data.  We share this backing store
             with the main object collection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.CheckedItemCollection.Count">
            <summary>
             Number of current checked items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.CheckedItemCollection.InnerArray">
            <summary>
             This is the item array that stores our data.  We share this backing store
             with the main object collection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CheckedListBox.CheckedItemCollection.Item(System.Int32)">
            <summary>
             Retrieves the specified checked item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.CheckedItemCollection.GetCheckedState(System.Int32)">
            <summary>
             This method returns if the actual item index is checked.  The index is the index to the MAIN
             collection, not this one.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.CheckedItemCollection.SetCheckedState(System.Int32,System.Windows.Forms.CheckState)">
            <summary>
             Same thing for GetChecked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.CheckedListBoxAccessibleObject.#ctor(System.Windows.Forms.CheckedListBox)">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.CheckedListBoxAccessibleObject.GetChild(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CheckedListBox.CheckedListBoxAccessibleObject.GetChildCount">
            <summary>
            </summary>
        </member>
        <member name="T:System.Windows.Forms.CheckState">
            <summary>
             Specifies the state of a control,  such as a check box, that can be
             checked, unchecked, or set to an indeterminate state.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CheckState.Unchecked">
            <summary>
             The control is unchecked.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CheckState.Checked">
            <summary>
             The control is checked.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CheckState.Indeterminate">
            <summary>
             The control is indeterminate. An indeterminate control generally has
             a shaded appearance.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Clipboard">
            <summary>
             Provides methods to place data on and retrieve data from the system clipboard. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Clipboard.SetDataObject(System.Object)">
            <summary>
             Places nonpersistent data on the system <see cref='T:System.Windows.Forms.Clipboard'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Clipboard.SetDataObject(System.Object,System.Boolean)">
            <summary>
             Overload that uses default values for retryTimes and retryDelay.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Clipboard.SetDataObject(System.Object,System.Boolean,System.Int32,System.Int32)">
            <summary>
             Places data on the system <see cref='T:System.Windows.Forms.Clipboard'/> and uses copy to specify whether the data
             should remain on the <see cref='T:System.Windows.Forms.Clipboard'/> after the application exits.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Clipboard.GetDataObject">
            <summary>
             Retrieves the data that is currently on the system <see cref='T:System.Windows.Forms.Clipboard'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Clipboard.GetDataObject(System.Int32,System.Int32)">
            <remarks>
             Private method to help accessing clipBoard for know retries before failing.
            </remarks>
        </member>
        <member name="T:System.Windows.Forms.CloseReason">
            <summary>
             Specifies the reason for the Form Closing.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CloseReason.None">
            <summary>
             No reason for closure of the Form.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CloseReason.WindowsShutDown">
            <summary>
             In the process of shutting down, Windows has closed the application.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CloseReason.MdiFormClosing">
            <summary>
             The parent form of this MDI form is closing.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CloseReason.UserClosing">
            <summary>
             The user has clicked the close button on the form window, selected
             Close from the window's control menu or hit Alt + F4.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CloseReason.TaskManagerClosing">
            <summary>
             The Microsoft Windows Task Manager is closing the application.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CloseReason.FormOwnerClosing">
            <summary>
             A form is closing because its owner is closing.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CloseReason.ApplicationExitCall">
            <summary>
             A form is closing because Application.Exit() was called.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ColorDialog">
            <summary>
             Represents a common dialog box that displays available colors along with
             controls that allow the user to define custom colors.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ColorDialog.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.ColorDialog'/>
             class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ColorDialog.AllowFullOpen">
            <summary>
             Gets or sets a value indicating whether the user can use the dialog box
             to define custom colors.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ColorDialog.AnyColor">
            <summary>
             Gets or sets a value indicating whether the dialog box displays all available colors in
             the set of basic colors.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ColorDialog.Color">
            <summary>
             Gets or sets the color selected by the user.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ColorDialog.CustomColors">
            <summary>
             Gets or sets the set of
             custom colors shown in the dialog box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ColorDialog.FullOpen">
            <summary>
             Gets or sets a value indicating whether the controls used to create custom
             colors are visible when the dialog box is opened
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ColorDialog.Instance">
            <summary>
             Our HINSTANCE from Windows.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ColorDialog.Options">
            <summary>
             Returns our CHOOSECOLOR options.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ColorDialog.ShowHelp">
            <summary>
             Gets or sets a value indicating whether a Help button appears
             in the color dialog box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ColorDialog.SolidColorOnly">
            <summary>
             Gets
             or sets a value indicating
             whether the dialog
             box will restrict users to selecting solid colors only.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ColorDialog.GetOption(System.Int32)">
            <summary>
             Lets us control the CHOOSECOLOR options.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ColorDialog.Reset">
            <summary>
             Resets
             all options to their
             default values, the last selected color to black, and the custom
             colors to their default values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ColorDialog.SetOption(System.Int32,System.Boolean)">
            <summary>
             Allows us to manipulate the CHOOSECOLOR options
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ColorDialog.ShouldSerializeColor">
            <summary>
             Indicates whether the <see cref='P:System.Windows.Forms.ColorDialog.Color'/> property should be
             persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ColorDialog.ToString">
            <summary>
             Provides a string version of this object.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ColumnClickEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)'/> event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ColumnClickEventHandler">
            <summary>
             Represents a method that will handle the the <see cref='M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)'/>
             event of a <see cref='T:System.Windows.Forms.ListView'/>
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ColumnHeader">
            <summary>
             Displays a single column header in a <see cref='T:System.Windows.Forms.ListView'/> control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ColumnHeader.#ctor">
            <summary>
             Creates a new ColumnHeader object
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ColumnHeader.#ctor(System.Int32)">
            <summary>
             Creates a new ColumnHeader object
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ColumnHeader.#ctor(System.String)">
            <summary>
             Creates a new ColumnHeader object
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ColumnHeader.Index">
            <summary>
             The index of this column.  This index does not necessarily correspond
             to the current visual position of the column in the ListView, because the
             user may orerder columns if the allowColumnReorder property is true.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ColumnHeader.ListView">
            <summary>
             Returns the ListView control that this column is displayed in.  May be null
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ColumnHeader.Name">
            <summary>
             The Name of the column header
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ColumnHeader.Text">
            <summary>
             The text displayed in the column header
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ColumnHeader.TextAlign">
            <summary>
             The horizontal alignment of the text contained in this column
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ColumnHeader.Width">
            <summary>
             The width of the column in pixels.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ColumnHeader.Clone">
            <summary>
             Creates an identical ColumnHeader, unattached to any ListView
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ColumnHeader.ToString">
            <summary>
             Returns a string representation of this column header
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle">
            <summary>
             Specifies how the column headers are autoresized in a <see cref='T:System.Windows.Forms.ListView'/>
             control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ColumnHeaderAutoResizeStyle.None">
            <summary>
             Do not auto resize the column headers.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ColumnHeaderAutoResizeStyle.HeaderSize">
            <summary>
             Autoresize the column headers based on the width of just the column
             header.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ColumnHeaderAutoResizeStyle.ColumnContent">
            <summary>
             Autoresize the column headers based on the width of the largest
             subitem in the column.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ColumnHeaderConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Gets a value indicating whether this converter can
             convert an object to the given destination type using the context.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ColumnHeaderConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type.  The most common types to convert
             are to and from a string object.  The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string.  If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ColumnHeaderStyle">
            <summary>
             Specifies how <see cref='T:System.Windows.Forms.ListView'/> column headers
             behave.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ColumnHeaderStyle.None">
            <summary>
             No visible column header.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ColumnHeaderStyle.Nonclickable">
            <summary>
             Visible column header that does not respond to clicking.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ColumnHeaderStyle.Clickable">
            <summary>
             Visible column header that responds to clicking.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ColumnWidthChangingEventArgs.ColumnIndex">
            <summary>
             Returns the index of the column header whose width is changing
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth">
            <summary>
             Returns the new width for the column header who is changing
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComboBox">
            <summary>
             Displays an editing field and a list, allowing the user to select from the
             list or to enter new text. Displays only the editing field until the user
             explicitly displays the list.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComboBox.autoCompleteMode">
            <summary>
             This stores the value for the autocomplete mode which can be either
             None, AutoSuggest, AutoAppend or AutoSuggestAppend.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComboBox.autoCompleteSource">
            <summary>
             This stores the value for the autoCompleteSource mode which can be one of the values
             from AutoCompleteSource enum.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComboBox.autoCompleteCustomSource">
            <summary>
             This stores the custom StringCollection required for the autoCompleteSource when its set to CustomSource.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.#ctor">
            <summary>
             Creates a new ComboBox control.  The default style for the combo is
             a regular DropDown Combo.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.AutoCompleteMode">
            <summary>
             This is the AutoCompleteMode which can be either
             None, AutoSuggest, AutoAppend or AutoSuggestAppend.
             This property in conjunction with AutoCompleteSource enables the AutoComplete feature for ComboBox.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.AutoCompleteSource">
            <summary>
             This is the AutoCompleteSource which can be one of the
             values from AutoCompleteSource enumeration.
             This property in conjunction with AutoCompleteMode enables the AutoComplete feature for ComboBox.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.AutoCompleteCustomSource">
            <summary>
             This is the AutoCompleteCustomSource which is custom StringCollection used when the
             AutoCompleteSource is CustomSource.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.BackColor">
            <summary>
             The background color of this control. This is an ambient property and
             will always return a non-null value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.CreateParams">
            <summary>
             Returns the parameters needed to create the handle.  Inheriting classes
             can override this to provide extra functionality.  They should not,
             however, forget to call base.CreateParams() first to get the struct
             filled up with the basic info.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.DataSource">
            <summary>
             The ListSource to consume as this ListBox's source of data.
             When set, a user can not modify the Items collection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.DrawMode">
            <summary>
             Retrieves the value of the DrawMode property.  The DrawMode property
             controls whether the control is drawn by Windows or by the user.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.DropDownWidth">
            <summary>
             Returns the width of the drop down box in a combo box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.DropDownHeight">
            <summary>
             Sets the Height of the drop down box in a combo box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.DroppedDown">
            <summary>
             Indicates whether the DropDown of the combo is  currently dropped down.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.FlatStyle">
            <summary>
             Gets or
             sets
             the flat style appearance of the button control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.Focused">
            <summary>
             Returns true if this control has focus.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ForeColor">
            <summary>
             Gets or sets the foreground color of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.IntegralHeight">
            <summary>
             Indicates if the combo should avoid showing partial Items.  If so,
             then only full items will be displayed, and the list portion will be resized
             to prevent partial items from being shown.  Otherwise, they will be
             shown
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ItemHeight">
            <summary>
             Returns the height of an item in the combo box. When drawMode is Normal
             or OwnerDrawFixed, all items have the same height. When drawMode is
             OwnerDrawVariable, this method returns the height that will be given
             to new items added to the combo box. To determine the actual height of
             an item, use the GetItemHeight() method with an integer parameter.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.Items">
            <summary>
             Collection of the items contained in this ComboBox.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.MaxDropDownItems">
            <summary>
             The maximum number of items to be shown in the dropdown portion
             of the ComboBox.  This number can be between 1 and 100.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.MaxLength">
            <summary>
             The maximum length of the text the user may type into the edit control
             of a combo box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.MouseIsOver">
            <summary>
             If the mouse is over the combobox, draw selection rect.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.PreferredHeight">
            <summary>
             ApplySizeConstraints calls into this method when DropDownStyles is DropDown and DropDownList.
             This causes PreferredSize to be bounded by PreferredHeight in these two cases only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.SelectedIndex">
            <summary>
             The [zero based] index of the currently selected item in the combos list.
             Note If the value of index is -1, then the ComboBox is
             set to have no selection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.SelectedItem">
            <summary>
             The handle to the object that is currently selected in the
             combos list.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.SelectedText">
            <summary>
             The selected text in the edit component of the ComboBox. If the
             ComboBox has ComboBoxStyle.DROPDOWNLIST, the return is an empty
             string ("").
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.SelectionLength">
            <summary>
             The length, in characters, of the selection in the editbox.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.SelectionStart">
            <summary>
             The [zero-based] index of the first character in the current text selection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.Sorted">
            <summary>
             Indicates if the Combos list is sorted or not.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.DropDownStyle">
            <summary>
             The type of combo that we are right now.  The value would come
             from the System.Windows.Forms.ComboBoxStyle enumeration.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ComboBox.Paint">
            <summary>
             ComboBox Onpaint.
            </summary>
            <hideinheritance/>
        </member>
        <!-- Badly formed XML comment ignored for member "E:System.Windows.Forms.ComboBox.TextUpdate" -->
        <!-- Badly formed XML comment ignored for member "E:System.Windows.Forms.ComboBox.DropDownClosed" -->
        <member name="M:System.Windows.Forms.ComboBox.AddItemsCore(System.Object[])">
            <summary>
             Performs the work of adding the specified items to the combobox
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.BeginUpdate">
            <summary>
             Disables redrawing of the combo box. A call to beginUpdate() must be
             balanced by a following call to endUpdate(). Following a call to
             beginUpdate(), any redrawing caused by operations performed on the
             combo box is deferred until the call to endUpdate().
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.EditToComboboxMapping(System.Windows.Forms.Message)">
            <summary>
             This procedure takes in the message, converts the Edit handle coordinates into Combo Box Coordinates
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ChildWndProc(System.Windows.Forms.Message@)">
            <summary>
             Subclassed window procedure for the edit and list child controls of the
             combo box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnMouseEnterInternal(System.EventArgs)">
            <summary>
             Helper to handle MouseEnter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnMouseLeaveInternal(System.EventArgs)">
            <summary>
             Helper to handle MouseLeave.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.EndUpdate">
            <summary>
             Reenables redrawing of the combo box. A call to beginUpdate() must be
             balanced by a following call to endUpdate(). Following a call to
             beginUpdate(), any redrawing caused by operations performed on the
             combo box is deferred until the call to endUpdate().
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.FindString(System.String)">
            <summary>
             Finds the first item in the combo box that starts with the given string.
             The search is not case sensitive.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.FindString(System.String,System.Int32)">
            <summary>
             Finds the first item after the given index which starts with the given string.
             The search is not case sensitive.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.FindStringExact(System.String)">
            <summary>
             Finds the first item in the combo box that matches the given string.
             The strings must match exactly, except for differences in casing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.FindStringExact(System.String,System.Int32)">
            <summary>
             Finds the first item after the given index that matches the given string.
             The strings must match exactly, except for differences in casing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.FindStringExact(System.String,System.Int32,System.Boolean)">
            <summary>
             Finds the first item after the given index that matches the given string.
             The strings must match exactly, except for differences in casing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.GetItemHeight(System.Int32)">
            <summary>
             Returns the height of the given item in an OwnerDrawVariable style
             combo box. This method should not be used for Normal or OwnerDrawFixed
             style combo boxes.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
             Determines if keyData is in input key that the control wants.
             Overridden to return true for RETURN and ESCAPE when the combo box is
             dropped down.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.NativeAdd(System.Object)">
            <summary>
             Adds the given item to the native combo box.  This asserts if the handle hasn't been
             created.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.NativeClear">
            <summary>
             Clears the contents of the combo box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.NativeGetItemText(System.Int32)">
            <summary>
             Get the text stored by the native control for the specified list item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.NativeInsert(System.Int32,System.Object)">
            <summary>
             Inserts the given item to the native combo box at the index.  This asserts if the handle hasn't been
             created or if the resulting insert index doesn't match the passed in index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.NativeRemoveAt(System.Int32)">
            <summary>
             Removes the native item from the given index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.CreateHandle">
            <summary>
             Overridden to avoid multiple layouts during handle creation due to combobox size change
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnHandleCreated(System.EventArgs)">
            <summary>
             Overridden to make sure all the items and styles get set up correctly.
             Inheriting classes should not forget to call
             base.OnHandleCreated()
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnHandleDestroyed(System.EventArgs)">
            <summary>
             We need to un-subclasses everything here.  Inheriting classes should
             not forget to call base.OnHandleDestroyed()
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
             This is the code that actually fires the drawItem event.  Don't
             forget to call base.onDrawItem() to ensure that drawItem events
             are correctly fired at all other times.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnDropDown(System.EventArgs)">
            <summary>
             This is the code that actually fires the dropDown event.  Don't
             forget to call base.onDropDown() to ensure that dropDown events
             are correctly fired at all other times.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
             Raises the <see cref='!:ComboBox.KeyDown'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
             Key press event handler. Overridden to close up the combo box when the
             user presses RETURN or ESCAPE.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)">
            <summary>
             This is the code that actually fires the measuereItem event.  Don't
             forget to call base.onMeasureItem() to ensure that measureItem
             events are correctly fired at all other times.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnMouseEnter(System.EventArgs)">
            <summary>
             If we have the style set to popup show mouse over
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnMouseLeave(System.EventArgs)">
            <summary>
             If we have the style set to popup show mouse over
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnSelectionChangeCommittedInternal(System.EventArgs)">
            <summary>
             This internal helper allows us to call the committed function multiple times without worrying about double firing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnSelectionChangeCommitted(System.EventArgs)">
            <summary>
             This is the code that actually fires the SelectionChangeCommitted event.
             Don't forget to call base.OnSelectionChangeCommitted() to ensure
             that SelectionChangeCommitted events are correctly fired at all other times.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
             This is the code that actually fires the selectedIndexChanged event.
             Don't forget to call base.onSelectedIndexChanged() to ensure
             that selectedIndexChanged events are correctly fired at all other times.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnSelectedItemChanged(System.EventArgs)">
            <summary>
             This is the code that actually fires the selectedItemChanged event.
             Don't forget to call base.onSelectedItemChanged() to ensure
             that selectedItemChanged events are correctly fired at all other times.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnDropDownStyleChanged(System.EventArgs)">
            <summary>
             This is the code that actually fires the DropDownStyleChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnParentBackColorChanged(System.EventArgs)">
            <summary>
             This method is called by the parent control when any property
             changes on the parent. This can be overriden by inheriting
             classes, however they must call base.OnParentPropertyChanged.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnFontChanged(System.EventArgs)">
            <summary>
             Indicates that a critical property, such as color or font has
             changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnBackColorChanged(System.EventArgs)">
            <summary>
             Indicates that a critical property, such as color or font has
             changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnForeColorChanged(System.EventArgs)">
            <summary>
             Indicates that a critical property, such as color or font has
             changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
             Raises the <see cref='!:ComboBox.Validating'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnResize(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.Resize'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnDropDownClosed(System.EventArgs)">
            <summary>
             This event is fired when the dropdown portion of the combobox is hidden.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.OnTextUpdate(System.EventArgs)">
            <summary>
             This event is fired when the edit portion of a combobox is about to display altered text.
             This event is NOT fired if the TEXT property is programatically changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.RefreshItems">
            <summary>
             Reparses the objects, getting new text strings for them.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.RefreshItem(System.Int32)">
            <summary>
             Reparses the object at the given index, getting new text string for it.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ReleaseChildWindow">
            <summary>
             Release the ChildWindow object by un-subclassing the child edit and
             list controls and freeing the root of the ChildWindow object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.SetAutoComplete(System.Boolean,System.Boolean)">
            <summary>
             Enables the AutoComplete feature for combobox depending on the properties set.
             These properties are namely AutoCompleteMode, AutoCompleteSource and AutoCompleteCustomSource.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.Select(System.Int32,System.Int32)">
            <summary>
             Selects the text in the editable portion of the ComboBox at the
             from the given start index to the given end index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.SelectAll">
            <summary>
             Selects all the text in the editable portion of the ComboBox.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.SetItemsCore(System.Collections.IList)">
            <summary>
             Performs the work of setting the specified items to the combobox
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ShouldSerializeItemHeight">
            <summary>
             Indicates whether the itemHeight property should be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ShouldSerializeText">
            <summary>
             Determines if the Text property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ToString">
            <summary>
             Provides some interesting info about this control in String form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.UpdateItemHeight">
            <summary>
             Manufactures a MeasureItemEventArgs for each item in the list to simulate
             the combobox requesting the info. This gives the effect of allowing the
             measureitem info to be updated at anytime.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.UpdateText">
            <summary>
             Forces the text to be updated based on the current selection.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ComboBox.WmReflectCommand(System.Windows.Forms.Message@)" -->
        <member name="M:System.Windows.Forms.ComboBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
             The comboboxs window procedure.  Inheritng classes can override this
             to add extra functionality, but should not forget to call
             base.wndProc(m); to ensure the combo continues to function properly.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ObjectCollection.Count">
            <summary>
             Retrieves the number of items.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ObjectCollection.Add(System.Object)">
            <summary>
             Adds an item to the combo box. For an unsorted combo box, the item is
             added to the end of the existing list of items. For a sorted combo box,
             the item is inserted into the list according to its sorted position.
             The item's toString() method is called to obtain the string that is
             displayed in the combo box.
             A SystemException occurs if there is insufficient space available to
             store the new item.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ObjectCollection.Item(System.Int32)">
            <summary>
             Retrieves the item with the specified index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ObjectCollection.Clear">
            <summary>
             Removes all items from the ComboBox.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ObjectCollection.CopyTo(System.Object[],System.Int32)">
            <summary>
             Copies the ComboBox Items collection to a destination array.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ObjectCollection.GetEnumerator">
            <summary>
             Returns an enumerator for the ComboBox Items collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ObjectCollection.Insert(System.Int32,System.Object)">
            <summary>
             Adds an item to the combo box. For an unsorted combo box, the item is
             added to the end of the existing list of items. For a sorted combo box,
             the item is inserted into the list according to its sorted position.
             The item's toString() method is called to obtain the string that is
             displayed in the combo box.
             A SystemException occurs if there is insufficient space available to
             store the new item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ObjectCollection.RemoveAt(System.Int32)">
            <summary>
             Removes an item from the ComboBox at the given index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ObjectCollection.Remove(System.Object)">
            <summary>
             Removes the given item from the ComboBox, provided that it is
             actually in the list.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComboBox.ComboBoxItemAccessibleObject">
            <summary>
             Represents the ComboBox item accessible object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxItemAccessibleObject.#ctor(System.Windows.Forms.ComboBox,System.Object)">
            <summary>
             Initializes new instance of ComboBox item accessible object.
            </summary>
            <param name="owningComboBox">The owning ComboBox.</param>
            <param name="owningItem">The owning ComboBox item.</param>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxItemAccessibleObject.Bounds">
            <summary>
             Gets the ComboBox Item bounds.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxItemAccessibleObject.DefaultAction">
            <summary>
             Gets the ComboBox item default action.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxItemAccessibleObject.Help">
            <summary>
             Gets the help text.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxItemAccessibleObject.IsPatternSupported(Interop.UiaCore.UIA)">
            <summary>
             Indicates whether specified pattern is supported.
            </summary>
            <param name="patternId">The pattern ID.</param>
            <returns>True if specified </returns>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxItemAccessibleObject.Name">
            <summary>
             Gets or sets the accessible name.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxItemAccessibleObject.Role">
            <summary>
             Gets the accessible role.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxItemAccessibleObject.RuntimeId">
            <summary>
             Gets the runtime ID.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxItemAccessibleObject.State">
            <summary>
             Gets the accessible state.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComboBox.ComboBoxAccessibleObject">
            <summary>
             ComboBox control accessible object with UI Automation provider functionality.
             This inherits from the base ComboBoxExAccessibleObject and ComboBoxAccessibleObject
             to have all base functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxAccessibleObject.#ctor(System.Windows.Forms.ComboBox)">
            <summary>
             Initializes new instance of ComboBoxAccessibleObject.
            </summary>
            <param name="owningComboBox">The owning ComboBox control.</param>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxAccessibleObject.ItemAccessibleObjects">
            <summary>
             Gets the collection of item accessible objects.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxAccessibleObject.DropDownButtonUiaProvider">
            <summary>
             Gets the DropDown button accessible object. (UI Automation provider)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxAccessibleObject.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Returns the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxAccessibleObject.GetChildFragment(System.Int32)">
            <summary>
             Gets the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The child index.</param>
            <returns>The accessible child.</returns>
            <remarks>
             GetChild method should be unchanged to not break the MSAA scenarios.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxAccessibleObject.GetChildFragmentCount">
            <summary>
             Gets the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children.</returns>
            <remarks>
             GetChildCount method should be unchanged to not break the MSAA scenarios.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxAccessibleObject.GetPropertyValue(Interop.UiaCore.UIA)">
            <summary>
             Gets the accessible property value.
            </summary>
            <param name="propertyID">The accessible property ID.</param>
            <returns>The accessible property value.</returns>
        </member>
        <member name="T:System.Windows.Forms.ComboBox.ComboBoxChildEditUiaProvider">
            <summary>
             Represents the ComboBox's child (inner) edit native window control accessible object with UI Automation provider functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxChildEditUiaProvider.#ctor(System.Windows.Forms.ComboBox,System.IntPtr)">
            <summary>
             Initializes new instance of ComboBoxChildEditUiaProvider.
            </summary>
            <param name="owner">The ComboBox owning control.</param>
            <param name="childEditControlhandle">The child edit native window handle.</param>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxChildEditUiaProvider.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Returns the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildEditUiaProvider.FragmentRoot">
            <summary>
             Gets the top level element.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxChildEditUiaProvider.GetPropertyValue(Interop.UiaCore.UIA)">
            <summary>
             Gets the accessible property value.
            </summary>
            <param name="propertyID">The accessible property ID.</param>
            <returns>The accessible property value.</returns>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildEditUiaProvider.RuntimeId">
            <summary>
             Gets the runtime ID.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComboBox.ComboBoxChildListUiaProvider">
            <summary>
             Represents the ComboBox's child (inner) list native window control accessible object with UI Automation provider functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxChildListUiaProvider.#ctor(System.Windows.Forms.ComboBox,System.IntPtr)">
            <summary>
             Initializes new instance of ComboBoxChildListUiaProvider.
            </summary>
            <param name="childListControlhandle"></param>
            <param name="owner"></param>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxChildListUiaProvider.ElementProviderFromPoint(System.Double,System.Double)">
            <summary>
             Return the child object at the given screen coordinates.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <returns>The accessible object of corresponding element in the provided coordinates.</returns>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxChildListUiaProvider.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Request to return the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildListUiaProvider.FragmentRoot">
            <summary>
             Gets the top level element.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxChildListUiaProvider.GetPropertyValue(Interop.UiaCore.UIA)">
            <summary>
             Gets the accessible property value.
            </summary>
            <param name="propertyID">The accessible property ID.</param>
            <returns>The accessible property value.</returns>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxChildListUiaProvider.IsPatternSupported(Interop.UiaCore.UIA)">
            <summary>
             Indicates whether specified pattern is supported.
            </summary>
            <param name="patternId">The pattern ID.</param>
            <returns>True if specified </returns>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildListUiaProvider.RuntimeId">
            <summary>
             Gets the runtime ID.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildListUiaProvider.State">
            <summary>
             Gets the accessible state.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComboBox.ComboBoxChildTextUiaProvider">
            <summary>
             Represents the ComboBox's child text (is used instead of inner Edit when style is DropDownList but not DropDown) accessible object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxChildTextUiaProvider.#ctor(System.Windows.Forms.ComboBox)">
            <summary>
             Initializes new instance of ComboBoxChildTextUiaProvider.
            </summary>
            <param name="owner">The owning ComboBox control.</param>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildTextUiaProvider.Bounds">
            <summary>
             Gets the bounds.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxChildTextUiaProvider.GetChildId">
            <summary>
             Gets the child ID.
            </summary>
            <returns>The child ID.</returns>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildTextUiaProvider.Name">
            <summary>
             Gets or sets the accessible Name of ComboBox's child text element.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxChildTextUiaProvider.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Returns the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildTextUiaProvider.FragmentRoot">
            <summary>
             Gets the top level element.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxChildTextUiaProvider.GetPropertyValue(Interop.UiaCore.UIA)">
            <summary>
             Gets the accessible property value.
            </summary>
            <param name="propertyID">The accessible property ID.</param>
            <returns>The accessible property value.</returns>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildTextUiaProvider.RuntimeId">
            <summary>
             Gets the runtime ID.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildTextUiaProvider.State">
            <summary>
             Gets the accessible state.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComboBox.ComboBoxChildDropDownButtonUiaProvider">
            <summary>
             Represents the ComboBox child (inner) DropDown button accessible object with UI Automation functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxChildDropDownButtonUiaProvider.#ctor(System.Windows.Forms.ComboBox,System.IntPtr)">
            <summary>
             Initializes new instance of ComboBoxChildDropDownButtonUiaProvider.
            </summary>
            <param name="owner">The owning ComboBox control.</param>
            <param name="comboBoxControlhandle">The owning ComboBox control's handle.</param>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildDropDownButtonUiaProvider.Name">
            <summary>
             Gets or sets the accessible Name of ComboBox's child DropDown button. ("Open" or "Close" depending on stat of the DropDown)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildDropDownButtonUiaProvider.Bounds">
            <summary>
             Gets the DropDown button bounds.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildDropDownButtonUiaProvider.DefaultAction">
            <summary>
             Gets the DropDown button default action.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxChildDropDownButtonUiaProvider.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Returns the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildDropDownButtonUiaProvider.FragmentRoot">
            <summary>
             Gets the top level element.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxChildDropDownButtonUiaProvider.GetChildId">
            <summary>
             Gets the child accessible object ID.
            </summary>
            <returns>The child accessible object ID.</returns>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxChildDropDownButtonUiaProvider.GetPropertyValue(Interop.UiaCore.UIA)">
            <summary>
             Gets the accessible property value.
            </summary>
            <param name="propertyID">The accessible property ID.</param>
            <returns>The accessible property value.</returns>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildDropDownButtonUiaProvider.Help">
            <summary>
             Gets the help text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildDropDownButtonUiaProvider.KeyboardShortcut">
            <summary>
             Gets the keyboard shortcut.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ComboBoxChildDropDownButtonUiaProvider.IsPatternSupported(Interop.UiaCore.UIA)">
            <summary>
             Indicates whether specified pattern is supported.
            </summary>
            <param name="patternId">The pattern ID.</param>
            <returns>True if specified </returns>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildDropDownButtonUiaProvider.Role">
            <summary>
             Gets the accessible role.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildDropDownButtonUiaProvider.RuntimeId">
            <summary>
             Gets the runtime ID.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBox.ComboBoxChildDropDownButtonUiaProvider.State">
            <summary>
             Gets the accessible state.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComboBox.ACNativeWindow">
            <summary>
             This subclasses an autocomplete window so that we can determine if control is inside the AC wndproc.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.ACNativeWindow.ClearNullACWindows">
            <summary>
             This method clears out null entries so we get a clean BEFORE and AFTER snapshot
             null entries are ACWindows that belong to someone else.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComboBox.AutoCompleteDropDownFinder">
            <summary>
             This finds all autcomplete windows that belong to the active thread.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.FlatComboAdapter.DrawFlatCombo(System.Windows.Forms.ComboBox,System.Drawing.Graphics)">
            <summary>
             Paints over the edges of the combo box to make it appear flat.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBox.FlatComboAdapter.DrawFlatComboDropDown(System.Windows.Forms.ComboBox,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Paints over the edges of the combo box to make it appear flat.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComboBox.ChildWindowType">
            <summary>
             Represents the ComboBox child native window type.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComboBoxRenderer">
            <summary>
             This is a rendering class for the ComboBox control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComboBoxRenderer.IsSupported">
            <summary>
             Returns true if this class is supported for the current OS and user/application settings,
             otherwise returns false.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBoxRenderer.DrawTextBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.ComboBoxState)">
            <summary>
             Renders the textbox part of a ComboBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBoxRenderer.DrawTextBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Windows.Forms.VisualStyles.ComboBoxState)">
            <summary>
             Renders the textbox part of a ComboBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBoxRenderer.DrawTextBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.ComboBoxState)">
            <summary>
             Renders the textbox part of a ComboBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBoxRenderer.DrawTextBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Windows.Forms.TextFormatFlags,System.Windows.Forms.VisualStyles.ComboBoxState)">
            <summary>
             Renders the textbox part of a ComboBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBoxRenderer.DrawTextBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Windows.Forms.TextFormatFlags,System.Windows.Forms.VisualStyles.ComboBoxState)">
            <summary>
             Renders the textbox part of a ComboBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBoxRenderer.DrawDropDownButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.ComboBoxState)">
            <summary>
             Renders a ComboBox drop-down button.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComboBoxRenderer.DrawDropDownButtonForHandle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.ComboBoxState,System.IntPtr)">
            <summary>
             Renders a ComboBox drop-down button in per-monitor scenario.
            </summary>
            <param name="g">graphics object</param>
            <param name="bounds">dropdown button bounds</param>
            <param name="state"> state</param>
            <param name="handle"> handle of the control</param>
        </member>
        <member name="T:System.Windows.Forms.ComboBoxStyle">
            <summary>
             Specifies the <see cref='T:System.Windows.Forms.ComboBox'/> style.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComboBoxStyle.Simple">
            <summary>
             The text portion is editable. The list portion is always visible.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComboBoxStyle.DropDown">
            <summary>
             The text portion is editable. The user must click the arrow button to
             display the list portion.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComboBoxStyle.DropDownList">
            <summary>
             The user cannot directly edit the text portion. The user must click
             the arrow button to display the list portion.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.CommonDialog">
            <summary>
             Specifies the base class used for displaying dialog boxes on the screen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CommonDialog.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.CommonDialog'/> class.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.CommonDialog.HelpRequest">
            <summary>
             Occurs when the user clicks the Help button on a common
             dialog box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
             Defines the common dialog box hook procedure that is overridden to add specific
             functionality to a common dialog box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CommonDialog.MoveToScreenCenter(System.IntPtr)">
            <summary>
             Centers the given window on the screen. This method is used by the default
             common dialog hook procedure to center the dialog on the screen before it
             is shown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CommonDialog.OnHelpRequest(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.CommonDialog.HelpRequest'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CommonDialog.OwnerWndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
             Defines the owner window procedure that is overridden to add specific
             functionality to a common dialog box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CommonDialog.Reset">
            <summary>
             When overridden in a derived class, resets the properties of a common dialog
             to their default values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CommonDialog.RunDialog(System.IntPtr)">
            <summary>
             When overridden in a derived class, specifies a common dialog box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CommonDialog.ShowDialog">
            <summary>
             Runs a common dialog box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CommonDialog.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
             Runs a common dialog box, parented to the given IWin32Window.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.BaseCAMarshaler">
            <summary>
             This class performs basic operation for marshaling data passed
             in from native in one of the CA*** structs (CADWORD, CAUUID, etc),
             which are structs in which the first word is the number of elements
             and the second is a pointer to an array of such elements.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.BaseCAMarshaler.#ctor(Interop.Ole32.CA_STRUCT@)">
            <summary>
             Base ctor
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.BaseCAMarshaler.ItemType">
            <summary>
             Returns the type of item this marshaler will
             return in the items array.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.BaseCAMarshaler.Count">
            <summary>
             Returns the count of items that will be or have been
             marshaled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.BaseCAMarshaler.Items">
            <summary>
             The marshaled items.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.BaseCAMarshaler.GetItemFromAddress(System.IntPtr)">
            <summary>
             Override this member to perform marshalling of a single item
             given it's native address.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.ComponentType">
            <summary>
             Retrieves the type of the component this PropertyDescriptor is bound to.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.Converter">
            <summary>
             Retrieves the type converter for this property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.IsReadOnly">
            <summary>
             Indicates whether this property is read only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.PropertyType">
            <summary>
             Retrieves the type of the property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
             Indicates whether reset will change the value of the component.  If there
             is a DefaultValueAttribute, then this will return true if getValue returns
             something different than the default value.  If there is a reset method and
             a shouldPersist method, this will return what shouldPersist returns.
             If there is just a reset method, this always returns true.  If none of these
             cases apply, this returns false.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.GetEditor(System.Type)">
            <summary>
             Retrieves an editor of the requested type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.GetValue(System.Object)">
            <summary>
             Retrieves the current value of the property on component,
             invoking the getXXX method.  An exception in the getXXX
             method will pass through.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.ResetValue(System.Object)">
            <summary>
             Will reset the default value for this property on the component.  If
             there was a default value passed in as a DefaultValueAttribute, that
             value will be set as the value of the property on the component.  If
             there was no default value passed in, a ResetXXX method will be looked
             for.  If one is found, it will be invoked.  If one is not found, this
             is a nop.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
             This will set value to be the new value of this property on the
             component by invoking the setXXX method on the component.  If the
             value specified is invalid, the component should throw an exception
             which will be passed up.  The component designer should design the
             property so that getXXX following a setXXX should return the value
             passed in if no exception was thrown in the setXXX call.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.ShouldSerializeValue(System.Object)">
             <summary>
              Indicates whether the value of this property needs to be persisted. In
              other words, it indicates whether the state of the property is distinct
              from when the component is first instantiated. If there is a default
              value specified in this PropertyDescriptor, it will be compared against the
              property's current value to determine this.  If there is't, the
              shouldPersistXXX method is looked for and invoked if found.  If both
              these routes fail, true will be returned.
            
              If this returns false, a tool should not persist this property's value.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.AboutBoxUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
             Edits the given object value using the editor style provided by GetEditorStyle.
             A service provider is provided so that any required editing services can be obtained.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.AboutBoxUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Retrieves the editing style of the Edit method.  If the method
             is not supported, this will return None.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.Com2ColorConverter">
            <summary>
             This class maps an OLE_COLOR to a managed Color editor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2ColorConverter.ManagedType">
            <summary>
             Returns the managed type that this editor maps the property type to.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ColorConverter.ConvertNativeToManaged(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor)">
            <summary>
             Converts the native value into a managed value
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ColorConverter.ConvertManagedToNative(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor,System.Boolean@)">
            <summary>
             Converts the managed value into a native value
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.Com2DataTypeToManagedDataTypeConverter">
            <summary>
             This base class maps an ole defined data type (OLE_COLOR, IFont, etc.),
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2DataTypeToManagedDataTypeConverter.ManagedType">
            <summary>
             Returns the managed type that this editor maps the property type to.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2DataTypeToManagedDataTypeConverter.ConvertNativeToManaged(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor)">
            <summary>
             Converts the native value into a managed value
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2DataTypeToManagedDataTypeConverter.ConvertManagedToNative(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor,System.Boolean@)">
            <summary>
             Converts the managed value into a native value
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.Com2Enum">
             <summary>
              This class mimics a clr enum that we can create at runtime.
              It associates an array of names with an array of values and converts
              between them.
            
              A note here: we compare string values when looking for the value of an item.
              Typically these aren't large lists and the perf is worth it.  The reason stems
              from IPerPropertyBrowsing, which supplies a list of names and a list of
              variants to mimic enum functionality.  If the actual property value is a DWORD,
              which translates to VT_UI4, and they specify their values as VT_I4 (which is a common
              mistake), they won't compare properly and values can't be updated.
              By comparing strings, we avoid this problem and add flexiblity to the system.
             </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2Enum.names">
            <summary>
             Our array of value string names
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2Enum.values">
            <summary>
             Our values
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2Enum.stringValues">
            <summary>
             Our cached array of value.ToString()'s
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2Enum.allowUnknownValues">
            <summary>
             Should we allow values besides what's in the listbox?
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2Enum.#ctor(System.String[],System.Object[],System.Boolean)">
            <summary>
             Our one and only ctor
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2Enum.IsStrictEnum">
            <summary>
             Can this enum be values other than the strict enum?
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2Enum.Values">
            <summary>
             Retrieve a copy of the value array
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2Enum.Names">
            <summary>
             Retrieve a copy of the nme array.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2Enum.FromString(System.String)">
            <summary>
             Associate a string to the appropriate value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2Enum.ToString(System.Object)">
            <summary>
             Retrieves the string name of a given value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Determines if this converter can convert an object in the given source
             type to the native type of the converter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
             Converts the given object to the converter's native type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type.  The most common types to convert
             are to and from a string object.  The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string.  If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Retrieves a collection containing a set of standard values
             for the data type this validator is designed for.  This
             will return null if the data type does not support a
             standard set of values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if the list of standard values returned from
             GetStandardValues is an exclusive list.  If the list
             is exclusive, then no other values are valid, such as
             in an enum data type.  If the list is not exclusive,
             then there are other valid values besides the list of
             standard values GetStandardValues provides.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if this object supports a standard set of values
             that can be picked from a list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
             Determines if the given object value is valid for this type.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedBrowsingHandler">
             <summary>
              This is the base class for handlers for COM2 extended browsing interface
              such as IPerPropertyBrowsing, etc.
            
              These handlers should be stateless.  That is, they should keep no refs to object
              and should only work on a give object and dispid.  That way all objects that
              support a give interface can share a handler.
            
              See COM2Properties for the array of handler classes to interface classes
              where handlers should be registered.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedBrowsingHandler.Interface">
            <summary>
             The interface that this handler managers
             such as IPerPropertyBrowsing, IProvidePropertyBuilder, etc.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedBrowsingHandler.SetupPropertyHandlers(System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor)">
            <summary>
             Called to setup the property handlers on a given property
             In this method, the handler will add listeners to the events that
             the COM2PropertyDescriptor surfaces that it cares about.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedBrowsingHandler.SetupPropertyHandlers(System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor[])">
            <summary>
             Called to setup the property handlers on a given properties
             In this method, the handler will add listeners to the events that
             the Com2PropertyDescriptor surfaces that it cares about.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter">
            <summary>
             Base class for value editors that extend basic functionality.
             calls will be delegated to the "base value editor".
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Determines if this converter can convert an object in the given source
             type to the native type of the converter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Determines if this converter can convert an object to the given destination
             type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
             Converts the given object to the converter's native type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type.  The most common types to convert
             are to and from a string object.  The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string.  If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
             Creates an instance of this type given a set of property values
             for the object.  This is useful for objects that are immutable, but still
             want to provide changable properties.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if changing a value on this object should require a call to
             CreateInstance to create a new value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
             Retrieves the set of properties for this type.  By default, a type has
             does not return any properties.  An easy implementation of this method
             can just call TypeDescriptor.GetProperties for the correct data type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if this object supports properties.  By default, this
             is false.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Retrieves a collection containing a set of standard values
             for the data type this validator is designed for.  This
             will return null if the data type does not support a
             standard set of values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if the list of standard values returned from
             GetStandardValues is an exclusive list.  If the list
             is exclusive, then no other values are valid, such as
             in an enum data type.  If the list is not exclusive,
             then there are other valid values besides the list of
             standard values GetStandardValues provides.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if this object supports a standard set of values
             that can be picked from a list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
             Determines if the given object value is valid for this type.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.Com2FontConverter">
            <summary>
             This class maps an OLE_COLOR to a managed Color editor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2FontConverter.ManagedType">
            <summary>
             Returns the managed type that this editor maps the property type to.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2FontConverter.ConvertNativeToManaged(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor)">
            <summary>
             Converts the native value into a managed value
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2FontConverter.ConvertManagedToNative(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor,System.Boolean@)">
            <summary>
             Converts the managed value into a native value
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2IDispatchConverter.none">
            <summary>
             What we return textually for null.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2IDispatchConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Determines if this converter can convert an object in the given source
             type to the native type of the converter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2IDispatchConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Determines if this converter can convert an object to the given destination
             type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2IDispatchConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type.  The most common types to convert
             are to and from a string object.  The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string.  If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2IDispatchConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if this object supports properties.  By default, this
             is false.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2IManagedPerPropertyBrowsingHandler.OnGetAttributes(System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor,System.Windows.Forms.ComponentModel.Com2Interop.GetAttributesEvent)">
            <summary>
             Here is where we handle IVsPerPropertyBrowsing.GetLocalizedPropertyInfo and IVsPerPropertyBrowsing.   HideProperty
             such as IPerPropertyBrowsing, IProvidePropertyBuilder, etc.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2IPerPropertyBrowsingHandler.OnGetBaseAttributes(System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor,System.Windows.Forms.ComponentModel.Com2Interop.GetAttributesEvent)">
            <summary>
             Here is where we handle IVsPerPropertyBrowsing.GetLocalizedPropertyInfo and IVsPerPropertyBrowsing.   HideProperty
             such as IPerPropertyBrowsing, IProvidePropertyBuilder, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2IPerPropertyBrowsingHandler.Com2IPerPropertyBrowsingEnum.Values">
            <summary>
             Retrieve a copy of the value array
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2IPerPropertyBrowsingHandler.Com2IPerPropertyBrowsingEnum.Names">
            <summary>
             Retrieve a copy of the nme array.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2IProvidePropertyBuilderHandler.OnGetBaseAttributes(System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor,System.Windows.Forms.ComponentModel.Com2Interop.GetAttributesEvent)">
            <summary>
             Here is where we handle IVsPerPropertyBrowsing.GetLocalizedPropertyInfo and IVsPerPropertyBrowsing.   HideProperty
             such as IPerPropertyBrowsing, IProvidePropertyBuilder, etc.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.Com2IVsPerPropertyBrowsingHandler">
             <summary>
              This is the base class for handlers for Com2 extended browsing interface
              such as IPerPropertyBrowsing, etc.
            
              These handlers should be stateless.  That is, they should keep no refs to object
              and should only work on a give object and dispid.  That way all objects that
              support a give interface can share a handler.
            
              See Com2Properties for the array of handler classes to interface classes
              where handlers should be registered.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2IVsPerPropertyBrowsingHandler.Interface">
            <summary>
             The interface that this handler managers
             such as IPerPropertyBrowsing, IProvidePropertyBuilder, etc.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2IVsPerPropertyBrowsingHandler.SetupPropertyHandlers(System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor[])">
            <summary>
             Called to setup the property handlers on a given properties
             In this method, the handler will add listeners to the events that
             the Com2PropertyDescriptor surfaces that it cares about.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2IVsPerPropertyBrowsingHandler.OnGetDynamicAttributes(System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor,System.Windows.Forms.ComponentModel.Com2Interop.GetAttributesEvent)">
            <summary>
             Here is where we handle IVsPerPropertyBrowsing.GetLocalizedPropertyInfo and IVsPerPropertyBrowsing.   HideProperty
             such as IPerPropertyBrowsing, IProvidePropertyBuilder, etc.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2IVsPerPropertyBrowsingHandler.OnGetDisplayName(System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor,System.Windows.Forms.ComponentModel.Com2Interop.GetNameItemEvent)">
            <summary>
             Here is where we handle IVsPerPropertyBrowsing.GetLocalizedPropertyInfo (part 2)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2IVsPerPropertyBrowsingHandler.OnGetIsReadOnly(System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor,System.Windows.Forms.ComponentModel.Com2Interop.GetBoolValueEvent)">
            <summary>
             Here is where we handle IVsPerPropertyBrowsing.IsPropertyReadOnly
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2IVsPerPropertyBrowsingHandler.OnGetTypeConverterAndTypeEditor(System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor,System.Windows.Forms.ComponentModel.Com2Interop.GetTypeConverterAndTypeEditorEvent)">
            <summary>
             Here is where we handle IVsPerPropertyBrowsing.DisplayChildProperties
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.Com2PictureConverter">
            <summary>
             This class maps an IPicture to a System.Drawing.Image.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PictureConverter.ManagedType">
            <summary>
             Returns the managed type that this editor maps the property type to.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PictureConverter.ConvertNativeToManaged(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor)">
            <summary>
             Converts the native value into a managed value
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PictureConverter.ConvertManagedToNative(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor,System.Boolean@)">
            <summary>
             Converts the managed value into a native value
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties">
            <summary>
             This class is responsible for managing a set or properties for a native object.  It determines
             when the properties need to be refreshed, and owns the extended handlers for those properties.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.AGE_THRESHHOLD">
             <summary>
              This is the interval that we'll hold props for.  If someone doesn't touch an object
              for this amount of time, we'll dump the properties from our cache.
            
              5 minutes -- ticks are 1/10,000,000th of a second
             </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.weakObjRef">
            <summary>
             This is the object that gave us the properties.  We hold a WeakRef so we don't addref the object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.props">
            <summary>
             This is our list of properties.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.defaultIndex">
            <summary>
             The index of the default property
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.touchedTime">
            <summary>
             The timestamp of the last operation on this property manager, usually
             when the property list was fetched.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.typeInfoVersions">
            <summary>
             For non-IProvideMultipleClassInfo ITypeInfos, this is the version number on the last
             ITypeInfo we looked at.  If this changes, we know we need to dump the cache.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.extendedInterfaces">
            <summary>
             These are the interfaces we recognize for extended browsing.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.extendedInterfaceHandlerTypes">
            <summary>
             These are the classes of handlers corresponding to the extended
             interfaces above.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.#ctor(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor[],System.Int32)">
            <summary>
             Default ctor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.DefaultProperty">
            <summary>
             Retrieve the default property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.TargetObject">
            <summary>
             The object that created the list of properties.  This will
             return null if the timeout has passed or the ref has died.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.TicksSinceTouched">
            <summary>
             How long since these props have been queried.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.Properties">
            <summary>
             Returns the list of properties
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.TooOld">
            <summary>
             Should this guy be refreshed because of old age?
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.AddExtendedBrowsingHandlers(System.Collections.Hashtable)">
            <summary>
             Checks the source object for eache extended browsing inteface
             listed in extendedInterfaces and creates a handler from extendedInterfaceHandlerTypes
             to handle it.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.CheckValid(System.Boolean)">
             <summary>
              Make sure this property list is still valid.
            
              1) WeakRef is still alive
              2) Our timeout hasn't passed
             </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.GetTypeInfoVersions(System.Object)">
            <summary>
             Gets a list of version longs for each type info in the COM object
             representing hte current version stamp, function and variable count.
             If any of these things change, we'll re-fetch the properties.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.SetProps(System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor[])">
            <summary>
             Set the props for this object, and notify each property
             that we are now it's manager
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyBuilderUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
             Takes the value returned from valueAccess.getValue() and modifies or replaces
             the value, passing the result into valueAccess.setValue().  This is where
             an editor can launch a modal dialog or create a drop down editor to allow
             the user to modify the value.  Host assistance in presenting UI to the user
             can be found through the valueAccess.getService function.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyBuilderUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Retrieves the editing style of the Edit method.  If the method
             is not supported, this will return None.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor">
             <summary>
              This class wraps a com native property in a property descriptor.
              It maintains all information relative to the basic (e.g. ITypeInfo)
              information about the member dispid function, and converts that info
              to meaningful managed code information.
            
              It also allows other objects to register listeners to add extended
              information at runtime such as attributes of TypeConverters.
             </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.baseReadOnly">
            <summary>
             Is this guy read only?
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.propertyType">
            <summary>
             The resoved native type -> clr type
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.dispid">
            <summary>
             The dispid. This is also in a DispIDAttiribute, but we
             need it a lot.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.displayName">
            <summary>
             The current display name to show for this property
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.typeData">
            <summary>
             This is any extra data needed.  For IDispatch types, it's the GUID of
             the interface, etc.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.refreshState">
            <summary>
             Keeps track of which data members need to be refreshed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.queryRefresh">
            <summary>
             Should we bother asking if refresh is needed?
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.com2props">
            <summary>
             Our properties manager
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.baseAttrs">
            <summary>
             Our original baseline properties
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.lastValue">
            <summary>
             Our cached last value -- this is only
             for checking if we should ask for a display value
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.typeHide">
            <summary>
             For Object and dispatch types, we hide them by default.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.canShow">
            <summary>
             Set if the metadata causes this property to always be hidden
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.hrHidden">
            <summary>
             This property is hidden because its get didn't return S_OK
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.inAttrQuery">
            <summary>
             Set if we are in the process of asking handlers for attributes
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.EventGetBaseAttributes">
            <summary>
             Our event signitures.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.oleConverters">
            <summary>
             Our map of native types that we can map to managed types for editors
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.valueConverter">
            <summary>
             Should we convert our type?
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.#ctor(Interop.Ole32.DispatchID,System.String,System.Attribute[],System.Boolean,System.Type,System.Object,System.Boolean)">
            <summary>
             Ctor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.Attributes">
            <summary>
             Attributes
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.AttributesValid">
            <summary>
             Checks if the attributes are valid.  Asks any clients if they
             would like attributes requeried.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.CanShow">
            <summary>
             Checks if this item can be shown.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.ComponentType">
            <summary>
             Retrieves the type of the component this PropertyDescriptor is bound to.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.Converter">
            <summary>
             Retrieves the type converter for this property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.ConvertingNativeType">
            <summary>
             Retrieves whether this component is applying a type conversion...
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.DefaultValue">
            <summary>
             Retrieves the default value for this property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.DISPID">
            <summary>
             Retrieves the DISPID for this item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.DisplayName">
            <summary>
             Gets the friendly name that should be displayed to the user in a window like
             the Property Browser.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.DisplayNameValid">
            <summary>
             Checks if the property display name is valid
             asks clients if they would like display name requeried.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.IsReadOnly">
            <summary>
             Indicates whether this property is read only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.PropertyType">
            <summary>
             Retrieves the type of the property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.ReadOnlyValid">
            <summary>
             Checks if the read only state is valid.
             Asks clients if they would like read-only requeried.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.TargetObject">
            <summary>
             Gets the Object that this descriptor was created for.
             May be null if the Object's ref has died.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.CanResetValue(System.Object)">
            <summary>
             Indicates whether reset will change the value of the component.  If there
             is a DefaultValueAttribute, then this will return true if getValue returns
             something different than the default value.  If there is a reset method and
             a shouldPersist method, this will return what shouldPersist returns.
             If there is just a reset method, this always returns true.  If none of these
             cases apply, this returns false.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.CreateOleTypeConverter(System.Type)">
            <summary>
             Creates a converter Object, first by looking for a ctor with a Com2ProeprtyDescriptor
             parameter, then using the default ctor if it is not found.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.CreateAttributeCollection">
            <summary>
             Creates an instance of the member attribute collection. This can
             be overriden by subclasses to return a subclass of AttributeCollection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.GetDisplayValue(System.String)">
            <summary>
             Gets the value that should be displayed to the user, such as in
             the Property Browser.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.GetEditor(System.Type)">
            <summary>
             Retrieves an editor of the requested type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.GetNativeValue(System.Object)">
            <summary>
             Retrieves the current native value of the property on component,
             invoking the getXXX method.  An exception in the getXXX
             method will pass through.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.GetNeedsRefresh(System.Int32)">
            <summary>
             Checks whether the particular item(s) need refreshing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.GetValue(System.Object)">
            <summary>
             Retrieves the current value of the property on component,
             invoking the getXXX method.  An exception in the getXXX
             method will pass through.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.GetTypeConverterAndTypeEditor(System.ComponentModel.TypeConverter@,System.Type,System.Object@)">
            <summary>
             Retrieves the value editor for the property.  If a value editor is passed
             in as a TypeConverterAttribute, that value editor will be instantiated.
             If no such attribute was found, a system value editor will be looked for.
             See TypeConverter for a description of how system value editors are found.
             If there is no system value editor, null is returned.  If the value editor found
             takes an IEditorSite in its constructor, the parameter will be passed in.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.IsCurrentValue(System.Object)">
            <summary>
             Is the given value equal to the last known value for this object?
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.OnCanResetValue(System.Windows.Forms.ComponentModel.Com2Interop.GetBoolValueEvent)">
            <summary>
             Raises the appropriate event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.OnGetDisplayName(System.Windows.Forms.ComponentModel.Com2Interop.GetNameItemEvent)">
            <summary>
             Raises the appropriate event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.OnGetDisplayValue(System.Windows.Forms.ComponentModel.Com2Interop.GetNameItemEvent)">
            <summary>
             Raises the appropriate event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.OnGetDynamicAttributes(System.Windows.Forms.ComponentModel.Com2Interop.GetAttributesEvent)">
            <summary>
             Raises the appropriate event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.OnGetIsReadOnly(System.Windows.Forms.ComponentModel.Com2Interop.GetBoolValueEvent)">
            <summary>
             Raises the appropriate event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.OnResetValue(System.EventArgs)">
            <summary>
             Raises the appropriate event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.OnShouldSerializeValue(System.Windows.Forms.ComponentModel.Com2Interop.GetBoolValueEvent)">
            <summary>
             Raises the appropriate event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.OnShouldRefresh(System.Windows.Forms.ComponentModel.Com2Interop.GetRefreshStateEvent)">
            <summary>
             Raises the appropriate event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.RaiseGetBoolValueEvent(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.GetBoolValueEvent)">
            <summary>
             Raises the appropriate event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.RaiseCom2Event(System.Object,System.EventArgs)">
            <summary>
             Raises the appropriate event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.RaiseGetNameItemEvent(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.GetNameItemEvent)">
            <summary>
             Raises the appropriate event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.ResetValue(System.Object)">
            <summary>
             Will reset the default value for this property on the component.  If
             there was a default value passed in as a DefaultValueAttribute, that
             value will be set as the value of the property on the component.  If
             there was no default value passed in, a ResetXXX method will be looked
             for.  If one is found, it will be invoked.  If one is not found, this
             is a nop.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.SetNeedsRefresh(System.Int32,System.Boolean)">
            <summary>
             Sets whether the particular item(s) need refreshing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
             This will set value to be the new value of this property on the
             component by invoking the setXXX method on the component.  If the
             value specified is invalid, the component should throw an exception
             which will be passed up.  The component designer should design the
             property so that getXXX following a setXXX should return the value
             passed in if no exception was thrown in the setXXX call.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.ShouldSerializeValue(System.Object)">
             <summary>
              Indicates whether the value of this property needs to be persisted. In
              other words, it indicates whether the state of the property is distinct
              from when the component is first instantiated. If there is a default
              value specified in this PropertyDescriptor, it will be compared against the
              property's current value to determine this.  If there is't, the
              shouldPersistXXX method is looked for and invoked if found.  If both
              these routes fail, true will be returned.
            
              If this returns false, a tool should not persist this property's value.
             </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.Com2PropDescMainConverter">
            <summary>
             we wrap all value editors in this one so we can intercept
             the GetTextFromValue calls for objects that would like
             to modify the display name
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyPageUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
             Takes the value returned from valueAccess.getValue() and modifies or replaces
             the value, passing the result into valueAccess.setValue().  This is where
             an editor can launch a modal dialog or create a drop down editor to allow
             the user to modify the value.  Host assistance in presenting UI to the user
             can be found through the valueAccess.getService function.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyPageUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Retrieves the editing style of the Edit method.  If the method
             is not supported, this will return None.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.Com2TypeInfoProcessor">
             <summary>
              This is the main worker class of Com2 property interop. It takes an IDispatch Object
              and translates it's ITypeInfo into Com2PropertyDescriptor objects that are understandable
              by managed code.
            
              This class only knows how to process things that are natively in the typeinfo.  Other property
              information such as IPerPropertyBrowsing is handled elsewhere.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2TypeInfoProcessor.FindTypeInfo(System.Object,System.Boolean)">
            <summary>
             Given an Object, this attempts to locate its type ifo
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2TypeInfoProcessor.FindTypeInfos(System.Object,System.Boolean)">
            <summary>
             Given an Object, this attempts to locate its type info. If it implementes IProvideMultipleClassInfo
             all available type infos will be returned, otherwise the primary one will be alled.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2TypeInfoProcessor.GetNameDispId(System.Windows.Forms.UnsafeNativeMethods.IDispatch)">
            <summary>
             Retrieve the dispid of the property that we are to use as the name
             member.  In this case, the grid will put parens around the name.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2TypeInfoProcessor.GetProperties(System.Object)">
            <summary>
             Gets the properties for a given Com2 Object.  The returned Com2Properties
             Object contains the properties and relevant data about them.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2TypeInfoProcessor.GetValueTypeFromTypeDesc(Interop.Ole32.TYPEDESC@,System.Windows.Forms.UnsafeNativeMethods.ITypeInfo,System.Object[])">
            <summary>
             Resolves a value type for a property from a TYPEDESC.  Value types can be
             user defined, which and may be aliased into other type infos.  This function
             will recusively walk the ITypeInfos to resolve the type to a clr Type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2TypeInfoProcessor.ProcessTypeInfoEnum(System.Windows.Forms.UnsafeNativeMethods.ITypeInfo)">
            <summary>
             This converts a type info that describes a IDL defined enum
             into one we can use
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.Com2Variant">
            <summary>
             A class included so we can recognize a variant properly.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor">
            <summary>
             Top level mapping layer between COM Object and TypeDescriptor.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.nativeProps">
            <summary>
             Our collection of Object managers (Com2Properties) for native properties
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.extendedBrowsingHandlers">
            <summary>
             Our collection of browsing handlers, which are stateless and shared across objects.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.clearCount">
            <summary>
             We increment this every time we look at an Object, at specified
             intervals, we run through the properies list to see if we should
             delete any.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.GetTypeDescriptor(System.Type,System.Object)">
             <summary>
              This method returns a custom type descriptor for the given type / object.
              The objectType parameter is always valid, but the instance parameter may
              be null if no instance was passed to TypeDescriptor.  The method should
              return a custom type descriptor for the object.  If the method is not
              interested in providing type information for the object it should
              return null.
            
              This method is prototyped as virtual, and by default returns null
              if no parent provider was passed.  If a parent provider was passed,
              this method will invoke the parent provider's GetTypeDescriptor
              method.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.IsNameDispId(System.Object,Interop.Ole32.DispatchID)">
            <summary>
             Checks if the given dispid matches the dispid that the Object would like to specify
             as its identification proeprty (Name, ID, etc).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.CheckClear(System.Object)">
            <summary>
             Checks all our property manages to see if any have become invalid.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.GetPropsInfo(System.Object)">
            <summary>
             Gets the properties manager for an Object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.GetAttributes(System.Object)">
            <summary>
             Got attributes?
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.GetDefaultProperty(System.Object)">
            <summary>
             Default Property, please
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.GetProperties(System.Object)">
            <summary>
             Props!
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.OnPropsInfoDisposed(System.Object,System.EventArgs)">
            <summary>
             Fired when the property info gets disposed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.ResolveVariantTypeConverterAndTypeEditor(System.Object,System.ComponentModel.TypeConverter@,System.Type,System.Object@)">
            <summary>
             Looks at at value's type and creates an editor based on that.  We use this to decide which editor to use
             for a generic variant.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.ComTypeDescriptor">
            <summary>
             This type descriptor sits on top of a ComNativeDescriptor
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.ComTypeDescriptor.#ctor(System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor,System.Object)">
            <summary>
             Creates a new WalkingTypeDescriptor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.ComTypeDescriptor.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
            <summary>
             ICustomTypeDescriptor implementation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.ComTypeDescriptor.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
            <summary>
             ICustomTypeDescriptor implementation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.ComTypeDescriptor.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
            <summary>
             ICustomTypeDescriptor implementation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.ComTypeDescriptor.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
            <summary>
             ICustomTypeDescriptor implementation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.ComTypeDescriptor.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
            <summary>
             ICustomTypeDescriptor implementation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.ComTypeDescriptor.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
            <summary>
             ICustomTypeDescriptor implementation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.ComTypeDescriptor.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
            <summary>
             ICustomTypeDescriptor implementation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.ComTypeDescriptor.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>
             ICustomTypeDescriptor implementation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.ComTypeDescriptor.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
            <summary>
             ICustomTypeDescriptor implementation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.ComTypeDescriptor.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>
             ICustomTypeDescriptor implementation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.ComTypeDescriptor.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
            <summary>
             ICustomTypeDescriptor implementation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.ComTypeDescriptor.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
             ICustomTypeDescriptor implementation.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.Int32CAMarshaler">
            <summary>
             This class performs marshaling on a CADWORD struct given
             from native code.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Int32CAMarshaler.ItemType">
            <summary>
             Returns the type of item this marshaler will
             return in the items array.  In this case, the type is int.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Int32CAMarshaler.GetItemFromAddress(System.IntPtr)">
            <summary>
             Override this member to perform marshalling of a single item
             given it's native address.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.OleStrCAMarshaler">
            <summary>
             This class performs marshaling on a CALPOLESTR struct given
             from native code.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.OleStrCAMarshaler.ItemType">
            <summary>
             Returns the type of item this marshaler will
             return in the items array.  In this case, the type is string.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.OleStrCAMarshaler.GetItemFromAddress(System.IntPtr)">
            <summary>
             Override this member to perform marshalling of a single item
             given it's native address.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ContainerControl">
            <summary>
             Defines a base class for controls that can parent other controls.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ContainerControl._focusedControl">
            <remarks>
             The current focused control. Do not directly edit this value.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "F:System.Windows.Forms.ContainerControl._unvalidatedControl" -->
        <member name="F:System.Windows.Forms.ContainerControl._autoValidate">
            <summary>
             Indicates whether automatic validation is turned on.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ContainerControl.s_stateScalingNeededOnLayout">
            <summary>
             True if we need to perform scaling when layout resumes
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ContainerControl.s_stateValidating">
            <summary>
             Indicates whether we're currently state[stateValidating].
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ContainerControl.s_stateProcessingMnemonic">
            <summary>
             Indicates whether we or one of our children is currently processing a mnemonic.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ContainerControl.s_stateScalingChild">
            <summary>
             True while we are scaling a child control
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ContainerControl.s_stateParentChanged">
            <summary>
             Flagged when a parent changes so we can adpat our scaling logic to match.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:System.Windows.Forms.ContainerControl"/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ContainerControl.AutoScaleDimensions">
            <summary>
             AutoScaleDimensions represents the DPI or Font setting that the control has been scaled
             to or designed at. Specifically, at design time this property will be set by the
             designer to the value that the developer is designing at. Then, at runtime, when the
             form loads if the CurrentAutoScaleDimensions are different from the AutoScaleDimensions,
             PerformAutoScale will be called and AutoScaleDimensions will be set to the new value to
             match the CurrentAutoScaleDimensions by PerformAutoScale.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ContainerControl.AutoScaleFactor">
            <summary>
             AutoScaleFactor represents the scaling factor difference between
             CurrentAutoScaleDimensions and AutoScaleDimensions. This value is
             calculated on the fly. Eg: If CurrentAutoScaleDimensions is 192, 192
             and AutoScaleDimensions is 96, 96 then the AutoScaleFactor is 2.0, 2.0
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ContainerControl.AutoScaleMode">
            <summary>
             Determines the scaling mode of this control. The default is no scaling.
             Scaling by Font is useful if you wish to have a control
             or form stretch or shrink according to the size of the fonts in the system, and should
             be used when the control or form's size itself does not matter.
             Scaling by DPI is useful when you wish to keep a control or form a specific size
             independent of font. for example, a control displaying a chart or other graphic
             may want to use DPI scaling to increase in size to account for higher DPI monitors.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ContainerControl.AutoValidate">
            <summary>
             Indicates whether controls in this container will be automatically validated when the focus changes.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ContainerControl.BindingContext">
            <summary>
             The binding manager for the container control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ContainerControl.CanEnableIme">
            <summary>
             Container controls support ImeMode only to allow child controls to inherit it from their parents.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ContainerControl.ActiveControl">
            <summary>
             Indicates the current active control on the container control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions">
            <summary>
             Represent the actual DPI or Font settings of the display at runtime. If the AutoScaleMode
             is set to 'None' then the CurrentAutoScaleDimensions is equal to the ActualScaleDimensions.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ContainerControl.ParentForm">
            <summary>
             Indicates the form that the scrollable control is assigned to. This property is read-only.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.System#Windows#Forms#IContainerControl#ActivateControl(System.Windows.Forms.Control)">
            <summary>
             Activates the specified control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.HasFocusableChild">
            <summary>
             Used for UserControls - checks if the control has a focusable control inside or not
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.AfterControlRemoved(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
             Cleans up form state after a control has been removed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.AxContainerFormCreated">
            <summary>
             Used to notify the AxContainer that the form has been created. This should only be called
             if there is an AX container.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.CanProcessMnemonic">
            <summary>
             Specifies whether this control can process the mnemonic or not.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.Dispose(System.Boolean)">
            <summary>
             Disposes of the resources (other than memory) used by the <see cref="T:System.Windows.Forms.ContainerControl"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.EnableRequiredScaling(System.Windows.Forms.Control,System.Boolean)">
            <summary>
             Recursively enables required scaling from the given control
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.FocusActiveControlInternal">
            <summary>
             Assigns focus to the activeControl. If there is no activeControl then focus is given to
             the form. package scope for Form
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.GetFontAutoScaleDimensions">
            <summary>
             This method calcuates the auto scale dimensions based on the control's current font.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.LayoutScalingNeeded">
            <summary>
             This method is called when one of the auto scale properties changes, indicating that we
             should scale controls on the next layout.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.OnAutoScaleModeChanged">
            <summary>
             To maintain backwards compat with AutoScale on form, we need to keep the
             two models from conflicting. This method is only here for Form to override
             it and update its AutoScale property appropriately.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.OnAutoValidateChanged(System.EventArgs)">
            <summary>
             Raises the AutoValidateChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.OnChildLayoutResuming(System.Windows.Forms.Control,System.Boolean)">
            <summary>
             Called when a child is about to resume its layout. The default implementation
             calls OnChildLayoutResuming on the parent.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.OnCreateControl">
            <summary>
             Raises the CreateControl event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.OnFontChanged(System.EventArgs)">
            <summary>
             We override this to clear the current autoscale cache.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.FormDpiChanged(System.Single)">
            <summary>
             This is called by the top level form to clear the current autoscale cache.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
             Container controls scale during layout.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.OnLayoutResuming(System.Boolean)">
            <summary>
             Called when the last resume layout call is made. If performLayout is true a layout will
             occur as soon as this call returns. Layout is still suspended when this call is made.
             The default implementation calls OnChildLayoutResuming on the parent, if it exists.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.OnParentChanged(System.EventArgs)">
            <summary>
             Called when the parent changes. Container controls prefer to have their parents scale
             themselves, but when a parent is first changed, and as a result the font changes as
             well, a container control should scale itself. We save off this state so a later
             font change can trigger a scale of us. We only set this state if required scaling is
             disabled:  if it is enabled we are still initializing and parent changes are normal.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.PerformAutoScale">
            <summary>
             Performs scaling of this control. Scaling works by scaling all children of this control.
             Those children that are ContainerControls will have their PerformAutoScale method called
             so they can scale their children.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.PerformAutoScale(System.Boolean,System.Boolean)">
             <summary>
              Performs scaling of this control. Scaling works by scaling all children of this control.
            
              If includedBounds is true those controls whose bounds have changed since
              they were last scaled will be auto scaled. If excludedBounds is true those
              controls whose bounds have not changed since they were last scaled will be
              auto scaled.
            
              PerformAutoScale is automatically called during OnLayout. The parameters to
              PerformAutoScale are passed as follows:
              1. If AutoScaleDimensions are set, includedBounds is set to true.
              2. If a font change occurred, excludedBounds is set to true.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.PerformNeededAutoScaleOnLayout">
            <summary>
             Checks to see if we need to perform an autoscale in response to a layout.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.ResumeAllLayout(System.Windows.Forms.Control,System.Boolean)">
            <summary>
             Recursively resumes all layout.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.SuspendAllLayout(System.Windows.Forms.Control)">
            <summary>
             Recursively suspends all layout.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.Scale(System.Drawing.SizeF,System.Drawing.SizeF,System.Windows.Forms.Control)">
            <summary>
             Overrides the default scaling mechanism to account for autoscaling. This override
             behaves as follows: any unchanged controls are always scaled according to the container
             control's AutoScaleFactor. Any changed controls are scaled according to the provided
             scaling factor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.ProcessArrowKey(System.Boolean)">
            <summary>
             Process an arrowKey press by selecting the next control in the group that the activeControl
             belongs to.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.ProcessDialogChar(System.Char)">
            <summary>
             Processes a dialog character. Overrides Control.processDialogChar(). This method calls
             the ProcessMnemonic() method to check if the character is a mnemonic for one of the
             controls on the form. If processMnemonic() does not consume the character, then
             base.ProcessDialogChar() is called.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
             Processes a dialog key. Overrides Control.processDialogKey(). This method implements
             handling of the TAB, LEFT, RIGHT, UP, and DOWN keys in dialogs.
             The method performs no processing on keys that include the ALT or CONTROL modifiers.
             For the TAB key, the method selects the next control on the form. For the arrow keys, !!!
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.ProcessTabKey(System.Boolean)">
            <summary>
             Selects the next available control and makes it the active control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.SetActiveControl(System.Windows.Forms.Control)">
            <summary>
             Implements ActiveControl property setter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.UpdateDefaultButton">
            <summary>
             Updates the default button based on current selection, and the acceptButton property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.UpdateFocusedControl">
            <summary>
             Updates the focusedControl variable by walking towards the activeControl variable, firing
             enter and leave events and validation as necessary.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.EnsureUnvalidatedControl(System.Windows.Forms.Control)">
            <summary>
             Make sure we have a valid choice of last unvalidated control if at all possible.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.EnterValidation(System.Windows.Forms.Control)">
            <summary>
             Validates the last unvalidated control and its ancestors (up through the ancestor in common
             with enterControl) if enterControl causes validation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.Validate">
             <summary>
              Validates the last unvalidated control and its ancestors up through, but not including the current control.
            
              This version always performs validation, regardless of the AutoValidate setting of the control's parent.
             </summary>
             <remarks>
              This version is intended for user code that wants to force validation, even
              while auto-validation is turned off. When adding any explicit Validate() calls to our code, consider using
              Validate(true) rather than Validate(), so that you will be sensitive to the current auto-validation setting.
             </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ContainerControl.Validate(System.Boolean)" -->
        <member name="M:System.Windows.Forms.ContainerControl.ValidateChildren">
            <summary>
             Validates all selectable child controls in the container, including descendants. This is
             equivalent to calling ValidateChildren(ValidationConstraints.Selectable). See <see cref='F:System.Windows.Forms.ValidationConstraints.Selectable'/>
             for details of exactly which child controls will be validated.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.ValidateChildren(System.Windows.Forms.ValidationConstraints)">
            <summary>
             Validates all the child controls in the container. Exactly which controls are
             validated and which controls are skipped is determined by <paramref name="flags"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContainerControl.WmSetFocus(System.Windows.Forms.Message@)">
            <summary>
             WM_SETFOCUS handler
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ContentsResizedEventArgs">
            <summary>
             Provides data for the <see cref='E:System.Windows.Forms.RichTextBox.ContentsResized'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ContentsResizedEventArgs.#ctor(System.Drawing.Rectangle)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.ContentsResizedEventArgs'/>
             class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ContentsResizedEventArgs.NewRectangle">
            <summary>
             Represents the requested size of the <see cref='T:System.Windows.Forms.RichTextBox'/> control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ContentsResizedEventHandler">
            <summary>
             Represents a method that will handle the <see cref='E:System.Windows.Forms.RichTextBox.ContentsResized'/>
             event of a <see cref='T:System.Windows.Forms.RichTextBox'/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Windows.Forms.ContextMenuStrip" -->
        <member name="M:System.Windows.Forms.ContextMenuStrip.#ctor(System.ComponentModel.IContainer)">
            <summary>
             Summary of ContextMenuStrip.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Control">
            <summary>
             Defines the base class for controls, which are components with visual representation.
            </summary>
            <remarks>
            Do not add instance variables to Control absolutely neccessary. Every control on a form has the overhead of
            all of these variables.
            </remarks>
            <summary>
             Control's IME feature.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Control.ActiveXFontMarshaler">
            <summary>
             This is a marshaler object that knows how to marshal IFont to Font and back.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Control.ActiveXImpl">
            <summary>
             This class holds all of the state data for an ActiveX control and
             supplies the implementation for many of the non-trivial methods.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.#ctor(System.Windows.Forms.Control)">
            <summary>
             Creates a new ActiveXImpl.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ActiveXImpl.AmbientBackColor">
            <summary>
             Retrieves the ambient back color for the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ActiveXImpl.AmbientFont">
            <summary>
             Retrieves the ambient font for the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ActiveXImpl.AmbientForeColor">
            <summary>
             Retrieves the ambient back color for the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ActiveXImpl.EventsFrozen">
            <summary>
             Determines if events should be frozen.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ActiveXImpl.HWNDParent">
            <summary>
             Provides access to the parent window handle
             when we are UI active
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ActiveXImpl.IsIE">
            <summary>
             Returns true if this app domain is running inside of IE.  The
             control must be sited for this to succeed (it will assert and
             return false if the control is not sited).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ActiveXImpl.LogPixels">
            <summary>
             Retrieves the number of logical pixels per inch on the
             primary monitor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.Advise(System.Runtime.InteropServices.ComTypes.IAdviseSink)">
            <summary>
             Implements IOleObject::Advise
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.Close(Interop.Ole32.OLECLOSE)">
            <summary>
             Implements IOleObject::Close
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.DoVerb(Interop.Ole32.OLEIVERB,Interop.User32.MSG*,Interop.Ole32.IOleClientSite,System.Int32,System.IntPtr,Interop.RECT*)">
            <summary>
             Implements IOleObject::DoVerb
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.Draw(Interop.Ole32.DVASPECT,System.Int32,System.IntPtr,Interop.Ole32.DVTARGETDEVICE*,System.IntPtr,System.IntPtr,Interop.RECT*,Interop.RECT*,System.IntPtr,System.UInt32)">
            <summary>
             Implements IViewObject2::Draw.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.EnumVerbs(Interop.Ole32.IEnumOLEVERB@)">
            <summary>
             Returns a new verb enumerator.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.FromBase64WrappedString(System.String)">
            <summary>
             Converts the given string to a byte array.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.GetAdvise(Interop.Ole32.DVASPECT*,Interop.Ole32.ADVF*,System.Runtime.InteropServices.ComTypes.IAdviseSink[])">
            <summary>
             Implements IViewObject2::GetAdvise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.GetAmbientProperty(Interop.Ole32.DispatchID,System.Object@)">
            <summary>
             Helper function to retrieve an ambient property.  Returns false if the
             property wasn't found.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.GetClientSite">
            <summary>
             Implements IOleObject::GetClientSite.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.GetExtent(Interop.Ole32.DVASPECT,System.Drawing.Size*)">
            <summary>
             Implements IOleObject::GetExtent.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.GetMnemonicList(System.Windows.Forms.Control,System.Collections.ArrayList)">
            <summary>
             Searches the control hierarchy of the given control and adds
             the mnemonics for each control to mnemonicList.  Each mnemonic
             is added as a char to the list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.GetStreamName">
            <summary>
             Name to use for a stream: use the control's type name (max 31 chars, use the end chars
             if it's longer than that)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.GetWindow(System.IntPtr*)">
            <summary>
             Implements IOleWindow::GetWindow
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.HiMetricToPixel(System.Int32,System.Int32)">
            <summary>
             Converts coordinates in HiMetric to pixels.  Used for ActiveX sourcing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.InPlaceActivate(Interop.Ole32.OLEIVERB)">
            <summary>
             In place activates this Object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.InPlaceDeactivate">
            <summary>
             Implements IOleInPlaceObject::InPlaceDeactivate.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.IsDirty">
            <summary>
             Implements IPersistStreamInit::IsDirty.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.IsResourceProp(System.ComponentModel.PropertyDescriptor)">
            <summary>
             Looks at the property to see if it should be loaded / saved as a resource or
             through a type converter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.Load(Interop.Ole32.IStorage)">
            <summary>
             Implements IPersistStorage::Load
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.Load(Interop.Ole32.IStream)">
            <summary>
             Implements IPersistStreamInit::Load
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.Load(Interop.Ole32.IPropertyBag,Interop.Ole32.IErrorLog)">
            <summary>
             Implements IPersistPropertyBag::Load
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.LookupAmbient(Interop.Ole32.DispatchID)">
            <summary>
             Simple lookup to find the AmbientProperty corresponding to the given
             dispid.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.MergeRegion(System.IntPtr)">
            <summary>
             Merges the input region with the current clipping region.
             The output is always a region that can be fed directly
             to SetWindowRgn.  The region does not have to be destroyed.
             The original region is destroyed if a new region is returned.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.OnAmbientPropertyChange(Interop.Ole32.DispatchID)">
            <summary>
             Implements IOleControl::OnAmbientPropertyChanged
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.OnDocWindowActivate(Interop.BOOL)">
            <summary>
             Implements IOleInPlaceActiveObject::OnDocWindowActivate.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.OnFocus(System.Boolean)">
            <summary>
             Called by Control when it gets the focus.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.PixelToHiMetric(System.Int32,System.Int32)">
            <summary>
             Converts coordinates in pixels to HiMetric.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.QuickActivate(Interop.Ole32.QACONTAINER,Interop.Ole32.QACONTROL*)">
            <summary>
             Our implementation of IQuickActivate::QuickActivate
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Control.ActiveXImpl.AdviseHelper">
            <summary>
             Helper class. Calls IConnectionPoint.Advise to hook up a native COM event sink
             to a manage .NET event interface.
             The events are exposed to COM by the CLR-supplied COM-callable Wrapper (CCW).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.AdviseHelper.AdviseConnectionPoint(System.Object,System.Object,System.Type,System.UInt32@)">
            <summary>
             Get the COM connection point container from the CLR's CCW and advise for the given event id.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.AdviseHelper.AdviseConnectionPoint(System.Windows.Forms.Control.ActiveXImpl.AdviseHelper.ComConnectionPointContainer,System.Object,System.Type,System.UInt32@)">
            <summary>
             Find the COM connection point and call Advise for the given event id.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Control.ActiveXImpl.AdviseHelper.SafeIUnknown">
            <summary>
             Wraps a native IUnknown in a SafeHandle.
             See similar implementaton in the <see cref='!:Transactions.SafeIUnknown'/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.AdviseHelper.SafeIUnknown.#ctor(System.Object,System.Boolean)">
            <summary>
             Wrap an incomoing unknown or get the unknown for the CCW (COM-callable wrapper).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.AdviseHelper.SafeIUnknown.#ctor(System.Object,System.Boolean,System.Guid)">
            <summary>
             Wrap an incomoing unknown or get the unknown for the CCW (COM-callable wrapper).
             If an iid is supplied, QI for the interface and wrap that unknonwn instead.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.AdviseHelper.SafeIUnknown.InternalQueryInterface(System.IntPtr,System.Guid@)">
            <summary>
             Helper function for QueryInterface.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ActiveXImpl.AdviseHelper.SafeIUnknown.IsInvalid">
            <summary>
             Return whether the handle is invalid.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.AdviseHelper.SafeIUnknown.ReleaseHandle">
            <summary>
             Release the IUnknown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.AdviseHelper.SafeIUnknown.LoadVtable``1">
            <summary>
             Helper function to load a COM v-table from a com object pointer.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Control.ActiveXImpl.AdviseHelper.ComConnectionPointContainer">
            <summary>
             Helper class to access IConnectionPointContainer from a .NET COM-callable wrapper.
             The IConnectionPointContainer COM pointer is wrapped in a SafeHandle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.AdviseHelper.ComConnectionPointContainer.FindConnectionPoint(System.Type)">
            <summary>
             Call IConnectionPointContainer.FindConnectionPoint using Delegate.Invoke on the v-table slot.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Control.ActiveXImpl.AdviseHelper.ComConnectionPoint">
            <summary>
             Helper class to access IConnectionPoint from a .NET COM-callable wrapper.
             The IConnectionPoint COM pointer is wrapped in a SafeHandle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.AdviseHelper.ComConnectionPoint.Advise(System.IntPtr,System.UInt32@)">
            <summary>
             Call IConnectioinPoint.Advise using Delegate.Invoke on the v-table slot.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.GetDefaultEventsInterface(System.Type)">
            <summary>
             Return the default COM events interface declared on a .NET class.
             This looks for the ComSourceInterfacesAttribute and returns the .NET
             interface type of the first interface declared.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.Save(Interop.Ole32.IStorage,Interop.BOOL)">
            <summary>
             Implements IPersistStorage::Save
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.Save(Interop.Ole32.IStream,Interop.BOOL)">
            <summary>
             Implements IPersistStreamInit::Save
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.Save(Interop.Ole32.IPropertyBag,Interop.BOOL,Interop.BOOL)">
            <summary>
             Implements IPersistPropertyBag::Save
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.SendOnSave">
            <summary>
             Fires the OnSave event to all of our IAdviseSink
             listeners.  Used for ActiveXSourcing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.SetAdvise(Interop.Ole32.DVASPECT,Interop.Ole32.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink)">
            <summary>
             Implements IViewObject2::SetAdvise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.SetClientSite(Interop.Ole32.IOleClientSite)">
            <summary>
             Implements IOleObject::SetClientSite.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.SetExtent(Interop.Ole32.DVASPECT,System.Drawing.Size*)">
            <summary>
             Implements IOleObject::SetExtent
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.SetInPlaceVisible(System.Boolean)">
            <summary>
             Marks our state as in place visible.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.SetObjectRects(Interop.RECT*,Interop.RECT*)">
            <summary>
             Implements IOleInPlaceObject::SetObjectRects.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.ThrowHr(Interop.HRESULT)">
            <summary>
             Throws the given hresult. This is used by ActiveX sourcing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.TranslateAccelerator(Interop.User32.MSG*)">
            <summary>
             Handles IOleControl::TranslateAccelerator
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.UIDeactivate">
            <summary>
             Implements IOleInPlaceObject::UIDeactivate.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.Unadvise(System.UInt32)">
            <summary>
             Implements IOleObject::Unadvise
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.UpdateBounds(System.Int32@,System.Int32@,System.Int32@,System.Int32@,Interop.User32.SWP)">
            <summary>
             Notifies our site that we have changed our size and location.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.UpdateAccelTable">
            <summary>
             Notifies that the accelerator table needs to be updated due to a change in a control mnemonic.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.ViewChanged">
            <summary>
             Notifies our view advise sink (if it exists) that the view has
             changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.System#Windows#Forms#IWindowTarget#OnHandleChange(System.IntPtr)">
            <summary>
             Called when the window handle of the control has changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXImpl.System#Windows#Forms#IWindowTarget#OnMessage(System.Windows.Forms.Message@)">
            <summary>
             Called to do control-specific processing for this window.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Control.ActiveXImpl.PropertyBagStream">
            <summary>
             This is a property bag implementation that sits on a stream.  It can
             read and write the bag to the stream.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Control.ActiveXVerbEnum">
            <summary>
             Simple verb enumerator.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Control.AmbientProperty">
            <summary>
             Contains a single ambient property, including DISPID, name and value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.AmbientProperty.#ctor(System.String,Interop.Ole32.DispatchID)">
             <summary>
              Creates a new, empty ambient property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.AmbientProperty.Name">
            <summary>
             The windows forms property name.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.AmbientProperty.DispID">
            <summary>
             The DispID for the property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.AmbientProperty.Empty">
            <summary>
             Returns true if this property has not been set.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.AmbientProperty.Value">
            <summary>
             The current value of the property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.AmbientProperty.ResetValue">
            <summary>
             Resets the property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.AxSourcingSite.Component">
            <summary>
             The component sited by this component site.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.AxSourcingSite.Container">
            <summary>
             The container in which the component is sited.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.AxSourcingSite.DesignMode">
            <summary>
             Indicates whether the component is in design mode.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.AxSourcingSite.Name">
            <summary>
             The name of the component.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Control.ControlAccessibleObject">
            <summary>
             An implementation of AccessibleChild for use with Controls
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ControlAccessibleObject.GetSysChildOrder">
            <summary>
             For container controls only, return array of child controls sorted into
             tab index order. This gets applies to the list of child accessible objects
             as returned by the system, so that we can present a meaningful order to
             the user. The system defaults to z-order, which is bad for us because
             that is usually the reverse of tab order!
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ControlAccessibleObject.GetSysChild(System.Windows.Forms.AccessibleNavigation,System.Windows.Forms.AccessibleObject@)">
             <summary>
              Perform custom navigation between parent/child/sibling accessible objects,
              using tab index order as the guide, rather than letting the system default
              behavior do navigation based on z-order.
            
              For a container control and its child controls, the accessible object tree
              looks like this...
            
              [client area of container]
               [non-client area of child #1]
                   [random non-client elements]
                   [client area of child #1]
                   [random non-client elements]
               [non-client area of child #2]
                   [random non-client elements]
                   [client area of child #2]
                   [random non-client elements]
               [non-client area of child #3]
                   [random non-client elements]
                   [client area of child #3]
                   [random non-client elements]
            
              We need to intercept first-child / last-child navigation from the container's
              client object, and next-sibling / previous-sibling navigation from each child's
              non-client object. All other navigation operations must be allowed to fall back
              on the system's deafult behavior (provided by OLEACC.DLL).
            
              When combined with the re-ordering behavior of GetSysChildOrder() above, this
              allows us to present the end user with the illusion of accessible objects in
              tab index order, even though the system behavior only supports z-order.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ControlAccessibleObject.RaiseLiveRegionChanged">
            <summary>
             Raises the LiveRegionChanged UIA event.
             To make this method effective, the control must implement System.Windows.Forms.Automation.IAutomationLiveRegion interface
             and its LiveSetting property must return either AutomationLiveSetting.Polite or AutomationLiveSetting.Assertive value.
            </summary>
            <returns>True if operation succeeds, False otherwise.</returns>
        </member>
        <member name="T:System.Windows.Forms.Control.ControlCollection">
            <summary>
             Collection of controls...
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Control.ControlCollection._lastAccessedIndex">
             A caching mechanism for key accessor
             We use an index here rather than control so that we don't have lifetime
             issues by holding on to extra references.
             Note this is not Thread Safe - but WinForms has to be run in a STA anyways.
        </member>
        <member name="M:System.Windows.Forms.Control.ControlCollection.ContainsKey(System.String)">
            <summary>
             Returns true if the collection contains an item with the specified key, false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ControlCollection.Add(System.Windows.Forms.Control)">
            <summary>
             Adds a child control to this control. The control becomes the last control in
             the child control list. If the control is already a child of another control it
             is first removed from that control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ControlCollection.Find(System.String,System.Boolean)">
            <summary>
             Searches for Controls by their Name property, builds up an array
             of all the controls that match.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ControlCollection.FindInternal(System.String,System.Boolean,System.Windows.Forms.Control.ControlCollection,System.Collections.ArrayList)">
            <summary>
             Searches for Controls by their Name property, builds up an array list
             of all the controls that match.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ControlCollection.IndexOfKey(System.String)">
            <summary>
             The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ControlCollection.IsValidIndex(System.Int32)">
            <summary>
             Determines if the index is valid for the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ControlCollection.Owner">
            <summary>
             Who owns this control collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ControlCollection.Remove(System.Windows.Forms.Control)">
            <summary>
             Removes control from this control. Inheriting controls should call
             base.remove to ensure that the control is removed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ControlCollection.RemoveByKey(System.String)">
            <summary>
             Removes the child control with the specified key.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ControlCollection.Item(System.Int32)">
            <summary>
             Retrieves the child control with the specified index.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ControlCollection.Item(System.String)">
            <summary>
             Retrieves the child control with the specified key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ControlCollection.GetChildIndex(System.Windows.Forms.Control)">
            <summary>
             Retrieves the index of the specified
             child control in this array.  An ArgumentException
             is thrown if child is not parented to this
             Control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ControlCollection.GetChildIndex(System.Windows.Forms.Control,System.Boolean)">
            <summary>
             Retrieves the index of the specified
             child control in this array.  An ArgumentException
             is thrown if child is not parented to this
             Control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ControlCollection.SetChildIndexInternal(System.Windows.Forms.Control,System.Int32)">
            <summary>
             This is internal virtual method so that "Readonly Collections" can override this and throw as they should not allow changing
             the child control indices.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ControlCollection.SetChildIndex(System.Windows.Forms.Control,System.Int32)">
            <summary>
             Sets the index of the specified
             child control in this array.  An ArgumentException
             is thrown if child is not parented to this
             Control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Control.ControlTabOrderHolder">
            <summary>
             This class contains a control and associates it with a z-order.
             This is used when sorting controls based on tab index first,
             z-order second.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Control.ControlTabOrderComparer">
            <summary>
             Used to sort controls based on tab index and z-order.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ControlVersionInfo.CompanyName">
            <summary>
             The company name associated with the component.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ControlVersionInfo.ProductName">
            <summary>
             The product name associated with this component.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ControlVersionInfo.ProductVersion">
            <summary>
             The product version associated with this component.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ControlVersionInfo.GetFileVersionInfo">
            <summary>
             Retrieves the FileVersionInfo associated with the main module for
             the component.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Control._controlStyle">
            <summary>
            User supplied control style
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Control'/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Control'/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Control'/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Control'/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Control'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.DpiAwarenessContext">
            <summary>
             Gets control Dpi awareness context value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.AccessibilityObject">
            <summary>
             The Accessibility Object for this Control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.NcAccessibilityObject">
            <summary>
             Private accessibility object for control, used to wrap the object that
             OLEACC.DLL creates to represent the control's non-client (NC) region.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.GetAccessibilityObject(System.Int32)">
            <summary>
             Returns a specific AccessibleObject associated with this
             control, based on standard "accessibile object id".
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.GetAccessibilityObjectById(System.Int32)">
            <summary>
             Returns a specific AccessibleObbject associated w/ the objectID
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription">
            <summary>
             The default action description of the control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.AccessibleDescription">
            <summary>
             The accessible description of the control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.AccessibleName">
            <summary>
             The accessible name of the control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.AccessibleRole">
            <summary>
             The accessible role of the control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ActiveXInstance">
            <summary>
             Retrieves the ActiveX control implementation for
             this control.  This will demand create the implementation
             if it does not already exist.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.AllowDrop">
            <summary>
             The AllowDrop property. If AllowDrop is set to true then
             this control will allow drag and drop operations and events to be used.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Anchor">
            <summary>
             The current value of the anchor property. The anchor property
             determines which edges of the control are anchored to the container's
             edges.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.AutoScrollOffset">
            <summary>
             Controls the location of where this control is scrolled to in ScrollableControl.ScrollControlIntoView.
             Default is the upper left hand corner of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.BackColorBrush">
            <summary>
             The GDI brush for our background color.
             Whidbey Note: Made this internal, since we need to use this in ButtonStandardAdapter. Also, renamed
                    from BackBrush to BackColorBrush due to a naming conflict with DataGrid's BackBrush.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.BackColor">
            <summary>
             The background color of this control. This is an ambient property and
             will always return a non-null value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.BackgroundImage">
            <summary>
             The background image of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.BackgroundImageLayout">
            <summary>
             The BackgroundImageLayout of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.BindingContextInternal">
            <summary>
             BindingContextInternal provides a mechanism so that controls like SplitContainer that inherit from the
             ContainerControl can bypass the "containerControls" bindingContext property and do what the other simple controls
             do.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Bottom">
            <summary>
             The bottom coordinate of this control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Bounds">
            <summary>
             The bounds of this control. This is the window coordinates of the
             control in parent client coordinates.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.CanFocus">
            <summary>
             Indicates whether the control can receive focus. This
             property is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.CanRaiseEvents">
            <summary>
             Determines if events can be fired on the control.  If this control is being
             hosted as an ActiveX control, this property will return false if the ActiveX
             control has its events frozen.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.CanSelect">
            <summary>
             Indicates whether the control can be selected. This property
             is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Capture">
            <summary>
             Indicates whether the control has captured the mouse.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.CausesValidation">
            <summary>
             Indicates whether entering the control causes validation on the controls requiring validation.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.CacheTextInternal">
              This is for perf. Turn this property on to temporarily enable text caching.  This is good for
              operations such as layout or painting where we don't expect the text to change (we will update the
              cache if it does) but prevents us from sending a ton of messages turing layout.  See the PaintWithErrorHandling
              function.
            
        </member>
        <member name="P:System.Windows.Forms.Control.ClientRectangle">
            <summary>
             The client rect of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ClientSize">
            <summary>
             The size of the clientRect.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.ClientSizeChanged">
            <summary>
             Fired when ClientSize changes.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.CompanyName">
            <summary>
             Retrieves the company name of this specific component.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ContainsFocus">
            <summary>
             Indicates whether the control or one of its children currently has the system
             focus. This property is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ContextMenuStrip">
            <summary>
             The contextMenuStrip associated with this control. The contextMenuStrip
             will be shown when the user right clicks the mouse on the control.
             Note: if a context menu is also assigned, it will take precidence over this property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Controls">
            <summary>
             Collection of child controls.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Created">
            <summary>
             Indicates whether the control has been created. This property is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.CreateParams">
            <summary>
             Returns the CreateParams used to create the handle for this control.
             Inheriting classes should call base.CreateParams in the manor
             below:
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ValidateActiveControl(System.Boolean@)">
             <summary>
              Helper method...
            
              Triggers validation on the active control, and returns bool indicating whether that control was valid.
            
              The correct way to do this is to find the common ancestor of the active control and this control,
              then request validation to be performed by that common container control.
            
              Used by controls that don't participate in the normal enter/leave/validation process, but which
              want to force form-level validation to occur before they attempt some important action.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.IsTopMdiWindowClosing">
            <summary>
             returns bool indicating whether the Top MDI Window is closing.
             This property is set in the MDI children in WmClose method in form.cs when the top window is closing.
             This property will be used in ActiveControl to determine if we want to skip set focus and window handle re-creation for the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.IsCurrentlyBeingScaled">
            <summary>
             returns bool indicating whether the control is currently being scaled.
             This property is set in ScaleControl method to allow method being called to condition code that should not run for scaling.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.CreateThreadId">
            <summary>
             Retrieves the Win32 thread ID of the thread that created the
             handle for this control.  If the control's handle hasn't been
             created yet, this method will return the current thread's ID.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Cursor">
            <summary>
             Retrieves the cursor that will be displayed when the mouse is over this
             control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.DataBindings">
            <summary>
             Retrieves the bindings for this control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.DefaultBackColor">
            <summary>
             The default BackColor of a generic top-level Control.  Subclasses may have
             different defaults.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.DefaultCursor">
            <summary>
             Deriving classes can override this to configure a default cursor for their control.
             This is more efficient than setting the cursor in the control's constructor,
             and gives automatic support for ShouldSerialize and Reset in the designer.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.DefaultFont">
            <summary>
             The default Font of a generic top-level Control.  Subclasses may have
             different defaults.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.DefaultForeColor">
            <summary>
             The default ForeColor of a generic top-level Control.  Subclasses may have
             different defaults.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.DeviceDpi">
            <summary>
             DPI value either for the primary screen or for the monitor where the top-level parent is displayed when
             EnableDpiChangedMessageHandling option is on and the application is per-monitor V2 DPI-aware (rs2+)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.DisplayRectangle">
            <summary>
             Returns the client rect of the display area of the control.
             For the base control class, this is identical to getClientRect.
             However, inheriting controls may want to change this if their client
             area differs from their display area.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.IsDisposed">
            <summary>
             Indicates whether the control has been disposed. This
             property is read-only.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.DisposeFontHandle">
            <summary>
             Disposes of the currently selected font handle (if cached).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Disposing">
            <summary>
             Indicates whether the control is in the process of being disposed. This
             property is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Dock">
            <summary>
             The dock property. The dock property controls to which edge
             of the container this control is docked to. For example, when docked to
             the top of the container, the control will be displayed flush at the
             top of the container, extending the length of the container.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.DoubleBuffered">
            <summary>
             This will enable or disable double buffering.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Enabled">
            <summary>
             Indicates whether the control is currently enabled.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.EnabledChanged">
            <summary>
             Occurs when the control is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Focused">
            <summary>
             Indicates whether the control has focus. This property is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Font">
            <summary>
             Retrieves the current font for this control. This will be the font used
             by default for painting and text in the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ForeColor">
            <summary>
             The foreground color of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Handle">
            <summary>
             The HWND handle that this control is bound to. If the handle
             has not yet been created, this will force handle creation.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.HasChildren">
            <summary>
             True if this control has child controls in its collection.  This
             is more efficient than checking for Controls.Count > 0, but has the
             same effect.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Height">
            <summary>
             The height of this control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.IsHandleCreated">
            <summary>
             Whether or not this control has a handle associated with it.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.IsLayoutSuspended">
            <summary>
             Determines if layout is currently suspended.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.InternalHandle">
            <summary>
             Returns the current value of the handle. This may be zero if the handle
             has not been created.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.InvokeRequired">
             <summary>
              Determines if the caller must call invoke when making method
              calls to this control.  Controls in windows forms are bound to a specific thread,
              and are not thread safe.  Therefore, if you are calling a control's method
              from a different thread, you must use the control's invoke method
              to marshal the call to the proper thread.  This function can be used to
              determine if you must call invoke, which can be handy if you don't know
              what thread owns a control.
            
              There are five functions on a control that are safe to call from any
              thread:  GetInvokeRequired, Invoke, BeginInvoke, EndInvoke and
              CreateGraphics.  For all other method calls, you should use one of the
              invoke methods.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.IsAccessible">
            <summary>
             Indicates whether or not this control is an accessible control
             i.e. whether it should be visible to accessibility applications.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.IsActiveX">
            <summary>
             Used to tell if this control is being hosted as an ActiveX control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.IsIEParent">
            <summary>
             Used to tell if this control is being hosted in IE.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.IsMirrored">
            <summary>
             Used to tell if the control is mirrored
             Don't call this from CreateParams. Will lead to nasty problems
             since we might call CreateParams here - you dig!
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.IsMnemonicsListenerAxSourced">
            <summary>
             Specifies whether the control is willing to process mnemonics when hosted in an container ActiveX (Ax Sourcing).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.IsValidBackColor(System.Drawing.Color)">
            <summary>
             Used to tell if this BackColor is Supported
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.LastKeyData">
            <summary>
             Stores information about the last button or combination pressed by the user.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Left">
            <summary>
             The left coordinate of this control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Location">
            <summary>
             The location of this control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ModifierKeys">
            <summary>
             Retrieves the current state of the modifier keys. This will check the
             current state of the shift, control, and alt keys.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.MouseButtons">
            <summary>
             The current state of the mouse buttons. This will check the
             current state of the left, right, and middle mouse buttons.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.MousePosition">
            <summary>
             The current position of the mouse in screen coordinates.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Name">
            <summary>
             Name of this control. The designer will set this to the same
             as the programatic Id "(name)" of the control.  The name can be
             used as a key into the ControlCollection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Parent">
            <summary>
             The parent of this control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ProductName">
            <summary>
             Retrieves the product name of this specific component.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ProductVersion">
            <summary>
             Retrieves the product version of this specific component.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Properties">
            <summary>
             Retrieves our internal property storage object. If you have a property
             whose value is not always set, you should store it in here to save
             space.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.RecreatingHandle">
            <summary>
             Indicates whether the control is currently recreating its handle. This
             property is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Region">
            <summary>
             The Region associated with this control.  (defines the
             outline/silhouette/boundary of control)
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.RegionChanged">
            <summary>
             Event fired when the value of Region property is changed on Control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.RenderTransparent">
            <summary>
             Determines if the parent's background will be rendered on the label control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.RenderTransparencyWithVisualStyles">
            <summary>
             This property is required by certain controls (TabPage) to render its transparency using theming API.
             We dont want all controls (that are have transparent BackColor) to use theming API to render its background because it has  HUGE PERF cost.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.RequiredScaling">
            <summary>
             Represents the bounds of the control that need to be scaled.  Control bounds
             need to be scaled until ScaleControl is called.  They need to be scaled again
             if their bounds change after ScaleControl is called.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.RequiredScalingEnabled">
            <summary>
             Determines if the required scaling property is enabled.  If not,
             RequiredScaling always returns None.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ResizeRedraw">
            <summary>
             Indicates whether the control should redraw itself when resized.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Right">
            <summary>
             The right coordinate of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.RightToLeft">
            <summary>
             This is used for international applications where the language
             is written from RightToLeft. When this property is true,
             control placement and text will be from right to left.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ScaleChildren">
            <summary>
             This property controls the scaling of child controls.  If true child controls
             will be scaled when the Scale method on this control is called.  If false,
             child controls will not be scaled.  The default is true, and you must override
             this property to provide a different value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Size">
            <summary>
             The size of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.TabIndex">
            <summary>
             The tab index of this control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.TabStop">
            <summary>
             Indicates whether the user can give the focus to this control using the TAB
             key. This property is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Text">
            <summary>
             The current text associated with this control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Top">
            <summary>
             Top coordinate of this control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.TopLevelControl">
            <summary>
             The top level control that contains this control. This doesn't
             have to be the same as the value returned from getForm since forms
             can be parented to other controls.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ShowKeyboardCues">
            <summary>
             Indicates whether the user interface is in a state to show or hide keyboard
             accelerators. This property is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ShowFocusCues">
            <summary>
             Indicates whether the user interface is in a state to show or hide focus
             rectangles. This property is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.UseWaitCursor">
            <summary>
             When this property in true the Cursor Property is set to WaitCursor as well as the Cursor Property
             of all the child controls.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.UseCompatibleTextRenderingInt">
            <summary>
             Determines whether to use compatible text rendering engine (GDI+) or not (GDI).
             This property overwrites the UseCompatibleTextRenderingDefault switch when set programmatically.
             Exposed publicly only by controls that support GDI text rendering (Label, LinkLabel and some others).
             Observe that this property is NOT virtual (to allow for caching the property value - see LinkLabel)
             and should be used by controls that support it only (see SupportsUseCompatibleTextRendering).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.SupportsUseCompatibleTextRendering">
            <summary>
             Determines whether the control supports rendering text using GDI+ and GDI.
             This is provided for container controls (PropertyGrid) to iterate through its children to set
             UseCompatibleTextRendering to the same value if the child control supports it.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Visible">
            <summary>
             Indicates whether the control is visible.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.VisibleChanged">
            <summary>
             Occurs when the control becomes visible.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WaitForWaitHandle(System.Threading.WaitHandle)">
            <summary>
             Wait for the wait handle to receive a signal: throw an exception if the thread is no longer with us.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.Width">
            <summary>
             The width of this control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.WindowExStyle">
            <summary>
             The current exStyle of the hWnd
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.WindowStyle">
            <summary>
             The current style of the hWnd
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.WindowTarget">
            <summary>
             The target of Win32 window messages.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.WindowText">
            <summary>
             The current text of the Window; if the window has not yet been created, stores it in the control.
             If the window has been created, stores the text in the underlying win32 control.
             This property should be used whenever you want to get at the win32 control's text. For all other cases,
             use the Text property - but note that this is overridable, and any of your code that uses it will use
             the overridden version in controls that subclass your own.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.Click">
            <summary>
             Occurs when the control is clicked.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.ControlAdded">
            <summary>
             Occurs when a new control is added.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.ControlRemoved">
            <summary>
             Occurs when a control is removed.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.HandleCreated">
            <summary>
             Occurs when a handle is created for the control.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.HandleDestroyed">
            <summary>
             Occurs when the control's handle is destroyed.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.DoubleClick">
            <summary>
             Occurs when the control is double clicked.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.Enter">
            <summary>
             Occurs when the control is entered.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.GotFocus">
            <summary>
             Occurs when the control receives focus.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.KeyDown">
            <summary>
             Occurs when a key is pressed down while the control has focus.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.KeyPress">
            <summary>
             Occurs when a key is pressed while the control has focus.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.KeyUp">
            <summary>
             Occurs when a key is released while the control has focus.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.Leave">
            <summary>
             Occurs when the control is left.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.LostFocus">
            <summary>
             Occurs when the control loses focus.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.MouseClick">
            <summary>
             Occurs when the control is mouse clicked.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.MouseDoubleClick">
            <summary>
             Occurs when the control is mouse double clicked.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.MouseCaptureChanged">
            <summary>
             Occurs when the control loses mouse Capture.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.MouseDown">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is
             pressed.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.MouseEnter">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.MouseLeave">
            <summary>
             Occurs when the mouse pointer leaves the control.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.DpiChangedBeforeParent">
            <summary>
             Occurs when the DPI resolution of the screen this control is displayed on changes,
             either when the top level window is moved between monitors or when the OS settings are changed.
             This event is raised before the top level parent window recieves WM_DPICHANGED message.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.DpiChangedAfterParent">
            <summary>
             Occurs when the DPI resolution of the screen this control is displayed on changes,
             either when the top level window is moved between monitors or when the OS settings are changed.
             This message is received after the top levet parent window recieves WM_DPICHANGED message.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.MouseHover">
            <summary>
             Occurs when the mouse pointer hovers over the contro.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.MouseMove">
            <summary>
             Occurs when the mouse pointer is moved over the control.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.MouseUp">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is released.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.MouseWheel">
            <summary>
             Occurs when the mouse wheel moves while the control has focus.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.Move">
            <summary>
             Occurs when the control is moved.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.PreviewKeyDown">
            <summary>
             Raised to preview a key down event
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.Resize">
            <summary>
             Occurs when the control is resized.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.Validating">
            <summary>
             Occurs when the control is validating.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Control.Validated">
            <summary>
             Occurs when the control is done validating.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXMergeRegion(System.IntPtr)">
            <summary>
             Helper method for retrieving an ActiveX property.  We abstract these
             to another method so we do not force JIT the ActiveX codebase.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXOnFocus(System.Boolean)">
            <summary>
             Helper method for retrieving an ActiveX property.  We abstract these
             to another method so we do not force JIT the ActiveX codebase.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXViewChanged">
            <summary>
             Helper method for retrieving an ActiveX property.  We abstract these
             to another method so we do not force JIT the ActiveX codebase.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ActiveXUpdateBounds(System.Int32@,System.Int32@,System.Int32@,System.Int32@,Interop.User32.SWP)">
            <summary>
             Helper method for retrieving an ActiveX property.  We abstract these
             to another method so we do not force JIT the ActiveX codebase.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.AssignParent(System.Windows.Forms.Control)">
            <summary>
             Assigns a new parent control. Sends out the appropriate property change
             notifications for properties that are affected by the change of parent.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
             <summary>
              Executes the given delegate on the thread that owns this Control's
              underlying window handle.  The delegate is called asynchronously and this
              method returns immediately.  You may call this from any thread, even the
              thread that owns the control's handle.  If the control's handle doesn't
              exist yet, this will follow up the control's parent chain until it finds a
              control or form that does have a window handle.  If no appropriate handle
              can be found, BeginInvoke will throw an exception.  Exceptions within the
              delegate method are considered untrapped and will be sent to the
              application's untrapped exception handler.
            
              There are five functions on a control that are safe to call from any
              thread:  GetInvokeRequired, Invoke, BeginInvoke, EndInvoke and CreateGraphics.
              For all other method calls, you should use one of the invoke methods to marshal
              the call to the control's thread.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
             <summary>
              Executes the given delegate on the thread that owns this Control's
              underlying window handle.  The delegate is called asynchronously and this
              method returns immediately.  You may call this from any thread, even the
              thread that owns the control's handle.  If the control's handle doesn't
              exist yet, this will follow up the control's parent chain until it finds a
              control or form that does have a window handle.  If no appropriate handle
              can be found, BeginInvoke will throw an exception.  Exceptions within the
              delegate method are considered untrapped and will be sent to the
              application's untrapped exception handler.
            
              There are five functions on a control that are safe to call from any
              thread:  GetInvokeRequired, Invoke, BeginInvoke, EndInvoke and CreateGraphics.
              For all other method calls, you should use one of the invoke methods to marshal
              the call to the control's thread.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.BringToFront">
            <summary>
             Brings this control to the front of the zorder.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.CanProcessMnemonic">
            <summary>
             Specifies whether this control can process the mnemonic or not.  A condition to process a mnemonic is that
             all controls in the parent chain can do it too, but since the semantics for this function can be overriden,
             we need to call the method on the parent 'recursively' (not exactly since it is not necessarily the same method).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.CheckParentingCycle(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
             Searches the parent/owner tree for bottom to find any instance
             of toFind in the parent/owner tree.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Contains(System.Windows.Forms.Control)">
            <summary>
             Verifies if a control is a child of this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.CreateAccessibilityInstance">
            <summary>
             constructs the new instance of the accessibility object for this control. Subclasses
             should not call base.CreateAccessibilityObject.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.CreateControlsInstance">
            <summary>
             Constructs the new instance of the Controls collection objects. Subclasses
             should not call base.CreateControlsInstance.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.CreateGraphics">
            <summary>
             Creates a Graphics for this control. The control's brush, font, foreground
             color and background color become the default values for the Graphics.
             The returned Graphics must be disposed through a call to its dispose()
             method when it is no longer needed.  The Graphics Object is only valid for
             the duration of the current window's message.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.CreateHandle">
            <summary>
             Creates a handle for this control. This method is called by the framework, this should
             not be called directly. Inheriting classes should always call <c>base.CreateHandle()</c> when
             overriding this method.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.CreateControl">
            <summary>
             Forces the creation of the control. This includes the creation of the handle,
             and any child controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.CreateControl(System.Boolean)">
            <summary>
             Forces the creation of the control. This includes the creation of the handle,
             and any child controls.
            <param name='fIgnoreVisible'>
             Determines whether we should create the handle after checking the Visible
             property of the control or not.
            </param>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)">
            <summary>
             Sends the message to the default window proc.
            </summary>
            <remarks>Primarily here for Form to override.</remarks>
        </member>
        <member name="M:System.Windows.Forms.Control.DestroyHandle">
            <summary>
             Destroys the handle associated with this control. Inheriting classes should
             always call base.destroyHandle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Dispose(System.Boolean)">
            <summary>
             Disposes of the resources (other than memory) used by the
             <see cref='T:System.Windows.Forms.Control'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
            <summary>
             Begins a drag operation. The allowedEffects determine which
             drag operations can occur. If the drag operation needs to interop
             with applications in another process, data should either be
             a base managed class (String, Bitmap, or Metafile) or some Object
             that implements System.Runtime.Serialization.ISerializable. data can also be any Object that
             implements System.Windows.Forms.IDataObject.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)" -->
        <member name="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)">
            <summary>
             Retrieves the return value of the asynchronous operation
             represented by the IAsyncResult interface passed. If the
             async operation has not been completed, this function will
             block until the result is available.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.FindForm">
            <summary>
             Retrieves the form that this control is on. The control's parent may not be
             the same as the form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.FindMarshalingControl">
            <summary>
             Attempts to find a control Object that we can use to marshal
             calls.  We must marshal calls to a control with a window
             handle, so we traverse up the parent chain until we find one.
             Failing that, we just return ouselves.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.RaiseCreateHandleEvent(System.EventArgs)">
            <summary>
             Used by AxHost to fire the CreateHandle event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
             Raises the event associated with key with the event data of
             e and a sender of this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the event associated with key with the event data of
             e and a sender of this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Focus">
            <summary>
             Attempts to set focus to this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.FocusInternal">
            <summary>
             Internal method for setting focus to the control.
             Form overrides this method - because MDI child forms
             need to be focused by calling the MDIACTIVATE message.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.FromChildHandle(System.IntPtr)">
            <summary>
             Returns the control that is currently associated with handle.
             This method will search up the HWND parent chain until it finds some
             handle that is associated with with a control. This method is more
             robust that fromHandle because it will correctly return controls
             that own more than one handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.FromHandle(System.IntPtr)">
            <summary>
             Returns the control that is currently associated with handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)">
            <summary>
             Retrieves the child control that is located at the specified client
             coordinates.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point)">
            <summary>
             Retrieves the child control that is located at the specified client
             coordinates.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.GetContainerControl">
            <summary>
             Returns the closest ContainerControl in the control's chain of parent controls
             and forms.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.IsUpdating">
            <summary>
             This new Internal method checks the updateCount to signify that the control is within the "BeginUpdate" and "EndUpdate" cycle.
             Check out : for usage of this. The Treeview tries to ForceUpdate the scrollbars by calling "WM_SETREDRAW"
             even if the control in "Begin - End" update cycle. Using thie Function we can guard against repetitively redrawing the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <summary>
             This is a helper method that is called by ScaleControl to retrieve the bounds
             that the control should be scaled by.  You may override this method if you
             wish to reuse ScaleControl's scaling logic but you need to supply your own
             bounds.  The default implementation returns scaled bounds that take into
             account the BoundsSpecified, whether the control is top level, and whether
             the control is fixed width or auto size, and any adornments the control may have.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.GetChildControlsTabOrderList(System.Boolean)">
            <summary>
             - Returns child controls sorted according to their TabIndex property order.
             - Controls with the same TabIndex remain in original relative child index order (= z-order).
             - Returns a TabIndex sorted array of ControlTabOrderHolder objects.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.GetChildWindowsInTabOrder">
            <summary>
             - Returns native child windows sorted according to their TabIndex property order.
             - Controls with the same TabIndex remain in original relative child index order (= z-order).
             - Child windows with no corresponding Control objects (and therefore no discernable TabIndex)
             are sorted to the front of the list (but remain in relative z-order to one another).
             - This version returns a sorted array of integers, representing the original z-order
             based indexes of the native child windows.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.GetChildControlsInTabOrder(System.Boolean)">
            <summary>
             - Returns child controls sorted according to their TabIndex property order.
             - Controls with the same TabIndex remain in original relative child index order (= z-order).
             - This version returns a sorted array of control references.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.GetChildWindows(System.IntPtr)">
            <summary>
             Given a native window handle, returns array of handles to window's children (in z-order).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.GetChildWindowsTabOrderList">
            <summary>
             - Returns native child windows sorted according to their TabIndex property order.
             - Controls with the same TabIndex remain in original relative child index order (= z-order).
             - Child windows with no corresponding Control objects (and therefore no discernable TabIndex)
             are sorted to the front of the list (but remain in relative z-order to one another).
             - Returns a TabIndex sorted array of ControlTabOrderHolder objects.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)">
            <summary>
             Retrieves the next control in the tab order of child controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.GetSafeHandle(System.Windows.Forms.IWin32Window)">
            <summary>
             Return ((Control) window).Handle if window is a Control.
             Otherwise, returns window.Handle
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.GetState(System.Windows.Forms.Control.States)">
            <summary>
             Retrieves the current value of the specified bit in the control's state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.GetExtendedState(System.Windows.Forms.Control.ExtendedStates)">
            <summary>
             Retrieves the current value of the specified bit in the control's state2.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)">
            <summary>
             Retrieves the current value of the specified bit in the control's style.
             This is control style, not the Win32 style of the hWnd.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Hide">
            <summary>
             Hides the control by setting the visible property to false;
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.HookMouseEvent">
            <summary>
             Sets up the TrackMouseEvent for listening for the mouse leave event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.InitLayout">
            <summary>
             Called after the control has been added to another container.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.InitScaling(System.Windows.Forms.BoundsSpecified)">
            <summary>
             This method initializes the scaling bits for this control based on
             the bounds.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)">
            <summary>
             Invalidates a region of the control and causes a paint message
             to be sent to the control. This will not force a synchronous paint to
             occur, calling update after invalidate will force a
             synchronous paint.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region,System.Boolean)">
            <summary>
             Invalidates a region of the control and causes a paint message
             to be sent to the control. This will not force a synchronous paint to
             occur, calling update after invalidate will force a
             synchronous paint.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Invalidate">
            <summary>
             Invalidates the control and causes a paint message to be sent to the control.
             This will not force a synchronous paint to occur, calling update after
             invalidate will force a synchronous paint.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Invalidate(System.Boolean)">
            <summary>
             Invalidates the control and causes a paint message to be sent to the control.
             This will not force a synchronous paint to occur, calling update after
             invalidate will force a synchronous paint.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)">
            <summary>
             Invalidates a rectangular region of the control and causes a paint message
             to be sent to the control. This will not force a synchronous paint to
             occur, calling update after invalidate will force a
             synchronous paint.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle,System.Boolean)">
            <summary>
             Invalidates a rectangular region of the control and causes a paint message
             to be sent to the control. This will not force a synchronous paint to
             occur, calling update after invalidate will force a
             synchronous paint.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
             <summary>
              Executes the given delegate on the thread that owns this Control's
              underlying window handle.  It is an error to call this on the same thread that
              the control belongs to.  If the control's handle doesn't exist yet, this will
              follow up the control's parent chain until it finds a control or form that does
              have a window handle.  If no appropriate handle can be found, invoke will throw
              an exception.  Exceptions that are raised during the call will be
              propapgated back to the caller.
            
              There are five functions on a control that are safe to call from any
              thread:  GetInvokeRequired, Invoke, BeginInvoke, EndInvoke and CreateGraphics.
              For all other method calls, you should use one of the invoke methods to marshal
              the call to the control's thread.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
             <summary>
              Executes the given delegate on the thread that owns this Control's
              underlying window handle.  It is an error to call this on the same thread that
              the control belongs to.  If the control's handle doesn't exist yet, this will
              follow up the control's parent chain until it finds a control or form that does
              have a window handle.  If no appropriate handle can be found, invoke will throw
              an exception.  Exceptions that are raised during the call will be
              propapgated back to the caller.
            
              There are five functions on a control that are safe to call from any
              thread:  GetInvokeRequired, Invoke, BeginInvoke, EndInvoke and CreateGraphics.
              For all other method calls, you should use one of the invoke methods to marshal
              the call to the control's thread.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.InvokeMarshaledCallback(System.Windows.Forms.Control.ThreadMethodEntry)">
             <summary>
              Perform the callback of a particular ThreadMethodEntry - called by InvokeMarshaledCallbacks below.
            
              If the invoke request originated from another thread, we should have already captured the ExecutionContext
              of that thread. The callback is then invoked using that ExecutionContext (which includes info like the
              compressed security stack).
            
              NOTE: The one part of the ExecutionContext that we DONT want applied to the callback is its SyncContext,
              since this is the SyncContext of the other thread. So we grab the SyncContext of OUR thread, and pass
              this through to the callback to use instead.
            
              When the invoke request comes from this thread, there won't be an ExecutionContext so we just invoke
              the callback as is.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.InvokeMarshaledCallbackHelper(System.Object)">
            <summary>
             Worker for invoking marshaled callbacks.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.InvokeMarshaledCallbacks">
            <summary>
             Called on the control's owning thread to perform the actual callback.
             This empties this control's callback queue, propagating any exceptions
             back as needed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.IsFontSet">
            <summary>
             Determines whether the font is set.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.IsDescendant(System.Windows.Forms.Control)">
            <summary>
             WARNING! The meaning of this method is not what it appears.
             The method returns true if "descendant" (the argument) is a descendant
             of "this". I'd expect it to be the other way around, but oh well too late.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.IsKeyLocked(System.Windows.Forms.Keys)">
            <summary>
             This Function will return a Boolean as to whether the Key value passed in is Locked...
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.IsInputChar(System.Char)">
            <summary>
             Determines if charCode is an input character that the control
             wants. This method is called during window message pre-processing to
             determine whether the given input character should be pre-processed or
             sent directly to the control. If isInputChar returns true, the
             given character is sent directly to the control. If isInputChar
             returns false, the character is pre-processed and only sent to the
             control if it is not consumed by the pre-processing phase. The
             pre-processing of a character includes checking whether the character
             is a mnemonic of another control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
             Determines if keyData is an input key that the control wants.
             This method is called during window message pre-processing to determine
             whether the given input key should be pre-processed or sent directly to
             the control. If isInputKey returns true, the given key is sent
             directly to the control. If isInputKey returns false, the key is
             pre-processed and only sent to the control if it is not consumed by the
             pre-processing phase. Keys that are pre-processed include TAB, RETURN,
             ESCAPE, and arrow keys.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)">
            <summary>
             Determines if charCode is the mnemonic character in text.
             The mnemonic character is the character imediately following the first
             instance of "&amp;" in text
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.LogicalToDeviceUnits(System.Int32)">
            <summary>
             Transforms an integer coordinate from logical to device units
             by scaling it for the current DPI and rounding down to the nearest integer value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.LogicalToDeviceUnits(System.Drawing.Size)">
            <summary>
             Transforms size from logical to device units by scaling it for the current
             DPI and rounding down to the nearest integer value for width and height.
            </summary>
            <param name="value"> size to be scaled</param>
            <returns> scaled size</returns>
        </member>
        <member name="M:System.Windows.Forms.Control.ScaleBitmapLogicalToDevice(System.Drawing.Bitmap@)">
            <summary>
             Create a new bitmap scaled for the device units. When displayed on the device,
             the scaled image will have same size as the original image would have when
             displayed at 96dpi.
            </summary>
            <param name="logicalBitmap">The image to scale from logical units to device units</param>
        </member>
        <member name="M:System.Windows.Forms.Control.MarshalStringToMessage(System.String,System.Windows.Forms.Message@)">
            <summary>
             This method is used by WM_GETCONTROLNAME and WM_GETCONTROLTYPE
             to marshal a string to a message structure.  It handles
             two cases:  if no buffer was passed it returns the size of
             buffer needed.  If a buffer was passed, it fills the buffer.
             If the passed buffer is not long enough it will return -1.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.NotifyInvalidate(System.Drawing.Rectangle)">
            <summary>
             Propagates the invalidation event, notifying the control that
             some part of it is being invalidated and will subsequently need
             to repaint.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.Click'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnChildLayoutResuming(System.Windows.Forms.Control,System.Boolean)">
            <summary>
             Called when a child is about to resume its layout.  The default implementation
             calls OnChildLayoutResuming on the parent.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)">
             <summary>
              Raises the <see cref='P:System.Windows.Forms.Control.Enabled'/> event.
            
              Inheriting classes should override this method to handle this event.
              Call base.OnEnabled to send this event to any registered event listeners.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)">
            <summary>
             OnNotifyMessage is called if the ControlStyles.EnableNotifyMessage bit is set.
             This allows for controls to listen to window messages, without allowing them to
             actually modify the message.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnParentHandleRecreated">
            <summary>
             Occurs when the parent of this control has recreated
             its handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnParentHandleRecreating">
            <summary>
              Occurs when the parent of this control is recreating
              its handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='P:System.Windows.Forms.Control.Visible'/> event.
             Inheriting classes should override this method to handle this event.
             Call base.OnVisible to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnClick(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.Click'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.ControlAdded'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.ControlRemoved'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnCreateControl">
            <summary>
             Called when the control is first created.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to find out when the
             handle has been created.
             Call base.OnHandleCreated first.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to find out when the
             handle is about to be destroyed.
             Call base.OnHandleDestroyed last.
             Raises the <see cref='E:System.Windows.Forms.Control.HandleDestroyed'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.DoubleClick'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.Enter'/> event.
             Inheriting classes should override this method to handle this event.
             Call base.onEnter to send this event to any registered event listeners.
            </summary>
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.onDragEnter to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.onDragOver to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.onDragLeave to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.onDragDrop to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.onGiveFeedback to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.GotFocus'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.GotFocus'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.onHelp to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.OnInvalidate to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.KeyDown'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.KeyPress'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.KeyUp'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
             Core layout logic. Inheriting controls should override this function to do any custom
             layout logic. It is not neccessary to call base.OnLayout, however for normal docking
             an functions to work, base.OnLayout must be called.
             Raises the <see cref='E:System.Windows.Forms.Control.Layout'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnLayoutResuming(System.Boolean)">
            <summary>
             Called when the last resume layout call is made. If performLayout is true a layout will
             occur as soon as this call returns. Layout is still suspended when this call is made.
             The default implementation calls OnChildLayoutResuming on the parent, if it exists.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.Leave'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.LostFocus'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.MouseDoubleClick'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.MouseCaptureChanged'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.MouseDown'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.MouseEnter'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.MouseLeave'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnDpiChangedBeforeParent(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.DpiChangedBeforeParent'/> event.
             Occurs when the form is moved to a monitor with a different resolution (number of dots per inch),
             or when scaling level is changed in the windows setting by the user.
             This message is not sent to the top level windows.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnDpiChangedAfterParent(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.DpiChangedAfterParent'/> event.
             Occurs when the form is moved to a monitor with a different resolution (number of dots per inch),
             or when scaling level is changed in windows setting by the user.
             This message is not sent to the top level windows.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.MouseHover'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.MouseMove'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.MouseUp'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.MouseWheel'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnMove(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.Move'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.onPaint to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Inheriting classes should override this method to handle the erase
             background request from windows. It is not necessary to call
             base.onPaintBackground, however if you do not want the default
             Windows behavior you must set event.handled to true.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.onQueryContinueDrag to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.RegionChanged'/> event when the Region property has changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnResize(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.Resize'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.PreviewKeyDown'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.ChangeUICues'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.SystemColorsChanged'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.Validating'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.Validated'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.RescaleConstantsForDpi(System.Int32,System.Int32)">
            <summary>
             Is invoked when the control handle is created or right before the top level parent receives WM_DPICHANGED message.
             This method is an opportunity to rescale any constant sizes, glyphs or bitmaps before re-painting.
             The derived class can choose to not call the base class implementation.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ParentContainerControl">
            <summary>
             Find ContainerControl that is the container of this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.PerformLayout">
            <summary>
             Forces the control to apply layout logic to all of the child controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)">
            <summary>
             Forces the control to apply layout logic to all of the child controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.PerformControlValidation(System.Boolean)">
             <summary>
              Peforms data validation (not paint validation!) on a single control.
            
              Returns whether validation failed:
              False = Validation succeeded, control is valid, accept its new value
              True = Validation was cancelled, control is invalid, reject its new value
            
              NOTE: This is the lowest possible level of validation. It does not account
              for the context in which the validation is occuring, eg. change of focus
              between controls in a container. Stuff like that is handled by the caller.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.PerformContainerValidation(System.Windows.Forms.ValidationConstraints)">
            <summary>
             Validates all the child controls in a container control. Exactly which controls are
             validated and which controls are skipped is determined by <paramref name="validationConstraints"/>.
             Return value indicates whether validation failed for any of the controls validated.
             Calling function is responsible for checking the correctness of the validationConstraints argument.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)">
            <summary>
             Computes the location of the screen point p in client coords.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)">
            <summary>
             Computes the location of the client point p in screen coords.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)">
            <summary>
             This method is called by the application's message loop to pre-process
             input messages before they are dispatched. Possible values for the
             msg.message field are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.
             If this method processes the message it must return true, in which case
             the message loop will not dispatch the message.
             For WM_KEYDOWN and WM_SYSKEYDOWN messages, preProcessMessage() first
             calls processCmdKey() to check for command keys such as accelerators and
             menu shortcuts. If processCmdKey() doesn't process the message, then
             isInputKey() is called to check whether the key message represents an
             input key for the control. Finally, if isInputKey() indicates that the
             control isn't interested in the key message, then processDialogKey() is
             called to check for dialog keys such as TAB, arrow keys, and mnemonics.
             For WM_CHAR messages, preProcessMessage() first calls isInputChar() to
             check whether the character message represents an input character for
             the control. If isInputChar() indicates that the control isn't interested
             in the character message, then processDialogChar() is called to check for
             dialog characters such as mnemonics.
             For WM_SYSCHAR messages, preProcessMessage() calls processDialogChar()
             to check for dialog characters such as mnemonics.
             When overriding preProcessMessage(), a control should return true to
             indicate that it has processed the message. For messages that aren't
             processed by the control, the result of "base.preProcessMessage()"
             should be returned. Controls will typically override one of the more
             specialized methods (isInputChar(), isInputKey(), processCmdKey(),
             processDialogChar(), or processDialogKey()) instead of overriding
             preProcessMessage().
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.PreProcessControlMessageInternal(System.Windows.Forms.Control,System.Windows.Forms.Message@)">
             <summary>
              This method is similar to PreProcessMessage, but instead of indicating
              that the message was either processed or it wasn't, it has three return
              values:
            
              MessageProcessed - PreProcessMessage() returns true, and the message
                              needs no further processing
            
              MessageNeeded    - PreProcessMessage() returns false, but IsInputKey/Char
                              return true.  This means the message wasn't processed,
                              but the control is interested in it.
            
              MessageNotNeeded - PreProcessMessage() returns false, and IsInputKey/Char
                              return false.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
             Processes a command key. This method is called during message
             pre-processing to handle command keys. Command keys are keys that always
             take precedence over regular input keys. Examples of command keys
             include accelerators and menu shortcuts. The method must return true to
             indicate that it has processed the command key, or false to indicate
             that the key is not a command key.
             processCmdKey() first checks if the control has a context menu, and if
             so calls the menu's processCmdKey() to check for menu shortcuts. If the
             command key isn't a menu shortcut, and if the control has a parent, the
             key is passed to the parent's processCmdKey() method. The net effect is
             that command keys are "bubbled" up the control hierarchy.
             When overriding processCmdKey(), a control should return true to
             indicate that it has processed the key. For keys that aren't processed by
             the control, the result of "base.processCmdKey()" should be returned.
             Controls will seldom, if ever, need to override this method.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)">
            <summary>
             Processes a dialog character. This method is called during message
             pre-processing to handle dialog characters, such as control mnemonics.
             This method is called only if the isInputChar() method indicates that
             the control isn't interested in the character.
             processDialogChar() simply sends the character to the parent's
             processDialogChar() method, or returns false if the control has no
             parent. The Form class overrides this method to perform actual
             processing of dialog characters.
             When overriding processDialogChar(), a control should return true to
             indicate that it has processed the character. For characters that aren't
             processed by the control, the result of "base.processDialogChar()"
             should be returned.
             Controls will seldom, if ever, need to override this method.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
             Processes a dialog key. This method is called during message
             pre-processing to handle dialog characters, such as TAB, RETURN, ESCAPE,
             and arrow keys. This method is called only if the isInputKey() method
             indicates that the control isn't interested in the key.
             processDialogKey() simply sends the character to the parent's
             processDialogKey() method, or returns false if the control has no
             parent. The Form class overrides this method to perform actual
             processing of dialog keys.
             When overriding processDialogKey(), a control should return true to
             indicate that it has processed the key. For keys that aren't processed
             by the control, the result of "base.processDialogKey(...)" should be
             returned.
             Controls will seldom, if ever, need to override this method.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
            <summary>
             Processes a key message. This method is called when a control receives a
             keyboard message. The method is responsible for generating the appropriate
             key events for the message by calling OnKeyPress(), onKeyDown(), or
             onKeyUp(). The m parameter contains the window message that must
             be processed. Possible values for the m.msg field are WM_CHAR,
             WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, WM_SYSKEYUP, and WM_IMECHAR.
             When overriding processKeyEventArgs(), a control should return true to
             indicate that it has processed the key. For keys that aren't processed
             by the control, the result of "base.processKeyEventArgs()" should be
             returned.
             Controls will seldom, if ever, need to override this method.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)">
            <summary>
             Processes a key message. This method is called when a control receives a
             keyboard message. The method first checks if the control has a parent,
             and if so calls the parent's processKeyPreview() method. If the parent's
             processKeyPreview() method doesn't consume the message then
             processKeyEventArgs() is called to generate the appropriate keyboard events.
             The m parameter contains the window message that must be
             processed. Possible values for the m.msg field are WM_CHAR,
             WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP.
             When overriding processKeyMessage(), a control should return true to
             indicate that it has processed the key. For keys that aren't processed
             by the control, the result of "base.processKeyMessage()" should be
             returned.
             Controls will seldom, if ever, need to override this method.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">
            <summary>
             Previews a keyboard message. This method is called by a child control
             when the child control receives a keyboard message. The child control
             calls this method before generating any keyboard events for the message.
             If this method returns true, the child control considers the message
             consumed and does not generate any keyboard events. The m
             parameter contains the window message to preview. Possible values for
             the m.msg field are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP,
             and WM_SYSKEYUP.
             processKeyPreview() simply sends the character to the parent's
             processKeyPreview() method, or returns false if the control has no
             parent. The Form class overrides this method to perform actual
             processing of dialog keys.
             When overriding processKeyPreview(), a control should return true to
             indicate that it has processed the key. For keys that aren't processed
             by the control, the result of "base.ProcessKeyPreview(...)" should be
             returned.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)">
            <summary>
             Processes a mnemonic character. This method is called to give a control
             the opportunity to process a mnemonic character. The method should check
             if the control is in a state to process mnemonics and if the given
             character represents a mnemonic. If so, the method should perform the
             action associated with the mnemonic and return true. If not, the method
             should return false.
             Implementations of this method often use the isMnemonic() method to
             check if the given character matches a mnemonic in the control's text,
             for example:
            <code>
             if (canSelect() &amp;&amp; isMnemonic(charCode, getText()) {
             // perform action associated with mnemonic
             }
            </code>
             This default implementation of processMnemonic() simply returns false
             to indicate that the control has no mnemonic.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ProcessUICues(System.Windows.Forms.Message@)">
            <summary>
             Preprocess keys which affect focus indicators and keyboard cues.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
             Raises the event associated with key with the event data of
             e and a sender of this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
             Raises the event associated with key with the event data of
             e and a sender of this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ResetBackColor">
            <summary>
             Resets the back color to be based on the parent's back color.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ResetFont">
            <summary>
             Resets the font to be based on the parent's font.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ResetForeColor">
            <summary>
             Resets the fore color to be based on the parent's fore color.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ResetRightToLeft">
            <summary>
             Resets the RightToLeft to be the default.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.RecreateHandle">
            <summary>
             Forces the recreation of the handle for this control. Inheriting controls
             must call base.RecreateHandle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)">
            <summary>
             Computes the location of the screen rectangle r in client coords.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)">
            <summary>
             Computes the location of the client rectangle r in screen coords.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)">
            <summary>
             Reflects the specified message to the control that is bound to hWnd.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Refresh">
            <summary>
             Forces the control to invalidate and immediately
             repaint itself and any children.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ReleaseUiaProvider(System.IntPtr)">
            <summary>
             /Releases UI Automation provinder for specified window.
            </summary>
            <param name="handle">The window handle.</param>
        </member>
        <member name="M:System.Windows.Forms.Control.ResetMouseEventArgs">
            <summary>
             Resets the mouse leave listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ResetText">
            <summary>
             Resets the text to it's default value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ResumeLayout">
            <summary>
             Resumes normal layout logic. This will force a layout immediately
             if there are any pending layout requests.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)">
            <summary>
             Resumes normal layout logic. If performLayout is set to true then
             this will force a layout immediately if there are any pending layout requests.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.SetAcceptDrops(System.Boolean)">
            <summary>
             Used to actually register the control as a drop target.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Scale(System.Single)">
            <summary>
             Scales to entire control and any child controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Scale(System.Single,System.Single)">
            <summary>
             Scales the entire control and any child controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Scale(System.Drawing.SizeF)">
            <summary>
             Scales a control and its children given a scaling factor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Scale(System.Drawing.SizeF,System.Drawing.SizeF,System.Windows.Forms.Control)">
             <summary>
              Scales a control and its children given a pair of scaling factors.
              IncludedFactor will be applied to the dimensions of controls based on
              their RequiredScaling property.  For example, if a control's
              RequiredScaling property returns Width, the width of the control will
              be scaled according to the includedFactor value.
            
              The excludedFactor parameter is used to scale those control bounds who
              are not included in RequiredScaling.
            
              If a factor is empty, it indicates that no scaling of those control
              dimensions should be done.
            
              The requestingControl property indicates which control has requested
              the scaling function.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ScaleChildControls(System.Drawing.SizeF,System.Drawing.SizeF,System.Windows.Forms.Control,System.Boolean)">
             <summary>
              Scales the children of this control.  The default implementation recursively
              walks children and calls ScaleControl on each one.
              IncludedFactor will be applied to the dimensions of controls based on
              their RequiredScaling property.  For example, if a control's
              RequiredScaling property returns Width, the width of the control will
              be scaled according to the includedFactor value.
            
              The excludedFactor parameter is used to scale those control bounds who
              are not included in RequiredScaling.
            
              If a factor is empty, it indicates that no scaling of those control
              dimensions should be done.
            
              The requestingControl property indicates which control has requested
              the scaling function.
            
              The updateWindowFontIfNeeded parameter indicates if we need to update Window
              font for controls that need it, i.e. controls using default or inherited font,
              that are also not user-painted.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.UpdateWindowFontIfNeeded">
            <summary>
             Calls SetWindowFont if DpiHelper.IsPerMonitorV2Awareness is true,
             control uses default or inherited font and is not user-painted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Drawing.SizeF,System.Windows.Forms.Control)">
             <summary>
              Scales the children of this control.  The default implementation walks the controls
              collection for the control and calls Scale on each control.
              IncludedFactor will be applied to the dimensions of controls based on
              their RequiredScaling property.  For example, if a control's
              RequiredScaling property returns Width, the width of the control will
              be scaled according to the includedFactor value.
            
              The excludedFactor parameter is used to scale those control bounds who
              are not included in RequiredScaling.
            
              If a factor is empty, it indicates that no scaling of those control
              dimensions should be done.
            
              The requestingControl property indicates which control has requested
              the scaling function.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
             <summary>
              Scales an individual control's location, size, padding and margin.
              If the control is top level, this will not scale the control's location.
              This does not scale children or the size of auto sized controls.  You can
              omit scaling in any direction by changing BoundsSpecified.
            
              After the control is scaled the RequiredScaling property is set to
              BoundsSpecified.None.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ScaleCore(System.Single,System.Single)">
            <summary>
             Performs the work of scaling the entire control and any child controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ScaleSize(System.Drawing.Size,System.Single,System.Single)">
            <summary>
             Scales a given size with the provided values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Select">
            <summary>
             Activates this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Selects the next control following ctl.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.SelectNextIfFocused">
            <summary>
             This is called recursively when visibility is changed for a control, this
             forces focus to be moved to a visible control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.SendMessage(System.Int32,System.Int32,System.Int32)">
            <summary>
             Sends a Win32 message to this control.  If the control does not yet
             have a handle, it will be created.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.SendMessage(System.Int32,System.Int32@,System.Int32@)">
            <summary>
             Sends a Win32 message to this control.  If the control does not yet
             have a handle, it will be created.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.SendMessage(System.Int32,System.Int32,System.String)">
            <summary>
             Sends a Win32 message to this control.  If the control does not yet
             have a handle, it will be created.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.SendToBack">
            <summary>
             sends this control to the back of the z-order
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sets the bounds of the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Sets the bounds of the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Performs the work of setting the bounds of this control. Inheriting
             classes can overide this function to add size restrictions. Inheriting
             classes must call base.setBoundsCore to actually cause the bounds
             of the control to change.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)">
            <summary>
             Performs the work of setting the size of the client area of the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)">
            <summary>
             Sets the current value of the specified bit in the control's style.
             NOTE: This is control style, not the Win32 style of the hWnd.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.GetAutoValidateForControl(System.Windows.Forms.Control)">
            <summary>
             Determine effective auto-validation setting for a given control, based on the AutoValidate property
             of its containing control. Defaults to 'EnablePreventFocusChange' if there is no containing control
             (eg. because this control is a top-level container).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ShouldAutoValidate">
            <summary>
             Is auto-validation currently in effect for this control?
             Depends on the AutoValidate property of the containing control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ShouldSerializeBackColor">
            <summary>
             Returns true if the backColor should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ShouldSerializeCursor">
            <summary>
             Returns true if the cursor should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ShouldSerializeEnabled">
            <summary>
             Returns true if the enabled property should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ShouldSerializeForeColor">
            <summary>
             Returns true if the foreColor should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ShouldSerializeFont">
            <summary>
             Returns true if the font should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ShouldSerializeRightToLeft">
            <summary>
             Returns true if the RightToLeft should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ShouldSerializeVisible">
            <summary>
             Returns true if the visible property should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Show">
            <summary>
             Makes the control display by setting the visible property to true
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ShouldSerializeSize">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.Control.Size'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ShouldSerializeText">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.Control.Text'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.SuspendLayout">
            <summary>
             Suspends the layout logic for the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.UnhookMouseEvent">
            <summary>
             Stops listening for the mouse leave event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.Update">
            <summary>
             Forces the control to paint any currently invalid areas.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.UpdateBounds">
            <summary>
             Updates the bounds of the control based on the handle the control is
             bound to.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Updates the bounds of the control based on the bounds passed in.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Updates the bounds of the control based on the bounds passed in.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.UpdateBindings">
            <summary>
             Updates the binding manager bindings when the binding proeprty changes.
             We have the code here, rather than in PropertyChagned, so we don't pull
             in the data assembly if it's not used.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.UpdateChildControlIndex(System.Windows.Forms.Control)">
            <summary>
             Updates the child control's position in the control array to correctly
             reflect its index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.UpdateZOrder">
            <summary>
             Updates this control in it's parent's zorder.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.UpdateChildZOrder(System.Windows.Forms.Control)">
            <summary>
             Syncs the ZOrder of child control to the index we want it to be.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.UpdateRoot">
            <summary>
             Updates the rootReference in the bound window.
             (Used to prevent visible top-level controls from being garbage collected)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.UpdateStyles">
            <summary>
             Forces styles to be reapplied to the handle. This function will call
             CreateParams to get the styles to apply.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmCaptureChanged(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_CAPTURECHANGED message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmCommand(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_COMMAND message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmContextMenu(System.Windows.Forms.Message@,System.Windows.Forms.Control)">
            <summary>
             Handles the WM_CONTEXTMENU message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmCtlColorControl(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_CTLCOLOR message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmEraseBkgnd(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_ERASEBKGND message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmGetControlName(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_GETCONTROLNAME message. Returns the name of the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmGetControlType(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_GETCONTROLTYPE message. Returns the name of the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmGetObject(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_GETOBJECT message. Used for accessibility.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmHelp(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_HELP message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmCreate(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_CREATE message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmDestroy(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_DESTROY message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmKeyChar(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and
             WM_SYSKEYUP messages.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmKillFocus(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_KILLFOCUS message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmMouseDown(System.Windows.Forms.Message@,System.Windows.Forms.MouseButtons,System.Int32)">
            <summary>
             Handles the WM_MOUSEDOWN message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmMouseEnter(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_MOUSEENTER message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmMouseLeave(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_MOUSELEAVE message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmDpiChangedBeforeParent(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_DPICHANGED_BEFOREPARENT message. This message is not sent to top level windows.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmDpiChangedAfterParent(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_DPICHANGED_AFTERPARENT message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmMouseHover(System.Windows.Forms.Message@)">
            <summary>
             Handles the "WM_MOUSEHOVER" message... until we get actuall OS support
             for this, it is implemented as a custom message.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmMouseMove(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_MOUSEMOVE message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmMouseUp(System.Windows.Forms.Message@,System.Windows.Forms.MouseButtons,System.Int32)">
            <summary>
             Handles the WM_MOUSEUP message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmMouseWheel(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_MOUSEWHEEL message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmMove(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_MOVE message.  We must do this in
             addition to WM_WINDOWPOSCHANGED because windows may
             send WM_MOVE directly.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmNotify(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_NOTIFY message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmNotifyFormat(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_NOTIFYFORMAT message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmOwnerDraw(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_DRAWITEM\WM_MEASUREITEM messages for controls other than menus
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmPaint(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_PAINT messages.  This should only be called
             for userpaint controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmPrintClient(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_PRINTCLIENT messages.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmSetCursor(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_SETCURSOR message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmWindowPosChanging(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_WINDOWPOSCHANGING message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmParentNotify(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_PARENTNOTIFY message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmSetFocus(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_SETFOCUS message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmShowWindow(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_SHOWWINDOW message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmUpdateUIState(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_UPDATEUISTATE message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmWindowPosChanged(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_WINDOWPOSCHANGED message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">
            <summary>
             Base wndProc. All messages are sent to wndProc after getting filtered
             through the preProcessMessage function. Inheriting controls should
             call base.wndProc for any messages that they don't handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WndProcException(System.Exception)">
            <summary>
             Called when an exception occurs in dispatching messages through
             the main window procedure.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.SupportsUiaProviders">
            <summary>
             Indicates whether or not the control supports UIA Providers via
             IRawElementProviderFragment/IRawElementProviderFragmentRoot interfaces
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragEnter(System.Windows.Forms.DragEventArgs)">
            
              Explicit support of DropTarget
            
        </member>
        <member name="M:System.Windows.Forms.Control.System#Windows#Forms#ISupportOleDropSource#OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            
              Explicit support of DropSource
            
        </member>
        <member name="F:System.Windows.Forms.Control.ExtendedStates.HaveInvoked">
            <summary>
             When we change RightToLeft, we need to change the scrollbar thumb. We can't do that until after the
             control has been created, and all the items added back. This is because the system control won't know
             the nMin and nMax of the scroll bar until the items are added. So in RightToLeftChanged, we set a
             flag that indicates that we want to set the scroll position. In OnHandleCreated we check this flag,
             and if set, we BeginInvoke. We have to BeginInvoke since we have to wait until the items are added.
             We only want to do this when RightToLeft changes thus the flags HAVEINVOKED and SETSCROLLPOS.
             Otherwise we would do this on each HandleCreated.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Control.ExtendedStates.ListeningToUserPreferenceChanged">
            <summary>
             Set when the control is listening to SystemEvents.UserPreferenceChanged.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Control.ExtendedStates.InterestedInUserPreferenceChanged">
            <summary>
             If set, the control will listen to SystemEvents.UserPreferenceChanged when TopLevel is true and handle is created.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Control.ExtendedStates.MaintainsOwnCaptureMode">
            <summary>
             If set, the control DOES NOT necessarily take capture on MouseDown
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Control.ExtendedStates.BecomingActiveControl">
            <summary>
             Set to true by ContainerControl when this control is becoming its active control
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Control.ExtendedStates.ClearLayoutArgs">
            <summary>
             If set, the next time PerformLayout is called, cachedLayoutEventArg will be cleared.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Control.ExtendedStates.CurrentlyBeingScaled">
            <summary>
             If set, the control is being scaled currently
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Control.ImeCharsToIgnoreDisabled">
            <summary>
             Constants starting/ending the WM_CHAR messages to ignore count.  See ImeWmCharsToIgnore property.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Control.propagatingImeMode">
            <summary>
             The ImeMode value for controls with ImeMode = ImeMode.NoControl.  See PropagatingImeMode property.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Control.ignoreWmImeNotify">
            <summary>
             This flag prevents resetting ImeMode value of the focused control.  See IgnoreWmImeNotify property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.CachedImeMode">
            <summary>
             The ImeMode in the property store.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.Control.CanEnableIme" -->
        <member name="P:System.Windows.Forms.Control.CurrentImeContextMode">
            <summary>
             Gets the current IME context mode.  If no IME associated, ImeMode.Inherit is returned.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.DisableImeModeChangedCount">
            <summary>
             Flag used to avoid re-entrancy during WM_IME_NOTFIY message processing - see WmImeNotify().
             Also to avoid raising the ImeModeChanged event more than once during the process of changing the ImeMode.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.IgnoreWmImeNotify">
            <summary>
             Flag used to prevent setting ImeMode in focused control when losing focus and hosted in a non-Form shell.
             See WmImeKillFocus() for more info.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ImeMode">
            <summary>
             Specifies a value that determines the IME (Input Method Editor) status of the
             object when that object is selected.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ImeModeBase">
            <summary>
             Internal version of ImeMode property.  This is provided for controls that override CanEnableIme and that
             return ImeMode.Disable for the ImeMode property when CanEnableIme is false - See TextBoxBase controls.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ImeSupported">
            <summary>
             Determines whether the Control supports IME handling by default.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.ImeWmCharsToIgnore">
            <summary>
             Returns the current number of WM_CHAR messages to ignore after processing corresponding WM_IME_CHAR msgs.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.LastCanEnableIme">
            <summary>
             Gets the last value CanEnableIme property when it was last checked for ensuring IME context restriction mode.
             This is used by controls that implement some sort of IME restriction mode (like TextBox on Password/ReadOnly mode).
             See the VerifyImeRestrictedModeChanged() method.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Control.PropagatingImeMode">
            <summary>
             Represents the internal ImeMode value for controls with ImeMode = ImeMode.NoControl.  This property is changed
             only by user interaction and is required to set the IME context appropriately while keeping the ImeMode property
             unchanged.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.UpdateImeContextMode">
            <summary>
             Sets the IME context to the appropriate ImeMode according to the control's ImeMode state.
             This method is commonly used when attaching the IME to the control's window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.VerifyImeModeChanged(System.Windows.Forms.ImeMode,System.Windows.Forms.ImeMode)">
            <summary>
             Checks if specified ImeMode values are different and raise the event if true.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.VerifyImeRestrictedModeChanged">
            <summary>
             Verifies whether the IME context mode is correct based on the control's Ime restriction mode (CanEnableIme)
             and updates the IME context if needed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnImeContextStatusChanged(System.IntPtr)">
            <summary>
             Update internal ImeMode properties (PropagatingImeMode/CachedImeMode) with actual IME context mode if needed.
             This method can be used with a child control when the IME mode is more relevant to it than to the control itself,
             for instance ComboBox and its native ListBox/Edit controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ResetImeMode">
            <summary>
             Resets the Ime mode.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.ShouldSerializeImeMode">
            <summary>
             Returns true if the ImeMode should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmInputLangChange(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_INPUTLANGCHANGE message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmInputLangChangeRequest(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_INPUTLANGCHANGEREQUEST message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmImeChar(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_IME_CHAR message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmImeEndComposition(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_IME_ENDCOMPOSITION message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmImeNotify(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_IME_NOTIFY message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmImeSetFocus">
            <summary>
             Handles the WM_SETFOCUS message for IME related stuff.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmImeStartComposition(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_IME_STARTCOMPOSITION message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Control.WmImeKillFocus">
            <summary>
             Handles the WM_KILLFOCUS message
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Control.MetafileDCWrapper">
             <summary>
              MetafileDCWrapper is used to wrap a metafile DC so that subsequent
              paint operations are rendered to a temporary bitmap.  When the
              wrapper is disposed, it copies the bitmap back to the metafile DC.
            
              Example:
            
              using(MetafileDCWrapper dcWrapper = new MetafileDCWrapper(hDC, size) {
              // ...use dcWrapper.HDC to do painting
              }
             </summary>
        </member>
        <member name="T:System.Windows.Forms.Control.ThreadMethodEntry">
            <summary>
             Used with BeginInvoke/EndInvoke
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ImeContext">
            <summary>
             Represents the native IME context.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImeContext.originalImeContext">
            <summary>
             The IME context handle obtained when first associating an IME.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImeContext.Disable(System.IntPtr)">
            <summary>
             Disable the IME
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImeContext.Enable(System.IntPtr)">
            <summary>
             Enable the IME
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImeContext.GetImeMode(System.IntPtr)">
            <summary>
             Gets the ImeMode that corresponds to ImeMode.Disable based on the current input language ImeMode table.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImeContext.TraceImeStatus(System.Windows.Forms.Control)">
            <summary>
             Get the actual IME status - This method is for debugging purposes only.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImeContext.IsOpen(System.IntPtr)">
            <summary>
             Returns true if the IME is currently open
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImeContext.SetImeStatus(System.Windows.Forms.ImeMode,System.IntPtr)">
            <summary>
             Sets the actual IME context value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImeContext.SetOpenStatus(System.Boolean,System.IntPtr)">
            <summary>
             Opens or closes the IME context.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ImeModeConversion">
            <summary>
             Helper class that provides information about IME convertion mode.  Convertion mode refers to how IME interprets input like
             ALPHANUMERIC or HIRAGANA and depending on its value the IME enables/disables the IME convertion window appropriately.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImeModeConversion.japaneseTable">
            <summary>
             Supported input language ImeMode tables.
             	WARNING: Do not try to map 'active' IME modes from one table to another since they can have a different
             			 meaning depending on the language; for instance ImeMode.Off means 'disable' or 'alpha' to Chinese
             			 but to Japanese it is 'alpha' and to Korean it has no meaning.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ImeModeConversion.InputLanguageTable">
            <summary>
             Gets the ImeMode table of the current input language.
             Although this property is per-thread based we cannot cache it and share it among controls running in the same thread
             for two main reasons: we still have some controls that don't handle IME properly (TabControl, ComboBox, TreeView...)
             and would render it invalid and since the IME API is not public third party controls would not have a way to update
             the cached value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ImeModeConversion.ImeModeConversionBits">
            <summary>
             Dictionary of ImeMode and corresponding convertion flags.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ControlBindingsCollection">
            <summary>
             Represents the collection of data bindings for a control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlBindingsCollection.Add(System.Windows.Forms.Binding)">
            <summary>
             Adds the binding to the collection. An ArgumentNullException is thrown if this
             binding is null. An exception is thrown if a binding to the same target and
             Property as an existing binding or if the binding's column isn't a valid column
             given this DataSource.Table's schema.
             Fires the CollectionChangedEvent.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlBindingsCollection.Add(System.String,System.Object,System.String)">
            <summary>
             Creates the binding and adds it to the collection. An InvalidBindingException is
             thrown if this binding can't be constructed. An exception is thrown if a binding
             to the same target and Property as an existing binding or if the binding's column
             isn't a valid column given this DataSource.Table's schema.
             Fires the CollectionChangedEvent.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlBindingsCollection.AddCore(System.Windows.Forms.Binding)">
            <summary>
             Creates the binding and adds it to the collection. An InvalidBindingException is
             thrown if this binding can't be constructed. An exception is thrown if a binding to
             the same target and Property as an existing binding or if the binding's column isn't
             a valid column given this DataSource.Table's schema.
             Fires the CollectionChangedEvent.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlBindingsCollection.Clear">
            <summary>
             Clears the collection of any bindings.
             Fires the CollectionChangedEvent.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlBindingsCollection.Remove(System.Windows.Forms.Binding)">
            <summary>
             Removes the given binding from the collection.
             An ArgumentNullException is thrown if this binding is null. An ArgumentException is
             thrown if this binding doesn't belong to this collection.
             The CollectionChanged event is fired if it succeeds.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlBindingsCollection.RemoveAt(System.Int32)">
            <summary>
             Removes the given binding from the collection.
             It throws an IndexOutOfRangeException if this doesn't have a valid binding.
             The CollectionChanged event is fired if it succeeds.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ControlEventArgs">
            <summary>
             A ControlEventArgs is an event that has a control as a property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlEventArgs.#ctor(System.Windows.Forms.Control)">
            <summary>
             Creates a new ControlEventArgs.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ControlEventArgs.Control">
            <summary>
             Retrieves the control object stored in this event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ControlEventHandler">
            <summary>
             Describes a delegate for an event that has a ControlEventArgs as
             a parameter.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ControlPaint">
            <summary>
             The ControlPaint class provides a series of methods that can be used to
             paint common Windows UI pieces. Many windows forms controls use this class to paint
             their UI elements.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.CreateHBitmap16Bit(System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
             Creates a 16-bit color bitmap.
             Sadly, this must be public for the designer to get at it.
             From MSDN:
               This member supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.CreateHBitmapTransparencyMask(System.Drawing.Bitmap)">
            <summary>
             Creates a Win32 HBITMAP out of the image. You are responsible for
             de-allocating the HBITMAP with Windows.DeleteObject(handle).
             If the image uses transparency, the background will be filled with the specified color.
             From MSDN:
               This member supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.CreateHBitmapColorMask(System.Drawing.Bitmap,System.IntPtr)">
            <summary>
             Creates a Win32 HBITMAP out of the image. You are responsible for
             de-allocating the HBITMAP with Windows.DeleteObject(handle).
             If the image uses transparency, the background will be filled with the specified color.
             From MSDN:
               This member supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.BorderStyleToDashStyle(System.Windows.Forms.ButtonBorderStyle)">
            <summary>
             Draws a border of the specified style and color to the given graphics.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.Dark(System.Drawing.Color,System.Single)">
            <summary>
             Creates a new color that is a object of the given color.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.Dark(System.Drawing.Color)">
            <summary>
             Creates a new color that is a object of the given color.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DarkDark(System.Drawing.Color)">
            <summary>
             Creates a new color that is a object of the given color.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.PrintBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.BorderStyle,System.Windows.Forms.Border3DStyle)">
            <summary>
             Used by PrintToMetaFileRecursive overrides (Label, Panel) to manually
             paint borders for UserPaint controls that were relying on
             their window style to provide their borders.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Int32,System.Windows.Forms.ButtonBorderStyle,System.Drawing.Color,System.Int32,System.Windows.Forms.ButtonBorderStyle,System.Drawing.Color,System.Int32,System.Windows.Forms.ButtonBorderStyle,System.Drawing.Color,System.Int32,System.Windows.Forms.ButtonBorderStyle)">
            <summary>
             Draws a border of the specified style and color to the given graphics.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawBorder3D(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Draws a 3D style border at the given rectangle. The default 3D style of
             Etched is used.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawBorder3D(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.Border3DStyle)">
            <summary>
             Draws a 3D style border at the given rectangle. You may specify the style
             of the 3D appearance.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawBorder3D(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.Border3DStyle,System.Windows.Forms.Border3DSide)">
            <summary>
             Draws a 3D style border at the given rectangle. You may specify the style
             of the 3D appearance, and which sides of the 3D rectangle you wish to
             draw.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawBorder3D(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Draws a 3D style border at the given rectangle. The default 3D style of
             ETCHED is used.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawBorder3D(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.Border3DStyle)">
            <summary>
             Draws a 3D style border at the given rectangle. You may specify the style
             of the 3D appearance.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawBorder3D(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.Border3DStyle,System.Windows.Forms.Border3DSide)">
            <summary>
             Draws a 3D style border at the given rectangle. You may specify the style
             of the 3D appearance, and which sides of the 3D rectangle you wish to
             draw.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawBorderComplex(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Windows.Forms.ButtonBorderStyle)">
            <summary>
             Helper function that draws a more complex border. This is used by DrawBorder for less common
             rendering cases. We split DrawBorder into DrawBorderSimple and DrawBorderComplex so we maximize
             the % of the function call. It is less performant to have large functions that do many things.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawBorderSimple(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Windows.Forms.ButtonBorderStyle)">
            <summary>
             Helper function that draws a simple border. This is used by DrawBorder for the most common rendering cases.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
             Draws a Win32 button control in the given rectangle with the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawButton(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.ButtonState)">
            <summary>
             Draws a Win32 button control in the given rectangle with the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawCaptionButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.CaptionButton,System.Windows.Forms.ButtonState)">
            <summary>
             Draws a Win32 window caption button in the given rectangle with the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawCaptionButton(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.CaptionButton,System.Windows.Forms.ButtonState)">
            <summary>
             Draws a Win32 window caption button in the given rectangle with the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawCheckBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
             Draws a Win32 checkbox control in the given rectangle with the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawCheckBox(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.ButtonState)">
            <summary>
             Draws a Win32 checkbox control in the given rectangle with the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawComboButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
             Draws the drop down button of a Win32 combo box in the given rectangle with the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawComboButton(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.ButtonState)">
            <summary>
             Draws the drop down button of a Win32 combo box in the given rectangle with the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawContainerGrabHandle(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Draws a container control grab handle glyph inside the given rectangle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawFlatCheckBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
             Draws a flat checkbox.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawFlatCheckBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Brush,System.Windows.Forms.ButtonState)">
            <summary>
             Draws a Win32 checkbox control in the given rectangle with the given state. This
             draws a flat looking check box that is suitable for use in list boxes, etc. We
             custom draw this because the windows version is soooo ugly.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawFocusRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Draws a focus rectangle. A focus rectangle is a dotted rectangle that Windows
             uses to indicate what control has the current keyboard focus.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawFocusRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
             Draws a focus rectangle. A focus rectangle is a dotted rectangle that Windows
             uses to indicate what control has the current keyboard focus.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawFrameControl(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,Interop.User32.DFC,Interop.User32.DFCS,System.Drawing.Color,System.Drawing.Color)">
            <summary>
             Draws a win32 frame control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawGrabHandle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
             Draws a standard selection grab handle with the given dimensions. Grab
             handles are used by components to indicate to the user that they can
             be directly maniupulated.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawGrid(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Size,System.Drawing.Color)">
            <summary>
             Draws a grid of one pixel dots in the given rectangle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawImageDisabled(System.Drawing.Graphics,System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
             Draws an image and makes it look disabled.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawImageDisabled(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Color,System.Boolean)">
            <summary>
             Draws an image and makes it look disabled.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawLockedFrame(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
             Draws a locked selection frame around the given rectangle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawMenuGlyph(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.MenuGlyph)">
            <summary>
             Draws a menu glyph for a Win32 menu in the given rectangle with the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawMenuGlyph(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.MenuGlyph,System.Drawing.Color,System.Drawing.Color)">
            <summary>
             Draws a menu glyph for a Win32 menu in the given rectangle with the given state.
             White color is replaced with backColor, Black is replaced with foreColor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawMenuGlyph(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.MenuGlyph)">
            <summary>
             Draws a menu glyph for a Win32 menu in the given rectangle with the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawMenuGlyph(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.MenuGlyph,System.Drawing.Color,System.Drawing.Color)">
            <summary>
             Draws a menu glyph for a Win32 menu in the given rectangle with the given state.
             White color is replaced with backColor, Black is replaced with foreColor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawMixedCheckBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
             Draws a Win32 3-state checkbox control in the given rectangle with the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawRadioButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
             Draws a Win32 radio button in the given rectangle with the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawRadioButton(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.ButtonState)">
            <summary>
             Draws a Win32 radio button in the given rectangle with the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawReversibleFrame(System.Drawing.Rectangle,System.Drawing.Color,System.Windows.Forms.FrameStyle)">
            <summary>
             Draws a rectangular frame on the screen. The operation of this can be
             "reversed" by drawing the same rectangle again. This is similar to
             inverting a region of the screen except that it behaves better for
             a wider variety of colors.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawReversibleLine(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color)">
            <summary>
             Draws a reversible line on the screen. A reversible line can
             be erased by just drawing over it again.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawScrollButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary>
             Draws a button for a Win32 scroll bar in the given rectangle with the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawScrollButton(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary>
             Draws a button for a Win32 scroll bar in the given rectangle with the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawSelectionFrame(System.Drawing.Graphics,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
             Draws a standard selection frame. A selection frame is a frame that is
             drawn around a selected component at design time.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawSizeGrip(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
             Draws a size grip at the given location. The color of the size grip is based
             on the given background color.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawSizeGrip(System.Drawing.Graphics,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Draws a size grip at the given location. The color of the size grip is based
             on the given background color.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawStringDisabled(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
             Draws a string in the style appropriate for disabled items.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawStringDisabled(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Rectangle,System.Windows.Forms.TextFormatFlags)">
            <summary>
             Draws a string in the style appropriate for disabled items, using GDI-based TextRenderer.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.DrawVisualStyleBorder(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Draws a string in the style appropriate for disabled items.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.FillReversibleRectangle(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
             Draws a filled rectangle on the screen. The operation of this can be
             "reversed" by drawing the same rectangle again. This is similar to
             inverting a region of the screen except that it behaves better for
             a wider variety of colors.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.GetColorRop(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
             This makes a choice from a set of raster op codes, based on the color given. If the
             color is considered to be "dark", the raster op provided by dark will be returned.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.GetActiveBrush(System.Drawing.Color)">
            <summary>
             Retrieves the brush used to draw active objects.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.GetFocusPen(System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
             Retrieves the pen used to draw a focus rectangle around a control. The focus
             rectangle is typically drawn when the control has keyboard focus.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.GetSelectedBrush(System.Drawing.Color)">
            <summary>
             Retrieves the brush used to draw selected objects.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.InfinityToOne(System.Single)">
            <summary>
             Converts an infinite value to "1".
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.InvertColor(System.Drawing.Color)">
            <summary>
             Inverts the given color.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.Light(System.Drawing.Color,System.Single)">
            <summary>
             Creates a new color that is a object of the given color.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.Light(System.Drawing.Color)">
            <summary>
             Creates a new color that is a object of the given color.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.LightLight(System.Drawing.Color)">
            <summary>
             Creates a new color that is a object of the given color.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.CreateStringFormat(System.Windows.Forms.Control,System.Drawing.ContentAlignment,System.Boolean,System.Boolean)">
            <summary>
             Get StringFormat object for rendering text using GDI+ (Graphics).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.CreateTextFormatFlags(System.Windows.Forms.Control,System.Drawing.ContentAlignment,System.Boolean,System.Boolean)">
            <summary>
             Get TextFormatFlags flags for rendering text using GDI (TextRenderer).
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ControlPaint.HLSColor">
            <summary>
             Logic copied from Windows sources to copy the lightening and darkening of colors.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.HLSColor.#ctor(System.Drawing.Color)">
            <summary>
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ControlPaint.HLSColor.Luminosity">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.HLSColor.Darker(System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.HLSColor.Lighter(System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.HLSColor.NewLuma(System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.HLSColor.NewLuma(System.Int32,System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.HLSColor.ColorFromHLS(System.Int32,System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlPaint.HLSColor.HueToRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ControlStyles">
            <summary>
             Specifies control functionality.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlStyles.ContainerControl">
            <summary>
             Indicates whether the control is a container-like control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlStyles.UserPaint">
            <summary>
             The control paints itself; WM_PAINT and WM_ERASEBKGND messages are not
             passed on to the underlying NativeWindow.
             This style only applies to subclasses of Control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlStyles.Opaque">
            <summary>
             If specified, a PaintBackground event will not be raised,
             OnPaintBackground will not be called, and Invalidate() will not
             invalidate the background of the HWND.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlStyles.ResizeRedraw">
            <summary>
             The control is completely redrawn when it is resized.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlStyles.FixedWidth">
            <summary>
             The control has a fixed width.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlStyles.FixedHeight">
            <summary>
             The control has a fixed height.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlStyles.StandardClick">
            <summary>
             If set, windows forms calls OnClick and raises the Click event when the
             control is clicked (unless it's the second click of a double-click and
             StandardDoubleClick is specified).
             Regardless of this style, the control may call OnClick directly.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlStyles.Selectable">
            <summary>
             The control can get the focus.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlStyles.UserMouse">
            <summary>
             The control does its own mouse processing; WM_MOUSEDOWN, WM_MOUSEMOVE,
             and WM_MOUSEUP messages are not passed on to the underlying NativeWindow.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlStyles.SupportsTransparentBackColor">
            <summary>
             If the BackColor is set to a color whose alpha component is less than
             255 (i.e., BackColor.A is less than 255), OnPaintBackground will simulate
             transparency by asking its parent control to paint our background.
             This is not true transparency -- if there is another control between us
             and our parent, we will not show the control in the middle.
             This style only applies to subclasses of Control. It only works if
             UserPaint is set, and the parent control is a Control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlStyles.StandardDoubleClick">
            <summary>
             If set, windows forms calls OnDoubleClick and raises the DoubleClick
             event when the control is double clicked.
             Regardless of whether it is set, the control may call OnDoubleClick
             directly.
             This style is ignored if StandardClick is not set.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint">
            <summary>
             If true, WM_ERASEBKGND is ignored, and both OnPaintBackground and
             OnPaint are called directly from WM_PAINT.  This generally reduces
             flicker, but can cause problems if other controls send WM_ERASEBKGND
             messages to us.  (This is sometimes done to achieve a pseudo-transparent
             effect similar to ControlStyles.SupportsTransparentBackColor; for instance,
             ToolBar with flat appearance does this).
             This style only makes sense if UserPaint is true.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlStyles.CacheText">
            <summary>
             If true, the control keeps a copy of the text rather than going to the
             hWnd for the text every time. This improves performance but makes it
             difficult to keep the control and hWnd's text synchronized.
             This style defaults to false.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlStyles.EnableNotifyMessage">
            <summary>
             If true, the OnNotifyMessage method will be called for every message
             sent to the control's WndProc.
             This style defaults to false.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlStyles.DoubleBuffer">
            <summary>
             If set, all control painting will be double buffered. You must also
             set the UserPaint and AllPaintingInWmPaint style. Note: This is
             obsolete, please
             use OptimizedDoubleBuffer instead.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer">
            <summary>
             If set, all control painting will be double buffered.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlStyles.UseTextForAccessibility">
             <summary>
              If this style is set, and there is a value in the control's Text property,
              that value will be used to determine the control's default Active
              Accessibility name and shortcut key. Otherwise, the text of the preceding
              Label control will be used instead.
            
              This style is set by default. Certain built-in control types such as
              TextBox and ComboBox un-set this style, so that their current text will
              not be used by Active Accessibility.
             </summary>
        </member>
        <member name="T:System.Windows.Forms.ControlUpdateMode">
            <summary>
             Determines when changes to a data source property get propagated up to
             the corresponding data-bound control property.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlUpdateMode.OnPropertyChanged">
            <summary>
             Control property is updated whenever the data source property changes, or
             the data source position changes.
             This is the default update mode.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ControlUpdateMode.Never">
            <summary>
             Control property is never updated. Binding is "write-only" with respect
             to the data source. To force the control property to be updated, use
             the Binding.ReadValue method.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CreateParams.ClassName">
            <summary>
             Name of the window class to subclass. The default value for this field
             is null, indicating that the window is not a subclass of an existing
             window class. To subclass an existing window class, store the window
             class name in this field. For example, to subclass the standard edit
             control, set this field to "EDIT".
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CreateParams.Caption">
            <summary>
             The initial caption your control will have.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CreateParams.Style">
            <summary>
             Window style bits. This must be a combination of WS_XXX style flags and
             other control-specific style flags.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CreateParams.ExStyle">
            <summary>
             Extended window style bits. This must be a combination of WS_EX_XXX
             style flags.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CreateParams.ClassStyle">
            <summary>
             Class style bits. This must be a combination of CS_XXX style flags. This
             field is ignored if the className field is not null.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CreateParams.X">
            <summary>
             The left portion of the initial proposed location.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CreateParams.Y">
            <summary>
             The top portion of the initial proposed location.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CreateParams.Width">
            <summary>
             The initially proposed width.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CreateParams.Height">
            <summary>
             The initially proposed height.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CreateParams.Parent">
            <summary>
             The controls parent.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CreateParams.Param">
            <summary>
             Any extra information that the underlying handle might want.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.CurrencyManager">
            <summary>
             Manages the position and bindings of a list.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.CurrencyManager.finalType">
            <summary>
             Gets the type of the list.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.CurrencyManager.ItemChanged">
            <summary>
             Occurs when the
             current item has been
             altered.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CurrencyManager.AllowAdd">
            <summary>
             Gets a value indicating
             whether items can be added to the list.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CurrencyManager.AllowEdit">
            <summary>
             Gets a value
             indicating whether edits to the list are allowed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CurrencyManager.AllowRemove">
            <summary>
             Gets a value indicating whether items can be removed from the list.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CurrencyManager.Count">
            <summary>
             Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CurrencyManager.Current">
            <summary>
             Gets the current item in the list.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CurrencyManager.DataSource">
            <summary>
             Gets the data source of the list.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CurrencyManager.IsBinding">
            <summary>
             Gets a value indicating whether the list is bound to a data source.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CurrencyManager.List">
            <summary>
             Gets the list as an object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CurrencyManager.Position">
            <summary>
             Gets or sets the position you are at within the list.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.CurrencyManager.Item(System.Int32)">
            <summary>
             Gets or sets the object at the specified index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CurrencyManager.CancelCurrentEdit">
            <summary>
             Cancels the current edit operation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CurrencyManager.CheckEmpty">
            <summary>
             Throws an exception if there is no list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CurrencyManager.EndCurrentEdit">
            <summary>
             Ends the current edit operation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CurrencyManager.SetSort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
             Sets the column to sort by, and the direction of the sort.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CurrencyManager.GetSortProperty">
            <summary>
             Gets a <see cref='T:System.ComponentModel.PropertyDescriptor'/> for a CurrencyManager.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CurrencyManager.GetSortDirection">
            <summary>
             Gets the sort direction of a list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CurrencyManager.Find(System.ComponentModel.PropertyDescriptor,System.Object,System.Boolean)">
            <summary>
             Find the position of a desired list item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CurrencyManager.GetListName">
            <summary>
             Gets the name of the list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CurrencyManager.GetListName(System.Collections.ArrayList)">
            <summary>
             Gets the name of the specified list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CurrencyManager.GetItemProperties">
            <summary>
             Gets the <see cref='T:System.ComponentModel.PropertyDescriptorCollection'/> for
             the list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CurrencyManager.List_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
             Gets the <see cref='T:System.ComponentModel.PropertyDescriptorCollection'/> for the specified list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CurrencyManager.OnCurrentChanged(System.EventArgs)">
            <summary>
             Causes the CurrentChanged event to occur.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CurrencyManager.Refresh">
            <summary>
             Forces a repopulation of the CurrencyManager
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CurrencyManager.ResumeBinding">
            <summary>
             Resumes binding of component properties to list items.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CurrencyManager.SuspendBinding">
            <summary>
             Suspends binding.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Cursor">
            <summary>
             Represents the image used to paint the mouse pointer.
             Different cursor shapes are used to inform the user what operation the mouse will
             have.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Cursor.#ctor(System.Int32)">
            <summary>
             Private constructor. If you want a standard system cursor, use one of the
             definitions in the Cursors class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Cursor.#ctor(System.IntPtr)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Cursor'/> class with the specified handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Cursor.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Cursor'/>
             class with the specified filename.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Cursor.#ctor(System.Type,System.String)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Cursor'/> class from the specified resource.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Cursor.#ctor(System.IO.Stream)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Cursor'/> class from the
             specified data stream.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Cursor.Clip">
            <summary>
             Gets or sets a <see cref='T:System.Drawing.Rectangle'/> that represents the current clipping
             rectangle for this <see cref='T:System.Windows.Forms.Cursor'/> in screen coordinates.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Cursor.Current">
            <summary>
             Gets or sets a <see cref='T:System.Windows.Forms.Cursor'/> that represents the current mouse cursor.
             The value is <see langword="null"/> if the current mouse cursor is not visible.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Cursor.Handle">
            <summary>
             Gets the Win32 handle for this <see cref='T:System.Windows.Forms.Cursor'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Cursor.HotSpot">
            <summary>
             Returns the "hot" location of the cursor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Cursor.Position">
            <summary>
             Gets or sets a <see cref='T:System.Drawing.Point'/> that specifies the current cursor
             position in screen coordinates.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Cursor.Size">
            <summary>
             Gets the size of this <see cref='T:System.Windows.Forms.Cursor'/> object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Cursor.CopyHandle">
            <summary>
             Duplicates this the Win32 handle of this <see cref='T:System.Windows.Forms.Cursor'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Cursor.Dispose">
            <summary>
             Cleans up the resources allocated by this object.  Once called, the cursor
             object is no longer useful.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Cursor.DrawImageCore(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>
             Draws this image to a graphics object.  The drawing command originates on the graphics
             object, but a graphics object generally has no idea how to render a given image.  So,
             it passes the call to the actual image.  This version crops the image to the given
             dimensions and allows the user to specify a rectangle within the image to draw.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Cursor.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Draws this <see cref='T:System.Windows.Forms.Cursor'/> to a <see cref='T:System.Drawing.Graphics'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Cursor.DrawStretched(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Draws this <see cref='T:System.Windows.Forms.Cursor'/> to a <see cref='T:System.Drawing.Graphics'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Cursor.Finalize">
            <summary>
             Cleans up Windows resources for this object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Cursor.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             ISerializable private implementation
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Cursor.Hide">
            <summary>
             Hides the cursor. For every call to Cursor.hide() there must be a
             balancing call to Cursor.show().
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Cursor.LoadPicture(Interop.Ole32.IStream,System.String)">
            <summary>
             Loads a picture from the requested stream.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Cursor.GetData">
            <summary>
             Saves a picture from the requested stream.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Cursor.Show">
            <summary>
             Displays the cursor. For every call to Cursor.show() there must have been
             a previous call to Cursor.hide().
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Cursor.ToString">
            <summary>
             Retrieves a human readable string representing this <see cref='T:System.Windows.Forms.Cursor'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.CursorConverter">
            <summary>
             CursorConverter is a class that can be used to convert
             colors from one data type to another.  Access this
             class through the TypeDescriptor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CursorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Determines if this converter can convert an object in the given source
             type to the native type of the converter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CursorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Gets a value indicating whether this converter can
             convert an object to the given destination type using the context.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CursorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
             Converts the given object to the converter's native type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CursorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type.  The most common types to convert
             are to and from a string object.  The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string.  If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CursorConverter.GetProperties">
            <summary>
             Retrieves the properties for the available cursors.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CursorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Retrieves a collection containing a set of standard values
             for the data type this validator is designed for.  This
             will return null if the data type does not support a
             standard set of values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.CursorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if this object supports a standard set of values
             that can be picked from a list.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Cursors">
            <summary>
             Standard cursors
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataFormats">
            <summary>
             Translates between WinForms text-based <see cref='T:System.Windows.Forms.Clipboard'/>
             formats and Win32 32-bit signed integer-based clipboard
             formats. Provides <see langword='static'/> methods to create new
            <see cref='T:System.Windows.Forms.Clipboard'/> formats and add them to the Windows Registry.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.Text">
            <summary>
             Specifies the standard ANSI text format. This <see langword='static'/>
             field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.UnicodeText">
            <summary>
             Specifies the standard Windows Unicode text format.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.Dib">
            <summary>
             Specifies the Windows Device Independent Bitmap (DIB) format.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.Bitmap">
            <summary>
             Specifies a Windows bitmap format.
             This <see langword='static'/> field is read-only. </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.EnhancedMetafile">
            <summary>
             Specifies the Windows enhanced metafile format.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.MetafilePict">
            <summary>
             Specifies the Windows metafile format, which WinForms does not directly use.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.SymbolicLink">
            <summary>
             Specifies the Windows symbolic link format, which WinForms does not directly use.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.Dif">
            <summary>
             Specifies the Windows data interchange format, which WinForms does not directly use.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.Tiff">
            <summary>
             Specifies the Tagged Image File Format (TIFF), which WinForms does not directly use.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.OemText">
            <summary>
             Specifies the standard Windows original equipment manufacturer (OEM) text format.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.Palette">
            <summary>
             Specifies the Windows palette format.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.PenData">
            <summary>
             Specifies the Windows pen data format, which consists of pen strokes for handwriting
             software; Win Formsdoes not use this format.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.Riff">
            <summary>
             Specifies the Resource Interchange File Format (RIFF) audio format, which WinForms
             does not directly use.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.WaveAudio">
            <summary>
             Specifies the wave audio format, which Win Forms does not
             directly use. This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.FileDrop">
            <summary>
             Specifies the Windows file drop format, which WinForms does not directly use.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.Locale">
            <summary>
             Specifies the Windows culture format, which WinForms does not directly use.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.Html">
            <summary>
             Specifies text consisting of HTML data.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.Rtf">
            <summary>
             Specifies text consisting of Rich Text Format (RTF) data.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.CommaSeparatedValue">
            <summary>
             Specifies a comma-separated value (CSV) format, which is a common interchange format
             used by spreadsheets. This format is not used directly by WinForms.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.StringFormat">
            <summary>
             Specifies the Win Forms string class format, which WinForms uses to store string
             objects.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataFormats.Serializable">
            <summary>
             Specifies a format that encapsulates any type of WinForms object.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataFormats.GetFormat(System.String)">
            <summary>
             Gets a <see cref='T:System.Windows.Forms.DataFormats.Format'/> with the Windows
             Clipboard numeric ID and name for the specified format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataFormats.GetFormat(System.Int32)">
            <summary>
             Gets a <see cref='T:System.Windows.Forms.DataFormats.Format'/> with the Windows
             Clipboard numeric ID and name for the specified ID.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataFormats.EnsureFormatSpace(System.Int32)">
            <summary>
             Ensures that we have enough room in our format list
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataFormats.EnsurePredefined">
            <summary>
             Ensures that the Win32 predefined formats are setup in our format list.
             This is called anytime we need to search the list
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataFormats.Format">
            <summary>
             Represents a format type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataFormats.Format.#ctor(System.String,System.Int32)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.DataFormats.Format'/> class and 
             specifies whether a Win32 handle is expected with this format.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataFormats.Format.Name">
            <summary>
             Specifies the name of this format.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataFormats.Format.Id">
            <summary>
             Specifies the ID number for this format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.DataGridView'/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.ScaleToCurrentDpi(System.Int32)">
            <summary>
             Scaling row header width and column header height.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.AllowUserToResizeColumns">
            <summary>
             Gets or sets a global value indicating if the dataGridView's columns are resizable with the mouse.
             The resizable aspect of a column can be overridden by DataGridViewColumn.Resizable.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.AllowUserToResizeRows">
            <summary>
             Gets or sets a global value indicating if the dataGridView's rows are resizable with the mouse.
             The resizable aspect of a row can be overridden by DataGridViewRow.Resizable.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.AutoSize">
            <summary>
             Overriding base implementation for perf gains.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.AutoSizeColumnsMode">
            <summary>
             Gets or sets the columns' autosizing mode. Standard inheritance model is used:
             Columns with AutoSizeMode property set to NotSet will use this auto size mode.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.AutoSizeRowsMode">
            <summary>
             Gets or sets the rows' autosizing mode.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.BackgroundColor">
            <summary>
             Gets or sets the background color of the dataGridView.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode">
            <summary>
             Gets or sets a value that determines the behavior for adjusting the column headers height.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.ComboBoxControlWasDetached">
            <summary>
             Indicates whether the ComboBox editing control was just detached. (focused out to another cell)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.TextBoxControlWasDetached">
            <summary>
             Indicates whether the TextBox editing control was just detached. (focused out to another cell)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible">
            <summary>
             Gets
             or sets a value indicating if the dataGridView's column headers are visible.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.DisplayRectangle">
            <summary>
             Returns the client rect of the display area of the control.
             The DataGridView control return its client rectangle minus the potential scrollbars.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles">
            <summary>
             Determines whether the DataGridView's header cells render using XP theming visual styles or not
             when visual styles are enabled in the application.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.GridColor">
            <summary>
             Gets or sets the grid color of the dataGridView (when Single mode is used).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.RowHeadersVisible">
            <summary>
             Gets or sets a value indicating whether the dataGridView's row headers are
             visible.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode">
            <summary>
             Gets or sets a value that determines the behavior for adjusting the row headers width.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.ScrollBars">
            <summary>
             Possible return values are given by the ScrollBars enumeration.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataGridView.HitTestInfo.Nowhere">
            <summary>
             Allows the <see cref='T:System.Windows.Forms.DataGridView.HitTestInfo'/> object to inform you the
             extent of the grid.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.HitTestInfo.ColumnIndex">
            <summary>
             Gets the number of the clicked column.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.HitTestInfo.RowIndex">
            <summary>
             Gets the
             number of the clicked row.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.HitTestInfo.ColumnX">
            <summary>
             Gets the left edge of the column.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.HitTestInfo.RowY">
            <summary>
             Gets the top edge of the row.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridView.HitTestInfo.Type">
            <summary>
             Gets the part of the <see cref='T:System.Windows.Forms.DataGridView'/> control, other than the row or column, that was
             clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.HitTestInfo.Equals(System.Object)">
            <summary>
             Indicates whether two objects are identical.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.HitTestInfo.GetHashCode">
            <summary>
             Gets the hash code for the <see cref='T:System.Windows.Forms.DataGridView.HitTestInfo'/> instance.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.HitTestInfo.ToString">
            <summary>
             Gets the type, column number and row number.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.AssignParent(System.Windows.Forms.Control)">
            <summary>
             Assigns a new parent control to the DataGridView.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.ComputeFirstVisibleScrollingColumn">
            <summary>
             Determines which column is the first visible scrolling
             column given the object's horizontalOffset.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.CreateColumnsInstance">
            <summary>
             Constructs the new instance of the Columns collection objects. Subclasses
             should not call base.CreateColumnsInstance.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.CreateRowsInstance">
            <summary>
             Constructs the new instance of the Rows collection objects. Subclasses
             should not call base.CreateRowsInstance.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.DrawColSplitBar(System.Int32)">
            <summary>
             Draws an XOR region to give UI feedback for Column Resizing.
             This looks just like the Splitter control's UI when resizing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.DrawRowSplitBar(System.Int32)">
            <summary>
             Draws an XOR region to give UI feedback for Row Resizing.
             This looks just like the Splitter control's UI when resizing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.DrawSplitBar(System.Drawing.Rectangle)">
            <summary>
             Draws an XOR region to give UI feedback for Column/Row Resizing.
             This looks just like the Splitter control's UI when resizing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.GetColumnXFromIndex(System.Int32)">
            <summary>
             Returns the coordinate of the left edge of the given column. Note that
             the column does not need to be completely visible on the display area.
             Value returned is not necessarily within layout.Data because of the
             this.negOffset value, or because the column may start to the right of
             data area, or behind the frozen area, or completely on the left of the control.
             The right edge is returned in RightToLeft mode.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.GetRowYFromIndex(System.Int32)">
            <summary>
             Returns the coordinate of the upper edge of the given row. Note that
             the row does not need to be completely visible on the display area.
             Value returned is not necessarily within layout.Data because the row
             may start below the data area.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.InvalidateColumn(System.Int32)">
            <summary>
             Invalidate the painting region for the column specified.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.InvalidateInside">
            <summary>
             Invalidates the scrollable area of the DataGridView.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.InvalidateRow(System.Int32)">
            <summary>
             Invalidate the painting region for the row specified.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.LayoutScrollBars">
            <summary>
             Determines if Scrollbars should be visible,
             updates their bounds and the bounds of all
             other regions in the dataGridView's Layout.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
             Gets or sets a value that indicates whether a key should be processed
             further.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.ProcessF3Key(System.Windows.Forms.Keys)">
            <summary>
             Sorts the current column.
             'UseLegacyAccessibilityFeatures2' accessibility switch
             should be set to false to enable the feature.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.ProcessControlShiftF10Keys(System.Windows.Forms.Keys)">
            <summary>
             Activates keyboard tooltip.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.ProcessTabKey(System.Windows.Forms.Keys)">
            <summary>
             Gets a value indicating whether the Tab key should be processed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.ProcessDataGridViewKey(System.Windows.Forms.KeyEventArgs)">
            <summary>
             Processes keys for dataGridView navigation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.ResetTrackingState">
            <summary>
             Re-initializes all tracking related state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.ResetUIState(System.Boolean,System.Boolean)">
            <summary>
             Re-initializes all UI related state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.WmContextMenu(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_CONTEXTMENU message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridView.WmGetDlgCode(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_GETDLGCODE message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewAdvancedBorderStyle.#ctor(System.Windows.Forms.DataGridView,System.Windows.Forms.DataGridViewAdvancedCellBorderStyle,System.Windows.Forms.DataGridViewAdvancedCellBorderStyle,System.Windows.Forms.DataGridViewAdvancedCellBorderStyle)">
            <summary>
             Creates a new DataGridViewAdvancedBorderStyle. The specified owner will
             be notified when the values are changed.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewBand">
            <summary>
             Identifies a band or column in the dataGridView.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewBand.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.DataGridViewBand'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridViewBand.Properties">
            <summary>
             Contains all properties that are not always set.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewButtonCell">
            <summary>
             Identifies a button cell in the dataGridView.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewCell">
            <summary>
             Identifies a cell in the dataGridView.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataGridViewCell._nonEmptyNeighbors">
            <summary>
            Contains non-empty neighboring cells around the current cell. 
            Used in <see cref='M:System.Windows.Forms.IKeyboardToolTip.GetNeighboringToolsRectangles'/> method.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewCell.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.DataGridViewCell'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridViewCell.ColumnIndex">
            <summary>
             Gets or sets the Index of a column in the <see cref='!:DataGrid'/> control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewCell.System#Windows#Forms#IKeyboardToolTip#GetNeighboringToolsRectangles">
            <summary>
             The method looks for 8 cells around the current cell 
             to find the optimal tooltip position in <see cref='M:System.Windows.Forms.ToolTip.GetOptimalToolTipPosition(System.Windows.Forms.IKeyboardToolTip,System.Drawing.Rectangle,System.Int32,System.Int32)'/> method.
             The optimal tooltip position is the position outside DataGridView or on top of an empty cell. 
             This is done so that tooltips do not overlap the text of other cells whenever possible.
            </summary>
            <returns>
             Non-empty neighboring cells around the current cell.
            </returns>
        </member>
        <member name="P:System.Windows.Forms.DataGridViewCell.RowIndex">
            <summary>
             Gets or sets the index of a row in the <see cref='!:DataGrid'/> control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridViewCell.AccessibleRestructuringNeeded">
            <summary>
            Gets the value indicating whether DataGridView editing control should be processed in accessible
            hierarchy restructuring. This check is necessary to not restructure the accessible hierarchy for
            custom editing controls and for derived classes as inherited accessibility may differ or
            may be not inherited at all.
            </summary>
            <returns>True if accessible hierarchy should be manually recreated for the cell and editing control, otherwise False.</returns>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewCell.ToString">
            <summary>
             Gets the row Index and column Index of the cell.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewCell.DataGridViewCellAccessibleObject.SetDetachableChild(System.Windows.Forms.AccessibleObject)">
            <summary>
             Sets the detachable child accessible object which may be added or removed to/from hierachy nodes.
            </summary>
            <param name="child">The child accessible object.</param>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewCellCollection">
            <summary>
             Represents a collection of <see cref='T:System.Windows.Forms.DataGridViewCell'/> objects in the <see cref='T:System.Windows.Forms.DataGridView'/>
             control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridViewCellCollection.Item(System.Int32)">
            <summary>
             Retrieves the DataGridViewCell with the specified index.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridViewCellCollection.Item(System.String)">
            <summary>
             Retrieves the DataGridViewCell with the specified column name.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewCellCollection.Add(System.Windows.Forms.DataGridViewCell)">
            <summary>
             Adds a <see cref='T:System.Windows.Forms.DataGridViewCell'/> to this collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewCellCollection.Contains(System.Windows.Forms.DataGridViewCell)">
            <summary>
             Checks to see if a DataGridViewCell is contained in this collection.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewCellLinkedList">
            <summary>
             Represents a linked list of <see cref='T:System.Windows.Forms.DataGridViewCell'/> objects
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewCellLinkedListEnumerator">
            <summary>
             Represents an emunerator of elements in a <see cref='T:System.Windows.Forms.DataGridViewCellLinkedList'/>  linked list.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewCellLinkedListElement">
            <summary>
             Represents an element in a <see cref='T:System.Windows.Forms.DataGridViewCellLinkedList'/> linked list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewCellStyle.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.DataGridViewCellStyle'/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewCellStyleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Gets a value indicating whether this converter can
             convert an object to the given destination type using the context.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewCellStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type.  The most common types to convert
             are to and from a string object.  The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string.  If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewCheckBoxCell">
            <summary>
             Identifies a checkbox cell in the DataGridView.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewCheckBoxCell.ToString">
            <summary>
             Gets the row Index and column Index of the cell.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewColumn">
            <summary>
             Base class for the columns in a data grid view.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewColumn.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.DataGridViewColumn'/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewColumn.ScaleToCurrentDpi(System.Int32)">
            <summary>
             Scale to current device dpi settings
            </summary>
            <param name="value"> initial value</param>
            <returns> scaled metric</returns>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewColumnCollection">
            <summary>
             Represents a collection of <see cref='T:System.Windows.Forms.DataGridViewColumn'/> objects in the <see cref='!:DataGrid'/>
             control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridViewColumnCollection.Item(System.Int32)">
            <summary>
             Retrieves the DataGridViewColumn with the specified index.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridViewColumnCollection.Item(System.String)">
            <summary>
             Retrieves the DataGridViewColumn with the Name provided.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewColumnCollection.Add(System.String,System.String)">
            <summary>
             Adds a <see cref='T:System.Windows.Forms.DataGridViewColumn'/> to this collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewColumnCollection.Add(System.Windows.Forms.DataGridViewColumn)">
            <summary>
             Adds a <see cref='T:System.Windows.Forms.DataGridViewColumn'/> to this collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewColumnCollection.Contains(System.Windows.Forms.DataGridViewColumn)">
            <summary>
             Checks to see if a DataGridViewColumn is contained in this collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewColumnCollection.Insert(System.Int32,System.Windows.Forms.DataGridViewColumn)">
            <summary>
             Inserts a <see cref='T:System.Windows.Forms.DataGridViewColumn'/> in this collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewColumnConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type.  The most common types to convert
             are to and from a string object.  The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string.  If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewColumnHeaderCell.ToString">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewComboBoxCell.CreateAccessibilityInstance">
            <summary>
             Creates a new AccessibleObject for this DataGridViewComboBoxCell instance.
             The AccessibleObject instance returned by this method supports ControlType UIA property.
            </summary>
            <returns>
             AccessibleObject for this DataGridViewComboBoxCell instance.
            </returns>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewComboBoxCell.ItemFromComboBoxDataSource(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
             Find the item in the ComboBox currency manager for the current cell
             This can be horribly inefficient and it uses reflection which makes it expensive
             - ripe for optimization
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewComboBoxCell.LookupDisplayValue(System.Int32,System.Object,System.Object@)">
             <summary>
              Lookup the display text for the given value.
            
              We use the value and ValueMember to look up the item in the
              ComboBox datasource. We then use DisplayMember to get the
              text to display.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewComboBoxCell.LookupValue(System.Object,System.Object@)">
             <summary>
              Lookup the value for the given display value.
            
              We use the display value and DisplayMember to look up the item in the
              ComboBox datasource. We then use ValueMember to get the value.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewComboBoxCell.ToString">
            <summary>
             Gets the row Index and column Index of the cell.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewComboBoxCell.ObjectCollection">
            <summary>
             A collection that stores objects.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridViewComboBoxCell.ObjectCollection.Count">
            <summary>
             Retrieves the number of items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridViewComboBoxCell.ObjectCollection.InnerArray">
            <summary>
             Internal access to the actual data store.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewComboBoxCell.ObjectCollection.Add(System.Object)">
            <summary>
             Adds an item to the collection. For an unsorted combo box, the item is
             added to the end of the existing list of items. For a sorted combo box,
             the item is inserted into the list according to its sorted position.
             The item's ToString() method is called to obtain the string that is
             displayed in the combo box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewComboBoxCell.ObjectCollection.AddRangeInternal(System.Collections.ICollection)">
            <summary>
             Add range that bypasses the data source check.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridViewComboBoxCell.ObjectCollection.Item(System.Int32)">
            <summary>
             Retrieves the item with the specified index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewComboBoxCell.ObjectCollection.Clear">
            <summary>
             Removes all items from the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewComboBoxCell.ObjectCollection.CopyTo(System.Object[],System.Int32)">
            <summary>
             Copies the DataGridViewComboBoxCell Items collection to a destination array.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewComboBoxCell.ObjectCollection.GetEnumerator">
            <summary>
             Returns an enumerator for the DataGridViewComboBoxCell Items collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewComboBoxCell.ObjectCollection.Insert(System.Int32,System.Object)">
            <summary>
             Adds an item to the collection. For an unsorted combo box, the item is
             added to the end of the existing list of items. For a sorted combo box,
             the item is inserted into the list according to its sorted position.
             The item's toString() method is called to obtain the string that is
             displayed in the combo box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewComboBoxCell.ObjectCollection.Remove(System.Object)">
            <summary>
             Removes the given item from the collection, provided that it is
             actually in the list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewComboBoxCell.ObjectCollection.RemoveAt(System.Int32)">
            <summary>
             Removes an item from the collection at the given index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewComboBoxColumn.ToString">
            <summary>
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewComboBoxEditingControlAccessibleObject">
            <summary>
             Defines the DataGridView ComboBox EditingControl accessible object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataGridViewComboBoxEditingControlAccessibleObject._parentAccessibleObject">
            <summary>
             The parent is changed when the editing control is attached to another editing cell.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewComboBoxEditingControlAccessibleObject.SetParent(System.Windows.Forms.AccessibleObject)">
            <summary>
             Sets the parent accessible object for the node which can be added or removed to/from hierachy nodes.
            </summary>
            <param name="parent">The parent accessible object.</param>
        </member>
        <member name="F:System.Windows.Forms.DataGridViewContentAlignment.TopLeft">
            <summary>
             Content is vertically aligned at the top, and horizontally aligned
             on the left.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataGridViewContentAlignment.TopCenter">
            <summary>
             Content is vertically aligned at the top, and horizontally aligned
             at the center.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataGridViewContentAlignment.TopRight">
            <summary>
             Content is vertically aligned at the top, and horizontally aligned
             on the right.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft">
            <summary>
             Content is vertically aligned in the middle, and horizontally aligned
             on the left.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataGridViewContentAlignment.MiddleCenter">
            <summary>
             Content is vertically aligned in the middle, and horizontally aligned
             at the center.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataGridViewContentAlignment.MiddleRight">
            <summary>
             Content is vertically aligned in the middle, and horizontally aligned
             on the right.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataGridViewContentAlignment.BottomLeft">
            <summary>
             Content is vertically aligned at the bottom, and horizontally aligned
             on the left.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataGridViewContentAlignment.BottomCenter">
            <summary>
             Content is vertically aligned at the bottom, and horizontally aligned
             at the center.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataGridViewContentAlignment.BottomRight">
            <summary>
             Content is vertically aligned at the bottom, and horizontally aligned
             on the right.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewElement">
            <summary>
             Identifies an element in the dataGridView (base class for TCell, TBand, TRow, TColumn.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewElement.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.DataGridViewElement'/> class.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewHeaderCell">
            <summary>
             Identifies a cell in the dataGridView.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewHeaderCell.ToString">
            <summary>
             Gets the row Index and column Index of the cell.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewHitTestType">
            <summary>
             Specifies the part of the <see cref='T:System.Windows.Forms.DataGridView'/>
             control where the mouse is.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewIntLinkedList">
            <summary>
             Represents a linked list of integers
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewIntLinkedListEnumerator">
            <summary>
             Represents an emunerator of elements in a <see cref='T:System.Windows.Forms.DataGridViewIntLinkedList'/>  linked list.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewIntLinkedListElement">
            <summary>
             Represents an element in a <see cref='T:System.Windows.Forms.DataGridViewIntLinkedList'/> linked list.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewRow">
            <summary>
             Identifies a row in the dataGridView.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewRow.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.DataGridViewRow'/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewRow.CreateCellsInstance">
            <summary>
             Constructs the new instance of the Cells collection objects. Subclasses
             should not call base.CreateCellsInstance.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewRowCollection">
            <summary>
             Represents a collection of <see cref='T:System.Windows.Forms.DataGridViewRow'/> objects in the <see cref='!:DataGrid'/>
             control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridViewRowCollection.Item(System.Int32)">
            <summary>
             Retrieves the DataGridViewRow with the specified index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewRowCollection.Add(System.Windows.Forms.DataGridViewRow)">
            <summary>
             Adds a <see cref='T:System.Windows.Forms.DataGridViewRow'/> to this collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewRowCollection.Contains(System.Windows.Forms.DataGridViewRow)">
            <summary>
             Checks to see if a DataGridViewRow is contained in this collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewRowCollection.Insert(System.Int32,System.Windows.Forms.DataGridViewRow)">
            <summary>
             Inserts a <see cref='T:System.Windows.Forms.DataGridViewRow'/> to this collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewRowCollection.InsertRange(System.Int32,System.Windows.Forms.DataGridViewRow[])">
            <summary>
             Inserts a range of <see cref='T:System.Windows.Forms.DataGridViewRow'/> to this collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewRowCollection.UnsharingRowEnumerator.#ctor(System.Windows.Forms.DataGridViewRowCollection)">
            <summary>
             Creates a new enumerator that will enumerate over the rows and unshare the accessed rows if needed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewRowCollection.UnsharingRowEnumerator.System#Collections#IEnumerator#MoveNext">
            <summary>
             Moves to the next element, or returns false if at the end.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewRowCollection.UnsharingRowEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
             Resets the enumeration back to the beginning.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataGridViewRowCollection.UnsharingRowEnumerator.System#Collections#IEnumerator#Current">
            <summary>
             Retrieves the current value in the enumerator.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewRowHeaderCell.ToString">
            <summary>
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewSelectedCellCollection">
            <summary>
             Represents a collection of selected <see cref='T:System.Windows.Forms.DataGridViewCell'/> objects in the <see cref='T:System.Windows.Forms.DataGridView'/>
             control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewSelectedCellCollection.Add(System.Windows.Forms.DataGridViewCell)">
            <summary>
             Adds a <see cref='T:System.Windows.Forms.DataGridViewCell'/> to this collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewSelectedCellCollection.AddCellLinkedList(System.Windows.Forms.DataGridViewCellLinkedList)">
            <summary>
             Adds all the <see cref='T:System.Windows.Forms.DataGridViewCell'/> objects from the provided linked list to this collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewSelectedCellCollection.Contains(System.Windows.Forms.DataGridViewCell)">
            <summary>
             Checks to see if a DataGridViewCell is contained in this collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewSelectedColumnCollection.Add(System.Windows.Forms.DataGridViewColumn)">
            <summary>
             Adds a <see cref='T:System.Windows.Forms.DataGridViewCell'/> to this collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewSelectedColumnCollection.Contains(System.Windows.Forms.DataGridViewColumn)">
            <summary>
             Checks to see if a DataGridViewCell is contained in this collection.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewSelectedRowCollection">
            <summary>
             Represents a collection of selected <see cref='T:System.Windows.Forms.DataGridViewCell'/> objects in the <see cref='T:System.Windows.Forms.DataGridView'/>
             control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewSelectedRowCollection.Add(System.Windows.Forms.DataGridViewRow)">
            <summary>
             Adds a <see cref='T:System.Windows.Forms.DataGridViewCell'/> to this collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewSelectedRowCollection.Contains(System.Windows.Forms.DataGridViewRow)">
            <summary>
             Checks to see if a DataGridViewCell is contained in this collection.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewTextBoxCell">
            <summary>
             Identifies a cell in the dataGridView.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewTextBoxCell.CreateAccessibilityInstance">
            <summary>
             Creates a new AccessibleObject for this DataGridViewTextBoxCell instance.
             The AccessibleObject instance returned by this method supports ControlType UIA property.
            </summary>
            <returns>
             AccessibleObject for this DataGridViewTextBoxCell instance.
            </returns>
        </member>
        <member name="T:System.Windows.Forms.DataGridViewTextBoxEditingControlAccessibleObject">
            <summary>
             Defines the DataGridView TextBox EditingControl accessible object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataGridViewTextBoxEditingControlAccessibleObject._parentAccessibleObject">
            <summary>
             The parent is changed when the editing control is attached to another editing cell.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewTextBoxEditingControlAccessibleObject.SetParent(System.Windows.Forms.AccessibleObject)">
            <summary>
             Sets the parent accessible object for the node which can be added or removed to/from hierachy nodes.
            </summary>
            <param name="parent">The parent accessible object.</param>
        </member>
        <member name="M:System.Windows.Forms.DataGridViewTopLeftHeaderCell.ToString">
            <summary>
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataObject">
            <summary>
             Implements a basic data transfer mechanism.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.#ctor(System.Windows.Forms.IDataObject)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.DataObject'/> class, with the specified <see cref='T:System.Windows.Forms.IDataObject'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.#ctor(System.Runtime.InteropServices.ComTypes.IDataObject)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.DataObject'/> class, with the specified <see cref='T:System.Runtime.InteropServices.ComTypes.IDataObject'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.DataObject'/>
             class, which can store arbitrary data.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.#ctor(System.Object)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.DataObject'/> class, containing the specified data.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.#ctor(System.String,System.Object)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.DataObject'/> class, containing the specified data and its
             associated format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)">
            <summary>
             Retrieves the data associated with the specified data
             format, using an automated conversion parameter to determine whether to convert
             the data to the format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.GetData(System.String)">
            <summary>
             Retrieves the data associated with the specified data
             format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.GetData(System.Type)">
            <summary>
             Retrieves the data associated with the specified class
             type format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)">
            <summary>
             Determines whether data stored in this instance is
             associated with, or can be converted to, the specified
             format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.GetDataPresent(System.String,System.Boolean)">
            <summary>
             Determines whether data stored in this instance is
             associated with the specified format, using an automatic conversion
             parameter to determine whether to convert the data to the format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.GetDataPresent(System.String)">
            <summary>
             Determines whether data stored in this instance is
             associated with, or can be converted to, the specified
             format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)">
            <summary>
             Gets a list of all formats that data stored in this
             instance is associated with or can be converted to, using an automatic
             conversion parameter <paramref name="autoConvert"/> to
             determine whether to retrieve all formats that the data can be converted to or
             only native data formats.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.GetFormats">
            <summary>
             Gets a list of all formats that data stored in this instance is associated
             with or can be converted to.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.GetDistinctStrings(System.String[])">
            <summary>
             Retrieves a list of distinct strings from the array.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.GetMappedFormats(System.String)">
            <summary>
             Returns all the "synonyms" for the specified format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.GetTymedUseable(System.Runtime.InteropServices.ComTypes.TYMED)">
            <summary>
             Returns true if the tymed is useable.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.GetDataIntoOleStructs(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
            <summary>
             Populates Ole datastructes from a WinForms dataObject. This is the core
             of WinForms to OLE conversion.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.RestrictDeserializationToSafeTypes(System.String)">
            <summary>
             We are restricting serialization of formats that represent strings, bitmaps or OLE types.
            </summary>
            <param name="format">format name</param>
            <returns>true - serialize only safe types, strings or bitmaps.</returns>
        </member>
        <member name="M:System.Windows.Forms.DataObject.SaveStreamToHandle(System.IntPtr@,System.IO.Stream)">
            <summary>
             Saves stream out to handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.SaveFileListToHandle(System.IntPtr,System.String[])">
            <summary>
             Saves a list of files out to the handle in HDROP format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.SaveStringToHandle(System.IntPtr,System.String,System.Boolean)">
            <summary>
             Save string to handle. If unicode is set to true
             then the string is saved as Unicode, else it is saves as DBCS.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)">
            <summary>
             Stores the specified data and its associated format in
             this instance, using the automatic conversion parameter
             to specify whether the
             data can be converted to another format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.SetData(System.String,System.Object)">
            <summary>
             Stores the specified data and its associated format in this
             instance.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.SetData(System.Type,System.Object)">
            <summary>
             Stores the specified data and
             its
             associated class type in this instance.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.SetData(System.Object)">
            <summary>
             Stores the specified data in
             this instance, using the class of the data for the format.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataObject.FormatEnumerator">
            <summary>
             Part of IComDataObject, used to interop with OLE.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataObject.OleConverter">
            <summary>
             OLE Converter.  This class embodies the nastiness required to convert from our
             managed types to standard OLE clipboard formats.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DataObject.OleConverter.OleDataObject">
            <summary>
             Returns the data Object we are wrapping
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.OleConverter.GetDataFromOleIStream(System.String)">
            <summary>
             Uses IStream and retrieves the specified format from the bound IComDataObject.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.OleConverter.GetDataFromHGLOBAL(System.String,System.IntPtr)">
            <summary>
             Retrieves the specified form from the specified hglobal.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.OleConverter.GetDataFromOleHGLOBAL(System.String,System.Boolean@)">
            <summary>
             Uses HGLOBALs and retrieves the specified format from the bound IComDatabject.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.OleConverter.GetDataFromOleOther(System.String)">
            <summary>
             Retrieves the specified format data from the bound IComDataObject, from
             other sources that IStream and HGLOBAL... this is really just a place
             to put the "special" formats like BITMAP, ENHMF, etc.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.OleConverter.GetDataFromBoundOleDataObject(System.String,System.Boolean@)">
            <summary>
             Extracts a managed Object from the innerData of the specified
             format. This is the base of the OLE to managed conversion.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.OleConverter.ReadByteStreamFromHandle(System.IntPtr,System.Boolean@)">
            <summary>
             Creates an Stream from the data stored in handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.OleConverter.ReadObjectFromHandle(System.IntPtr,System.Boolean)">
            <summary>
             Creates a new instance of the Object that has been persisted into the
             handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.OleConverter.ReadFileListFromHandle(System.IntPtr)">
            <summary>
             Parses the HDROP format and returns a list of strings using
             the DragQueryFile function.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.OleConverter.ReadStringFromHandle(System.IntPtr,System.Boolean)">
            <summary>
             Creates a string from the data stored in handle. If
             unicode is set to true, then the string is assume to be Unicode,
             else DBCS (ASCI) is assumed.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataObject.BitmapBinder">
            <summary>
             Binder that restricts DataObject content deserialization to Bitmap type and
             serialization to strings and Bitmaps.
             Deserialization of known safe types(strings and arrays of primitives) does not invoke the binder.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataObject.BitmapBinder.BindToType(System.String,System.String)">
            <summary>
             Only safe to deserialize types are bypassing this callback, Strings
             and arrays of primitive types in particular. We are explicitly allowing
             System.Drawing.Bitmap type to bind using the default binder.
            </summary>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
            <returns>null - continue with the default binder.</returns>
        </member>
        <member name="M:System.Windows.Forms.DataObject.BitmapBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
             Bitmap and string types are safe type to serialize/deserialize.
            </summary>
            <param name="serializedType"></param>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
        </member>
        <member name="T:System.Windows.Forms.DataObject.RestrictedTypeDeserializationException">
            <summary>
             This exception is used to indicate that clipboard contains a serialized
             managed object that contains unexpected types and that we should stop processing this data.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DataSourceUpdateMode">
            <summary>
             Determines when changes to a data-bound control property get propagated
             back to the corresponding data source property.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataSourceUpdateMode.OnValidation">
            <summary>
             Data source is updated when the control property is validated, ie.
             during the Validating event. Typically this does not occur until the
             input focus leaves the control. After validation, the value in the
             control property will also be re-formatted.
             This is the default update mode.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataSourceUpdateMode.OnPropertyChanged">
            <summary>
             Data source is updated whenever the control property changes (and also
             updated again during validation). After validation, the value in the
             control property will also be re-formatted.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DataSourceUpdateMode.Never">
            <summary>
             Data source is never updated. Binding is "read-only" with respect to
             the data source. Values entered into the control are *not* parsed,
             validated or re-formatted. To force the data source to be updated,
             use the Binding.WriteValue method.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DataStreamFromComStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
             Read the data into the given buffer
            </summary>
            <param name="buffer">The buffer receiving the data</param>
            <param name="index">The offset from the beginning of the buffer</param>
            <param name="count">The number of bytes to read</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:System.Windows.Forms.DataStreamFromComStream.Read(System.Span{System.Byte})">
            <summary>
             Read the data into the given buffer
            </summary>
            <param name="buffer">The buffer receiving the data</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:System.Windows.Forms.DataStreamFromComStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
             Writes the data contained in the given buffer
            </summary>
            <param name="buffer">The buffer containing the data to write</param>
            <param name="index">The offset from the beginning of the buffer</param>
            <param name="count">The number of bytes to write</param>
        </member>
        <member name="M:System.Windows.Forms.DataStreamFromComStream.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
             Writes the data contained in the given buffer
            </summary>
            <param name="buffer">The buffer to write</param>
        </member>
        <member name="T:System.Windows.Forms.DateBoldEventArgs">
            <summary>
             The month calendar control fires this event to request information about how
             the days within the visible months should be displayed.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DateRangeEventArgs">
            <summary>
             The SelectEvent is fired when the user makes an explicit date selection within a
             month calendar control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DateTimePicker">
            <summary>
             Date/DateTime picker control
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DateTimePicker.DefaultTitleBackColor">
            <summary>
             Specifies the default title back color. This field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DateTimePicker.DefaultTitleForeColor">
            <summary>
             Specifies the default foreground color. This field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DateTimePicker.DefaultMonthBackColor">
            <summary>
             Specifies the default month background color. This field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DateTimePicker.DefaultTrailingForeColor">
            <summary>
             Specifies the default trailing forground color. This field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DateTimePicker.MinDateTime">
            <summary>
             Specifies the minimum date value. This field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DateTimePicker.MaxDateTime">
            <summary>
             Specifies the maximum date value. This field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DateTimePicker.validTime">
            <summary>
             validTime determines whether the CheckBox in the DTP is checked.  The CheckBox is only
             displayed when ShowCheckBox is true.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.DateTimePicker'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.CalendarForeColor">
            <summary>
             The current value of the CalendarForeColor property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.CalendarFont">
            <summary>
             The current value of the CalendarFont property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.CalendarTitleBackColor">
            <summary>
             The current value of the CalendarTitleBackColor property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.CalendarTitleForeColor">
            <summary>
             The current value of the CalendarTitleForeColor property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.CalendarTrailingForeColor">
            <summary>
             The current value of the CalendarTrailingForeColor property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.CalendarMonthBackground">
            <summary>
             The current value of the CalendarMonthBackground property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.Checked">
            <summary>
             Indicates whether the <see cref='P:System.Windows.Forms.DateTimePicker.Value'/> property has been set.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.CreateParams">
            <summary>
             Returns the CreateParams used to create this window.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.CustomFormat">
            <summary>
             Returns the custom format.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.DoubleBuffered">
            <summary>
             This property is overridden and hidden from statement completion
             on controls that are based on Win32 Native Controls.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.DropDownAlign">
            <summary>
             The current value of the dropDownAlign property.  The calendar
             dropDown can be aligned to the left or right of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.Format">
            <summary>
             Returns the current value of the format property. This determines the
             style of format the date is displayed in.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.DateTimePicker.Paint">
            <summary>
             DateTimePicker Paint.
            </summary>
            <hideinheritance/>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.MaxDate">
            <summary>
             Indicates the maximum date and time
             selectable in the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.MaximumDateTime">
            <summary>
             Specifies the maximum date value. This property is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.MinDate">
            <summary>
             Indicates the minimum date and time
             selectable in the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.MinimumDateTime">
            <summary>
             Specifies the minimum date value. This property is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.PreferredHeight">
            <summary>
             Indicates the preferred height of the DateTimePicker control. This property is read-only.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.DateTimePicker.RightToLeftLayout" -->
        <member name="P:System.Windows.Forms.DateTimePicker.ShowCheckBox">
            <summary>
             Indicates whether a check box is displayed to toggle the NoValueSelected property
             value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.ShowUpDown">
            <summary>
             Indicates
             whether an up-down control is used to adjust the time values.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.Text">
            <summary>
             Overrides Text to allow for setting of the value via a string.  Also, returns
             a formatted Value when getting the text.  The DateTime class will throw
             an exception if the string (value) being passed in is invalid.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DateTimePicker.Value">
            <summary>
             Indicates the DateTime value assigned to the control.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.DateTimePicker.CloseUp">
            <summary>
             Occurs when the dropdown calendar is dismissed and disappears.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.DateTimePicker.ValueChanged">
            <summary>
             Occurs when the value for the control changes.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.DateTimePicker.DropDown">
            <summary>
             Occurs when the drop down calendar is shown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.CreateAccessibilityInstance">
            <summary>
             Constructs the new instance of the accessibility object for this control. Subclasses
             should not call base.CreateAccessibilityObject.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.CreateHandle">
            <summary>
             Creates the physical window handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.DestroyHandle">
            <summary>
             Destroys the physical window handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
             Handling special input keys, such as pgup, pgdown, home, end, etc...
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.OnCloseUp(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.DateTimePicker.CloseUp'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.OnDropDown(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.DateTimePicker.DropDown'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.OnHandleCreated(System.EventArgs)">
            <summary>
             Add/remove SystemEvents in OnHandleCreated/Destroyed for robustness
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.OnHandleDestroyed(System.EventArgs)">
            <summary>
             Add/remove SystemEvents in OnHandleCreated/Destroyed for robustness
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.OnValueChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.DateTimePicker.ValueChanged'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.OnFontChanged(System.EventArgs)">
            <summary>
             Occurs when a property for the control changes.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.ResetFormat">
            <summary>
             Resets the <see cref='P:System.Windows.Forms.DateTimePicker.Format'/> property to its default
             value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.ResetMaxDate">
            <summary>
             Resets the <see cref='P:System.Windows.Forms.DateTimePicker.MaxDate'/> property to its default value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.ResetMinDate">
            <summary>
             Resets the <see cref='P:System.Windows.Forms.DateTimePicker.MinDate'/> property to its default value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.ResetValue">
            <summary>
             Resets the <see cref='P:System.Windows.Forms.DateTimePicker.Value'/> property to its default value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.SetControlColor(Interop.ComCtl32.MCSC,System.Drawing.Color)">
            <summary>
             If the handle has been created, this applies the color to the control
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.SetControlCalendarFont">
            <summary>
             If the handle has been created, this applies the font to the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.SetAllControlColors">
            <summary>
             Applies all the colors to the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.SetRange">
            <summary>
             Updates the window handle with the min/max ranges if it has been
             created.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.SetStyleBit(System.Boolean,System.Int32)">
            <summary>
             Turns on or off a given style bit
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.ShouldSerializeCalendarForeColor">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.DateTimePicker.CalendarForeColor'/> property needs to be
             persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.ShouldSerializeCalendarFont">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.DateTimePicker.CalendarFont'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.ShouldSerializeCalendarTitleBackColor">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.DateTimePicker.CalendarTitleBackColor'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.ShouldSerializeCalendarTitleForeColor">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.DateTimePicker.CalendarTitleForeColor'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.ShouldSerializeCalendarTrailingForeColor">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.DateTimePicker.CalendarTrailingForeColor'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.ShouldSerializeCalendarMonthBackground">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.DateTimePicker.CalendarMonthBackground'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.ShouldSerializeMaxDate">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.DateTimePicker.MaxDate'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.ShouldSerializeMinDate">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.DateTimePicker.MinDate'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.ShouldSerializeValue">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.DateTimePicker.Value'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.ShouldSerializeFormat">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.DateTimePicker.Format'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.ToString">
            <summary>
             Returns the control as a string
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.UpdateUpDown">
            <summary>
             Forces a repaint of the updown control if it is displayed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.WmCloseUp(System.Windows.Forms.Message@)">
            <summary>
             Handles the DTN_CLOSEUP notification
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.WmDateTimeChange(System.Windows.Forms.Message@)">
            <summary>
             Handles the DTN_DATETIMECHANGE notification
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.WmDropDown(System.Windows.Forms.Message@)">
            <summary>
             Handles the DTN_DROPDOWN notification
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.OnSystemColorsChanged(System.EventArgs)">
            <summary>
             Handles system color changes
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.WmReflectCommand(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_COMMAND messages reflected from the parent control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.WndProc(System.Windows.Forms.Message@)">
            <summary>
             Overrided wndProc
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.DateTimeToSysTime(System.DateTime)">
            <summary>
             Takes a DateTime value and returns a SYSTEMTIME struct
             Note: 1 second granularity
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DateTimePicker.SysTimeToDateTime(Interop.Kernel32.SYSTEMTIME)">
            <summary>
             Takes a SYSTEMTIME struct and returns a DateTime value
             Note: 1 second granularity.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DateTimePickerFormat">
            <summary>
             Constants that specify how the date and time picker control displays
             date and time information.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DateTimePickerFormat.Long">
            <summary>
             Long format - produces output in the form "Wednesday, April 7, 1999"
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DateTimePickerFormat.Short">
            <summary>
             Short format - produces output in the form "4/7/99"
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DateTimePickerFormat.Time">
            <summary>
             Time format - produces output in time format
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DateTimePickerFormat.Custom">
            <summary>
             Custom format - produces output in custom format.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Day">
            <summary>
             Specifies the day of the week.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Day.Monday">
            <summary>
             The day Monday.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Day.Tuesday">
            <summary>
             The day Tuesday.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Day.Wednesday">
            <summary>
             The day Wednesday.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Day.Thursday">
            <summary>
             The day Thursday.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Day.Friday">
            <summary>
             The day Friday.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Day.Saturday">
            <summary>
             The day Saturday.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Day.Sunday">
            <summary>
             The day Sunday.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Day.Default">
            <summary>
             A default day of the week specified by the application.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Design.ComponentEditorForm">
            <summary>
             Provides a user interface for <see cref='T:System.Windows.Forms.Design.WindowsFormsComponentEditor'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorForm.#ctor(System.Object,System.Type[])">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Design.ComponentEditorForm'/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorForm.ApplyChanges(System.Boolean)">
            <summary>
             Applies any changes in the set of ComponentPageControl to the actual component.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.ComponentEditorForm.AutoSize">
            <summary>
             Hide the property
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorForm.OnButtonClick(System.Object,System.EventArgs)">
            <summary>
             Handles ok/cancel/apply/help button click events
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorForm.OnConfigureUI">
            <summary>
             Lays out the UI of the form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorForm.OnNewObjects">
            <summary>
             Called to initialize this form with the new component.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorForm.OnSelChangeSelector(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
             Handles switching between pages.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorForm.PreProcessMessage(System.Windows.Forms.Message@)">
            <summary>
             Provides a method to override in order to pre-process input messages before
             they are dispatched.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorForm.SetDirty">
            <summary>
             Sets the controls of the form to dirty.  This enables the "apply"
             button.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorForm.ShowForm">
            <summary>
             Shows the form. The form will have no owner window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorForm.ShowForm(System.Int32)">
            <summary>
             Shows the form and the specified page. The form will have no owner window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorForm.ShowForm(System.Windows.Forms.IWin32Window)">
            <summary>
             Shows the form with the specified owner.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorForm.ShowForm(System.Windows.Forms.IWin32Window,System.Int32)">
            <summary>
             Shows the form and the specified page with the specified owner.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorForm.ShowPageHelp">
            <summary>
             Shows help for the active page.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Design.ComponentEditorForm.ComponentEditorPageSite">
            <summary>
             Implements a standard version of ComponentEditorPageSite for use within a
             ComponentEditorForm.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorForm.ComponentEditorPageSite.#ctor(System.Windows.Forms.Control,System.Type,System.ComponentModel.IComponent,System.Windows.Forms.Design.ComponentEditorForm)">
            <summary>
             Creates the page site.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.ComponentEditorForm.ComponentEditorPageSite.Active">
            <summary>
             Called by the ComponentEditorForm to activate / deactivate the page.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorForm.ComponentEditorPageSite.GetControl">
            <summary>
             Called by a page to return a parenting control for itself.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorForm.ComponentEditorPageSite.GetPageControl">
            <summary>
             Called by the ComponentEditorForm to get the actual page.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorForm.ComponentEditorPageSite.SetDirty">
            <summary>
             Called by a page to mark it's contents as dirty.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Design.ComponentEditorPage">
            <summary>
             Provides a base implementation for a <see cref='T:System.Windows.Forms.Design.ComponentEditorPage'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Design.ComponentEditorPage'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.ComponentEditorPage.AutoSize">
            <summary>
             Hide the property
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.ComponentEditorPage.PageSite">
            <summary>
             Gets or sets the page site
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.ComponentEditorPage.Component">
            <summary>
             Gets or sets the component to edit
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.ComponentEditorPage.FirstActivate">
            <summary>
             Indicates whether the page is being activated for the first time
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.ComponentEditorPage.LoadRequired">
            <summary>
             Indicates whether a load is required previous to editing
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.ComponentEditorPage.Loading">
            <summary>
             Indicates if loading is taking place
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.ComponentEditorPage.CommitOnDeactivate">
            <summary>
             Indicates whether an editor should apply its changes before it is deactivated
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.ComponentEditorPage.CreateParams">
            <summary>
             Gets or sets the creation parameters for this control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.ComponentEditorPage.Icon">
            <summary>
             Gets or sets the icon for this page
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.ComponentEditorPage.Title">
            <summary>
             Gets or sets the title of the page
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.Activate">
            <summary>
             Activates and displays the page.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.ApplyChanges">
            <summary>
             Applies changes to all the components being edited
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.Deactivate">
            <summary>
             Deactivates and hides the page
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.EnterLoadingMode">
            <summary>
             Increments the loading counter, which determines whether a page is in loading mode.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.ExitLoadingMode">
            <summary>
             Decrements the loading counter, which determines whether a page is in loading mode.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.GetControl">
            <summary>
             Gets the control that represents the window for this page
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.GetSelectedComponent">
            <summary>
             Gets the component that is to be edited
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.IsPageMessage(System.Windows.Forms.Message@)">
            <summary>
             Processes messages that could be handled by the page
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.IsFirstActivate">
            <summary>
             Gets a value indicating whether the page is being activated for the first time
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.IsLoading">
            <summary>
             Gets a value indicating whether the page is being loaded
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.LoadComponent">
            <summary>
             Loads the component into the page UI
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.OnApplyComplete">
            <summary>
             Called when the page along with its sibling pages have applied their changes
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.ReloadComponent">
            <summary>
             Called when the current component may have changed elsewhere and needs to be reloded into the UI
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.SaveComponent">
            <summary>
             Saves the component from the page UI
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.SetDirty">
            <summary>
             Sets the page to be in dirty state
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.SetComponent(System.ComponentModel.IComponent)">
            <summary>
             Sets the component to be edited
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.SetSite(System.Windows.Forms.IComponentEditorPageSite)">
            <summary>
             Sets the site for this page.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.ShowHelp">
            <summary>
             Provides help information to the help system
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ComponentEditorPage.SupportsHelp">
            <summary>
             Gets a value indicating whether the editor supports Help
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Design.EventsTab">
            <summary>
             Provides a tab on the property browser to display events for selection and linking.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.EventsTab.#ctor(System.IServiceProvider)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Design.EventsTab'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.EventsTab.TabName">
            <summary>
             Gets or sets the name of the tab.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.EventsTab.HelpKeyword">
            <summary>
             Gets or sets the help keyword for the tab.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.EventsTab.CanExtend(System.Object)">
            <summary>
             Gets a value indicating whether the specified object can be extended.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.EventsTab.GetDefaultProperty(System.Object)">
            <summary>
             Gets the default property from the specified object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.EventsTab.GetProperties(System.Object,System.Attribute[])">
            <summary>
             Gets all the properties of the tab.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.EventsTab.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
             Gets the properties of the specified component.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Design.IUIService">
            <summary>
             Provides support for interaction with the user interface of the development
             environment object that is hosting the designer
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.IUIService.Styles">
            <summary>
             Gets or sets the collections of styles that are specific to the host's environment
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.IUIService.CanShowComponentEditor(System.Object)">
            <summary>
             Indicates whether the component can display a ComponentDesigner
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.IUIService.GetDialogOwnerWindow">
            <summary>
             Gets the window that should be used for dialog parenting
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.IUIService.SetUIDirty">
            <summary>
             Sets a flag indicating the UI is dirty
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.IUIService.ShowComponentEditor(System.Object,System.Windows.Forms.IWin32Window)">
            <summary>
             Attempts to display a ComponentEditor for a component
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.IUIService.ShowDialog(System.Windows.Forms.Form)">
            <summary>
             Attempts to display the specified form in a dialog box
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.IUIService.ShowError(System.String)">
            <summary>
             Displays the specified error message in a message box
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.IUIService.ShowError(System.Exception)">
            <summary>
             Displays the specified exception and its information in a message box
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.IUIService.ShowError(System.Exception,System.String)">
            <summary>
             Displays the specified exception and its information in a message box
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.IUIService.ShowMessage(System.String)">
            <summary>
             Displays the specified message in a message box
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.IUIService.ShowMessage(System.String,System.String)">
            <summary>
             Displays the specified message in a message box with the specified caption
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.IUIService.ShowMessage(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
             Displays the specified message in a message box with the specified caption and
             buttons to place on the dialog box
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.IUIService.ShowToolWindow(System.Guid)">
            <summary>
             Displays the specified tool window
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Design.IWindowsFormsEditorService">
            <summary>
             Provides an interface to display Win Forms dialog boxes and controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.IWindowsFormsEditorService.CloseDropDown">
            <summary>
             Closes a previously opened drop down list
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.IWindowsFormsEditorService.DropDownControl(System.Windows.Forms.Control)">
            <summary>
             Displays the specified control in a drop down list
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.IWindowsFormsEditorService.ShowDialog(System.Windows.Forms.Form)">
            <summary>
             Shows the specified dialog box.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Design.PropertyTab">
            <summary>
             Provides a base class for property tabs.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.PropertyTab.Bitmap">
            <summary>
             Gets or sets a bitmap to display in the property tab.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.PropertyTab.Components">
            <summary>
             Gets or sets the array of components the property tab is associated with.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.PropertyTab.TabName">
            <summary>
             Gets or sets the name for the property tab.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Design.PropertyTab.HelpKeyword">
            <summary>
             Gets or sets the help keyword that is to be associated with this tab. This
             defaults to the tab name.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.PropertyTab.CanExtend(System.Object)">
            <summary>
             Gets a value indicating whether the specified object be can extended.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.PropertyTab.GetDefaultProperty(System.Object)">
            <summary>
             Gets the default property of the specified component.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.PropertyTab.GetProperties(System.Object)">
            <summary>
             Gets the properties of the specified component.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.PropertyTab.GetProperties(System.Object,System.Attribute[])">
            <summary>
             Gets the properties of the specified component which match the specified
             attributes.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.PropertyTab.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
             Gets the properties of the specified component.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.ToolStripItemDesignerAvailabilityAttribute.#ctor">
            <summary>
             Specifies which ToolStrip types the Item can appear in - ToolStrip,MenuStrip,StatusStrip,ContextMenuStrip
             Adding this attribute over a class lets you add to the list of custom items in the ToolStrip design time.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Design.WindowsFormsComponentEditor">
            <summary>
             Provides a base class for editors that support any type of
            <see cref='T:System.ComponentModel.IComponent'/> objects.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.WindowsFormsComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
             Activates a UI used to edit the component.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.WindowsFormsComponentEditor.EditComponent(System.Object,System.Windows.Forms.IWin32Window)">
            <summary>
             Activates the advanced UI used to edit the component.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.Design.WindowsFormsComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Windows.Forms.IWin32Window)" -->
        <member name="M:System.Windows.Forms.Design.WindowsFormsComponentEditor.GetComponentEditorPages">
            <summary>
             Gets the set of <see cref='T:System.Windows.Forms.Design.ComponentEditorPage'/> pages to be used.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Design.WindowsFormsComponentEditor.GetInitialComponentEditorPageIndex">
            <summary>
             Gets the index of the <see cref='T:System.Windows.Forms.Design.ComponentEditorPage'/>
             to be shown by default as the first active page.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DialogResult">
            <summary>
             Specifies identifiers to indicate the return value of a dialog box.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DialogResult.None">
            <summary>
             Nothing is returned from the dialog box. This means that the modal
             dialog continues running.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DialogResult.OK">
            <summary>
             The dialog box return value is OK (usually sent from a button labeled OK).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DialogResult.Cancel">
            <summary>
             The dialog box return value is Cancel (usually sent from a button
             labeled Cancel).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DialogResult.Abort">
            <summary>
             The dialog box return value is Abort (usually sent from a button
             labeled Abort).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DialogResult.Retry">
            <summary>
             The dialog box return value is Retry (usually sent from a button
             labeled Retry).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DialogResult.Ignore">
            <summary>
             The dialog box return value is Ignore (usually sent from a button
             labeled Ignore).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DialogResult.Yes">
            <summary>
             The dialog box return value is Yes (usually sent from a button
             labeled Yes).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DialogResult.No">
            <summary>
             The dialog box return value is No (usually sent from a button
             labeled No).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DisplayInformation.LowResolution">
            <summary>
            tests to see if the monitor is in low resolution mode (8-bit color depth or less).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DisplayInformation.HighContrast">
            <summary>
            tests to see if we are under high contrast mode
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DisplayInformation.TerminalServer">
            <summary>
            test to see if we are under terminal server mode
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DisplayInformation.DisplaySettingsChanging(System.Object,System.EventArgs)">
            <summary>
            event handler for change in display setting
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DisplayInformation.UserPreferenceChanging(System.Object,Microsoft.Win32.UserPreferenceChangingEventArgs)">
            <summary>
            event handler for change in user preference
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DockingAttribute">
            <summary>
             Specifies how a control should be docked by default when added through the designer.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DockingAttribute.#ctor">
            <summary>
             Default constructor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DockingAttribute.#ctor(System.Windows.Forms.DockingBehavior)">
            <summary>
             Constructor.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DockingAttribute.Default">
            <summary>
             Specifies the default value for the <see cref='!:System.ComponentModel.DockingAttribute'/>.
             This <see langword='static'/> field is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DockingAttribute.DockingBehavior">
            <summary>
             DockingBehavior property.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DockingBehavior">
            <summary>
             Specifies whether any characters in the current selection have the
             style or attribute.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DockingBehavior.Never">
            <summary>
             Some but not all characters.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DockingBehavior.Ask">
            <summary>
             No characters.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DockingBehavior.AutoDock">
            <summary>
             All characters.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DockStyle">
            <summary>
             Control Dock values.
             When a control is docked to an edge of it's container it will
             always be positioned flush against that edge while the container
             resizes. If more than one control is docked to an edge, the controls
             will not be placed on top of each other.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DomainUpDown">
            <summary>
             Represents a Windows up-down control that displays string values.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DomainUpDown.domainItems">
            <summary>
             Allowable strings for the domain updown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.DomainUpDown'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DomainUpDown.Items">
            <summary>
             Gets the collection of objects assigned to the
             up-down control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DomainUpDown.SelectedIndex">
            <summary>
             Gets or sets the index value of the selected item.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DomainUpDown.SelectedItem">
            <summary>
             Gets or sets the selected item based on the index value
             of the selected item in the
             collection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DomainUpDown.Sorted">
            <summary>
             Gets or sets a value indicating whether the item collection is sorted.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DomainUpDown.Wrap">
            <summary>
             Gets or sets a value indicating whether the collection of items continues to
             the first or last item if the user continues past the end of the list.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged">
            <summary>
             Occurs when the <see cref='P:System.Windows.Forms.DomainUpDown.SelectedItem'/> property has
             been changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.CreateAccessibilityInstance">
            <summary>
             Constructs the new instance of the accessibility object for this control. Subclasses
             should not call base.CreateAccessibilityObject.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.DownButton">
            <summary>
             Displays the next item in the object collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.MatchIndex(System.String,System.Boolean)">
            <summary>
             Tries to find a match of the supplied text in the domain list.
             If complete is true, a complete match is required for success
             (i.e. the supplied text is the same length as the matched domain value)
             Returns the index in the domain list if the match is successful,
             returns -1 otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.OnChanged(System.Object,System.EventArgs)">
            <summary>
             In the case of a DomainUpDown, the handler for changing
             values is called OnSelectedItemChanged - so just forward it to that
             function.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.OnTextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
             Handles the <see cref='E:System.Windows.Forms.Control.KeyPress'/>
             event, using the input character to find the next matching item in our
             item collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.OnSelectedItemChanged(System.Object,System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.DomainUpDown.SelectedItemChanged'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.SelectIndex(System.Int32)">
            <summary>
             Selects the item in the domain list at the given index
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.SortDomainItems">
            <summary>
             Sorts the domain values
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.ToString">
            <summary>
             Provides some interesting info about this control in String form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.UpButton">
            <summary>
             Displays the previous item in the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.UpdateEditText">
            <summary>
             Updates the text in the up-down control to display the selected item.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection">
            <summary>
             Encapsulates a collection of objects for use by the <see cref='T:System.Windows.Forms.DomainUpDown'/>
             class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Item(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Add(System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Remove(System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.RemoveAt(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Insert(System.Int32,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.DomainUpDownAccessibleObject.#ctor(System.Windows.Forms.DomainUpDown)">
            <summary>
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DomainUpDown.DomainUpDownAccessibleObject.Name">
            <summary>
             Gets or sets the accessible name.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DomainUpDown.DomainUpDownAccessibleObject.GetChild(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DpiChangedEventArgs">
            <summary>
             Provides information about a DpiChanged event.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.DpiChangedEventArgs.#ctor(System.Int32,System.Windows.Forms.Message)" -->
        <member name="T:System.Windows.Forms.DpiChangedEventHandler">
            <summary>
             Represents a method that will handle the <see cref='!:Control.DpiChanged'/>,
            <see cref='!:Control.DpiChanged'/>, or <see cref='!:Control.DpiChanged'/>
             event of a <see cref='T:System.Windows.Forms.Control'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DragAction">
            <summary>
             Specifies how and if a drag-and-drop operation should continue.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DragAction.Continue">
            <summary>
             The operation will continue.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DragAction.Drop">
            <summary>
             The operation will stop with a drop.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DragAction.Cancel">
            <summary>
             The operation is canceled with no drop message.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DragDropEffects.None">
            <summary>
             The drop target does not accept the data.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DragDropEffects.Copy">
            <summary>
             The data is copied to the drop target.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DragDropEffects.Move">
            <summary>
             The data from the drag source is moved to the drop target.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DragDropEffects.Link">
            <summary>
             The data from the drag source is linked to the drop target.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DragDropEffects.Scroll">
            <summary>
             Scrolling is about to start or is currently occurring in the drop target.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DragDropEffects.All">
            <summary>
             The data is copied, removed from the drag source, and scrolled in the
             drop target. NOTE: Link is intentionally not present in All.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DragEventArgs">
            <summary>
             Provides data for the <see cref='E:System.Windows.Forms.Control.DragDrop'/>, <see cref='E:System.Windows.Forms.Control.DragEnter'/>,
             or <see cref='E:System.Windows.Forms.Control.DragOver'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.DragEventArgs'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DragEventArgs.Data">
            <summary>
             The <see cref='T:System.Windows.Forms.IDataObject'/> that contains the data associated
             with this event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DragEventArgs.KeyState">
            <summary>
             Gets the current state of the SHIFT, CTRL, and ALT keys.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DragEventArgs.X">
            <summary>
             Gets the x-coordinate of the mouse pointer.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DragEventArgs.Y">
            <summary>
             Gets the y-coordinate of the mouse pointer.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DragEventArgs.AllowedEffect">
            <summary>
             Gets which drag-and-drop operations are allowed by the originator (or source)
             of the drag event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DragEventArgs.Effect">
            <summary>
             Gets or sets which drag-and-drop operations are allowed by the target of the drag event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DragEventHandler">
            <summary>
             Represents a method that will handle the <see cref='E:System.Windows.Forms.Control.DragDrop'/>,
            <see cref='E:System.Windows.Forms.Control.DragEnter'/>, or <see cref='E:System.Windows.Forms.Control.DragOver'/>
             event of a <see cref='T:System.Windows.Forms.Control'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DrawItemEventArgs">
            <summary>
             This event is fired by owner draw Controls, such as ListBoxes and
             ComboBoxes. It contains all the information needed for the user to
             paint the given item, including the item index, the Rectangle in which
             the drawing should be done, and the Graphics object with which the drawing
             should be done.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DrawItemEventArgs._backColor">
            <summary>
             The backColor to paint each menu item with.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DrawItemEventArgs._foreColor">
            <summary>
             The foreColor to paint each menu item with.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawItemEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DrawItemState)">
            <summary>
             Creates a new DrawItemEventArgs with the given parameters.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawItemEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DrawItemState,System.Drawing.Color,System.Drawing.Color)">
            <summary>
             Creates a new DrawItemEventArgs with the given parameters, including the foreColor and backColor of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawItemEventArgs.Graphics">
            <summary>
             Graphics object with which painting should be done.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawItemEventArgs.Font">
            <summary>
             A suggested font, usually the parent control's Font property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawItemEventArgs.Bounds">
            <summary>
             The rectangle outlining the area in which the painting should be  done.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawItemEventArgs.Index">
            <summary>
             The index of the item that should be painted.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawItemEventArgs.State">
            <summary>
             Miscellaneous state information, such as whether the item is
             "selected", "focused", or some other such information.  ComboBoxes
             have one special piece of information which indicates if the item
             being painted is the editable portion of the ComboBox.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawItemEventArgs.ForeColor">
            <summary>
             A suggested color drawing: either SystemColors.WindowText or SystemColors.HighlightText,
             depending on whether this item is selected.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawItemEventArgs.DrawBackground">
            <summary>
             Draws the background of the given rectangle with the color returned from the BackColor property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawItemEventArgs.DrawFocusRectangle">
            <summary>
             Draws a handy focus rect in the given rectangle.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DrawItemState">
            <summary>
             Specifies the state of an item that is being drawn.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DrawItemState.Checked">
            <summary>
             The item is checked. Only menu controls use this value.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DrawItemState.ComboBoxEdit">
            <summary>
             The item is the editing portion of a <see cref='T:System.Windows.Forms.ComboBox'/> .
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DrawItemState.Default">
            <summary>
             The item is the default item of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DrawItemState.Disabled">
            <summary>
             The item is disabled.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DrawItemState.Focus">
            <summary>
             The item has focus.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DrawItemState.Grayed">
            <summary>
             The item is grayed. Only menu controls use this value.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DrawItemState.HotLight">
            <summary>
             The item is being hot-tracked.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DrawItemState.Inactive">
            <summary>
             The item is inactive.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DrawItemState.NoAccelerator">
            <summary>
             The item displays without a keyboard accelarator.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DrawItemState.NoFocusRect">
            <summary>
             The item displays without the visual cue that indicates it has the focus.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DrawItemState.Selected">
            <summary>
             The item is selected.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DrawItemState.None">
            <summary>
             The item is in its default visual state.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs">
            <summary>
             This class contains the information a user needs to paint ListView
             column header (Details view only).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawListViewColumnHeaderEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.ColumnHeader,System.Windows.Forms.ListViewItemStates,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font)">
            <summary>
             Creates a new DrawListViewColumnHeaderEventArgs with the given parameters.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewColumnHeaderEventArgs.Graphics">
            <summary>
             Graphics object with which painting should be done.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewColumnHeaderEventArgs.Bounds">
            <summary>
             The rectangle outlining the area in which the painting should be done.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewColumnHeaderEventArgs.ColumnIndex">
            <summary>
             The index of this column.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewColumnHeaderEventArgs.Header">
            <summary>
             The header object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewColumnHeaderEventArgs.State">
            <summary>
             State information pertaining to the header.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewColumnHeaderEventArgs.ForeColor">
            <summary>
             Color used to draw the header's text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewColumnHeaderEventArgs.BackColor">
            <summary>
             Color used to draw the header's background.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewColumnHeaderEventArgs.Font">
            <summary>
             Font used to render the header's text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewColumnHeaderEventArgs.DrawDefault">
            <summary>
             Causes the item do be drawn by the system instead of owner drawn.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawListViewColumnHeaderEventArgs.DrawBackground">
            <summary>
             Draws the header's background.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawListViewColumnHeaderEventArgs.DrawText">
            <summary>
             Draws the header's text (overloaded)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawListViewColumnHeaderEventArgs.DrawText(System.Windows.Forms.TextFormatFlags)">
            <summary>
             Draws the header's text (overloaded) - takes a TextFormatFlags argument.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DrawListViewColumnHeaderEventHandler">
            <summary>
             Handler for the ListView's DrawColumnHeader event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DrawListViewItemEventArgs">
            <summary>
             This class contains the information a user needs to paint ListView items.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawListViewItemEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.ListViewItem,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.ListViewItemStates)">
            <summary>
             Creates a new DrawListViewItemEventArgs with the given parameters.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewItemEventArgs.Graphics">
            <summary>
             Graphics object with which painting should be done.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewItemEventArgs.Item">
            <summary>
             The item to be painted.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewItemEventArgs.Bounds">
            <summary>
             The rectangle outlining the area in which the painting should be done.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewItemEventArgs.ItemIndex">
            <summary>
             The index of the item that should be painted.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewItemEventArgs.State">
            <summary>
             Miscellaneous state information.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewItemEventArgs.DrawDefault">
            <summary>
             Causes the item do be drawn by the system instead of owner drawn.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawListViewItemEventArgs.DrawBackground">
            <summary>
             Draws the item's background.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawListViewItemEventArgs.DrawFocusRectangle">
            <summary>
             Draws a focus rectangle in the given bounds, if the item is focused. In Details View, if FullRowSelect is
             true, the rectangle is drawn around the whole item, else around the first sub-item's text area.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawListViewItemEventArgs.DrawText">
            <summary>
             Draws the item's text (overloaded) - useful only when View != View.Details
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawListViewItemEventArgs.DrawText(System.Windows.Forms.TextFormatFlags)">
            <summary>
             Draws the item's text (overloaded) - useful only when View != View.Details - takes a TextFormatFlags argument.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DrawListViewItemEventHandler">
            <summary>
             Handler for the ListView's DrawItem event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DrawListViewSubItemEventArgs">
            <summary>
             This class contains the information a user needs to paint ListView sub-items (Details view only).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawListViewSubItemEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ListViewItem,System.Windows.Forms.ListViewItem.ListViewSubItem,System.Int32,System.Int32,System.Windows.Forms.ColumnHeader,System.Windows.Forms.ListViewItemStates)">
            <summary>
             Creates a new DrawListViewSubItemEventArgs with the given parameters.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewSubItemEventArgs.Graphics">
            <summary>
             Graphics object with which painting should be done.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewSubItemEventArgs.Bounds">
            <summary>
             The rectangle outlining the area in which the painting should be done.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewSubItemEventArgs.Item">
            <summary>
             The parent item.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewSubItemEventArgs.SubItem">
            <summary>
             The parent item.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewSubItemEventArgs.ItemIndex">
            <summary>
             The index in the ListView of the parent item.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewSubItemEventArgs.ColumnIndex">
            <summary>
             The column index of this sub-item.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewSubItemEventArgs.Header">
            <summary>
             The header of this sub-item's column
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewSubItemEventArgs.ItemState">
            <summary>
             Miscellaneous state information pertaining to the parent item.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawListViewSubItemEventArgs.DrawDefault">
            <summary>
             Causes the item do be drawn by the system instead of owner drawn.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawListViewSubItemEventArgs.DrawBackground">
            <summary>
             Draws the sub-item's background.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawListViewSubItemEventArgs.DrawFocusRectangle(System.Drawing.Rectangle)">
            <summary>
             Draws a focus rectangle in the given bounds, if the item has focus.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawListViewSubItemEventArgs.DrawText">
            <summary>
             Draws the sub-item's text (overloaded)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawListViewSubItemEventArgs.DrawText(System.Windows.Forms.TextFormatFlags)">
            <summary>
             Draws the sub-item's text (overloaded) - takes a TextFormatFlags argument.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DrawListViewSubItemEventHandler">
            <summary>
             Handler for the ListView's DrawSubItem event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DrawMode">
            <summary>
             Specifies responsibility for drawing a control or portion of a control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DrawMode.Normal">
            <summary>
             The operating system paints the items in the control, and the items
             are each the same height.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DrawMode.OwnerDrawFixed">
            <summary>
             The programmer explicitly paints the items in the control, and the
             items are each the same height.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.DrawMode.OwnerDrawVariable">
            <summary>
             The programmer explicitly paints the items in the control manually,
             and they may be different heights.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DrawToolTipEventArgs">
            <summary>
             This class contains the information a user needs to paint the ToolTip.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawToolTipEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.IWin32Window,System.Windows.Forms.Control,System.Drawing.Rectangle,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font)">
            <summary>
             Creates a new DrawToolTipEventArgs with the given parameters.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawToolTipEventArgs.Graphics">
            <summary>
             Graphics object with which painting should be done.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawToolTipEventArgs.AssociatedWindow">
            <summary>
             The window for which the tooltip is being painted.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawToolTipEventArgs.AssociatedControl">
            <summary>
             The control for which the tooltip is being painted.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawToolTipEventArgs.Bounds">
            <summary>
             The rectangle outlining the area in which the painting should be done.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawToolTipEventArgs.ToolTipText">
            <summary>
             The text that should be drawn.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawToolTipEventArgs.Font">
            <summary>
             The font used to draw tooltip text.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawToolTipEventArgs.DrawBackground">
            <summary>
             Draws the background of the ToolTip.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawToolTipEventArgs.DrawText">
            <summary>
             Draws the text (overloaded)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawToolTipEventArgs.DrawText(System.Windows.Forms.TextFormatFlags)">
            <summary>
             Draws the text (overloaded) - takes a TextFormatFlags argument.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawToolTipEventArgs.DrawBorder">
            <summary>
             Draws a border for the ToolTip similar to the default border.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DrawToolTipEventHandler">
            <summary>
             Handler for the Draw event of the ToolTip control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DrawTreeNodeEventArgs">
            <summary>
             This class contains the information a user needs to paint TreeView nodes.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.DrawTreeNodeEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.TreeNode,System.Drawing.Rectangle,System.Windows.Forms.TreeNodeStates)">
            <summary>
             Creates a new DrawTreeNodeEventArgs with the given parameters.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawTreeNodeEventArgs.Graphics">
            <summary>
             Graphics object with which painting should be done.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawTreeNodeEventArgs.Node">
            <summary>
             The node to be painted.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawTreeNodeEventArgs.Bounds">
            <summary>
             The rectangle outlining the area in which the painting should be done.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawTreeNodeEventArgs.State">
            <summary>
             Miscellaneous state information.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault">
            <summary>
             Causes the item do be drawn by the system instead of owner drawn.
             NOTE: In OwnerDrawText mode, setting this to true is same as calling DrawText.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.DrawTreeNodeEventHandler">
            <summary>
             Handler for the DrawTreeNode event of the TreeView control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ErrorBlinkStyle">
            <summary>
             Describes the times that the error icon supplied by an ErrorProvider
             should blink to alert the user that an error has occurred.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ErrorBlinkStyle.BlinkIfDifferentError">
            <summary>
             Blink only if the error icon is already displayed, but a new
             error string is set for the control.  If the icon did not blink
             in this case, the user might not know that there is a new error.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ErrorBlinkStyle.AlwaysBlink">
            <summary>
             Blink the error icon when the error is first displayed, or when
             a new error description string is set for the control and the
             error icon is already displayed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ErrorBlinkStyle.NeverBlink">
            <summary>
             Never blink the error icon.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ErrorIconAlignment">
            <summary>
             Describes the set of locations that an error icon can appear in
             relation to the control with the error.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ErrorIconAlignment.TopLeft">
            <summary>
             The icon appears aligned with the top of the control, and to the
             left of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ErrorIconAlignment.TopRight">
            <summary>
             The icon appears aligned with the top of the control, and to the
             right of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ErrorIconAlignment.MiddleLeft">
            <summary>
             The icon appears aligned with the middle of the control, and the
             left of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ErrorIconAlignment.MiddleRight">
            <summary>
             The icon appears aligned with the middle of the control, and the
             right of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ErrorIconAlignment.BottomLeft">
            <summary>
             The icon appears aligned with the bottom of the control, and the
             left of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ErrorIconAlignment.BottomRight">
            <summary>
             The icon appears aligned with the bottom of the control, and the
             right of the control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ErrorProvider">
            <summary>
             ErrorProvider presents a simple user interface for indicating to the
             user that a control on a form has an error associated with it. If a
             error description string is specified for the control, then an icon
             will appear next to the control, and when the mouse hovers over the
             icon, a tooltip will appear showing the error description string.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ControlItemAccessibleObject.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Returns the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ControlItemAccessibleObject.GetPropertyValue(Interop.UiaCore.UIA)">
            <summary>
             Gets the accessible property value.
            </summary>
            <param name="propertyID">The accessible property ID.</param>
            <returns>The accessible property value.</returns>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.ControlItemAccessibleObject.RuntimeId">
            <summary>
             Gets the runtime ID.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.#ctor">
            <summary>
             Default constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.BlinkStyle">
            <summary>
             Returns or sets when the error icon flashes.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.ContainerControl">
            <summary>
             Indicates what container control (usually the form) should be inspected for bindings.
             A binding will reveal what control to place errors on for a error in the current row
             in the DataSource/DataMember pair.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.RightToLeft">
            <summary>
             This is used for international applications where the language is written from RightToLeft.
             When this property is true, text will be from right to left.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.Tag">
            <summary>
             User defined data associated with the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.DataSource">
            <summary>
             Indicates the source of data to bind errors against.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.DataMember">
            <summary>
             Indicates the sub-list of data from the DataSource to bind errors against.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.BlinkRate">
            <summary>
             Returns or set the rate in milliseconds at which the error icon flashes.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.DefaultIcon">
            <summary>
             Demand load and cache the default icon.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.Icon">
            <summary>
             Returns or sets the Icon that displayed next to a control when an error
             description string has been set for the control. For best results, an
             icon containing a 16 by 16 icon should be used.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.Region">
            <summary>
             Create the icon region on demand.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.System#ComponentModel#ISupportInitialize#BeginInit">
            <summary>
             Begin bulk member initialization - deferring binding to data source until EndInit is reached
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.EndInitCore">
            <summary>
             End bulk member initialization by binding to data source
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.System#ComponentModel#ISupportInitialize#EndInit">
            <summary>
             Check to see if DataSource has completed its initialization, before ending our initialization.
             If DataSource is still initializing, hook its Initialized event and wait for it to signal completion.
             If DataSource is already initialized, just go ahead and complete our initialization now.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.DataSource_Initialized(System.Object,System.EventArgs)">
            <summary>
             Respond to late completion of the DataSource's initialization, by completing our own initialization.
             This situation can arise if the call to the DataSource's EndInit() method comes after the call to the
             BindingSource's EndInit() method (since code-generated ordering of these calls is non-deterministic).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.Clear">
            <summary>
             Clears all errors being tracked by this error provider, ie. undoes all previous calls to SetError.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.CanExtend(System.Object)">
            <summary>
             Returns whether a control can be extended.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.Dispose(System.Boolean)">
            <summary>
             Release any resources that this component is using. After calling Dispose,
             the component should no longer be used.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.DisposeRegion">
            <summary>
             Helper to dispose the cached icon region.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.EnsureControlItem(System.Windows.Forms.Control)">
            <summary>
             Helper to make sure we have allocated a control item for this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.EnsureErrorWindow(System.Windows.Forms.Control)">
            <summary>
             Helper to make sure we have allocated an error window for this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.GetError(System.Windows.Forms.Control)">
            <summary>
             Returns the current error description string for the specified control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.GetIconAlignment(System.Windows.Forms.Control)">
            <summary>
             Returns where the error icon should be placed relative to the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.GetIconPadding(System.Windows.Forms.Control)">
            <summary>
             Returns the amount of extra space to leave next to the error icon.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.SetError(System.Windows.Forms.Control,System.String)">
            <summary>
             Sets the error description string for the specified control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.SetIconAlignment(System.Windows.Forms.Control,System.Windows.Forms.ErrorIconAlignment)">
            <summary>
             Sets where the error icon should be placed relative to the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.SetIconPadding(System.Windows.Forms.Control,System.Int32)">
            <summary>
             Sets the amount of extra space to leave next to the error icon.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ErrorProvider.ErrorWindow">
            <summary>
             There is one ErrorWindow for each control parent. It is parented to the
             control parent. The window's region is made up of the regions from icons
             of all child icons. The window's size is the enclosing rectangle for all
             the regions. A tooltip window is created as a child of this window. The
             rectangle associated with each error icon being displayed is added as a
             tool to the tooltip window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ErrorWindow.#ctor(System.Windows.Forms.ErrorProvider,System.Windows.Forms.Control)">
            <summary>
             Construct an error window for this provider and control parent.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.ErrorWindow.AccessibilityObject">
            <summary>
             The Accessibility Object for this ErrorProvider
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ErrorWindow.Add(System.Windows.Forms.ErrorProvider.ControlItem)">
            <summary>
             This is called when a control would like to show an error icon.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ErrorWindow.CreateAccessibilityInstance">
            <summary>
             Constructs the new instance of the accessibility object for this ErrorProvider. Subclasses
             should not call base.CreateAccessibilityObject.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ErrorWindow.Dispose">
            <summary>
             Called to get rid of any resources the Object may have.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ErrorWindow.EnsureCreated">
            <summary>
             Make sure the error window is created, and the tooltip window is created.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ErrorWindow.EnsureDestroyed">
            <summary>
             Destroy the timer, toolwindow, and the error window itself.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ErrorWindow.CreateMirrorDC(System.IntPtr,System.Int32)">
            <summary>
             Since we added mirroring to certain controls, we need to make sure the
             error icons show up in the correct place. We cannot mirror the errorwindow
             in EnsureCreated (although that would have been really easy), since we use
             GDI+ for some of this code, and as we all know, GDI+ does not handle mirroring
             at all.
             To work around that we create our own mirrored dc when we need to.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ErrorWindow.OnPaint(System.Windows.Forms.Message@)">
            <summary>
             This is called when the error window needs to paint. We paint each icon at its
             correct location.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ErrorWindow.OnTimer(System.Object,System.EventArgs)">
            <summary>
             This is called when an error icon is flashing, and the view needs to be updatd.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.ErrorWindow.Properties">
            <summary>
             Retrieves our internal property storage object. If you have a property
             whose value is not always set, you should store it in here to save
             space.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ErrorWindow.Remove(System.Windows.Forms.ErrorProvider.ControlItem)">
            <summary>
             This is called when a control no longer needs to display an error icon.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ErrorWindow.StartBlinking">
            <summary>
             Start the blinking process. The timer will fire until there are no more
             icons that need to blink.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ErrorWindow.Update(System.Boolean)">
            <summary>
             Move and size the error window, compute and set the window region, set the tooltip
             rectangles and descriptions. This basically brings the error window up to date with
             the internal data structures.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ErrorWindow.WmGetObject(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_GETOBJECT message. Used for accessibility.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ErrorWindow.WndProc(System.Windows.Forms.Message@)">
            <summary>
             Called when the error window gets a windows message.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ErrorProvider.ControlItem">
            <summary>
             There is one ControlItem for each control that the ErrorProvider is tracking state for.
             It contains the values of all the extender properties.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ControlItem.#ctor(System.Windows.Forms.ErrorProvider,System.Windows.Forms.Control,System.IntPtr)">
            <summary>
             Construct the item with its associated control, provider, and a unique ID. The ID is
             used for the tooltip ID.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.ControlItem.AccessibilityObject">
            <summary>
             The Accessibility Object for this ErrorProvider
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ControlItem.CreateAccessibilityInstance">
            <summary>
             Constructs the new instance of the accessibility object for this ErrorProvider. Subclasses
             should not call base.CreateAccessibilityObject.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.ControlItem.Id">
            <summary>
             Returns the unique ID for this control. The ID used as the tooltip ID.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.ControlItem.BlinkPhase">
            <summary>
             Returns or set the phase of blinking that this control is currently
             in.  If zero, the control is not blinking. If odd, then the control
             is blinking, but invisible. If even, the control is blinking and
             currently visible. Each time the blink timer fires, this value is
             reduced by one (until zero), thus causing the error icon to appear
             or disappear.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.ControlItem.IconPadding">
            <summary>
             Returns or sets the icon padding for the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.ControlItem.Error">
            <summary>
             Returns or sets the error description string for the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.ControlItem.IconAlignment">
            <summary>
             Returns or sets the location of the error icon for the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.ControlItem.ToolTipShown">
            <summary>
             Returns true if the tooltip for this control item is currently shown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ControlItem.GetIconBounds(System.Drawing.Size)">
            <summary>
             Returns the location of the icon in the same coordinate system as the control being
             extended. The size passed in is the size of the icon.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ControlItem.UpdateWindow">
            <summary>
             If this control's error icon has been added to the error window, then update the
             window state because some property has changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ControlItem.StartBlinking">
            <summary>
             If this control's error icon has been added to the error window, then start blinking
             the error window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ControlItem.AddToWindow">
            <summary>
             Add this control's error icon to the error window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ControlItem.RemoveFromWindow">
            <summary>
             Remove this control's error icon from the error window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ControlItem.OnBoundsChanged(System.Object,System.EventArgs)">
            <summary>
             This is called when a property on the control is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.ControlItem.Properties">
            <summary>
             Retrieves our internal property storage object. If you have a property
             whose value is not always set, you should store it in here to save
             space.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ControlItem.OnCreateHandle(System.Object,System.EventArgs)">
            <summary>
             This is called when the control's handle is created.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ControlItem.OnDestroyHandle(System.Object,System.EventArgs)">
            <summary>
             This is called when the control's handle is destroyed.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ErrorProvider.IconRegion">
            <summary>
             This represents the HRGN of icon. The region is calculate from the icon's mask.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.IconRegion.#ctor(System.Drawing.Icon)">
            <summary>
             Constructor that takes an Icon and extracts its 16x16 version.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.IconRegion.Handle">
            <summary>
             Returns the handle of the icon.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.IconRegion.Region">
            <summary>
             Returns the handle of the region.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ErrorProvider.IconRegion.Size">
            <summary>
             Return the size of the icon.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.IconRegion.Dispose">
            <summary>
             Release any resources held by this Object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ErrorWindowAccessibleObject.ElementProviderFromPoint(System.Double,System.Double)">
            <summary>
             Return the child object at the given screen coordinates.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <returns>The accessible object of corresponding element in the provided coordinates.</returns>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ErrorWindowAccessibleObject.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Returns the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="M:System.Windows.Forms.ErrorProvider.ErrorWindowAccessibleObject.GetPropertyValue(Interop.UiaCore.UIA)">
            <summary>
             Gets the accessible property value.
            </summary>
            <param name="propertyID">The accessible property ID.</param>
            <returns>The accessible property value.</returns>
        </member>
        <member name="T:System.Windows.Forms.FeatureSupport">
            <summary>
             Provides <see langword='static'/> methods for retrieving feature information from the
             current system.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FeatureSupport.IsPresent(System.String,System.String)">
            <summary>
             Determines whether any version of the specified feature is installed in the system.
             This method is <see langword='static'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FeatureSupport.IsPresent(System.String,System.String,System.Version)">
            <summary>
             Determines whether the specified or newer version of the specified feature is
             installed in the system. This method is <see langword='static'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FeatureSupport.GetVersionPresent(System.String,System.String)">
            <summary>
             Gets the version of the specified feature that is available on the system.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FeatureSupport.IsPresent(System.Object)">
            <summary>
             Determines whether any version of the specified feature is installed in the system.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FeatureSupport.IsPresent(System.Object,System.Version)">
            <summary>
             Determines whether the specified or newer version of the specified feature is
             installed in the system.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FeatureSupport.GetVersionPresent(System.Object)">
            <summary>
             When overridden in a derived class, gets the version of the specified feature that
             is available on the system.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.FileDialog">
            <summary>
             Displays a dialog window from which the user can select a file.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FileDialog.#ctor">
            <summary>
             In an inherited class, initializes a new instance of the <see cref='T:System.Windows.Forms.FileDialog'/>
             class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.AddExtension">
            <summary>
             Gets or sets a value indicating whether the dialog box automatically adds an
             extension to a file name if the user omits the extension.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.CheckFileExists">
            <summary>
             Gets or sets a value indicating whether the dialog box displays a warning
             if the user specifies a file name that does not exist.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.CheckPathExists">
            <summary>
             Gets or sets a value indicating whether the dialog box displays a warning if
             the user specifies a path that does not exist.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.DefaultExt">
            <summary>
             Gets or sets the default file extension.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.DereferenceLinks">
            <summary>
             Gets or sets a value indicating whether the dialog box returns the location
             of the file referenced by the shortcut or whether it returns the location
             of the shortcut (.lnk).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.FileName">
            <summary>
             Gets or sets a string containing the file name selected in the file dialog box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.FileNames">
            <summary>
             Gets the file names of all selected files in the dialog box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.Filter">
            <summary>
             Gets or sets the current file name filter string, which determines the choices
             that appear in the "Save as file type" or "Files of type" box in the dialog box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.FilterExtensions">
            <summary>
             Extracts the file extensions specified by the current file filter into an
             array of strings.  None of the extensions contain .'s, and the  default
             extension is first.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.FilterIndex">
            <summary>
             Gets or sets the index of the filter currently selected in the file dialog box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.InitialDirectory">
            <summary>
             Gets or sets the initial directory displayed by the file dialog box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.Instance">
            <summary>
             Gets the Win32 instance handle for the application.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.Options">
            <summary>
             Gets the Win32 common Open File Dialog OFN_* option flags.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.RestoreDirectory">
            <summary>
             Gets or sets a value indicating whether the dialog box restores the current
             directory before closing.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.ShowHelp">
            <summary>
             Gets or sets a value indicating whether whether the Help button is displayed
             in the file dialog.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.SupportMultiDottedExtensions">
            <summary>
             Gets or sets whether def or abc.def is the extension of the file filename.abc.def
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.Title">
            <summary>
             Gets or sets the file dialog box title.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.ValidateNames">
            <summary>
             Gets or sets a value indicating whether the dialog box accepts only valid
             Win32 file names.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.FileDialog.FileOk">
            <summary>
             Occurs when the user clicks on the Open or Save button on a file dialog
             box.
            <remarks>
             For information about handling events, see <see topic='cpconEventsOverview'/>.
            </remarks>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FileDialog.DoFileOk(System.IntPtr)">
            <summary>
             Processes the CDN_FILEOK notification.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FileDialog.GetMultiselectFiles(System.Windows.Forms.UnicodeCharBuffer)">
            <summary>
             Extracts the filename(s) returned by the file dialog.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FileDialog.GetOption(System.Int32)">
            <summary>
             Returns the state of the given option flag.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
             Defines the common dialog box hook procedure that is overridden to add
             specific functionality to the file dialog box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FileDialog.MakeFilterString(System.String,System.Boolean)">
            <summary>
             Converts the given filter string to the format required in an OPENFILENAME_I
             structure.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.FileDialog.FileOk'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FileDialog.ProcessFileNames">
            <summary>
             Processes the filenames entered in the dialog according to the settings
             of the "addExtension", "checkFileExists", "createPrompt", and
             "overwritePrompt" properties.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FileDialog.MessageBoxWithFocusRestore(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
             Prompts the user with a <see cref='T:System.Windows.Forms.MessageBox'/> with the
             given parameters. It also ensures that the focus is set back on the window that
             had the focus to begin with (before we displayed the MessageBox).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FileDialog.PromptFileNotFound(System.String)">
            <summary>
             Prompts the user with a <see cref='T:System.Windows.Forms.MessageBox'/> when a
             file does not exist.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.FileDialog.PromptUserIfAppropriate(System.String)" -->
        <member name="M:System.Windows.Forms.FileDialog.Reset">
            <summary>
             Resets all properties to their default values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FileDialog.RunDialog(System.IntPtr)">
            <summary>
             Implements running of a file dialog.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FileDialog.RunFileDialog(System.Windows.Forms.NativeMethods.OPENFILENAME_I)">
            <summary>
             Implements the actual call to GetOPENFILENAME_I or GetSaveFileName.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FileDialog.SetOption(System.Int32,System.Boolean)">
            <summary>
             Sets the given option to the given boolean value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FileDialog.ToString">
            <summary>
             Provides a string version of this Object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FileDialog.AutoUpgradeEnabled">
            <summary>
             Gets or sets whether the dialog will be automatically upgraded to enable new features.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.FixedPanel">
            <summary>
             Specifies the Fixed Panel in the SplitContainer Control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FixedPanel.None">
            <summary>
             No panel is fixed. Resize causes the Resize of both the panels.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FixedPanel.Panel1">
            <summary>
             Panel1 is Fixed. The resize will increase the size of second panel.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FixedPanel.Panel2">
            <summary>
             Panel2 is Fixed. The resize will increase the size of first panel.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FlatButtonAppearance.BorderSize">
            <summary>
             For buttons whose FlatStyle is FlatStyle.Flat, this property specifies the size, in pixels of the border around the button.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FlatButtonAppearance.BorderColor">
            <summary>
             For buttons whose FlatStyle is FlatStyle.Flat, this property specifies the color of the border around the button.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FlatButtonAppearance.CheckedBackColor">
            <summary>
             For buttons whose FlatStyle is FlatStyle.Flat, this property specifies the color of the client area
             of the button when the button state is checked and the mouse cursor is NOT within the bounds of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FlatButtonAppearance.MouseDownBackColor">
            <summary>
             For buttons whose FlatStyle is FlatStyle.Flat, this property specifies the color of the client area
             of the button when the mouse cursor is within the bounds of the control and the left button is pressed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FlatButtonAppearance.MouseOverBackColor">
            <summary>
             For buttons whose FlatStyle is FlatStyle.Flat, this property specifies the color of the client
             area of the button when the mouse cursor is within the bounds of the control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.FlatStyle">
            <summary>
             Specifies the style of control to display.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FlatStyle.Flat">
            <summary>
             The control appears flat.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FlatStyle.Popup">
            <summary>
             A control appears flat until the mouse pointer moves over it, at
             which point it appears three-dimensional.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FlatStyle.Standard">
            <summary>
             The control appears three-dimensional.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FlatStyle.System">
            <summary>
             The control appears three-dimensional.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.FolderBrowserDialog">
            <summary>
             Represents a common dialog box that allows the user to specify options for
             selecting a folder. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FolderBrowserDialog.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.FolderBrowserDialog'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FolderBrowserDialog.AutoUpgradeEnabled">
            <summary>
             Gets or sets whether the dialog will be automatically upgraded to enable new features.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FolderBrowserDialog.ShowNewFolderButton">
            <summary>
             Determines if the 'New Folder' button should be exposed.
             This property has no effect if the Vista style dialog is used; in that case, the New Folder button is always shown.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FolderBrowserDialog.SelectedPath">
            <summary>
             Gets the directory path of the folder the user picked.
             Sets the directory path of the initial folder shown in the dialog box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FolderBrowserDialog.RootFolder">
            <summary>
             Gets/sets the root node of the directory tree.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FolderBrowserDialog.Description">
            <summary>
             Gets or sets a description to show above the folders. Here you can provide
             instructions for selecting a folder.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FolderBrowserDialog.UseDescriptionForTitle">
            <summary>
             Gets or sets a value that indicates whether to use the value of the <see cref="P:System.Windows.Forms.FolderBrowserDialog.Description" /> property
             as the dialog title for Vista style dialogs. This property has no effect on old style dialogs.
            </summary>
            <value><see langword="true" /> to indicate that the value of the <see cref="P:System.Windows.Forms.FolderBrowserDialog.Description" /> property is used as dialog title; <see langword="false" />
             to indicate the value is added as additional text to the dialog. The default is <see langword="false" />.</value>
        </member>
        <member name="M:System.Windows.Forms.FolderBrowserDialog.Reset">
            <summary>
             Resets all properties to their default values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FolderBrowserDialog.RunDialog(System.IntPtr)">
            <summary>
             Displays a folder browser dialog box.
            </summary>
            <param name="hWndOwner">A handle to the window that owns the folder browser dialog.</param>
            <returns>
             <see langword="true" /> if the folder browser dialog was successfully run; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:System.Windows.Forms.FolderBrowserDialog.FolderBrowserDialog_BrowseCallbackProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
             Callback function used to enable/disable the OK button,
             and select the initial folder.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.FontDialog">
            <summary>
             Represents
             a common dialog box that displays a list of fonts that are currently installed
             on
             the system.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FontDialog.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.FontDialog'/>
             class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FontDialog.AllowSimulations">
            <summary>
             Gets or sets a value indicating whether the dialog box allows graphics device interface
             (GDI) font simulations.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FontDialog.AllowVectorFonts">
            <summary>
             Gets or sets a value indicating whether the dialog box allows vector font selections.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FontDialog.AllowVerticalFonts">
            <summary>
             Gets or sets a value indicating whether
             the dialog box displays both vertical and horizontal fonts or only
             horizontal fonts.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FontDialog.AllowScriptChange">
            <summary>
             Gets
             or sets a value indicating whether the user can change the character set specified
             in the Script combo box to display a character set other than the one
             currently displayed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FontDialog.Color">
            <summary>
             Gets or sets a value indicating the selected font color.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FontDialog.FixedPitchOnly">
            <summary>
             Gets or sets
             a value indicating whether the dialog box allows only the selection of fixed-pitch fonts.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FontDialog.Font">
            <summary>
             Gets or sets a value indicating the selected font.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FontDialog.FontMustExist">
            <summary>
             Gets or sets a value indicating whether the dialog box specifies an error condition if the
             user attempts to select a font or style that does not exist.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FontDialog.MaxSize">
            <summary>
             Gets or sets the maximum
             point size a user can select.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FontDialog.MinSize">
            <summary>
             Gets or sets a value indicating the minimum point size a user can select.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FontDialog.Options">
            <summary>
             Gets the value passed to CHOOSEFONT.Flags.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FontDialog.ScriptsOnly">
            <summary>
             Gets or sets a
             value indicating whether the dialog box allows selection of fonts for all non-OEM and Symbol character
             sets, as well as the ----n National Standards Institute (ANSI) character set.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FontDialog.ShowApply">
            <summary>
             Gets or sets a value indicating whether the dialog box contains an Apply button.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FontDialog.ShowColor">
            <summary>
             Gets or sets a value indicating whether the dialog box displays the color choice.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FontDialog.ShowEffects">
            <summary>
             Gets or sets a value indicating whether the dialog box contains controls that allow the
             user to specify strikethrough, underline, and text color options.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FontDialog.ShowHelp">
            <summary>
             Gets or sets a value indicating whether the dialog box displays a Help button.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.FontDialog.Apply">
            <summary>
             Occurs when the user clicks the Apply button in the font
             dialog box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FontDialog.GetOption(Interop.Comdlg32.CF)">
            <summary>
             Returns the state of the given option flag.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FontDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
             Specifies the common dialog box hook procedure that is overridden to add
             specific functionality to a common dialog box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FontDialog.OnApply(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.FontDialog.Apply'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FontDialog.Reset">
            <summary>
             Resets all dialog box options to their default values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FontDialog.RunDialog(System.IntPtr)">
            <summary>
             The actual implementation of running the dialog. Inheriting classes
             should override this if they want to add more functionality, and call
             base.runDialog() if necessary
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FontDialog.SetOption(Interop.Comdlg32.CF,System.Boolean)">
            <summary>
             Sets the given option to the given boolean value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FontDialog.ShouldSerializeFont">
            <summary>
             Indicates whether the <see cref='P:System.Windows.Forms.FontDialog.Font'/> property should be
             persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FontDialog.ToString">
            <summary>
             Retrieves a string that includes the name of the current font selected in
             the dialog box.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Form">
            <summary>
             Represents a window or dialog box that makes up an application's user interface.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Form.FormAccessibleObject">
            <summary>
             Form control accessible object with UI Automation provider functionality.
             This inherits from the base ControlAccessibleObject
             to have all base functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Form'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.AcceptButton">
            <summary>
             Indicates the <see cref='T:System.Windows.Forms.Button'/> control on the form that is clicked when
             the user presses the ENTER key.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.Active">
            <summary>
             Retrieves true if this form is currently active.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.ActiveForm">
            <summary>
             Gets the currently active form for this application.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.ActiveMdiChild">
             <summary>
            
              Gets the currently active multiple document interface (MDI) child window.
              Note: Don't use this property internally, use ActiveMdiChildInternal instead (see comments below).
             </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.ActiveMdiChildInternal">
            <summary>
             Property to be used internally.  See comments a on ActiveMdiChild property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.AllowTransparency">
            <summary>
             Gets or sets
             a value indicating whether the opacity of the form can be
             adjusted.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.AutoScale">
            <summary>
             Gets or sets a value indicating whether the form will adjust its size
             to fit the height of the font used on the form and scale
             its controls.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.AutoScaleBaseSize">
            <summary>
             The base size used for autoscaling. The AutoScaleBaseSize is used
             internally to determine how much to scale the form when AutoScaling is
             used.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.AutoScroll">
            <summary>
             Gets or sets a value indicating whether the form implements
             autoscrolling.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.AutoSizeMode">
            <summary>
             Allows the control to optionally shrink when AutoSize is true.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.AutoValidate">
            <summary>
             Indicates whether controls in this container will be automatically validated when the focus changes.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.BackColor">
            <summary>
             The background color of this control. This is an ambient property and
             will always return a non-null value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.FormBorderStyle">
            <summary>
             Gets or sets the border style of the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.CancelButton">
            <summary>
             Gets
             or
             sets the button control that will be clicked when the
             user presses the ESC key.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.ClientSize">
            <summary>
             Gets or sets the size of the client area of the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.ControlBox">
            <summary>
             Gets or sets a value indicating whether a control box is displayed in the
             caption bar of the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.CreateParams">
            <summary>
             Retrieves the CreateParams used to create the window.
             If a subclass overrides this function, it must call the base implementation.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.DefaultIcon">
            <summary>
             The default icon used by the Form. This is the standard "windows forms" icon.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.DesktopBounds">
            <summary>
             Gets or sets the size and location of the form on the Windows desktop.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.DesktopLocation">
            <summary>
             Gets or sets the location of the form on the Windows desktop.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.DialogResult">
            <summary>
             Gets or sets the dialog result for the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.HelpButton">
            <summary>
             Gets or sets a value indicating whether a
             help button should be displayed in the caption box of the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.Icon">
            <summary>
             Gets or sets the icon for the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.IsClosing">
            <summary>
             Determines whether the window is closing.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.IsMdiChild">
            <summary>
             Gets a value indicating whether the form is a multiple document
             interface (MDI) child form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.IsMdiContainer">
            <summary>
             Gets or sets a value indicating whether the form is a container for multiple document interface
             (MDI) child forms.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.IsRestrictedWindow">
            <summary>
             Determines if this form should display a warning banner when the form is
             displayed in an unsecure mode.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.KeyPreview">
            <summary>
             Gets or sets a value
             indicating whether the form will receive key events
             before the event is passed to the control that has focus.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.Location">
            <summary>
             Gets or sets the location of the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.MaximizedBounds">
            <summary>
             Gets the size of the form when it is
             maximized.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.MaximumSize">
            <summary>
             Gets the maximum size the form can be resized to.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.Margin">
            <summary>
             Hide Margin/MarginChanged
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Form.MarginChanged">
            <summary>
             Hide Margin/MarginChanged
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.MinimumSize">
            <summary>
             Gets the minimum size the form can be resized to.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.MaximizeBox">
            <summary>
             Gets or sets a value indicating whether the maximize button is
             displayed in the caption bar of the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.MdiChildren">
            <summary>
             Gets an array of forms that represent the
             multiple document interface (MDI) child forms that are parented to this
             form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.MdiClient">
            <summary>
             Gets the MDIClient that the MDI container form is using to contain Multiple Document Interface (MDI) child forms,
             if this is an MDI container form.
             Represents the client area of a Multiple Document Interface (MDI) Form window, also known as the MDI child window.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.MdiParent">
            <summary>
             Indicates the current multiple document
             interface (MDI) parent form of this form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.MinimizeBox">
            <summary>
             Gets or sets a value indicating whether the minimize button is displayed in the caption bar of the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.Modal">
            <summary>
             Gets a value indicating whether this form is
             displayed modally.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.Opacity">
            <summary>
             Determines the opacity of the form. This can only be set on top level controls.
             Opacity requires Windows 2000 or later, and is ignored on earlier operating systems.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.OwnedForms">
            <summary>
             Gets an array of <see cref='T:System.Windows.Forms.Form'/> objects that represent all forms that are owned by this form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.Owner">
            <summary>
             Gets or sets the form that owns this form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.RestoreBounds">
            <summary>
             Gets or sets the restored bounds of the Form.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.Form.RightToLeftLayout" -->
        <member name="P:System.Windows.Forms.Form.ShowInTaskbar">
            <summary>
             If ShowInTaskbar is true then the form will be displayed in the Windows Taskbar.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.ShowIcon">
            <summary>
             Gets or sets a value indicating whether an icon is displayed in the
             caption bar of the form.
             If ControlBox == false, then the icon won't be shown no matter what
             the value of ShowIcon is
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.ShowWithoutActivation">
            <summary>
             When this property returns true, the internal ShowParams property will return User32.ShowWindowCommand.SHOWNOACTIVATE.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.Size">
            <summary>
             Gets or sets the size of the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.SizeGripStyle">
            <summary>
             Gets or sets the style of size grip to display in the lower-left corner of the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.StartPosition">
            <summary>
             Gets or sets the
             starting position of the form at run time.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.TabStop">
            <summary>
             This property has no effect on Form, we need to hide it from browsers.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.TaskbarOwner">
            <summary>
             For forms that are show in task bar false, this returns a HWND
             they must be parented to in order for it to work.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.TopLevel">
            <summary>
             Gets or sets a value indicating whether to display the form as a top-level
             window.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.TopMost">
            <summary>
             Gets or sets a value indicating whether the form should be displayed as the
             top-most form of the application.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.TransparencyKey">
            <summary>
             Gets or sets the color that will represent transparent areas of the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.WindowState">
            <summary>
             Gets or sets the form's window state.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Form.WindowText">
            <summary>
             Gets or sets the text to display in the caption bar of the form.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Form.Activated">
            <summary>
             Occurs when the form is activated in code or by the user.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Form.Closing">
            <summary>
             Occurs when the form is closing.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Form.Closed">
            <summary>
             Occurs when the form is closed.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Form.Deactivate">
            <summary>
             Occurs when the form loses focus and is not the active form.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Form.FormClosing">
            <summary>
             Occurs when the form is closing.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Form.FormClosed">
            <summary>
             Occurs when the form is closed.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Form.Load">
            <summary>
             Occurs before the form becomes visible.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Form.MdiChildActivate">
            <summary>
             Occurs when a Multiple Document Interface (MDI) child form is activated or closed
             within an MDI application.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Form.MenuComplete">
            <summary>
             Occurs when the menu of a form loses focus.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Form.MenuStart">
            <summary>
             Occurs when the menu of a form receives focus.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Form.InputLanguageChanged">
            <summary>
             Occurs after the input language of the form has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Form.InputLanguageChanging">
            <summary>
             Occurs when the the user attempts to change the input language for the
             form.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Form.Shown">
            <summary>
             Occurs whenever the form is first shown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.Activate">
            <summary>
             Activates the form and gives it focus.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.AddOwnedForm(System.Windows.Forms.Form)">
            <summary>
             Adds
             an owned form to this form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.AdjustSystemMenu">
            <summary>
             This forces the SystemMenu to look like we want.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ApplyAutoScaling">
            <summary>
             This auto scales the form based on the AutoScaleBaseSize.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ApplyClientSize">
            <summary>
             This adjusts the size of the windowRect so that the client rect is the
             correct size.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.AssignParent(System.Windows.Forms.Control)">
            <summary>
             Assigns a new parent control. Sends out the appropriate property change
             notifications for properties that are affected by the change of parent.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.CheckCloseDialog(System.Boolean)">
             <summary>
              Checks whether a modal dialog is ready to close. If the dialogResult
              property is not DialogResult.None, the OnClosing and OnClosed events
              are fired. A return value of true indicates that both events were
              successfully dispatched and that event handlers did not cancel closing
              of the dialog. User code should never have a reason to call this method.
              It is internal only so that the Application class can call it from a
              modal message loop.
            
              closingOnly is set when this is called from WmClose so that we can do just the beginning portion
              of this and then let the message loop finish it off with the actual close code.
            
              Note we set a flag to determine if we've already called close or not.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.Close">
            <summary>
             Closes the form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ComputeWindowSize(System.Drawing.Size)">
            <summary>
             Computes the window size from the clientSize based on the styles
             returned from CreateParams.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ComputeWindowSize(System.Drawing.Size,System.Int32,System.Int32)">
            <summary>
             Computes the window size from the clientSize base on the specified
             window styles. This will not return the correct size if menus wrap.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.AfterControlRemoved(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
             Cleans up form state after a control has been removed.
             Package scope for Control
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.CreateHandle">
            <summary>
             Creates the handle for the Form. If a
             subclass overrides this function,
             it must call the base implementation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.DefWndProc(System.Windows.Forms.Message@)">
            <summary>
             Calls the default window proc for the form. If
             a
             subclass overrides this function,
             it must call the base implementation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.Dispose(System.Boolean)">
            <summary>
             Releases all the system resources associated with the Form. If a subclass
             overrides this function, it must call the base implementation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.FillInCreateParamsBorderIcons(System.Windows.Forms.CreateParams)">
            <summary>
             Adjusts the window style of the CreateParams to reflect the bordericons.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.FillInCreateParamsBorderStyles(System.Windows.Forms.CreateParams)">
            <summary>
             Adjusts the window style of the CreateParams to reflect the borderstyle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.FillInCreateParamsStartPosition(System.Windows.Forms.CreateParams)">
            <summary>
             Adjusts the CreateParams to reflect the window bounds and start position.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.FillInCreateParamsWindowState(System.Windows.Forms.CreateParams)">
            <summary>
             Adjusts the Createparams to reflect the window state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.FocusInternal">
            <summary>
             Attempts to set focus to this Form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.CanSelectCore">
            <summary>
             Override since CanProcessMnemonic is overriden too (base.CanSelectCore calls CanProcessMnemonic).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.CanRecreateHandle">
            <summary>
             When an MDI form is hidden it means its handle has not yet been created or has been destroyed (see
             SetVisibleCore).  If the handle is recreated, the form will be made visible which should be avoided.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.CanProcessMnemonic">
            <summary>
             Overriden to handle MDI mnemonic processing properly.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ProcessMnemonic(System.Char)">
            <summary>
             Overriden to handle MDI mnemonic processing properly.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.CenterToParent">
            <summary>
             Centers the dialog to its parent.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.CenterToScreen">
            <summary>
             Centers the dialog to the screen. This will first attempt to use
             the owner property to determine the correct screen, then
             it will try the HWND owner of the form, and finally this will
             center the form on the same monitor as the mouse cursor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.LayoutMdi(System.Windows.Forms.MdiLayout)">
            <summary>
             Arranges the Multiple Document Interface
             (MDI) child forms according to value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnActivated(System.EventArgs)">
            <summary>
             The activate event is fired when the form is activated.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnAutoScaleModeChanged">
            <summary>
             Override of AutoScaleModeChange method from ContainerControl. We use this to keep our
             own AutoScale property in sync.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
             The Closing event is fired when the form is closed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnClosed(System.EventArgs)">
            <summary>
             The Closed event is fired when the form is closed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)">
            <summary>
             The Closing event is fired before the form is closed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnFormClosed(System.Windows.Forms.FormClosedEventArgs)">
            <summary>
             The Closed event is fired when the form is closed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnCreateControl">
            <summary>
             Raises the CreateControl event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnDeactivate(System.EventArgs)">
            <summary>
             Raises the Deactivate event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnEnabledChanged(System.EventArgs)">
            <summary>
             Raises the EnabledChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnHandleCreated(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to find out when the
             handle has been created.
             Call base.OnHandleCreated first.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnHandleDestroyed(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to find out when the
             handle is about to be destroyed.
             Call base.OnHandleDestroyed last.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnHelpButtonClicked(System.ComponentModel.CancelEventArgs)">
            <summary>
             Handles the event that a helpButton is clicked
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnLoad(System.EventArgs)">
            <summary>
             The Load event is fired before the form becomes visible for the first time.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnInputLanguageChanged(System.Windows.Forms.InputLanguageChangedEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Form.InputLanguageChanged'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnInputLanguageChanging(System.Windows.Forms.InputLanguageChangingEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Form.InputLanguageChanging'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnMdiChildActivate(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Form.MdiChildActivate'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnMenuStart(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Form.MenuStart'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnMenuComplete(System.EventArgs)">
            <summary>
             Raises the MenuComplete event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Raises the Paint event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnResize(System.EventArgs)">
            <summary>
             Raises the Resize event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnDpiChanged(System.Windows.Forms.DpiChangedEventArgs)">
            <summary>
             Raises the DpiChanged event.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Form.DpiChanged">
            <summary>
             Occurs when the DPI resolution of the screen this top level window is displayed on changes,
             either when the top level window is moved between monitors or when the OS settings are changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmDpiChanged(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_DPICHANGED message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnGetDpiScaledSize(System.Int32,System.Int32,System.Drawing.Size@)">
            <summary>
             Allows derived form to handle WM_GETDPISCALEDSIZE message.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmGetDpiScaledSize(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_GETDPISCALEDSIZE message, this is a chance for the application to
             scale window size non-lineary. If this message is not processed, the size is scaled linearly by Windows.
             This message is sent to top level windows before WM_DPICHANGED.
             If the application responds to this message, the resulting size will be the candidate rectangle
             sent to WM_DPICHANGED. The WPARAM contains a DPI value. The size needs to be computed if
             the window were to switch to this DPI. LPARAM is unused and will be zero.
             The return value is a size, where the LOWORD is the desired width of the window and the HIWORD
             is the desired height of the window. A return value of zero indicates that the app does not
             want any special behavior and the candidate rectangle will be computed linearly.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnShown(System.EventArgs)">
            <summary>
             Thi event fires whenever the form is first shown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.PerformOnInputLanguageChanged(System.Windows.Forms.InputLanguageChangedEventArgs)">
            <summary>
             Simulates a InputLanguageChanged event. Used by Control to forward events
             to the parent form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.PerformOnInputLanguageChanging(System.Windows.Forms.InputLanguageChangingEventArgs)">
            <summary>
             Simulates a InputLanguageChanging event. Used by Control to forward
             events to the parent form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
             Processes a command key. Overrides Control.processCmdKey() to provide
             additional handling of main menu command keys and Mdi accelerators.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
             Processes a dialog key. Overrides Control.processDialogKey(). This
             method implements handling of the RETURN, and ESCAPE keys in dialogs.
             The method performs no processing on keys that include the ALT or
             CONTROL modifiers.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ProcessDialogChar(System.Char)">
            <summary>
             Processes a dialog character For a MdiChild.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.RaiseFormClosedOnAppExit">
            <summary>
             Raises the FormClosed event for this form when Application.Exit is called.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.RaiseFormClosingOnAppExit">
            <summary>
             Raises the FormClosing event for this form when Application.Exit is called.
             Returns e.Cancel returned by the event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.RemoveOwnedForm(System.Windows.Forms.Form)">
            <summary>
             Removes a form from the list of owned forms. Also sets the owner of the
             removed form to null.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ResetIcon">
            <summary>
             Resets the form's icon the the default value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ResetTransparencyKey">
            <summary>
             Resets the TransparencyKey to Color.Empty.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Form.ResizeBegin">
            <summary>
             Occurs when the form enters the sizing modal loop
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Form.ResizeEnd">
            <summary>
             Occurs when the control exits the sizing modal loop.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ResumeLayoutFromMinimize">
            <summary>
             This is called when we have just been restored after being
             minimized.  At this point we resume our layout.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ResumeUpdateMenuHandles">
            <summary>
             Decrements updateMenuHandleSuspendCount. If updateMenuHandleSuspendCount
             becomes zero and updateMenuHandlesDeferred is true, updateMenuHandles
             is called.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.Select(System.Boolean,System.Boolean)">
            <summary>
             Selects this form, and optionally selects the next/previous control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ScaleCore(System.Single,System.Single)">
            <summary>
             Base function that performs scaling of the form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <summary>
             For overrides this to calculate scaled bounds based on the restored rect
             if it is maximized or minimized.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Scale this form.  Form overrides this to enforce a maximum / minimum size.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.SetDefaultButton(System.Windows.Forms.IButtonControl)">
            <summary>
             Sets the defaultButton for the form. The defaultButton is "clicked" when
             the user presses Enter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.SetClientSizeCore(System.Int32,System.Int32)">
            <summary>
             Sets the clientSize of the form. This will adjust the bounds of the form
             to make the clientSize the requested size.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.SetDesktopBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sets the bounds of the form in desktop coordinates.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.SetDesktopLocation(System.Int32,System.Int32)">
            <summary>
             Sets the location of the form in desktop coordinates.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.Show(System.Windows.Forms.IWin32Window)">
            <summary>
             Makes the control display by setting the visible property to true
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ShowDialog">
            <summary>
             Displays this form as a modal dialog box with no owner window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
             Shows this form as a modal dialog with the specified owner.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ShouldSerializeAutoScaleBaseSize">
            <summary>
             Indicates whether the <see cref='P:System.Windows.Forms.Form.AutoScaleBaseSize'/> property should be
             persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ShouldSerializeIcon">
            <summary>
             Indicates whether the <see cref='P:System.Windows.Forms.Form.Icon'/> property should be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ShouldSerializeLocation">
            <summary>
             Determines if the Location property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ShouldSerializeSize">
            <summary>
             Indicates whether the <see cref='P:System.Windows.Forms.Form.Size'/> property should be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ShouldSerializeTransparencyKey">
            <summary>
             Indicates whether the <see cref='P:System.Windows.Forms.Form.TransparencyKey'/> property should be
             persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.SuspendLayoutForMinimize">
            <summary>
             This is called when we are about to become minimized.  Laying out
             while minimized can be a problem because the physical dimensions
             of the window are very small.  So, we simply suspend.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.SuspendUpdateMenuHandles">
            <summary>
             Increments updateMenuHandleSuspendCount.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.UpdateAutoScaleBaseSize">
            <summary>
             Updates the autoscalebasesize based on the current font.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.UpdateDefaultButton">
            <summary>
             Updates the default button based on current selection, and the
             acceptButton property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.UpdateHandleWithOwner">
            <summary>
             Updates the underlying hWnd with the correct parent/owner of the form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.UpdateLayered">
            <summary>
             Updates the layered window attributes if the control
             is in layered mode.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.UpdateToolStrip">
            <summary> ToolStrip MDI Merging support </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnResizeBegin(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Form.ResizeBegin'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.OnResizeEnd(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Form.ResizeEnd'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.UpdateWindowIcon(System.Boolean)">
            <summary>
             Updates the window icon.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.UpdateWindowState">
            <summary>
             Updated the window state from the handle, if created.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ValidateChildren">
            <summary>
             Validates all selectable child controls in the container, including descendants. This is
             equivalent to calling ValidateChildren(ValidationConstraints.Selectable). See <see cref='F:System.Windows.Forms.ValidationConstraints.Selectable'/>
             for details of exactly which child controls will be validated.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ValidateChildren(System.Windows.Forms.ValidationConstraints)">
            <summary>
             Validates all the child controls in the container. Exactly which controls are
             validated and which controls are skipped is determined by <paramref name="flags"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmActivate(System.Windows.Forms.Message@)">
            <summary>
             WM_ACTIVATE handler
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmEnterSizeMove(System.Windows.Forms.Message@)">
            <summary>
             WM_ENTERSIZEMOVE handler, so that user can hook up OnResizeBegin event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmExitSizeMove(System.Windows.Forms.Message@)">
            <summary>
             WM_EXITSIZEMOVE handler, so that user can hook up OnResizeEnd event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmCreate(System.Windows.Forms.Message@)">
            <summary>
             WM_CREATE handler
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmClose(System.Windows.Forms.Message@)">
            <summary>
             WM_CLOSE, WM_QUERYENDSESSION, and WM_ENDSESSION handler
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmEnterMenuLoop(System.Windows.Forms.Message@)">
            <summary>
             WM_ENTERMENULOOP handler
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmEraseBkgnd(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_ERASEBKGND message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmExitMenuLoop(System.Windows.Forms.Message@)">
            <summary>
             WM_EXITMENULOOP handler
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmGetMinMaxInfo(System.Windows.Forms.Message@)">
            <summary>
             WM_GETMINMAXINFO handler
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmMdiActivate(System.Windows.Forms.Message@)">
            <summary>
             WM_MDIACTIVATE handler
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmNCDestroy(System.Windows.Forms.Message@)">
            <summary>
             WM_NCDESTROY handler
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmNCHitTest(System.Windows.Forms.Message@)">
            <summary>
             WM_NCHITTEST handler
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmShowWindow(System.Windows.Forms.Message@)">
            <summary>
             WM_SHOWWINDOW handler
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmSysCommand(System.Windows.Forms.Message@)">
            <summary>
             WM_SYSCOMMAND handler
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmSize(System.Windows.Forms.Message@)">
            <summary>
             WM_SIZE handler
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WmWindowPosChanged(System.Windows.Forms.Message@)">
            <summary>
             WM_WINDOWPOSCHANGED handler
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.WndProc(System.Windows.Forms.Message@)">
            <summary>
             Base wndProc encapsulation.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Form.ControlCollection">
            <summary>
             Represents a collection of controls on the form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ControlCollection.#ctor(System.Windows.Forms.Form)">
            <summary>
             Initializes a new instance of the ControlCollection class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ControlCollection.Add(System.Windows.Forms.Control)">
            <summary>
             Adds a control
             to the form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Form.ControlCollection.Remove(System.Windows.Forms.Control)">
            <summary>
             Removes a control from the form.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.Formatter.FormatObject(System.Object,System.Type,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.String,System.IFormatProvider,System.Object,System.Object)" -->
        <member name="M:System.Windows.Forms.Formatter.FormatObjectInternal(System.Object,System.Type,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.String,System.IFormatProvider,System.Object)">
             <summary>
            
              Converts a value into a format suitable for display to the end user.
            
              - Converts DBNull or null into a suitable formatted representation of 'null'
              - Performs some special-case conversions (eg. Boolean to CheckState)
              - Uses TypeConverters or IConvertible where appropriate
              - Throws a FormatException is no suitable conversion can be found
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.Formatter.ParseObject(System.Object,System.Type,System.Type,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.IFormatProvider,System.Object,System.Object)" -->
        <member name="M:System.Windows.Forms.Formatter.ParseObjectInternal(System.Object,System.Type,System.Type,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.IFormatProvider,System.Object)">
             <summary>
            
              Converts a value entered by the end user (through UI) into the corresponding binary value.
            
              - Converts formatted representations of 'null' into DBNull
              - Performs some special-case conversions (eg. CheckState to Boolean)
              - Uses TypeConverters or IConvertible where appropriate
              - Throws a FormatException is no suitable conversion can be found
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Formatter.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
             Converts a value to the specified type using Convert.ChangeType()
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Formatter.EqualsFormattedNullValue(System.Object,System.Object,System.IFormatProvider)">
            <summary>
             Indicates whether the specified value matches the display-formatted representation of 'null data' for a given binding.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Formatter.GetCantConvertMessage(System.Object,System.Type)">
            <summary>
             Returns the FormatException message used when formatting/parsing fails to find any suitable conversion
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Formatter.GetFormatterCulture(System.IFormatProvider)">
            <summary>
             Determines the correct culture to use during formatting and parsing
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Formatter.InvokeStringParseMethod(System.Object,System.Type,System.IFormatProvider)">
            <summary>
             Converts a value to the specified type using best Parse() method on that type
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Formatter.IsNullData(System.Object,System.Object)">
            <summary>
             Indicates whether a given value represents 'null' for data source fields of the same type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Formatter.NullData(System.Type,System.Object)">
            <summary>
             Returns the default representation of 'null' for a given data source field type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Formatter.NullableUnwrap(System.Type)">
            <summary>
             Extract the inner type from a nullable type
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Formatter.NullableUnwrap(System.ComponentModel.TypeConverter)">
            <summary>
             Extract the inner type converter from a nullable type converter
            </summary>
        </member>
        <member name="T:System.Windows.Forms.FormBorderStyle">
            <summary>
             Specifies the border styles for a form.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FormBorderStyle.None">
            <summary>
             No border.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FormBorderStyle.FixedSingle">
            <summary>
             A fixed, single line border.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FormBorderStyle.Fixed3D">
            <summary>
             A fixed, three-dimensional border.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FormBorderStyle.FixedDialog">
            <summary>
             A thick, fixed dialog-style border.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FormBorderStyle.Sizable">
            <summary>
             A resizable border.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FormBorderStyle.FixedToolWindow">
            <summary>
             A tool window border that is not resizable.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FormBorderStyle.SizableToolWindow">
            <summary>
             A resizable tool window border.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.FormClosedEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.Form.OnClosed(System.EventArgs)'/> event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FormClosedEventArgs.CloseReason">
            <summary>
             Provides the reason for the Form Close.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.FormClosedEventHandler">
            <summary>
             Represents a method that will handle Form closed event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.FormClosingEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.Form.OnClosing(System.ComponentModel.CancelEventArgs)'/> event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FormClosingEventArgs.CloseReason">
            <summary>
             Provides the reason for the Form close.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.FormClosingEventHandler">
            <summary>
             Represents a method that will handle Form Closing event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.FormCollection">
            <summary>
             This is a read only collection of Forms exposed as a static property of the
             Application class. This is used to store all the currently loaded forms in an app.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FormCollection.Item(System.String)">
            <summary>
             Gets a form specified by name, if present, else returns null. If there are multiple
             forms with matching names, the first form found is returned.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.FormCollection.Item(System.Int32)">
            <summary>
             Gets a form specified by index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FormCollection.Add(System.Windows.Forms.Form)">
            <summary>
             Used internally to add a Form to the FormCollection
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FormCollection.Contains(System.Windows.Forms.Form)">
            <summary>
             Used internally to check if a Form is in the FormCollection
            </summary>
        </member>
        <member name="M:System.Windows.Forms.FormCollection.Remove(System.Windows.Forms.Form)">
            <summary>
             Used internally to add a Form to the FormCollection
            </summary>
        </member>
        <member name="T:System.Windows.Forms.FormStartPosition">
            <summary>
             Specifies the initial position of a form.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FormStartPosition.Manual">
            <summary>
             The location and size of the form will determine its starting position.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FormStartPosition.CenterScreen">
            <summary>
             The form is centered on the current display, and has the dimensions
             specified in the form's size.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FormStartPosition.WindowsDefaultLocation">
            <summary>
             The form is positioned at the Windows default location and has the
             dimensions specified in the form's size.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FormStartPosition.WindowsDefaultBounds">
            <summary>
             The form is positioned at the Windows default location and has the
             bounds determined by Windows default.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FormStartPosition.CenterParent">
            <summary>
             The form is centered within the bounds of its parent form.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.FormWindowState">
            <summary>
             Specifies how a form window is displayed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FormWindowState.Normal">
            <summary>
             A default sized window.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FormWindowState.Minimized">
            <summary>
             A minimized window.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FormWindowState.Maximized">
            <summary>
             A maximized window.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.FrameStyle">
            <summary>
             Specifies the frame style of the selected control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FrameStyle.Dashed">
            <summary>
             A thin, dashed border.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.FrameStyle.Thick">
            <summary>
             A thick, solid border.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TextFormatFlags">
            <summary>
             Specifies the display and layout information for text strings.
            </summary>
            <remarks>
             This is a public enum wrapping the internal <see cref="T:Interop.User32.DT"/>.
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TextFormatFlags.Left">
            <remarks>
             This is the default.
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TextFormatFlags.Top">
            <remarks>
             This is the default.
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TextFormatFlags.PreserveGraphicsClipping">
            <summary>
             The following flags are exclusive of TextRenderer (no Windows native flags)
             and apply to methods receiving a Graphics as the IDeviceContext object, and
             specify whether to reapply clipping and coordintate transformations to the hdc
             obtained from the Graphics object, which returns a clean hdc.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextFormatFlags.GlyphOverhangPadding">
            <summary>
             Adds padding related to the drawing binding box, computed according to the font size.
             Match the System.Internal.GDI.TextPaddingOptions.
            </summary>
            <remarks>
             This is the default.
            </remarks>
        </member>
        <member name="T:System.Windows.Forms.TextRenderer">
            <summary>
             This class provides API for drawing GDI text.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextRenderer.MeasureText(System.String,System.Drawing.Font)">
             MeasureText wrappers.
        </member>
        <member name="T:System.Windows.Forms.WindowsGraphicsWrapper">
            <summary>
             This class wrapps a WindowsGraphics and is provided to be able to manipulate WindowsGraphics objects
             created from a Graphics object in the same way as one created from any other IDeviceContext object,
             which could be a custom one.
             This class was designed to help TextRenderer determine how to create the underlying WindowsGraphics.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WindowsGraphicsWrapper.#ctor(System.Drawing.IDeviceContext,System.Windows.Forms.TextFormatFlags)">
            <summary>
             Constructor that determines how to create the WindowsGraphics, there are three posible cases
             for the IDeviceContext object type:
             1. It is a Graphics object: In this case we need to check the TextFormatFlags to determine whether
                we need to re-apply some of the Graphics properties to the WindowsGraphics, if so we call
                WindowsGraphics.FromGraphics passing the corresponding flags. If not, we treat it as a custom
                IDeviceContext (see below).
             2. It is a WindowsGraphics object:
                In this case we just need to use the wg directly and be careful not to dispose of it since
                it is owned by the caller.
             3. It is a custom IDeviceContext object:
                In this case we create the WindowsGraphics from the native DC by calling IDeviceContext.GetHdc,
                on dispose we need to call IDeviceContext.ReleaseHdc.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.GiveFeedbackEventArgs">
            <summary>
             Provides data for the <see cref='E:System.Windows.Forms.Control.GiveFeedback'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GiveFeedbackEventArgs.#ctor(System.Windows.Forms.DragDropEffects,System.Boolean)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.GiveFeedbackEventArgs'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GiveFeedbackEventArgs.Effect">
            <summary>
             Gets the type of drag-and-drop operation.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors">
            <summary>
             Gets or sets a value indicating whether a default pointer is used.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.GiveFeedbackEventHandler">
            <summary>
             Represents a method that handles the <see cref='E:System.Windows.Forms.Control.GiveFeedback'/>
             event of a <see cref='T:System.Windows.Forms.Control'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.GridItem">
            <summary>
             Representaion of one row item in the PropertyGrid. These items represent the
             hierarchy of the grid's "tree-like" view and can be used to get information about
             the grid's state and contents.
             These objects should not be cached because they represent a snapshot of the
             PropertyGrid's state and may be disposed by grid activity. The PropertyGrid often
             recretates these objects internally even if it doesn't appear to change to the user.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GridItem.GridItems">
            <summary>
             Retrieves the child GridItems, if any, of this GridItem
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GridItem.GridItemType">
            <summary>
             Retrieves type of this GridItem, as a value from System.Windows.Forms.GridItemType
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GridItem.Label">
            <summary>
             Retrieves the text label of this GridItem. This may be different from the actual
             PropertyName. For GridItemType.Property GridItems, retrieve the PropertyDescriptor
             and check its Name property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GridItem.Parent">
            <summary>
             Retrieves parent GridItem of this GridItem, if any.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GridItem.PropertyDescriptor">
            <summary>
             If this item is a GridItemType.Property GridItem, this retreives the
             System.ComponentModel.PropertyDescriptor that is associated with this GridItem.
             This can be used to retrieve infomration such as property Type, Name, or
             TypeConverter.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GridItem.Value">
            <summary>
             Retrieves the current Value of this grid Item. This may be null.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GridItem.Expandable">
            <summary>
             Retreives whether the given property is expandable.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GridItem.Expanded">
            <summary>
             Retreives or sets whether the GridItem is in an expanded state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GridItem.Select">
            <summary>
             Attempts to select this GridItem in the PropertyGrid.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.GridItemCollection">
            <summary>
             A read-only collection of GridItem objects
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GridItemCollection.Count">
            <summary>
             Retrieves the number of member attributes.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GridItemCollection.Item(System.Int32)">
            <summary>
             Retrieves the member attribute with the specified index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GridItemCollection.GetEnumerator">
            <summary>
             Creates and retrieves a new enumerator for this collection.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.GroupBox">
            <summary>
             Encapsulates
             a standard Windows(r) group
             box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GroupBox.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.GroupBox'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GroupBox.AllowDrop">
            <summary>
             Gets or sets a value indicating whether the control will allow drag and
             drop operations and events to be used.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GroupBox.AutoSize">
            <summary>
             Override to re-expose AutoSize.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GroupBox.AutoSizeMode">
            <summary>
             Allows the control to optionally shrink when AutoSize is true.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GroupBox.DefaultPadding">
            <summary>
             Set the default Padding to 3 so that it is consistent with Everett
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GroupBox.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GroupBox.DisplayRectangle">
            <summary>
             Gets a rectangle that represents the
             dimensions of the <see cref='T:System.Windows.Forms.GroupBox'/>
             .
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GroupBox.TabStop">
            <summary>
             Gets or sets a value indicating whether the user may
             press the TAB key to give the focus to the <see cref='T:System.Windows.Forms.GroupBox'/>
             .
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GroupBox.UseCompatibleTextRendering">
            <summary>
             Determines whether to use compatible text rendering engine (GDI+) or not (GDI).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GroupBox.SupportsUseCompatibleTextRendering">
            <summary>
             Determines whether the control supports rendering text using GDI+ and GDI.
             This is provided for container controls to iterate through its children to set UseCompatibleTextRendering to the same
             value if the child control supports it.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.GroupBox.Click">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.GroupBox.MouseClick">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.GroupBox.DoubleClick">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.GroupBox.MouseDoubleClick">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.GroupBox.KeyUp">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.GroupBox.KeyDown">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.GroupBox.KeyPress">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.GroupBox.MouseDown">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.GroupBox.MouseUp">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.GroupBox.MouseMove">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.GroupBox.MouseEnter">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.GroupBox.MouseLeave">
            <hideinheritance/>
        </member>
        <member name="M:System.Windows.Forms.GroupBox.ProcessMnemonic(System.Char)">
            <summary>
             We use this to process mnemonics and send them on to the first child
             control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GroupBox.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GroupBox.WmEraseBkgnd(System.Windows.Forms.Message@)">
            <summary>
             The Windows group box doesn't erase the background so we do it
             ourselves here.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.GroupBoxRenderer">
            <summary>
             This is a rendering class for the GroupBox control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.GroupBoxRenderer.RenderMatchingApplicationState">
            <summary>
             If this property is true, then the renderer will use the setting from Application.RenderWithVisualStyles to
             determine how to render.
             If this property is false, the renderer will always render with visualstyles.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GroupBoxRenderer.IsBackgroundPartiallyTransparent(System.Windows.Forms.VisualStyles.GroupBoxState)">
            <summary>
             Returns true if the background corresponding to the given state is partially transparent, else false.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GroupBoxRenderer.DrawParentBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.Control)">
            <summary>
             This is just a convenience wrapper for VisualStyleRenderer.DrawThemeParentBackground. For downlevel,
             this isn't required and does nothing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GroupBoxRenderer.DrawGroupBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.GroupBoxState)">
            <summary>
             Renders a GroupBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GroupBoxRenderer.DrawGroupBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Windows.Forms.VisualStyles.GroupBoxState)">
            <summary>
             Renders a GroupBox control. Uses the text color specified by the theme.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GroupBoxRenderer.DrawGroupBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Drawing.Color,System.Windows.Forms.VisualStyles.GroupBoxState)">
            <summary>
             Renders a GroupBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GroupBoxRenderer.DrawGroupBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Windows.Forms.TextFormatFlags,System.Windows.Forms.VisualStyles.GroupBoxState)">
            <summary>
             Renders a GroupBox control. Uses the text color specified by the theme.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GroupBoxRenderer.DrawGroupBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Drawing.Color,System.Windows.Forms.TextFormatFlags,System.Windows.Forms.VisualStyles.GroupBoxState)">
            <summary>
             Renders a GroupBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GroupBoxRenderer.DrawThemedGroupBoxNoText(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.GroupBoxState)">
            <summary>
             Draws a themed GroupBox with no text label.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GroupBoxRenderer.DrawThemedGroupBoxWithText(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Drawing.Color,System.Windows.Forms.TextFormatFlags,System.Windows.Forms.VisualStyles.GroupBoxState)">
            <summary>
             Draws a themed GroupBox with a text label.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GroupBoxRenderer.DrawUnthemedGroupBoxNoText(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.GroupBoxState)">
            <summary>
             Draws an un-themed GroupBox with no text label.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.GroupBoxRenderer.DrawUnthemedGroupBoxWithText(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Drawing.Color,System.Windows.Forms.TextFormatFlags,System.Windows.Forms.VisualStyles.GroupBoxState)">
            <summary>
             Draws an un-themed GroupBox with a text label.
             Variation of the logic in GroupBox.DrawGroupBox().
            </summary>
        </member>
        <member name="P:System.Windows.Forms.HandledMouseEventArgs.Handled">
            <summary>
             Gets or sets a value indicating whether the event is handled.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Help">
            <summary>
             Represents the HTML 1.0 Help engine.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Help.ShowHelp(System.Windows.Forms.Control,System.String)">
            <summary>
             Displays
             the contents of the Help file at located at a specified Url.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Help.ShowHelp(System.Windows.Forms.Control,System.String,System.Windows.Forms.HelpNavigator)">
            <summary>
             Displays the contents of
             the Help
             file for a specific topic found at the specified Url.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Help.ShowHelp(System.Windows.Forms.Control,System.String,System.String)">
            <summary>
             Displays the contents of
             the Help
             file for a specific topic found at the specified Url.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Help.ShowHelp(System.Windows.Forms.Control,System.String,System.Windows.Forms.HelpNavigator,System.Object)">
            <summary>
             Displays the contents of the Help file located at
             the Url
             supplied by the
             user.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Help.ShowHelpIndex(System.Windows.Forms.Control,System.String)">
            <summary>
             Displays the index of the specified file.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Help.ShowPopup(System.Windows.Forms.Control,System.String,System.Drawing.Point)">
            <summary>
             Displays a Help pop-up window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Help.ShowHTML10Help(System.Windows.Forms.Control,System.String,System.Windows.Forms.HelpNavigator,System.Object)">
            <summary>
             Displays HTML 1.0 Help with the specified parameters
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Help.ShowHTMLFile(System.Windows.Forms.Control,System.String,System.Windows.Forms.HelpNavigator,System.Object)">
            <summary>
             Displays HTMLFile with the specified parameters
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Help.MapCommandToHTMLCommand(System.Windows.Forms.HelpNavigator,System.String,System.Object@)">
            <summary>
             Maps one of the COMMAND_* constants to the HTML 1.0 Help equivalent.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.HelpEventArgs">
            <summary>
             Provides data for the Control.HelpRequest event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HelpEventArgs.#ctor(System.Drawing.Point)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.HelpEventArgs'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.HelpEventArgs.MousePos">
            <summary>
             Gets the screen coordinates of the mouse pointer.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.HelpEventArgs.Handled">
            <summary>
             Gets or sets a value indicating whether the Help event was handled.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.HelpEventHandler">
            <summary>
             Represents a method that will handle the <see cref="E:System.Windows.Forms.Control.HelpRequested"/> event of a <see cref="T:System.Windows.Forms.Control"/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.HelpNavigator">
            <summary>
             Represents the HTML 1.0 Help engine.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.HelpNavigator.Topic">
            <summary>
             Displays the topic referenced by the topic referenced by the specified
             Url. This field is constant.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.HelpNavigator.TableOfContents">
            <summary>
             Displays the contents of the HTML 1.0 Help file. This field is constant.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.HelpNavigator.Index">
            <summary>
             Displays the index of a specified Url. This field is constant.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.HelpNavigator.Find">
            <summary>
             Displays the search page of a specified Url. This field is constant.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.HelpNavigator.AssociateIndex">
            <summary>
             Displays the topic referenced by the topic referenced by the specified
             Url. This field is constant.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.HelpNavigator.KeywordIndex">
            <summary>
             Displays the topic referenced by the topic referenced by the specified
             Url. This field is constant.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.HelpNavigator.TopicId">
            <summary>
             Displays the topic referenced by the topic ID This field is constant.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.HelpProvider">
            <summary>
             Provides pop-up or online Help for controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HelpProvider.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.HelpProvider'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.HelpProvider.HelpNamespace">
            <summary>
             Gets or sets a string indicating the name of the Help file associated with this
            <see cref='T:System.Windows.Forms.HelpProvider'/> object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HelpProvider.CanExtend(System.Object)">
            <summary>
             Determines if the help provider can offer it's extender properties to the specified target
             object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HelpProvider.GetHelpKeyword(System.Windows.Forms.Control)">
            <summary>
             Retrieves the Help Keyword displayed when the user invokes Help for the specified control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HelpProvider.GetHelpNavigator(System.Windows.Forms.Control)">
            <summary>
             Retrieves the contents of the pop-up help window for the specified control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HelpProvider.GetHelpString(System.Windows.Forms.Control)">
            <summary>
             Retrieves the contents of the pop-up help window for the specified control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HelpProvider.GetShowHelp(System.Windows.Forms.Control)">
            <summary>
             Retrieves a value indicating whether Help displays for the specified control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HelpProvider.OnControlHelp(System.Object,System.Windows.Forms.HelpEventArgs)">
            <summary>
             Handles the help event for any bound controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HelpProvider.OnQueryAccessibilityHelp(System.Object,System.Windows.Forms.QueryAccessibilityHelpEventArgs)">
            <summary>
             Handles the help event for any bound controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HelpProvider.SetHelpString(System.Windows.Forms.Control,System.String)">
            <summary>
             Specifies a Help string associated with a control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HelpProvider.SetHelpKeyword(System.Windows.Forms.Control,System.String)">
            <summary>
             Specifies the Help keyword to display when the user invokes Help for a control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HelpProvider.SetHelpNavigator(System.Windows.Forms.Control,System.Windows.Forms.HelpNavigator)">
            <summary>
             Specifies the Help keyword to display when the user invokes Help for a control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HelpProvider.SetShowHelp(System.Windows.Forms.Control,System.Boolean)">
            <summary>
             Specifies whether Help is displayed for a given control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HelpProvider.ShouldSerializeShowHelp(System.Windows.Forms.Control)">
            <summary>
             Used by the designer
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HelpProvider.ResetShowHelp(System.Windows.Forms.Control)">
            <summary>
             Used by the designer
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HelpProvider.UpdateEventBinding(System.Windows.Forms.Control)">
            <summary>
             Binds/unbinds event handlers to ctl
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HelpProvider.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.HorizontalAlignment">
            <summary>
             Specifies how an object or text in a control is horizontally aligned
             relative to an element of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.HorizontalAlignment.Left">
            <summary>
             The object or text is aligned on the left of the control element.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.HorizontalAlignment.Right">
            <summary>
             The object or text is aligned on the right of the control element.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.HorizontalAlignment.Center">
            <summary>
             The object or text is aligned in the center of the control element.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.HScrollBar">
            <summary>
             Represents a standard Windows horizontal scroll bar.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.HScrollProperties">
            <summary>
             Basic Properties for HScroll.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlDocument.ExecCommand(System.String,System.Boolean,System.Object)">
            <summary>
             Executes a command on the document
            </summary>
        </member>
        <member name="E:System.Windows.Forms.HtmlDocument.MouseLeave">
            <summary>
             Occurs when the mouse leaves the document
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlDocument.ArrayToVARIANTVector(System.Object[])">
            <summary>
             Convert a object[] into an array of VARIANT, allocated with CoTask allocators.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlDocument.FreeVARIANTVector(System.IntPtr,System.Int32)">
            <summary>
             Free a Variant array created with the above function
            </summary>
        </member>
        <member name="T:System.Windows.Forms.HtmlDocument.HtmlDocumentShim">
            <summary>
              HtmlDocumentShim - this is the glue between the DOM eventing mechanisms
                      and our CLR callbacks.
            
              There are two kinds of events: HTMLWindowEvents2 and IHtmlWindow3.AttachHandler style
              HTMLDocumentEvents2: we create an IConnectionPoint (via ConnectionPointCookie) between us and MSHTML and it calls back
                          on our an instance of HTMLDocumentEvents2.  The HTMLDocumentEvents2 class then fires the event.
            
              IHTMLDocument3.AttachHandler: MSHML calls back on an HtmlToClrEventProxy that we've created, looking
                                   for a method named DISPID=0.  For each event that's subscribed, we create
                                   a new HtmlToClrEventProxy, detect the callback and fire the corresponding
                                   CLR event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlDocument.HtmlDocumentShim.AttachEventHandler(System.String,System.EventHandler)">
             Support IHtmlDocument3.AttachHandler
        </member>
        <member name="M:System.Windows.Forms.HtmlDocument.HtmlDocumentShim.DetachEventHandler(System.String,System.EventHandler)">
             Support IHtmlDocument3.DetachHandler
        </member>
        <member name="E:System.Windows.Forms.HtmlElement.MouseEnter">
            <summary>
             Fires when the mouse enters the element
            </summary>
        </member>
        <member name="E:System.Windows.Forms.HtmlElement.MouseLeave">
            <summary>
             Fires when the mouse leaves the element
            </summary>
        </member>
        <member name="T:System.Windows.Forms.HtmlElement.HtmlElementShim">
            <summary>
              HtmlElementShim - this is the glue between the DOM eventing mechanisms
                      and our CLR callbacks.
            
              HTMLElementEvents2: we create an IConnectionPoint (via ConnectionPointCookie) between us and MSHTML and it calls back
                          on our an instance of HTMLElementEvents2.  The HTMLElementEvents2 class then fires the event.
            
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlElement.HtmlElementShim.AttachEventHandler(System.String,System.EventHandler)">
             Support IHTMLElement2.AttachEventHandler
        </member>
        <member name="M:System.Windows.Forms.HtmlElement.HtmlElementShim.DetachEventHandler(System.String,System.EventHandler)">
             Support IHTMLElement2.DetachHandler
        </member>
        <member name="P:System.Windows.Forms.HtmlElementCollection.Count">
            <summary>
             Returns the total number of elements in the collection.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.HtmlElementErrorEventArgs">
            <summary>
             EventArgs for onerror event of HtmlElement
            </summary>
        </member>
        <member name="P:System.Windows.Forms.HtmlElementErrorEventArgs.Description">
            <summary>
             Description of error
            </summary>
        </member>
        <member name="P:System.Windows.Forms.HtmlElementErrorEventArgs.Handled">
            <summary>
             Gets or sets a value indicating whether the <see cref='E:System.Windows.Forms.HtmlWindow.Error'/>
             event was handled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.HtmlElementErrorEventArgs.LineNumber">
            <summary>
             Line number where error occurred
            </summary>
        </member>
        <member name="P:System.Windows.Forms.HtmlElementErrorEventArgs.Url">
            <summary>
             Url where error occurred
            </summary>
        </member>
        <member name="T:System.Windows.Forms.HtmlElementErrorEventHandler">
            <summary>
             EventHandler for HtmlElementErrorEventArgs
            </summary>
        </member>
        <member name="P:System.Windows.Forms.HtmlElementEventArgs.AltKeyPressed">
            <summary>
             Indicates whether the Alt key was pressed, if this information is
             provided to the IHtmlEventObj
            </summary>
        </member>
        <member name="P:System.Windows.Forms.HtmlElementEventArgs.CtrlKeyPressed">
            <summary>
             Indicates whether the Ctrl key was pressed, if this information is
             provided to the IHtmlEventObj
            </summary>
        </member>
        <member name="P:System.Windows.Forms.HtmlElementEventArgs.ShiftKeyPressed">
            <summary>
             Indicates whether the Shift key was pressed, if this information is
             provided to the IHtmlEventObj
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlHistory.Go(System.Uri)">
            <summary>
             Go to a specific Uri in the history
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlHistory.Go(System.String)">
            <summary>
             Go to a specific url(string) in the history
            </summary>
             Note: We intentionally have a string overload (apparently Mort wants one).  We don't have
             string overloads call Uri overloads because that breaks Uris that aren't fully qualified
             (things like "www.microsoft.com") that the underlying objects support and we don't want to
             break.
        </member>
        <member name="M:System.Windows.Forms.HtmlHistory.Go(System.Int32)">
            <summary>
             Go to the specified position in the history list
            </summary>
        </member>
        <member name="T:System.Windows.Forms.HtmlShim">
             This is essentially a proxy object between the native
             html objects and our managed ones.  We want the managed
             HtmlDocument, HtmlWindow and HtmlElement to be super-lightweight,
             which means that we shouldnt have things that tie up their lifetimes
             contained within them.  The "Shim" is essentially the object that
             manages events coming out of the HtmlDocument, HtmlElement and HtmlWindow
             and serves them back up to the user.
        </member>
        <member name="M:System.Windows.Forms.HtmlShim.AttachEventHandler(System.String,System.EventHandler)">
             Support IHtml*3.AttachHandler
        </member>
        <member name="M:System.Windows.Forms.HtmlShim.ConnectToEvents">
             create connectionpoint cookie
        </member>
        <member name="M:System.Windows.Forms.HtmlShim.DetachEventHandler(System.String,System.EventHandler)">
             Support IHtml*3.DetachEventHandler
        </member>
        <member name="M:System.Windows.Forms.HtmlShim.DisconnectFromEvents">
             disconnect from connectionpoint cookie
             inheriting classes should override to disconnect from ConnectionPoint and call base.
        </member>
        <member name="M:System.Windows.Forms.HtmlShim.GetEventSender">
             return the sender for events, usually the HtmlWindow, HtmlElement, HtmlDocument
        </member>
        <member name="T:System.Windows.Forms.HtmlShimManager">
             <summary>
              HtmlShimManager - this class manages the shims for HtmlWindows, HtmlDocuments, and HtmlElements.
              essentially we need a long-lasting object to call back on events from the web browser, and the
              manager is the one in charge of making sure this list stays around as long as needed.
            
              When a HtmlWindow unloads we prune our list of corresponding document, window, and element shims.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlShimManager.AddDocumentShim(System.Windows.Forms.HtmlDocument)">
             <summary> AddDocumentShim - adds a HtmlDocumentShim to list of shims to manage
              Can create a WindowShim as a side effect so it knows when to self prune from the list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlShimManager.AddWindowShim(System.Windows.Forms.HtmlWindow)">
             <summary> AddWindowShim - adds a HtmlWindowShim to list of shims to manage
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlShimManager.AddElementShim(System.Windows.Forms.HtmlElement)">
             <summary> AddElementShim - adds a HtmlDocumentShim to list of shims to manage
              Can create a WindowShim as a side effect so it knows when to self prune from the list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlShimManager.OnWindowUnloaded(System.Windows.Forms.HtmlWindow)">
            <summary>
             HtmlWindowShim calls back on us when it has unloaded the page.  At this point we need to
             walk through our lists and make sure we've cleaned up
            </summary>
        </member>
        <member name="T:System.Windows.Forms.HtmlToClrEventProxy">
            <summary>
             This class is here for IHTML*3.AttachHandler style eventing.
             We need a way of routing requests for DISPID(0) to a particular CLR event without creating
             a public class.  In order to accomplish this we implement IReflect and handle InvokeMethod
             to call back on a CLR event handler.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.HtmlWindow.Name">
            <summary>
             Name of the NativeHtmlWindow
            </summary>
        </member>
        <member name="P:System.Windows.Forms.HtmlWindow.Size">
            <summary>
             Gets or sets size for the window
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Int32,System.Int32)">
            <summary>
             Moves the Window to the position requested
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Drawing.Point)">
            <summary>
             Moves the Window to the point requested
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlWindow.Navigate(System.String)">
             Note: We intentionally have a string overload (apparently Mort wants one).  We don't have
             string overloads call Uri overloads because that breaks Uris that aren't fully qualified
             (things like "www.microsoft.com") that the underlying objects support and we don't want to
             break.
        </member>
        <member name="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)">
             Note: We intentionally have a string overload (apparently Mort wants one).  We don't have
             string overloads call Uri overloads because that breaks Uris that aren't fully qualified
             (things like "www.microsoft.com") that the underlying objects support and we don't want to
             break.
        </member>
        <member name="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)">
             Note: We intentionally have a string overload (apparently Mort wants one).  We don't have
             string overloads call Uri overloads because that breaks Uris that aren't fully qualified
             (things like "www.microsoft.com") that the underlying objects support and we don't want to
             break.
        </member>
        <member name="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Int32,System.Int32)">
            <summary>
             Resize the window to the width/height requested
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Drawing.Size)">
            <summary>
             Resize the window to the Size requested
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Int32,System.Int32)">
            <summary>
             Scroll the window to the position requested
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Drawing.Point)">
            <summary>
             Scroll the window to the point requested
            </summary>
        </member>
        <member name="T:System.Windows.Forms.HtmlWindow.HtmlWindowShim">
            <summary>
              HtmlWindowShim - this is the glue between the DOM eventing mechanisms
                    and our CLR callbacks.
            
              There are two kinds of events: HTMLWindowEvents2 and IHtmlWindow3.AttachHandler style
              HTMLWindowEvents2: we create an IConnectionPoint (via ConnectionPointCookie) between us and MSHTML and it calls back
                          on an instance of HTMLWindowEvents2.  The HTMLWindowEvents2 class then fires the event.
            
              IHTMLWindow3.AttachHandler: MSHML calls back on an HtmlToClrEventProxy that we've created, looking
                                   for a method named DISPID=0.  For each event that's subscribed, we create
                                   a new HtmlToClrEventProxy, detect the callback and fire the corresponding
                                   CLR event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.HtmlWindow.HtmlWindowShim.AttachEventHandler(System.String,System.EventHandler)">
             Support IHtmlDocument3.AttachHandler
        </member>
        <member name="M:System.Windows.Forms.HtmlWindow.HtmlWindowShim.ConnectToEvents">
             Support HTMLWindowEvents2
        </member>
        <member name="M:System.Windows.Forms.HtmlWindow.HtmlWindowShim.DetachEventHandler(System.String,System.EventHandler)">
             Support IHTMLWindow3.DetachHandler
        </member>
        <member name="P:System.Windows.Forms.HtmlWindowCollection.Count">
            <summary>
             Returns the total number of elements in the collection.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.IButtonControl">
            <summary>
             Allows a control to act like a button on a form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.IButtonControl.DialogResult">
            <summary>
             Gets and sets the dialog result of the Button control. This is used as the result
             for the dialog on which the button is set to be an "accept" or "cancel" button.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IButtonControl.NotifyDefault(System.Boolean)">
            <summary>
             Notifies a control that it is the default button so that its appearance and behavior
             is adjusted accordingly.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IButtonControl.PerformClick">
            <summary>
             Generates a <see cref='E:System.Windows.Forms.Control.Click'/> event for the control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.IComponentEditorPageSite">
            <summary>
             The site for a ComponentEditorPage.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IComponentEditorPageSite.GetControl">
            <summary>
             Returns the parent control for the page window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IComponentEditorPageSite.SetDirty">
            <summary>
             Notifies the site that the editor is in dirty state.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.IContainerControl">
            <summary>
             Provides functionality for a control to parent other controls.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.IContainerControl.ActiveControl">
            <summary>
             Indicates the control that is currently active on the container control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IContainerControl.ActivateControl(System.Windows.Forms.Control)">
            <summary>
             Activates the specified control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ICurrencyManagerProvider.CurrencyManager">
            <summary>
             Return the main currency manager for this data source.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ICurrencyManagerProvider.GetRelatedCurrencyManager(System.String)">
            <summary>
             Return a related currency manager for specified data member on this data source.
             If data member is null or empty, this method returns the data source's main currency
             manager (ie. this method returns the same value as the CurrencyManager property).
            </summary>
        </member>
        <member name="T:System.Windows.Forms.IDataObject">
            <summary>
             Provides a format-independent mechanism for transferring data.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)">
            <summary>
             Retrieves the data associated with the specified data format, using
             autoConvert to determine whether to convert the data to the  format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IDataObject.GetData(System.String)">
            <summary>
             Retrieves the data associated with the specified data format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IDataObject.GetData(System.Type)">
            <summary>
             Retrieves the data associated with the specified class type format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)">
            <summary>
             Stores the specified data and its associated format in  this instance,
             using autoConvert to specify whether the data can be converted to
             another format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)">
            <summary>
             Stores the specified data and its associated format in this instance.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)">
            <summary>
             Stores the specified data and its associated class type in this
             instance.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IDataObject.SetData(System.Object)">
            <summary>
             Stores the specified data in this instance, using the class of the
             data for the format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)">
            <summary>
             Determines whether data stored in this instance is  associated with the
             specified format, using autoConvert to determine whether to convert the
             data to the format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)">
            <summary>
             Determines whether data stored in this instance is associated with, or
             can be converted to, the specified format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)">
            <summary>
             Determines whether data stored in this instance is associated with, or
             can be converted to, the specified format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)">
            <summary>
             Gets a list of all formats that data stored in this instance is
             associated with or can be converted to, using autoConvert to determine
             whether to retrieve all formats that the data can be converted to or'
             only native data formats.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IDataObject.GetFormats">
            <summary>
             Gets a list of all formats that data stored in this instance is
             associated with or can be converted to.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.IFeatureSupport">
            <summary>
             Specifies a standard interface for retrieving feature information from the current system.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IFeatureSupport.IsPresent(System.Object)">
            <summary>
             Determines whether any version of the specified feature is currently available
             on the system.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IFeatureSupport.IsPresent(System.Object,System.Version)">
            <summary>
             Determines whether the specified or newer version of the specified feature
             is currently available on the system.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IFeatureSupport.GetVersionPresent(System.Object)">
            <summary>
             Retrieves the version of the specified feature.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IKeyboardToolTip.CanShowToolTipsNow">
            <summary>
             Returns true if a keyboard ToolTip can be shown for the tool or its
             descendants at this moment.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IKeyboardToolTip.GetNativeScreenRectangle">
            <summary>
             Returns the tool's native screen rectangle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IKeyboardToolTip.GetNeighboringToolsRectangles">
            <summary>
             Returns a list of neighboring tools' native screen rectangles.
             They are used to minimize the intersection between them and a keyboard ToolTip.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IKeyboardToolTip.IsHoveredWithMouse">
            <summary>
             Returns true if the tool is being hovered by a mouse pointer.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IKeyboardToolTip.HasRtlModeEnabled">
            <summary>
             Returns true if the tool has the Right-To-Left mode enabled
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IKeyboardToolTip.AllowsToolTip">
            <summary>
             Returns true if a keyboard ToolTip is allowed for this tool.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IKeyboardToolTip.GetOwnerWindow">
            <summary>
             Returns the tool owner's native window.
             The tool can return its own native window if it exists.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IKeyboardToolTip.OnHooked(System.Windows.Forms.ToolTip)">
            <summary>
             Notifies this tool that it was hooked to a keyboard ToolTip
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IKeyboardToolTip.OnUnhooked(System.Windows.Forms.ToolTip)">
            <summary>
             Notifies this tool that it was unhooked from a keyboard ToolTip
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IKeyboardToolTip.GetCaptionForTool(System.Windows.Forms.ToolTip)">
            <summary>
             Returns a caption set for this tool by the provided ToolTip
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IKeyboardToolTip.ShowsOwnToolTip">
            <summary>
             Returns false if this tool's own keyboard tooltip is not expected to be shown (e.g. it is just a container for other tools)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IKeyboardToolTip.IsBeingTabbedTo">
            <summary>
             Returns true when the tool is being tabbed to
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IKeyboardToolTip.AllowsChildrenToShowToolTips">
            <summary>
             Returns false if the tool disables keyboard tooltips for it's children
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ImageIndexConverter">
            <summary>
             ImageIndexConverter is a class that can be used to convert
             image index values one data type to another.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ImageIndexConverter.IncludeNoneAsStandardValue">
            <summary>
             Gets a value that indicates whether a <see langword="null" /> value is valid in
             the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> collection.
            </summary>
            <value>
             Always returns <see langword="true" /> to indicate that a <see langword="null" /> value
             isn't valid in the standard values collection.
            </value>
            <remarks>
             <c>none</c> is the display name that is used when standard values are presented
             in the control UI and corresponds to a <c>null</c> value.
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.ImageIndexConverter.ParentImageListProperty">
            <summary>
             this is the property to look at when there is no ImageList property
             on the current object.  For example, in ToolBarButton - the ImageList is
             on the ToolBarButton.Parent property.  In ToolStripItem, the ImageList is on
             the ToolStripItem.Owner property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageIndexConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
             Converts the given value object to a 32-bit signed integer object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageIndexConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type.  The most common types to convert
             are to and from a string object.  The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string.  If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageIndexConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Retrieves a collection containing a set of standard values for the data type this validator is designed for.
            </summary>
            <param name="context">
             An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context, which can be used to extract
             additional information about the environment this type converter is being invoked from. 
             This parameter or properties of this parameter can be <see langword="null" />.
            </param>
            <returns>
             A collection that holds a standard set of valid index values. 
             If no image list is found, this collection will contain a single object with a value of -1. 
             This returns <see langword="null" /> if the data type doesn't support a standard set of values.
            </returns>
        </member>
        <member name="M:System.Windows.Forms.ImageIndexConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if the list of standard values returned from
             GetStandardValues is an exclusive list.  If the list
             is exclusive, then no other values are valid, such as
             in an enum data type.  If the list is not exclusive,
             then there are other valid values besides the list of
             standard values GetStandardValues provides.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageIndexConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if this object supports a standard set of values
             that can be picked from a list.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ImageKeyConverter">
            <summary>
             ImageIndexConverter is a class that can be used to convert
             image index values one data type to another.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ImageKeyConverter.ParentImageListProperty">
            <summary>
             this is the property to look at when there is no ImageList property
             on the current object.  For example, in ToolBarButton - the ImageList is
             on the ToolBarButton.Parent property.  In ToolStripItem, the ImageList is on
             the ToolStripItem.Owner property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageKeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Gets a value indicating whether this converter can convert an object in the
             given source type to a string using the specified context.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageKeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
             Converts the specified value object to a string object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageKeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type.  The most common types to convert
             are to and from a string object.  The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string.  If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageKeyConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Retrieves a collection containing a set of standard values
             for the data type this validator is designed for.  This
             will return null if the data type does not support a
             standard set of values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageKeyConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if the list of standard values returned from
             GetStandardValues is an exclusive list.  If the list
             is exclusive, then no other values are valid, such as
             in an enum data type.  If the list is not exclusive,
             then there are other valid values besides the list of
             standard values GetStandardValues provides.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageKeyConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if this object supports a standard set of values
             that can be picked from a list.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ImageLayout">
            <summary>
             Specifies the position of the image on the control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImageLayout.None">
            <summary>
             The image is aligned TOP - LEFT across the controls client rectangle.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImageLayout.Tile">
            <summary>
             The image is tiled across the controls client rectangle.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImageLayout.Center">
            <summary>
             The image is centred within the controls client rectangle.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImageLayout.Stretch">
            <summary>
             The image is streched across the controls client rectangle.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImageLayout.Zoom">
            <summary>
             The image is streched across the controls client rectangle.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ImageList">
            <summary>
             The ImageList is an object that stores a collection of Images, most
             commonly used by other controls, such as the ListView, TreeView, or
             Toolbar.  You can add either bitmaps or Icons to the ImageList, and the
             other controls will be able to use the Images as they desire.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.#ctor">
            <summary>
             Creates a new ImageList Control with a default image size of 16x16
             pixels
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.#ctor(System.ComponentModel.IContainer)">
            <summary>
             Creates a new ImageList Control with a default image size of 16x16
             pixels and adds the ImageList to the passed in container.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ImageList.ColorDepth">
            <summary>
             Retrieves the color depth of the imagelist.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ImageList.Handle">
            <summary>
             The handle of the ImageList object.  This corresponds to a win32
             HIMAGELIST Handle.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ImageList.HandleCreated">
            <summary>
             Whether or not the underlying Win32 handle has been created.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ImageList.ImageSize">
            <summary>
             Returns the size of the images in the ImageList
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ImageList.ImageStream">
            <summary>
             Returns an ImageListStreamer, or null if the image list is empty.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ImageList.TransparentColor">
            <summary>
             The color to treat as transparent.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.AddToHandle(System.Drawing.Bitmap)">
            <summary>
             Add the given <paramref name="bitmap"/> to the <see cref="T:System.Windows.Forms.ImageList"/> handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.CreateHandle">
            <summary>
             Creates the underlying HIMAGELIST handle, and sets up all the
             appropriate values with it.  Inheriting classes overriding this method
             should not forget to call base.createHandle();
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.Dispose(System.Boolean)">
            <summary>
             Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.ImageList" />
             and optionally releases the managed resources.
            </summary>
            <param name="disposing">
             <see langword="true" /> to release both managed and unmanaged resources;
             <see langword="false" /> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:System.Windows.Forms.ImageList.Draw(System.Drawing.Graphics,System.Drawing.Point,System.Int32)">
            <summary>
             Draw the image indicated by the given index on the given Graphics
             at the given location.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.Draw(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32)">
            <summary>
             Draw the image indicated by the given index on the given Graphics
             at the given location.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.Draw(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Draw the image indicated by the given index using the location, size
             and raster op code specified.  The image is stretched or compressed as
             necessary to fit the bounds provided.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.GetBitmap(System.Int32)">
            <summary>
             Returns the image specified by the given index.  The bitmap returned is a
             copy of the original image.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.OnRecreateHandle(System.EventArgs)">
            <summary>
             Called when the Handle property changes.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImageList.ImageCollection.lastAccessedIndex">
             A caching mechanism for key accessor
             We use an index here rather than control so that we don't have lifetime
             issues by holding on to extra references.
        </member>
        <member name="P:System.Windows.Forms.ImageList.ImageCollection.Keys">
            <summary>
             Returns the keys in the image list - images without keys return String.Empty.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ImageList.ImageCollection.Empty">
            <summary>
             Determines if the ImageList has any images, without forcing a handle creation.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ImageList.ImageCollection.Item(System.String)">
            <summary>
             Retrieves the child control with the specified key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.ImageCollection.Add(System.String,System.Drawing.Image)">
            <summary>
             Adds an image to the end of the image list with a key accessor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.ImageCollection.Add(System.String,System.Drawing.Icon)">
            <summary>
             Adds an icon to the end of the image list with a key accessor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.ImageCollection.Add(System.Drawing.Image)">
            <summary>
             Add the given image to the ImageList.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.ImageCollection.Add(System.Drawing.Image,System.Drawing.Color)">
            <summary>
             Add the given image to the ImageList, using the given color
             to generate the mask. The number of images to add is inferred from
             the width of the given image.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.ImageCollection.AddStrip(System.Drawing.Image)">
            <summary>
             Add an image strip the given image to the ImageList.  A strip is a single Image
             which is treated as multiple images arranged side-by-side.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.ImageCollection.Clear">
            <summary>
             Remove all images and masks from the ImageList.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.ImageCollection.ContainsKey(System.String)">
            <summary>
             Returns true if the collection contains an item with the specified key, false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.ImageCollection.IndexOfKey(System.String)">
            <summary>
             The zero-based index of the first occurrence of value within the entire CollectionBase,
             if found; otherwise, -1.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.ImageCollection.IsValidIndex(System.Int32)">
            <summary>
             Determines if the index is valid for the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.ImageCollection.RemoveByKey(System.String)">
            <summary>
             Removes the child control with the specified key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageList.ImageCollection.SetKeyName(System.Int32,System.String)">
            <summary>
             Sets/Resets the key accessor for an image already in the image list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageListConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Gets a value indicating
             whether this object supports properties using the
             specified context.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageListStreamer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            Constructor used in deserialization
        </member>
        <member name="M:System.Windows.Forms.ImageListStreamer.Compress(System.Byte[])">
            <summary>
             Compresses the given input, returning a new array that represents
             the compressed data.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageListStreamer.Decompress(System.Byte[])">
            <summary>
             Decompresses the given input, returning a new array that represents
             the uncompressed data.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ImageListStreamer.Dispose">
            <summary>
             Disposes the native image list handle.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ImeMode">
            <summary>
             Specifies a value that determines the IME (Input Method Editor) status
             of the object when that object is selected.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImeMode.Inherit">
            <summary>
             Inherit (Default). This value indicates inherit the ImeMode from the
             parent control. For controls with no parent, the ImeMode will default
             to NoControl.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImeMode.NoControl">
            <summary>
             None. This value indicates "No control to IME". When the IMEMode
             property is set to 0, you can use the IMEStatus function to determine
             the current IME status.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImeMode.On">
            <summary>
             IME on. This value indicates that the IME is on and characters specific
             to Chinese or Japanese can be entered. This setting is valid for
             Japanese, Simplified Chinese, and Traditional Chinese IME only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImeMode.Off">
            <summary>
             IME off. This mode indicates that the IME is off, meaning that the
             object behaves the same as English entry mode. This setting is valid
             for Japanese, Simplified Chinese, and Traditional Chinese IME only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImeMode.Disable">
            <summary>
             IME disabled. This mode is similar to IMEMode = 2, except the value 3
             disables IME. With this setting, the users cannot turn the IME on from
             the keyboard, and the IME floating window is hidden. This setting is
             valid for Japanese IME only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImeMode.Hiragana">
            <summary>
             Hiragana double-byte characters (DBC). This setting is valid for
             Japanese IME only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImeMode.Katakana">
            <summary>
             Katakana DBC. This setting is valid for Japanese IME only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImeMode.KatakanaHalf">
            <summary>
             Katakana single-byte characters (SBC). This setting is valid for
             Japanese IME only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImeMode.AlphaFull">
            <summary>
             Alphanumeric DBC. This setting is valid for Japanese IME only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImeMode.Alpha">
            <summary>
             Alphanumeric SBC. This setting is valid for Japanese IME only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImeMode.HangulFull">
            <summary>
             Hangeul DBC. This setting is valid for Korean IME only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImeMode.Hangul">
            <summary>
             Hangeul SBC. This setting is valid for Korean IME only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImeMode.Close">
            <summary>
             Ime Closed. This setting is valid for Chinese IME only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ImeMode.OnHalf">
            <summary>
             Ime On HalfShape. This setting is valid for Chinese IME only.
             Note: This value is for internal use only - See QFE 4448.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.IMessageFilter">
            <summary>
             Defines a message filter interface.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
             Filters out a message before it is dispatched.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.InputLanguage">
            <summary>
             Provides methods and fields to manage the input language.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.InputLanguage._handle">
            <summary>
             The HKL handle.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.InputLanguage.Culture">
            <summary>
             Returns the culture of the current input language.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.InputLanguage.CurrentInputLanguage">
            <summary>
             Gets or sets the input language for the current thread.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.InputLanguage.DefaultInputLanguage">
            <summary>
             Returns the default input language for the system.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.InputLanguage.Handle">
            <summary>
             Returns the handle for the input language.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.InputLanguage.InstalledInputLanguages">
            <summary>
             Returns a list of all installed input languages.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.InputLanguage.LayoutName">
            <summary>
             Returns the name of the current keyboard layout as it appears in the Windows
             Regional Settings on the computer.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InputLanguage.GetLocalizedKeyboardLayoutName(System.String)">
            <summary>
             Attempts to extract the localized keyboard layout name using the SHLoadIndirectString API.
             Returning null from this method will force us to use the legacy codepath (pulling the text
             directly from the registry).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InputLanguage.CreateInputLanguageChangedEventArgs(System.Windows.Forms.Message)">
            <summary>
             Creates an InputLanguageChangedEventArgs given a windows message.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InputLanguage.CreateInputLanguageChangingEventArgs(System.Windows.Forms.Message)">
            <summary>
             Creates an InputLanguageChangingEventArgs given a windows message.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InputLanguage.Equals(System.Object)">
            <summary>
             Specifies whether two input languages are equal.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InputLanguage.FromCulture(System.Globalization.CultureInfo)">
            <summary>
             Returns the input language associated with the specified culture.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InputLanguage.GetHashCode">
            <summary>
             Hash code for this input language.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.InputLanguageChangedEventArgs">
            <summary>
             Provides data for the <see cref='E:System.Windows.Forms.Form.InputLanguageChanged'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InputLanguageChangedEventArgs.#ctor(System.Globalization.CultureInfo,System.Byte)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.InputLanguageChangedEventArgs'/> class with the
             specified locale and character set.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InputLanguageChangedEventArgs.#ctor(System.Windows.Forms.InputLanguage,System.Byte)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.InputLanguageChangedEventArgs'/> class with the specified input language and
             character set.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.InputLanguageChangedEventArgs.InputLanguage">
            <summary>
             Gets the input language.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.InputLanguageChangedEventArgs.Culture">
            <summary>
             Gets the locale of the input language.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.InputLanguageChangedEventArgs.CharSet">
            <summary>
             Gets the character set associated with the new input language.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.InputLanguageChangedEventHandler">
            <summary>
             Represents a method that will handle the <see cref='E:System.Windows.Forms.Form.InputLanguageChanged'/>
             event of a <see cref='T:System.Windows.Forms.Form'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.InputLanguageChangingEventArgs">
            <summary>
             Provides data for the <see cref='E:System.Windows.Forms.Form.InputLanguageChanging'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InputLanguageChangingEventArgs.#ctor(System.Globalization.CultureInfo,System.Boolean)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.InputLanguageChangingEventArgs'/> class with the
             specified locale, character set, and acceptance.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InputLanguageChangingEventArgs.#ctor(System.Windows.Forms.InputLanguage,System.Boolean)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.InputLanguageChangingEventArgs'/> class with the
             specified input language, character set, and acceptance of a language change.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.InputLanguageChangingEventArgs.InputLanguage">
            <summary>
             Gets the requested input language.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.InputLanguageChangingEventArgs.Culture">
            <summary>
             Gets the locale of the requested input language.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.InputLanguageChangingEventArgs.SysCharSet">
            <summary>
             Gets a value indicating whether the system default font supports the character set
             required for the requested input language.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.InputLanguageChangingEventHandler">
            <summary>
             Represents a method that will handle the <see cref='E:System.Windows.Forms.Form.InputLanguageChanging'/> event of a <see cref='T:System.Windows.Forms.Form'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.InputLanguageCollection">
            <summary>
             A collection that stores <see cref='T:System.Windows.Forms.InputLanguage'/> objects.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InputLanguageCollection.#ctor(System.Windows.Forms.InputLanguage[])">
            <summary>
             Initializes a new instance of <see cref='T:System.Windows.Forms.InputLanguageCollection'/> containing any array of <see cref='T:System.Windows.Forms.InputLanguage'/> objects.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.InputLanguageCollection.Item(System.Int32)">
            <summary>
             Represents the entry at the specified index of the <see cref='T:System.Windows.Forms.InputLanguage'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InputLanguageCollection.Contains(System.Windows.Forms.InputLanguage)">
            <summary>
             Gets a value indicating whether the
             <see cref='T:System.Windows.Forms.InputLanguageCollection'/> contains the specified <see cref='T:System.Windows.Forms.InputLanguage'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InputLanguageCollection.CopyTo(System.Windows.Forms.InputLanguage[],System.Int32)">
            <summary>
             Copies the <see cref='T:System.Windows.Forms.InputLanguageCollection'/> values to a one-dimensional <see cref='T:System.Array'/> instance at the
             specified index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InputLanguageCollection.IndexOf(System.Windows.Forms.InputLanguage)">
            <summary>
             Returns the index of a <see cref='T:System.Windows.Forms.InputLanguage'/> in
             the <see cref='T:System.Windows.Forms.InputLanguageCollection'/> .
            </summary>
        </member>
        <member name="T:System.Windows.Forms.InsertKeyMode">
            <summary>
             Represents the mode characters are entered in a text box.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.InsertKeyMode.Default">
            <summary>
             Honors the Insert key mode.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.InsertKeyMode.Insert">
            <summary>
             Forces insertion mode to be 'on' regardless of the Insert key mode.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.InsertKeyMode.Overwrite">
            <summary>
             Forces insertion mode to be 'off' regardless of the Insert key mode.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.InvalidateEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.InvalidateEventArgs.#ctor(System.Drawing.Rectangle)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.InvalidateEventArgs'/>
             class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.InvalidateEventArgs.InvalidRect">
            <summary>
             Gets a value indicating the <see cref='T:System.Drawing.Rectangle'/> that contains the
             invalidated window area.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.InvalidateEventHandler">
            <summary>
             Represents a method that will handle the <see cref='M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)'/>
             event of a <see cref='T:System.Windows.Forms.Control'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ItemActivation">
            <summary>
             Specifies how the user activates items and the appearance of items as the
             mouse cursor moves over them.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ItemActivation.Standard">
            <summary>
             Activate items with a double-click.
             Items do not change appearance.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ItemActivation.OneClick">
            <summary>
             Activate items with a single click. The cursor changes shape and the
             item text changes color.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ItemActivation.TwoClick">
            <summary>
             Activate items with a double click. The item text changes color.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ItemBoundsPortion">
            <summary>
             Specifies the display bounds of a ListItem.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ItemBoundsPortion.Entire">
            <summary>
             Both the icon and label portions. In Report View, this includes subitems.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ItemBoundsPortion.Icon">
            <summary>
             Only the icon portion.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ItemBoundsPortion.Label">
            <summary>
             Only the label portion.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ItemBoundsPortion.ItemOnly">
            <summary>
             Both the icon and label portions. In Report view, this <see cref='F:System.Windows.Forms.ItemBoundsPortion.Entire'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ItemCheckedEventArgs">
            <summary>
             Provides data for the <see cref='E:System.Windows.Forms.CheckedListBox.ItemCheck'/> event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ItemCheckedEventArgs.Item">
            <summary>
             The index of the item that is about to change.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ItemCheckedEventHandler">
            <summary>
             Represents a method that will handle the <c>ItemCheck</c>
             event of a <see cref='T:System.Windows.Forms.CheckedListBox'/> or <see cref='T:System.Windows.Forms.ListView'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ItemCheckEventArgs">
            <summary>
             Provides data for the <see cref='E:System.Windows.Forms.CheckedListBox.ItemCheck'/> event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ItemCheckEventArgs.Index">
            <summary>
             The index of the item that is about to change.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ItemCheckEventArgs.NewValue">
            <summary>
             The proposed new value of the CheckBox.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ItemCheckEventArgs.CurrentValue">
            <summary>
             The current state of the CheckBox.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ItemCheckEventHandler">
            <summary>
             Represents a method that will handle the <c>ItemCheck</c>
             event of a  <see cref='T:System.Windows.Forms.CheckedListBox'/> or <see cref='T:System.Windows.Forms.ListView'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ItemDragEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)'/> event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ItemDragEventHandler">
            <summary>
             Represents a method that will handle the <see cref='M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)'/>
             event of a  <see cref='T:System.Windows.Forms.ListView'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.IWin32Window.Handle">
            <summary>
             Gets the handle to the window represented by the implementor.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.IWindowTarget">
            <summary>
             This interface defines the communication layer between a Control object and the
             Win32 API. Each Control object has an internal implementation this interface that
             is called by the Win32 window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IWindowTarget.OnHandleChange(System.IntPtr)">
            <summary>
             Called when the window handle of the control has changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IWindowTarget.OnMessage(System.Windows.Forms.Message@)">
            <summary>
             Called to do control-specific processing for this window.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Windows.Forms.KeyboardToolTipStateMachine" -->
        <member name="T:System.Windows.Forms.KeyEventArgs">
            <summary>
             Provides data for the <see cref='E:System.Windows.Forms.Control.KeyDown'/> or
            <see cref='E:System.Windows.Forms.Control.KeyUp'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.KeyEventArgs.#ctor(System.Windows.Forms.Keys)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.KeyEventArgs'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.KeyEventArgs.Alt">
            <summary>
             Gets a value indicating whether the ALT key was pressed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.KeyEventArgs.Control">
            <summary>
             Gets a value indicating whether the CTRL key was pressed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.KeyEventArgs.Handled">
            <summary>
             Gets or sets a value indicating whether the event was handled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.KeyEventArgs.KeyCode">
            <summary>
             Gets the keyboard code for a <see cref='E:System.Windows.Forms.Control.KeyDown'/> or
            <see cref='E:System.Windows.Forms.Control.KeyUp'/> event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.KeyEventArgs.KeyValue">
            <summary>
             Gets the keyboard value for a <see cref='E:System.Windows.Forms.Control.KeyDown'/> or
            <see cref='E:System.Windows.Forms.Control.KeyUp'/> event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.KeyEventArgs.KeyData">
            <summary>
             Gets the key data for a <see cref='E:System.Windows.Forms.Control.KeyDown'/> or
            <see cref='E:System.Windows.Forms.Control.KeyUp'/> event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.KeyEventArgs.Modifiers">
            <summary>
             Gets the modifier flags for a <see cref='E:System.Windows.Forms.Control.KeyDown'/> or
            <see cref='E:System.Windows.Forms.Control.KeyUp'/> event.
             This indicates which modifier keys (CTRL, SHIFT, and/or ALT) were pressed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.KeyEventArgs.Shift">
            <summary>
             Gets a value indicating whether the SHIFT key was pressed.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.KeyEventHandler">
            <summary>
             Represents a method that will handle the <see cref='E:System.Windows.Forms.Control.KeyUp'/>
             or <see cref='E:System.Windows.Forms.Control.KeyDown'/> event of a
            <see cref='T:System.Windows.Forms.Control'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.KeyPressEventArgs">
            <summary>
             Provides data for the <see cref='E:System.Windows.Forms.Control.KeyPress'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.KeyPressEventArgs.#ctor(System.Char)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.KeyPressEventArgs'/>
             class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.KeyPressEventArgs.KeyChar">
            <summary>
             Gets the character corresponding to the key pressed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.KeyPressEventArgs.Handled">
            <summary>
             Gets or sets a value indicating whether the <see cref='E:System.Windows.Forms.Control.KeyPress'/>
             event was handled.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.KeyPressEventHandler">
            <summary>
             Represents a method that will handle the <see cref='E:System.Windows.Forms.Control.KeyPress'/>
             event of a <see cref='T:System.Windows.Forms.Control'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Keys">
            <summary>
             Specifies key codes and modifiers.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.KeyCode">
            <summary>
             The bit mask to extract a key code from a key value.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Modifiers">
            <summary>
             The bit mask to extract modifiers from a key value.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.None">
            <summary>
             No key pressed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.LButton">
            <summary>
             The left mouse button.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.RButton">
            <summary>
             The right mouse button.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Cancel">
            <summary>
             The CANCEL key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.MButton">
            <summary>
             The middle mouse button (three-button mouse).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.XButton1">
            <summary>
             The first x mouse button (five-button mouse).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.XButton2">
            <summary>
             The second x mouse button (five-button mouse).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Back">
            <summary>
             The BACKSPACE key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Tab">
            <summary>
             The TAB key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.LineFeed">
            <summary>
             The CLEAR key.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:System.Windows.Forms.Keys.Clear" -->
        <member name="F:System.Windows.Forms.Keys.Return">
            <summary>
             The RETURN key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Enter">
            <summary>
             The ENTER key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.ShiftKey">
            <summary>
             The SHIFT key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.ControlKey">
            <summary>
             The CTRL key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Menu">
            <summary>
             The ALT key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Pause">
            <summary>
             The PAUSE key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Capital">
            <summary>
             The CAPS LOCK key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.CapsLock">
            <summary>
             The CAPS LOCK key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.KanaMode">
            <summary>
             The IME Kana mode key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.HanguelMode">
            <summary>
             The IME Hanguel mode key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.HangulMode">
            <summary>
             The IME Hangul mode key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.JunjaMode">
            <summary>
             The IME Junja mode key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.FinalMode">
            <summary>
             The IME Final mode key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.HanjaMode">
            <summary>
             The IME Hanja mode key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.KanjiMode">
            <summary>
             The IME Kanji mode key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Escape">
            <summary>
             The ESC key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.IMEConvert">
            <summary>
             The IME Convert key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.IMENonconvert">
            <summary>
             The IME NonConvert key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.IMEAccept">
            <summary>
             The IME Accept key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.IMEAceept">
            <summary>
             The IME Accept key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.IMEModeChange">
            <summary>
             The IME Mode change request.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Space">
            <summary>
             The SPACEBAR key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Prior">
            <summary>
             The PAGE UP key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.PageUp">
            <summary>
             The PAGE UP key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Next">
            <summary>
             The PAGE DOWN key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.PageDown">
            <summary>
             The PAGE DOWN key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.End">
            <summary>
             The END key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Home">
            <summary>
             The HOME key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Left">
            <summary>
             The LEFT ARROW key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Up">
            <summary>
             The UP ARROW key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Right">
            <summary>
             The RIGHT ARROW key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Down">
            <summary>
             The DOWN ARROW key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Select">
            <summary>
             The SELECT key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Print">
            <summary>
             The PRINT key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Execute">
            <summary>
             The EXECUTE key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Snapshot">
            <summary>
             The PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.PrintScreen">
            <summary>
             The PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Insert">
            <summary>
             The INS key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Delete">
            <summary>
             The DEL key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Help">
            <summary>
             The HELP key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.D0">
            <summary>
             The 0 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.D1">
            <summary>
             The 1 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.D2">
            <summary>
             The 2 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.D3">
            <summary>
             The 3 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.D4">
            <summary>
             The 4 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.D5">
            <summary>
             The 5 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.D6">
            <summary>
             The 6 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.D7">
            <summary>
             The 7 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.D8">
            <summary>
             The 8 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.D9">
            <summary>
             The 9 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.A">
            <summary>
             The A key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.B">
            <summary>
             The B key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.C">
            <summary>
             The C key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.D">
            <summary>
             The D key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.E">
            <summary>
             The E key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F">
            <summary>
             The F key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.G">
            <summary>
             The G key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.H">
            <summary>
             The H key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.I">
            <summary>
             The I key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.J">
            <summary>
             The J key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.K">
            <summary>
             The K key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.L">
            <summary>
             The L key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.M">
            <summary>
             The M key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.N">
            <summary>
             The N key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.O">
            <summary>
             The O key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.P">
            <summary>
             The P key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Q">
            <summary>
             The Q key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.R">
            <summary>
             The R key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.S">
            <summary>
             The S key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.T">
            <summary>
             The T key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.U">
            <summary>
             The U key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.V">
            <summary>
             The V key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.W">
            <summary>
             The W key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.X">
            <summary>
             The X key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Y">
            <summary>
             The Y key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Z">
            <summary>
             The Z key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.LWin">
            <summary>
             The left Windows logo key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.RWin">
            <summary>
             The right Windows logo key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Apps">
            <summary>
             The Application key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Sleep">
            <summary>
             The Computer Sleep key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.NumPad0">
            <summary>
             The 0 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.NumPad1">
            <summary>
             The 1 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.NumPad2">
            <summary>
             The 2 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.NumPad3">
            <summary>
             The 3 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.NumPad4">
            <summary>
             The 4 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.NumPad5">
            <summary>
             The 5 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.NumPad6">
            <summary>
             The 6 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.NumPad7">
            <summary>
             The 7 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.NumPad8">
            <summary>
             The 8 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.NumPad9">
            <summary>
             The 9 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Multiply">
            <summary>
             The Multiply key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Add">
            <summary>
             The Add key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Separator">
            <summary>
             The Separator key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Subtract">
            <summary>
             The Subtract key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Decimal">
            <summary>
             The Decimal key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Divide">
            <summary>
             The Divide key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F1">
            <summary>
             The F1 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F2">
            <summary>
             The F2 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F3">
            <summary>
             The F3 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F4">
            <summary>
             The F4 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F5">
            <summary>
             The F5 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F6">
            <summary>
             The F6 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F7">
            <summary>
             The F7 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F8">
            <summary>
             The F8 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F9">
            <summary>
             The F9 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F10">
            <summary>
             The F10 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F11">
            <summary>
             The F11 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F12">
            <summary>
             The F12 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F13">
            <summary>
             The F13 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F14">
            <summary>
             The F14 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F15">
            <summary>
             The F15 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F16">
            <summary>
             The F16 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F17">
            <summary>
             The F17 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F18">
            <summary>
             The F18 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F19">
            <summary>
             The F19 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F20">
            <summary>
             The F20 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F21">
            <summary>
             The F21 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F22">
            <summary>
             The F22 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F23">
            <summary>
             The F23 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.F24">
            <summary>
             The F24 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.NumLock">
            <summary>
             The NUM LOCK key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Scroll">
            <summary>
             The SCROLL LOCK key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.LShiftKey">
            <summary>
             The left SHIFT key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.RShiftKey">
            <summary>
             The right SHIFT key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.LControlKey">
            <summary>
             The left CTRL key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.RControlKey">
            <summary>
             The right CTRL key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.LMenu">
            <summary>
             The left ALT key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.RMenu">
            <summary>
             The right ALT key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.BrowserBack">
            <summary>
             The Browser Back key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.BrowserForward">
            <summary>
             The Browser Forward key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.BrowserRefresh">
            <summary>
             The Browser Refresh key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.BrowserStop">
            <summary>
             The Browser Stop key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.BrowserSearch">
            <summary>
             The Browser Search key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.BrowserFavorites">
            <summary>
             The Browser Favorites key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.BrowserHome">
            <summary>
             The Browser Home key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.VolumeMute">
            <summary>
             The Volume Mute key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.VolumeDown">
            <summary>
             The Volume Down key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.VolumeUp">
            <summary>
             The Volume Up key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.MediaNextTrack">
            <summary>
             The Media Next Track key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.MediaPreviousTrack">
            <summary>
             The Media Previous Track key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.MediaStop">
            <summary>
             The Media Stop key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.MediaPlayPause">
            <summary>
             The Media Play Pause key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.LaunchMail">
            <summary>
             The Launch Mail key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.SelectMedia">
            <summary>
             The Select Media key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.LaunchApplication1">
            <summary>
             The Launch Application1 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.LaunchApplication2">
            <summary>
             The Launch Application2 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.OemSemicolon">
            <summary>
             The Oem Semicolon key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Oem1">
            <summary>
             The Oem 1 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Oemplus">
            <summary>
             The Oem plus key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Oemcomma">
            <summary>
             The Oem comma key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.OemMinus">
            <summary>
             The Oem Minus key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.OemPeriod">
            <summary>
             The Oem Period key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.OemQuestion">
            <summary>
             The Oem Question key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Oem2">
            <summary>
             The Oem 2 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Oemtilde">
            <summary>
             The Oem tilde key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Oem3">
            <summary>
             The Oem 3 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.OemOpenBrackets">
            <summary>
             The Oem Open Brackets key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Oem4">
            <summary>
             The Oem 4 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.OemPipe">
            <summary>
             The Oem Pipe key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Oem5">
            <summary>
             The Oem 5 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.OemCloseBrackets">
            <summary>
             The Oem Close Brackets key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Oem6">
            <summary>
             The Oem 6 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.OemQuotes">
            <summary>
             The Oem Quotes key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Oem7">
            <summary>
             The Oem 7 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Oem8">
            <summary>
             The Oem8 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.OemBackslash">
            <summary>
             The Oem Backslash key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Oem102">
            <summary>
             The Oem 102 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.ProcessKey">
            <summary>
             The PROCESS KEY key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Packet">
            <summary>
             The Packet KEY key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Attn">
            <summary>
             The ATTN key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Crsel">
            <summary>
             The CRSEL key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Exsel">
            <summary>
             The EXSEL key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.EraseEof">
            <summary>
             The ERASE EOF key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Play">
            <summary>
             The PLAY key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Zoom">
            <summary>
             The ZOOM key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.NoName">
            <summary>
             A constant reserved for future use.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Pa1">
            <summary>
             The PA1 key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.OemClear">
            <summary>
             The CLEAR key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Shift">
            <summary>
             The SHIFT modifier key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Control">
            <summary>
             The  CTRL modifier key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Keys.Alt">
            <summary>
             The ALT modifier key.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.KeysConverter">
            <summary>
             Provides a type converter to convert <see cref='T:System.Windows.Forms.Keys'/> objects to and from various
             other representations.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.KeysConverter.KeyNames">
            <summary>
             Access to a lookup table of name/value pairs for keys.  These are localized
             names.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.KeysConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Determines if this converter can convert an object in the given source
             type to the native type of the converter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.KeysConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Gets a value indicating whether this converter can
             convert an object to the given destination type using the context.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.KeysConverter.Compare(System.Object,System.Object)">
            <summary>
             Compares two key values for equivalence.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.KeysConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
             Converts the given object to the converter's native type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.KeysConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type.  The most common types to convert
             are to and from a string object.  The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string.  If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.KeysConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Retrieves a collection containing a set of standard values
             for the data type this validator is designed for.  This
             will return null if the data type does not support a
             standard set of values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.KeysConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if the list of standard values returned from
             GetStandardValues is an exclusive list.  If the list
             is exclusive, then no other values are valid, such as
             in an enum data type.  If the list is not exclusive,
             then there are other valid values besides the list of
             standard values GetStandardValues provides.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.KeysConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if this object supports a standard set of values
             that can be picked from a list.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Label">
            <summary>
             Represents a standard Windows label.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Label.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Label'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.AutoSize">
            <summary>
             Indicates whether the control is automatically resized
             to fit its contents.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.AutoEllipsis">
            <summary>
             This property controls the activation handling of bleedover for the text that
             extends beyond the width of the label.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.BackgroundImage">
            <summary>
             Gets or sets the image rendered on the background of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.BackgroundImageLayout">
            <summary>
             Gets or sets the image layout for the background of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.BorderStyle">
            <summary>
             Gets or sets the border style for the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.CanUseTextRenderer">
            <summary>
             Determines whether the current state of the control allows for rendering text using TextRenderer (GDI).
             See LinkLabel implementation for details.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.CreateParams">
            <summary>
             Overrides Control.  A Label is a Win32 STATIC control, which we setup here.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.Image">
            <summary>
             Gets or sets the image that is displayed on a <see cref='T:System.Windows.Forms.Label'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.ImageIndex">
            <summary>
             Gets or sets the index value of the images displayed on the
             <see cref='T:System.Windows.Forms.Label'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.ImageKey">
            <summary>
             Gets or sets the key accessor for the image list.  This specifies the image
              from the image list to display on
             <see cref='T:System.Windows.Forms.Label'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.ImageList">
            <summary>
             Gets or sets the images displayed in a <see cref='T:System.Windows.Forms.Label'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.ImageAlign">
            <summary>
             Gets or sets the alignment of the image on the <see cref='T:System.Windows.Forms.Label'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.LiveSetting">
            <summary>
             Indicates the "politeness" level that a client should use
             to notify the user of changes to the live region.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Label.KeyUp">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.Label.KeyDown">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.Label.KeyPress">
            <hideinheritance/>
        </member>
        <member name="P:System.Windows.Forms.Label.PreferredHeight">
            <summary>
             Gets the height of the control (in pixels), assuming a
             single line of text is displayed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.PreferredWidth">
            <summary>
             Gets the width of the control (in pixels), assuming a single line
             of text is displayed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.RenderTransparent">
            <summary>
             Indicates whether
             the container control background is rendered on the <see cref='T:System.Windows.Forms.Label'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.TabStop">
            <summary>
             Gets or sets a value indicating whether the user can tab to the
             <see cref='T:System.Windows.Forms.Label'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.TextAlign">
            <summary>
             Gets or sets the
             horizontal alignment of the text in the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.Text">
            <summary>
             Gets or sets the text in the Label. Since we can have multiline support
             this property just overides the base to pluck in the Multiline editor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.UseCompatibleTextRendering">
            <summary>
             Determines whether to use compatible text rendering engine (GDI+) or not (GDI).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.SupportsUseCompatibleTextRendering">
            <summary>
             Determines whether the control supports rendering text using GDI+ and GDI.
             This is provided for container controls to iterate through its children to set UseCompatibleTextRendering to the same
             value if the child control supports it.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.UseMnemonic">
            <summary>
             Gets or sets a value indicating whether an ampersand (&amp;) included in the text of
             the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Label.AdjustSize">
            <summary>
             Updates the control in response to events that could affect either
             the size of the control, or the size of the text within it.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Label.CreateStringFormat">
            <summary>
             Get StringFormat object for rendering text using GDI+ (Graphics).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Label.CreateTextFormatFlags(System.Drawing.Size)">
            <summary>
             Get TextFormatFlags flags for rendering text using GDI (TextRenderer).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Label.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.ContentAlignment)">
            <summary>
             Draws an <see cref='T:System.Drawing.Image'/> within the specified bounds.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Label.GetLeadingTextPaddingFromTextFormatFlags">
            <summary>
             This method is to be called by LabelDesigner, using private reflection, to get the location of the text snaplines.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Label.IsMnemonicsListenerAxSourced">
            <summary>
             Specifies whether the control is willing to process mnemonics when hosted in an container ActiveX (Ax Sourcing).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Label.IsOwnerDraw">
            <summary>
             This method is required because the Label constructor needs to know if the control is
             OwnerDraw but it should not call the virtual property because if a derived class has
             overridden the method, the derived class version will be called (before the derived
             class constructor is called).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Label.OnMouseEnter(System.EventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Label.OnMouseLeave(System.EventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Label.OnAutoEllipsisChanged">
            <summary>
             Overriden by LinkLabel.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Label.ProcessMnemonic(System.Char)">
            <summary>
             Overrides Control. This is called when the user has pressed an Alt-CHAR
             key combination and determines if that combination is an interesting
             mnemonic for this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Label.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Overrides Control.setBoundsCore to enforce autoSize.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Label.SetToolTip(System.Windows.Forms.ToolTip)">
            <summary>
             Called by ToolTip to poke in that Tooltip into this ComCtl so that the Native ChildToolTip is not exposed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Label.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Label.WndProc(System.Windows.Forms.Message@)">
            <summary>
             Overrides Control. This processes certain messages that the Win32 STATIC
             class would normally override.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.LabelImageIndexer">
            <summary>
             Override ImageList.Indexer to support Label's ImageList semantics.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.LabelEditEventArgs">
            <summary>
             Provides data for the <see cref='P:System.Windows.Forms.ListView.LabelEdit'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LabelEditEventArgs.#ctor(System.Int32)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.LabelEditEventArgs'/>
             class with the specified index to the <see cref='T:System.Windows.Forms.ListViewItem'/>
             to edit.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LabelEditEventArgs.#ctor(System.Int32,System.String)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.LabelEditEventArgs'/>
             class with the specified index to the <see cref='T:System.Windows.Forms.ListViewItem'/>
             being edited and the new text for the label of the <see cref='T:System.Windows.Forms.ListViewItem'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LabelEditEventArgs.Item">
            <summary>
             Gets the zero-based index of the <see cref='T:System.Windows.Forms.ListViewItem'/> containing
             the label to edit.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LabelEditEventArgs.Label">
            <summary>
             Gets the new text assigned to the label of the <see cref='T:System.Windows.Forms.ListViewItem'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LabelEditEventArgs.CancelEdit">
            <summary>
             Gets or sets a value indicating whether changes made to the label of the
            <see cref='T:System.Windows.Forms.ListViewItem'/> should be canceled.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.LabelEditEventHandler">
            <summary>
             Represents a method that will handle the <see cref='P:System.Windows.Forms.ListView.LabelEdit'/>
             event of a <see cref='T:System.Windows.Forms.ListView'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.ArrangedElementCollection.MoveElement(System.Windows.Forms.Layout.IArrangedElement,System.Int32,System.Int32)">
            <summary>
             Repositions a element in this list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.ClearMaximumSize(System.Windows.Forms.Layout.IArrangedElement)">
              ClearMaximumSize
              Removes the maximum size from the property store, making it "unset".
            
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.GetAutoSize(System.Windows.Forms.Layout.IArrangedElement)">
              GetAutoSize
              Determines whether or not the System.Windows.Forms.Layout LayoutEngines
              think the element is AutoSized.
            
              A control can thwart the layout engine by overriding its virtual AutoSize
              property and not calling base.  If CommonProperties.GetAutoSize(element) is false,
              a layout engine will treat it as AutoSize = false and not size the element to its
              preferred size.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.GetMargin(System.Windows.Forms.Layout.IArrangedElement)">
              GetMargin
              Returns the Margin (exterior space) for an item
            
              We can not use our pattern of passing the default value into Margin because the
              LayoutEngines read this property and do not know each element's DefaultMargin.
              Instead the Element sets the Margin in its ctor.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.GetMaximumSize(System.Windows.Forms.Layout.IArrangedElement,System.Drawing.Size)">
             GetMaximumSize
             Returns the maximum size for an element
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.GetMinimumSize(System.Windows.Forms.Layout.IArrangedElement,System.Drawing.Size)">
             GetMinimumSize
             Returns the minimum size for an element
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.GetPadding(System.Windows.Forms.Layout.IArrangedElement,System.Windows.Forms.Padding)">
              GetPadding
              Returns the padding for an element
              Typically the padding is accounted for in either the DisplayRectangle calculation
              and/or the GetPreferredSize calculation of a control.
            
              NOTE:  LayoutEngines should never read this property.  Padding gets incorperated into
              layout by modifying what the control reports for preferred size.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.GetSpecifiedBounds(System.Windows.Forms.Layout.IArrangedElement)">
             GetSpecifiedBounds
             Returns the last size manually set into the element.  See UpdateSpecifiedBounds.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.ResetPadding(System.Windows.Forms.Layout.IArrangedElement)">
             ResetPadding	
             clears out the padding from the property store
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.SetAutoSize(System.Windows.Forms.Layout.IArrangedElement,System.Boolean)">
             SetAutoSize
             Sets whether or not the layout engines should treat this control as auto sized.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.SetMargin(System.Windows.Forms.Layout.IArrangedElement,System.Windows.Forms.Padding)">
             SetMargin
             Sets the margin (exterior space) for an element.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.SetMaximumSize(System.Windows.Forms.Layout.IArrangedElement,System.Drawing.Size)">
             SetMaximumSize
             Sets the maximum size for an element.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.SetMinimumSize(System.Windows.Forms.Layout.IArrangedElement,System.Drawing.Size)">
             SetMinimumSize
             Sets the minimum size for an element.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.SetPadding(System.Windows.Forms.Layout.IArrangedElement,System.Windows.Forms.Padding)">
             SetPadding
             Sets the padding (interior space) for an element. See GetPadding for more detiails.
             NOTE: It is the callers responsibility to do layout.  See Control.Padding for details.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.UpdateSpecifiedBounds(System.Windows.Forms.Layout.IArrangedElement,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
              UpdateSpecifiedBounds
              The main purpose of this function is to remember what size someone specified in the Size, Width, Height, Bounds
              property.  (Its the whole reason the BoundsSpecified enum exists.)  Consider this scenario.  You set a Button
              to DockStyle.Fill, then DockStyle.None.  When Dock.Filled, the Size changed to 300,300.  When you
              set it back to DockStyle.None, the size switches back to 100,23.  How does this happen?
            
              Setting the control to Dock.Fill (via DefaultLayout engine)
              element.SetBounds(newElementBounds, BoundsSpecified.None);
            
              (If someone happens to set the Size property here the specified bounds gets updated via Control.Size)
              SetBounds(x, y, value.Width, value.Height, BoundsSpecified.Size);
            
              Setting the control to Dock.None (via DefaultLayout.SetDock)
              element.SetBounds(CommonProperties.GetSpecifiedBounds(element), BoundsSpecified.None);
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.xClearPreferredSizeCache(System.Windows.Forms.Layout.IArrangedElement)">
              xClearPreferredSizeCache
              clears the preferred size cached for any control that overrides
              the internal GetPreferredSizeCore method.  DO NOT CALL DIRECTLY
              unless it is understood how the size of the control is going to be updated.
            
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.xClearAllPreferredSizeCaches(System.Windows.Forms.Layout.IArrangedElement)">
             xClearAllPreferredSizeCaches
             clears all the caching for an IArrangedElement hierarchy
             typically done in dispose.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.xGetPreferredSizeCache(System.Windows.Forms.Layout.IArrangedElement)">
             xGetPreferredSizeCache
             This value is the cached result of the return value from
             a control's GetPreferredSizeCore implementation when asked
             for a constraining value of LayoutUtils.MaxValue (or Size.Empty too).
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.xSetPreferredSizeCache(System.Windows.Forms.Layout.IArrangedElement,System.Drawing.Size)">
             xSetPreferredSizeCache
             Sets a control's preferred size.  See xGetPreferredSizeCache.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.GetAutoSizeMode(System.Windows.Forms.Layout.IArrangedElement)">
             GetAutoSizeMode
             Returns whether or not a control should snap to its smallest size
             or retain its original size and only grow if the preferred size is larger.
             We tried not having GrowOnly as the default, but it becomes difficult
             to design panels or have Buttons maintain their default size of 100,23
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.GetNeedsDockAndAnchorLayout(System.Windows.Forms.Layout.IArrangedElement)">
             GetNeedsDockAndAnchorLayout
             Do not use.  Internal property for DockAndAnchor layout.
             Returns true if DefaultLayout needs to do any work for this element.
             (Returns false if the element is purely absolutely positioned)
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.GetNeedsAnchorLayout(System.Windows.Forms.Layout.IArrangedElement)">
             GetNeedsAnchorLayout
             Do not use.  Internal property for DockAndAnchor layout.
             Returns true if DefaultLayout needs to do anchoring for this element.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.GetNeedsDockLayout(System.Windows.Forms.Layout.IArrangedElement)">
             GetNeedsDockLayout
             Do not use.  Internal property for DockAndAnchor layout.
             Returns true if DefaultLayout needs to do docking for this element.
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.Layout.CommonProperties.GetSelfAutoSizeInDefaultLayout(System.Windows.Forms.Layout.IArrangedElement)" -->
        <member name="M:System.Windows.Forms.Layout.CommonProperties.SetAutoSizeMode(System.Windows.Forms.Layout.IArrangedElement,System.Windows.Forms.AutoSizeMode)">
             SetAutoSizeMode
             Returns whether or not a control should snap to its smallest size
             or retain its original size and only grow if the preferred size is larger.
             We tried not having GrowOnly as the default, but it becomes difficult
             to design panels or have Buttons maintain their default size of 100,23
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.ShouldSelfSize(System.Windows.Forms.Layout.IArrangedElement)">
             ShouldSelfSize
             Compat flag for controls that previously sized themselves.
             See GetSelfAutoSize comments.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.SetSelfAutoSizeInDefaultLayout(System.Windows.Forms.Layout.IArrangedElement,System.Boolean)">
             SetSelfAutoSizeInDefaultLayout
             Compat flag for controls that previously sized themselves.
             See GetSelfAutoSize comments.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.xGetAnchor(System.Windows.Forms.Layout.IArrangedElement)">
             xGetAnchor -
             Do not use this.  Use DefaultLayout.GetAnchor.
             NOTE that Dock and Anchor are exclusive, so we store their enums in the same section.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.xGetAutoSizedAndAnchored(System.Windows.Forms.Layout.IArrangedElement)">
             xGetAutoSizedAndAnchored -
             Do not use.  Internal property for DockAndAnchor layout.
             Returns true if the element is both AutoSized and Anchored.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.xGetDock(System.Windows.Forms.Layout.IArrangedElement)">
             xGetDock
             Do not use this.  Use DefaultLayout.GetDock.
             Note that Dock and Anchor are exclusive, so we store their enums in the same section.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.xSetAnchor(System.Windows.Forms.Layout.IArrangedElement,System.Windows.Forms.AnchorStyles)">
             xSetAnchor -
             Do not use this.  Use DefaultLayout.SetAnchor.
             Note that Dock and Anchor are exclusive, so we store their enums in the same section.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.xSetDock(System.Windows.Forms.Layout.IArrangedElement,System.Windows.Forms.DockStyle)">
             xSetDock
             Do not use this.  Use DefaultLayout.SetDock.
             Note that Dock and Anchor are exclusive, so we store their enums in the same section.
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.Layout.CommonProperties.xTranslateAnchorValue(System.Windows.Forms.AnchorStyles)" -->
        <member name="M:System.Windows.Forms.Layout.CommonProperties.SetFlowBreak(System.Windows.Forms.Layout.IArrangedElement,System.Boolean)">
             SetFlowBreak
             Use FlowLayoutSettings.SetFlowBreak instead.
             See GetFlowBreak.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.GetLayoutBounds(System.Windows.Forms.Layout.IArrangedElement)">
              GetLayoutBounds -
              This is the size used to determine whether or not we need scrollbars.
            
              Used if the layoutengine always want to return the same layout bounds regardless
              of how it lays out. Example is TLP in RTL and LTR.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.SetLayoutBounds(System.Windows.Forms.Layout.IArrangedElement,System.Drawing.Size)">
              SetLayoutBounds -
              This is the size used to determine whether or not we need scrollbars.
            
              The TableLayout engine now calls CommonProperties.SetLayoutBounds when
              it is done with its layout. The layoutbounds are the total column width
              and the total row height. ScrollableControl checks if the LayoutBounds
              has been set in the CommonProperties when it tries to figure out if it
              should add scrollbars - but only if the layout engine is not the default
              layout engine. If the bounds has been set, ScrollableControl will use
              those bounds to check if scrollbars should be added, rather than doing
              its own magic to figure it out.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.HasLayoutBounds(System.Windows.Forms.Layout.IArrangedElement)">
             HasLayoutBounds -
             Returns whether we have layout bounds stored for this element.
        </member>
        <member name="M:System.Windows.Forms.Layout.CommonProperties.GetLayoutState(System.Windows.Forms.Layout.IArrangedElement)">
              GetLayoutState - returns the layout state bit vector from the property store.
              CAREFUL: this is a copy of the state.  You need to SetLayoutState() to save your changes.
            
        </member>
        <member name="M:System.Windows.Forms.Layout.DefaultLayout.LayoutAutoSizedControls(System.Windows.Forms.Layout.IArrangedElement)">
            <summary>
             Loop through the AutoSized controls and expand them if they are smaller than
             their preferred size. If expanding the controls causes overlap, bump the overlapped
             control if it is AutoRelocatable.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.DefaultLayout.GetGrowthBounds(System.Windows.Forms.Layout.IArrangedElement,System.Drawing.Size)">
            <summary>
             Gets the bounds of the element after growing to newSize (note that depending on
             anchoring the element may grow to the left/updwards rather than to the
             right/downwards. i.e., it may be translated.)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.DefaultLayout.GetGrowthDirection(System.Windows.Forms.Layout.IArrangedElement)">
            <summary>
             Examines an elements anchoring to figure out which direction it should grow.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.DefaultLayout.GetAnchorDestination(System.Windows.Forms.Layout.IArrangedElement,System.Drawing.Rectangle,System.Boolean)">
            <summary>
             Layout for a single anchored control. There's no order dependency when laying out anchored controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.DefaultLayout.TryCalculatePreferredSizeDockedControl(System.Windows.Forms.Layout.IArrangedElement,System.Drawing.Rectangle,System.Boolean,System.Drawing.Size@,System.Drawing.Rectangle@)">
            <summary>
             Helper method that either sets the element bounds or does the preferredSize computation based on
             the value of measureOnly.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.DefaultLayout.TryCalculatePreferredSize(System.Windows.Forms.Layout.IArrangedElement,System.Boolean,System.Drawing.Size@)">
            <remarks>
             PreferredSize is only computed if measureOnly = true.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.Layout.DefaultLayout.UpdateAnchorInfo(System.Windows.Forms.Layout.IArrangedElement)">
            <summary>
             Updates the Anchor information based on the controls current bounds. This should only be called
             when the parent control changes or the anchor mode changes.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.FlowLayout.TryCalculatePreferredSize(System.Windows.Forms.Layout.IArrangedElement,System.Drawing.Rectangle,System.Boolean)">
            <summary>
             Both LayoutCore and GetPreferredSize forward to this method.
             The measureOnly flag determines which behavior we get.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.FlowLayout.LayoutRow(System.Windows.Forms.Layout.FlowLayout.ContainerProxy,System.Windows.Forms.Layout.FlowLayout.ElementProxy,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
             Just forwards to TryCalculatePreferredSizeRow. This will layout elements from the start index to the end
             index. RowBounds was computed by a call to measure row and is used for alignment/boxstretch.
             See the ElementProxy class for an explaination of the elementProxy parameter.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.Layout.FlowLayout.MeasureRow(System.Windows.Forms.Layout.FlowLayout.ContainerProxy,System.Windows.Forms.Layout.FlowLayout.ElementProxy,System.Int32,System.Drawing.Rectangle,System.Int32@)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.Layout.FlowLayout.TryCalculatePreferredSizeRow(System.Windows.Forms.Layout.FlowLayout.ContainerProxy,System.Windows.Forms.Layout.FlowLayout.ElementProxy,System.Int32,System.Int32,System.Drawing.Rectangle,System.Int32@,System.Boolean)" -->
        <member name="T:System.Windows.Forms.Layout.FlowLayout.ContainerProxy">
             <summary>
              The goal of the FlowLayout Engine is to always layout from left to right. In order to achieve different
              flow directions we have "Proxies" for the Container (the thing laying out) and for setting the bounds of the
              child elements.
            
              We have a base ContainerProxy, and derived proxies for all of the flow directions. In order to achieve flow direction of RightToLeft,
              the RightToLeft container proxy detects when we're going to set the bounds and translates it to the right.
            
              In order to do a vertical flow, such as TopDown, we pretend we're laying out horizontally. The main way this is
              achieved is through the use of the VerticalElementProxy, which flips all rectangles and sizes.
            
              In order to do BottomUp, we combine the same techniques of TopDown with the RightToLeft flow. That is,
              we override the bounds, and translate from left to right, AND use the VerticalElementProxy.
            
              A final note: This layout engine does all its RightToLeft translation itself. It does not support
              WS_EX_LAYOUTRTL (OS mirroring).
             </summary>
        </member>
        <member name="P:System.Windows.Forms.Layout.FlowLayout.ContainerProxy.IsVertical">
            <summary>
             Specifies if we're TopDown or BottomUp and should use the VerticalElementProxy to
             translate
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.Layout.FlowLayout.ContainerProxy.DisplayRect" -->
        <member name="P:System.Windows.Forms.Layout.FlowLayout.ContainerProxy.ElementProxy">
            <summary>
             Returns the element proxy to use. A vertical element proxy will typically flip
             all the sizes and rectangles so that it can fake being laid out in a
             horizontal manner.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.FlowLayout.ContainerProxy.RTLTranslateNoMarginSwap(System.Drawing.Rectangle)">
            <summary>
             Used when you want to translate from right to left, but preserve Margin.Righ
             and Margin.Left.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Layout.FlowLayout.TopDownProxy">
            <summary>
             For TopDown we're really still laying out horizontally. The element proxy is the one
             which flips all the rectangles and rotates itself into the vertical orientation.
             to achieve right to left, we actually have to do something non-intuitive - instead of
             sending the control to the right, we have to send the control to the bottom. When the rotation
             is complete - that's equivilant to pushing it to the right.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Layout.FlowLayout.BottomUpProxy.Bounds">
             <summary>
              For BottomUp we're really still laying out horizontally. The element proxy is the one
              which flips all the rectangles and rotates itself into the vertical orientation.
              BottomUp is the analog of RightToLeft - meaning, in order to place a control at the bottom,
              the control has to be placed to the right. When the rotation is complete, that's the equivilant of
              pushing it to the right. This must be done all the time.
            
              To achieve right to left, we actually have to do something non-intuitive - instead of
              sending the control to the right, we have to send the control to the bottom. When the rotation
              is complete - that's equivilant to pushing it to the right.
             </summary>
        </member>
        <member name="T:System.Windows.Forms.Layout.FlowLayout.ElementProxy">
            <summary>
             ElementProxy inserts a level of indirection between the LayoutEngine
             and the IArrangedElement that allows us to use the same code path
             for Vertical and Horizontal flow layout. (see VerticalElementProxy)
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Layout.FlowLayout.VerticalElementProxy">
            <summary>
             VerticalElementProxy swaps Top/Left, Bottom/Right, and other properties
             so that the same code path used for horizantal flow can be applied to
             vertical flow.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Layout.IArrangedElement.Bounds">
            <summary>
             Bounding rectangle of the element.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.IArrangedElement.SetBounds(System.Drawing.Rectangle,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Sets the bounds for an element. Implementors should call
             CommonProperties.SetSpecifiedBounds.
             See Control.SetBoundsCore.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.IArrangedElement.GetPreferredSize(System.Drawing.Size)">
            <summary>
             Query element for its preferred size.  There is no guarantee
             that layout engine will assign the element the returned size.
             ProposedSize is a hint about constraints.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Layout.IArrangedElement.DisplayRectangle">
            <summary>
             DisplayRectangle is the client area of a container element.
             Could possibly disappear if we change control to keep an
             up-to-date copy of display rectangle in the property store.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout">
            <summary>
             True if the element is currently visible (some layouts, like
             flow, need to skip non-visible elements.)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Layout.IArrangedElement.Properties">
            <summary>
             Internally, layout engines will get properties from the
             property store on this interface.  In Orcas, this will be
             replaced with a global PropertyManager for DPs.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.IArrangedElement.PerformLayout(System.Windows.Forms.Layout.IArrangedElement,System.String)">
            <summary>
             When an extender provided property is changed, we call this
             method to update the layout on the element. In Orcas, we
             will sync the DPs changed event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Layout.IArrangedElement.Container">
            <summary>
             Returns the element's parent container (on a control, this forwands to Parent)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Layout.IArrangedElement.Children">
            <summary>
             Returns the element's childern (on a control, this forwands to Controls)
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Layout.LayoutUtils.MeasureTextCache">
             MeasureTextCache
             3000 character strings take 9 seconds to load the form
        </member>
        <member name="M:System.Windows.Forms.Layout.LayoutUtils.MeasureTextCache.InvalidateCache">
             InvalidateCache
             Clears out the cached values, should be called whenever Text, Font or a TextFormatFlag has changed
        </member>
        <member name="M:System.Windows.Forms.Layout.LayoutUtils.MeasureTextCache.GetTextSize(System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)">
             GetTextSize
             Given constraints, format flags a font and text, determine the size of the string
             employs an MRU of the last several constraints passed in via a ring-buffer of size MaxCacheSize.
             Assumes Text and TextFormatFlags are the same, if either were to change, a call to
             InvalidateCache should be made
        </member>
        <member name="M:System.Windows.Forms.Layout.LayoutUtils.MeasureTextCache.GetUnconstrainedSize(System.String,System.Drawing.Font,System.Windows.Forms.TextFormatFlags)">
             GetUnconstrainedSize
             Gets the unconstrained (Int32.MaxValue, Int32.MaxValue) size for a piece of text
        </member>
        <member name="M:System.Windows.Forms.Layout.LayoutUtils.MeasureTextCache.TextRequiresWordBreak(System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)">
             TextRequiresWordBreak
             If you give the text all the space in the world it wants, then there should be no reason
             for it to break on a word.  So we find out what the unconstrained size is (Int32.MaxValue, Int32.MaxValue)
             for a string - eg. 35, 13.  If the size passed in has a larger width than 35, then we know that
             the WordBreak flag is not necessary.
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.Layout.TableLayout.LayoutCore(System.Windows.Forms.Layout.IArrangedElement,System.Windows.Forms.LayoutEventArgs)" -->
        <member name="M:System.Windows.Forms.Layout.TableLayout.GetPreferredSize(System.Windows.Forms.Layout.IArrangedElement,System.Drawing.Size)">
             <summary>
              GetPreferredSize:  Called on the container to determine the size that best fits its contents.
              Container: IArrangedElement to determine preferredSize (could be table layout panel but doesnt have to be - eg. ToolStrip)
              ProposedContstraints: the suggested size that the table layout should fit into.  If either argument is 0,
                         TableLayout pretends it's unconstrained for perfomance reasons.
            
              Summary of Algorithm:
              Similar to LayoutCore.  Row/Column assignments are NOT cached.  TableLayout uses AGRESSIVE
              caching for performance reasons.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.TableLayout.EnsureRowAndColumnAssignments(System.Windows.Forms.Layout.IArrangedElement,System.Windows.Forms.Layout.TableLayout.ContainerInfo,System.Boolean)">
            <summary>
             EnsureRowAndColumnAssignments: Sets up Row/Column assignments for all the children of the container
             - Does nothing if Cache is valid
             - sets RowStart,RowSpan,ColumnStart,ColumnSpan into the LayoutInfo[] collection (containerInfo.ChildrenInfo)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.TableLayout.ExpandLastElement(System.Windows.Forms.Layout.TableLayout.ContainerInfo,System.Drawing.Size,System.Drawing.Size)">
            <summary>
             ExpandLastElement: expands the row/column to fill the rest of the space in the container.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.TableLayout.AssignRowsAndColumns(System.Windows.Forms.Layout.TableLayout.ContainerInfo)">
            <summary>
             AssignRowsAndColumns: part of EnsureRowAndColumnAssignments.
             determines the number of rows and columns we need to create
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.TableLayout.xAssignRowsAndColumns(System.Windows.Forms.Layout.TableLayout.ContainerInfo,System.Windows.Forms.Layout.TableLayout.LayoutInfo[],System.Int32,System.Int32,System.Windows.Forms.TableLayoutPanelGrowStyle)">
             <summary>
              xAssignRowsAndColumns: part of AssignRowsAndColumns.
              def: fixed element: has a specific row/column assignment (assigned by SetRow,SetColumn, or Add(c,row,column)
              def: flow element: does NOT have a specific row/column assignment.
            
              Determines the placement of fixed and flow elements.  Walks through the rows/columns - if there's a
              spot for the fixed element, place it, else place the next flow element.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.TableLayout.GetNextLayoutInfo(System.Windows.Forms.Layout.TableLayout.LayoutInfo[],System.Int32@,System.Boolean)">
            <summary>
             GetNextLayoutInfo: part of xAssignRowsAndColumns.
             helper function that walks through the collection picking out the next flow element or fixed element.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.TableLayout.IsCursorPastInsertionPoint(System.Windows.Forms.Layout.TableLayout.LayoutInfo,System.Int32,System.Int32)">
            <summary>
             IsCursorPastInsertionPoint: part of xAssignRowsAndColumns.
             check to see if the user specified location for fixedLayoutInfo has passed the insertion point specified by the cursor
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.TableLayout.IsOverlappingWithReservationGrid(System.Windows.Forms.Layout.TableLayout.LayoutInfo,System.Windows.Forms.Layout.TableLayout.ReservationGrid,System.Int32)">
            <summary>
             IsOverlappingWithReservationGrid: part of xAssignRowsAndColumns.
             check to see if the absolutely positioned layoutInfo fits in the reservation grid
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.TableLayout.AdvanceUntilFits(System.Int32,System.Windows.Forms.Layout.TableLayout.ReservationGrid,System.Windows.Forms.Layout.TableLayout.LayoutInfo,System.Int32@)">
            <summary>
             AdvanceUntilFits: part of xAssignRowsAndColumns.
             Advances the position of layoutInfo until we have enough space and do not
             collide with a rowSpanned element.  ColStop will be the column on which the
             element ends (exclusive).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.TableLayout.GetColStartAndStop(System.Int32,System.Windows.Forms.Layout.TableLayout.ReservationGrid,System.Windows.Forms.Layout.TableLayout.LayoutInfo,System.Int32@)">
            <summary>
             GetColStartAndStop: part of xAssignRowsAndColumns.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.TableLayout.DistributeSize(System.Collections.IList,System.Windows.Forms.Layout.TableLayout.Strip[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sets the minimum size for each element
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.TableLayout.DistributeStyles(System.Int32,System.Collections.IList,System.Windows.Forms.Layout.TableLayout.Strip[],System.Int32,System.Boolean)">
            <summary>
              Now that we've allocated minimum and maximum sizes to everyone (the strips), distribute the extra space
              as according to the Row/Column styles.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Layout.TableLayout.LayoutInfo">
            <summary>
              This class contains layout related information pertaining to a child control of the
              container being laid out. It contains Row,column assignments as well as RowSpan/ColumnSpan.
              This class is used from ContainerInfo as a way of caching information about child controls.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.Layout.TableLayout.LayoutInfo.RowPosition">
            <summary>
             Corresponds to TableLayoutSettings.SetRow. Can be -1 indicating that it is a
             "flow" element and will fit in as necessary. This occurs when a control is
             just added without specific position.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Layout.TableLayout.LayoutInfo.ColumnPosition">
            <summary>
             Corresponds to TableLayoutSettings.SetColumn. Can be -1 indicating that it is a
             "flow" element and will fit in as necessary. This occurs when a control is
             just added without specific position.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Layout.TableLayout.ContainerInfo">
            <summary>
              this class contains layout related information pertaining to the container
              being laid out by this instance of the TableLayout.  It contains references
              to all the information that should be used from the table layout engine,
              as this class is responsible for caching information about the control and
              it's children being layed out.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.Layout.TableLayout.ContainerInfo.Container">
            <summary>
             the container being laid out
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Layout.TableLayout.ContainerInfo.Columns">
            <summary>
             list of ints that represent the sizes of individual columns
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Layout.TableLayout.ContainerInfo.Rows">
            
              list of ints that represent the sizes of individual rows
            
        </member>
        <member name="P:System.Windows.Forms.Layout.TableLayout.ContainerInfo.MaxRows">
            <summary>
             Same as TableLayoutSettings.RowCount
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Layout.TableLayout.ContainerInfo.MaxColumns">
            <summary>
             Same as TableLayoutSettings.ColumnCount
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Layout.TableLayout.ContainerInfo.MinRowsAndColumns">
             Cached information
        </member>
        <member name="P:System.Windows.Forms.Layout.TableLayout.ContainerInfo.MinColumns">
             Cached information
        </member>
        <member name="P:System.Windows.Forms.Layout.TableLayout.ContainerInfo.MinRows">
             Cached information
        </member>
        <member name="P:System.Windows.Forms.Layout.TableLayout.ContainerInfo.GrowStyle">
            <summary>
             Gets/sets the grow style for our containerinfo.  This
             is used to determine if we will add rows/cols/or throw
             when the table gets full.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Layout.TableLayout.ContainerInfo.ChildrenInfo">
            <summary>
             gets cached information about the children of the control being layed out.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.TableLayoutSettingsTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Determines if this converter can convert an object in the given source
             type to the native type of the converter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.TableLayoutSettingsTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Gets a value indicating whether this converter can
             convert an object to the given destination type using the context.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Layout.TableLayoutSettingsTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
             Converts the given object to the converter's native type.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.LeftRightAlignment">
            <summary>
             Specifies whether an object or text is aligned to
             the left or
             right of a reference point.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.LeftRightAlignment.Left">
            <summary>
             The object or text is aligned to the left of the reference point.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.LeftRightAlignment.Right">
            <summary>
             The object or text is aligned to the right of the reference point.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.LinkArea.LinkAreaConverter">
            <summary>
             LinkAreaConverter is a class that can be used to convert LinkArea from one data type
             to another. Access this class through the TypeDescriptor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkArea.LinkAreaConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Determines if this converter can convert an object in the given source
             type to the native type of the converter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkArea.LinkAreaConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Gets a value indicating whether this converter can convert an object to the
             given destination type using the context.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkArea.LinkAreaConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
             Converts the given object to the converter's native type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkArea.LinkAreaConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type. The most common types to convert
             are to and from a string object. The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string. If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkArea.LinkAreaConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
             Creates an instance of this type given a set of property values
             for the object. This is useful for objects that are immutable, but still
             want to provide changable properties.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkArea.LinkAreaConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if changing a value on this object should require a call to
             CreateInstance to create a new value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkArea.LinkAreaConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
             Retrieves the set of properties for this type. By default, a type has
             does not return any properties. An easy implementation of this method
             can just call TypeDescriptor.GetProperties for the correct data type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkArea.LinkAreaConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if this object supports properties. By default, this is false.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.LinkClickedEventArgs">
            <summary>
             Provides data for the <see cref='E:System.Windows.Forms.RichTextBox.LinkClicked'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkClickedEventArgs.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.LinkClickedEventArgs'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkClickedEventArgs.LinkText">
            <summary>
             Gets the text of the link being clicked.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.LinkClickedEventHandler">
            <summary>
             Represents a method that will handle the <see cref='E:System.Windows.Forms.RichTextBox.LinkClicked'/>
             event of a <see cref='T:System.Windows.Forms.RichTextBox'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.LinkConverter">
            <summary>
             A TypeConverter for LinkLabel.Link objects. Access this class through the TypeDescriptor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Determines if this converter can convert an object in the given source
             type to the native type of the converter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Gets a value indicating whether this converter can convert an object to the given
             destination type using the context.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
             Converts the given object to the converter's native type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type. The most common types to convert
             are to and from a string object. The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string. If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.LinkLabel">
            <summary>
             Displays text that can contain a hyperlink.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.LinkLabel.dialogResult">
            <summary>
             The dialog result that will be sent to the parent dialog form when
             we are clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.#ctor">
            <summary>
             Initializes a new default instance of the <see cref='T:System.Windows.Forms.LinkLabel'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkLabel.ActiveLinkColor">
            <summary>
             Gets or sets the color used to display active links.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkLabel.DisabledLinkColor">
            <summary>
             Gets or sets the color used to display disabled links.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkLabel.LinkArea">
            <summary>
             Gets or sets the range in the text that is treated as a link.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkLabel.LinkBehavior">
            <summary>
             Gets ir sets a value that represents how the link will be underlined.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkLabel.LinkColor">
            <summary>
             Gets or sets the color used to display links in normal cases.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkLabel.Links">
            <summary>
             Gets the collection of links used in a <see cref='T:System.Windows.Forms.LinkLabel'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkLabel.LinkVisited">
            <summary>
             Gets or sets a value indicating whether the link should be displayed as if it was visited.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkLabel.VisitedLinkColor">
            <summary>
             Gets or sets the color used to display the link once it has been visited.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.LinkLabel.LinkClicked">
            <summary>
             Occurs when the link is clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.CreateAccessibilityInstance">
            <summary>
             Constructs the new instance of the accessibility object for this control. Subclasses
             should not call base.CreateAccessibilityObject.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.CreateHandle">
            <summary>
             Creates a handle for this control. This method is called by the framework,
             this should not be called directly. Inheriting classes should always call
             <c>base.CreateHandle</c> when overriding this method.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkLabel.CanUseTextRenderer">
            <summary>
             Determines whether the current state of the control allows for rendering text using
             TextRenderer (GDI).
             The Gdi library doesn't currently have a way to calculate character ranges so we cannot
             use it for painting link(s) within the text, but if the link are is null or covers the
             entire text we are ok since it is just one area with the same size of the text binding
             area.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.ConvertToCharIndex(System.Int32,System.String)">
            <summary>
             Converts the character index into char index of the string
             This method is copied in LinkCollectionEditor.cs. Update the other
             one as well if you change this method.
             This method mainly deal with surrogate. Suppose we
             have a string consisting of 3 surrogates, and we want the
             second character, then the index we need should be 2 instead of
             1, and this method returns the correct index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.EnsureRun(System.Drawing.Graphics)">
            <summary>
             Ensures that we have analyzed the text run so that we can render each segment
             and link.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.AdjustCharacterRangesForSurrogateChars">
            <summary>
             Calculate character ranges taking into account the locale.  Provided for surrogate chars support.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.IsOneLink">
            <summary>
             Determines whether the whole link label contains only one link,
             and the link runs from the beginning of the label to the end of it
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.PointInLink(System.Int32,System.Int32)">
            <summary>
             Determines if the given client coordinates is contained within a portion
             of a link area.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.InvalidateLink(System.Windows.Forms.LinkLabel.Link)">
            <summary>
             Invalidates only the portions of the text that is linked to
             the specified link. If link is null, then all linked text
             is invalidated.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.InvalidateLinkFonts">
            <summary>
             Invalidates the current set of fonts we use when painting
             links.  The fonts will be recreated when needed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkLabel.System#Windows#Forms#IButtonControl#DialogResult">
            <summary>
             Gets or sets a value that is returned to the
             parent form when the link label.
             is clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.OnGotFocus(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.GotFocus'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.OnLostFocus(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.LostFocus'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.OnMouseLeave(System.EventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.OnAutoEllipsisChanged">
            <summary>
             Overriden by LinkLabel.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
             Processes a dialog key. This method is called during message pre-processing
             to handle dialog characters, such as TAB, RETURN, ESCAPE, and arrow keys. This
             method is called only if the isInputKey() method indicates that the control
             isn't interested in the key. processDialogKey() simply sends the character to
             the parent's processDialogKey() method, or returns false if the control has no
             parent. The Form class overrides this method to perform actual processing
             of dialog keys. When overriding processDialogKey(), a control should return true
             to indicate that it has processed the key. For keys that aren't processed by the
             control, the result of "base.processDialogChar()" should be returned. Controls
             will seldom, if ever, need to override this method.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Performs the work of setting the bounds of this control. Inheriting classes
             can overide this function to add size restrictions. Inheriting classes must call
             base.setBoundsCore to actually cause the bounds of the control to change.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.ShouldSerializeActiveLinkColor">
            <summary>
             Determines if the color for active links should remain the same.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.ShouldSerializeDisabledLinkColor">
            <summary>
             Determines if the color for disabled links should remain the same.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.ShouldSerializeLinkArea">
            <summary>
             Determines if the range in text that is treated as a
             link should remain the same.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.ShouldSerializeLinkColor">
            <summary>
             Determines if the color of links in normal cases should remain the same.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.ShouldSerializeUseCompatibleTextRendering">
            <summary>
             Determines whether designer should generate code for setting the UseCompatibleTextRendering or not.
             DefaultValue(false)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.ShouldSerializeVisitedLinkColor">
            <summary>
             Determines if the color of links that have been visited should remain the same.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.UpdateAccessibilityLink(System.Windows.Forms.LinkLabel.Link)">
            <summary>
             Update accessibility with the currently focused link.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.ValidateNoOverlappingLinks">
            <summary>
             Validates that no links overlap. This will throw an exception if
             they do.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.UpdateSelectability">
            <summary>
             Updates the label's ability to get focus. If there are
             any links in the label, then the label can get focus,
             else it can't.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkLabel.UseCompatibleTextRendering">
            <summary>
             Determines whether to use compatible text rendering engine (GDI+) or not (GDI).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.WmSetCursor(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_SETCURSOR message
            </summary>
        </member>
        <member name="F:System.Windows.Forms.LinkLabel.LinkCollection.lastAccessedIndex">
             A caching mechanism for key accessor
             We use an index here rather than control so that we don't have lifetime
             issues by holding on to extra references.
             Note this is not Thread Safe - but WinForms has to be run in a STA anyways.
        </member>
        <member name="P:System.Windows.Forms.LinkLabel.LinkCollection.Item(System.String)">
            <summary>
             Retrieves the child control with the specified key.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkLabel.LinkCollection.LinksAdded">
            <summary>
             whether we have added a non-trivial link to the collection
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.LinkCollection.ContainsKey(System.String)">
            <summary>
             Returns true if the collection contains an item with the specified key, false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.LinkCollection.IndexOfKey(System.String)">
            <summary>
             The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.LinkCollection.IsValidIndex(System.Int32)">
            <summary>
             Determines if the index is valid for the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.LinkCollection.Clear">
            <summary>
             Remove all links from the linkLabel.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.LinkCollection.RemoveByKey(System.String)">
            <summary>
             Removes the child control with the specified key.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkLabel.Link.Description">
            <summary>
             Description for accessibility
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkLabel.Link.Owner">
            <summary>
             The LinkLabel object that owns this link.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkLabel.Link.Name">
            <summary>
             The name for the link - useful for indexing by key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.LinkLabelAccessibleObject.#ctor(System.Windows.Forms.LinkLabel)">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.LinkLabelAccessibleObject.GetChild(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabel.LinkLabelAccessibleObject.GetChildCount">
            <summary>
            </summary>
        </member>
        <member name="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkLabelLinkClickedEventArgs.#ctor(System.Windows.Forms.LinkLabel.Link)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.LinkLabelLinkClickedEventArgs'/> class, given the link.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkLabelLinkClickedEventArgs.Link">
            <summary>
             Gets the <see cref='T:System.Windows.Forms.LinkLabel.Link'/> that was clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.LinkLabelLinkClickedEventArgs.Button">
            <summary>
             Gets the mouseButton which causes the link to be clicked
            </summary>
        </member>
        <member name="T:System.Windows.Forms.LinkLabelLinkClickedEventHandler">
            <summary>
             Represents a method that will handle the <see cref='E:System.Windows.Forms.LinkLabel.LinkClicked'/> event of a <see cref='T:System.Windows.Forms.LinkLabel'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkUtilities.GetIEColor(System.String)">
            <summary>
             Retrieves a named IE color from the registry. There are constants at the top
             of this file of the valid names to retrieve.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LinkUtilities.GetVisitedLinkColor">
             Produces a color for visited links using SystemColors
        </member>
        <member name="M:System.Windows.Forms.LinkUtilities.GetIELinkBehavior">
            <summary>
             Retrieves the IE settings for link behavior from the registry.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBindingConverter.ConstructorParamaterTypes">
            <summary>
             Creates our array of types on demand.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBindingConverter.ConstructorParameterProperties">
            <summary>
             Creates our array of param names on demand.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBindingConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Gets a value indicating whether this converter can
             convert an object to the given destination type using the context.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBindingConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type.  The most common types to convert
             are to and from a string object.  The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string.  If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBindingConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
             Creates an instance of this type given a set of property values
             for the object.  This is useful for objects that are immutable, but still
             want to provide changable properties.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBindingConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if changing a value on this object should require a call to
             CreateInstance to create a new value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBindingConverter.GetInstanceDescriptorFromValues(System.Windows.Forms.Binding)">
            <summary>
             Gets the best matching ctor for a given binding and fills it out, based on the
             state of the Binding and the optimal ctor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBindingHelper.GetTypedIndexer(System.Type)">
             <summary>
            
              Returns info about the 'indexer' property on the specified type. The presence of an indexer is used to
              determine that the type represents a collection or list. The return type of that indexer is used to
              determine the underlying item type.
            
              PROCESS: We look for the first public instance property on the type that is an 'indexer'. This property
              is usually - but not always - called "Item". So we look at 'indexer parameters' to identify true indexers,
              rather than looking at the property name. And we also ignore any indexers that return an item type of just
              Object, since we are trying to use indexers here to determine the actual underlying item type!
            
              NOTE: A special rule is also enforced here - we only want to consider using the typed indexer on list
              based types, ie. types we already know are supposed to be treated as lists (rather than list items).
             </summary>
        </member>
        <member name="T:System.Windows.Forms.ListBox">
             <summary>
              This is a control that presents a list of items to the user.  They may be
              navigated using the keyboard, or the scrollbar on the right side of the
              control.  One or more items may be selected as well.
            
              The preferred way to add items is to set them all via an array at once,
              which is definitely the most efficient way.  The following is an example
              of this:
             <code>
              ListBox lb = new ListBox();
              //     set up properties on the listbox here.
              lb.Items.All = new String [] {
                 "A",
                 "B",
                 "C",
                 "D" };
             </code>
             </summary>
        </member>
        <member name="T:System.Windows.Forms.ListBox.ListBoxAccessibleObject">
            <summary>
             ListBox control accessible object with UI Automation provider functionality.
             This inherits from the base ListBoxExAccessibleObject and ListBoxAccessibleObject
             to have all base functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ListBoxAccessibleObject.#ctor(System.Windows.Forms.ListBox)">
            <summary>
             Initializes new instance of ListBoxAccessibleObject.
            </summary>
            <param name="owningListBox">The owning ListBox control.</param>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ListBoxAccessibleObject.ElementProviderFromPoint(System.Double,System.Double)">
            <summary>
             Return the child object at the given screen coordinates.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <returns>The accessible object of corresponding element in the provided coordinates.</returns>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ListBoxAccessibleObject.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Returns the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ListBoxAccessibleObject.GetPropertyValue(Interop.UiaCore.UIA)">
            <summary>
             Gets the accessible property value.
            </summary>
            <param name="propertyID">The accessible property ID.</param>
            <returns>The accessible property value.</returns>
        </member>
        <member name="F:System.Windows.Forms.ListBox.NoMatches">
            <summary>
             while doing a search, if no matches are found, this is returned
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ListBox.DefaultItemHeight">
            <summary>
             The default item height for an owner-draw ListBox. The ListBox's non-ownderdraw
             item height is 13 for the default font on Windows.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ListBox.focusedItem">
            <summary>
             This field stores focused ListBox item Accessible object before focus changing.
             Used in FocusedItemIsChanged method.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ListBox.itemsCount">
            <summary>
             This field stores current items count.
             Used in ItemsCountIsChanged method.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ListBox.customTabOffsets">
            <summary>
             This value stores the array of custom tabstops in the listbox. the array should be populated by
             integers in a ascending order.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ListBox.defaultListItemStartPos">
            <summary>
             Default start position of items in the checked list box
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ListBox.defaultListItemBorderHeight">
            <summary>
             Borders are 1 pixel height.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ListBox.defaultListItemPaddingBuffer">
            <summary>
             Borders are 1 pixel width and a pixel buffer
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.#ctor">
            <summary>
             Creates a basic win32 list box with default values for everything.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.BorderStyle">
            <summary>
             Retrieves the current border style.  Values for this are taken from
             The System.Windows.Forms.BorderStyle enumeration.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.CreateParams">
            <summary>
             Retrieves the parameters needed to create the handle.  Inheriting classes
             can override this to provide extra functionality.  They should not,
             however, forget to call base.getCreateParams() first to get the struct
             filled up with the basic info.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.UseCustomTabOffsets">
            <summary>
             Enables a list box to recognize and expand tab characters when drawing
             its strings using the CustomTabOffsets integer array.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.DrawMode">
            <summary>
             Retrieves the style of the listbox.  This will indicate if the system
             draws it, or if the user paints each item manually.  It also indicates
             whether or not items have to be of the same height.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.HorizontalExtent">
            <summary>
             Indicates the width, in pixels, by which a list box can be scrolled horizontally (the scrollable width).
             This property will only have an effect if HorizontalScrollbars is true.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.HorizontalScrollbar">
            <summary>
             Indicates whether or not the ListBox should display a horizontal scrollbar
             when the items extend beyond the right edge of the ListBox.
             If true, the scrollbar will automatically set its extent depending on the length
             of items in the ListBox. The exception is if the ListBox is owner-draw, in
             which case HorizontalExtent will need to be explicitly set.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.IntegralHeight">
            <summary>
             Indicates if the listbox should avoid showing partial Items.  If so,
             then only full items will be displayed, and the listbox will be resized
             to prevent partial items from being shown.  Otherwise, they will be
             shown
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.ItemHeight">
            <summary>
             Returns
             the height of an item in an owner-draw list box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.Items">
            <summary>
             Collection of items in this listbox.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.MultiColumn">
            <summary>
             Indicates if the listbox is multi-column
             or not.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.PreferredHeight">
            <summary>
             The total height of the items in the list box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.ScrollAlwaysVisible">
            <summary>
             Gets or sets whether the scrollbar is shown at all times.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.AllowSelection">
            <summary>
             Indicates whether list currently allows selection of list items.
             For ListBox, this returns true unless SelectionMode is SelectionMode.None.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.SelectedIndex">
            <summary>
             The index of the currently selected item in the list, if there
             is one.  If the value is -1, there is currently no selection.  If the
             value is 0 or greater, than the value is the index of the currently
             selected item.  If the MultiSelect property on the ListBox is true,
             then a non-zero value for this property is the index of the first
             selection
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.SelectedIndices">
            <summary>
             A collection of the indices of the selected items in the
             list box. If there are no selected items in the list box, the result is
             an empty collection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.SelectedItem">
            <summary>
             The value of the currently selected item in the list, if there
             is one.  If the value is null, there is currently no selection.  If the
             value is non-null, then the value is that of the currently selected
             item. If the MultiSelect property on the ListBox is true, then a
             non-null return value for this method is the value of the first item
             selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.SelectedItems">
            <summary>
             The collection of selected items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.SelectionMode">
            <summary>
             Controls how many items at a time can be selected in the listbox. Valid
             values are from the System.Windows.Forms.SelectionMode enumeration.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.Sorted">
            <summary>
             Indicates if the ListBox is sorted or not.  'true' means that strings in
             the list will be sorted alphabetically
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.TopIndex">
            <summary>
             The index of the first visible item in a list box. Initially
             the item with index 0 is at the top of the list box, but if the list
             box contents have been scrolled another item may be at the top.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.UseTabStops">
            <summary>
             Enables a list box to recognize and expand tab characters when drawing
             its strings.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.CustomTabOffsets">
            <summary>
             Allows to set the width of the tabs between the items in the list box.
             The integer array should have the tab spaces in the ascending order.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.AddItemsCore(System.Object[])">
            <summary>
             Performs the work of adding the specified items to the Listbox
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ListBox.Paint">
            <summary>
             ListBox / CheckedListBox Onpaint.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.BeginUpdate">
            <summary>
             While the preferred way to insert items is to set Items.All,
             and set all the items at once, there are times when you may wish to
             insert each item one at a time.  To help with the performance of this,
             it is desirable to prevent the ListBox from painting during these
             operations.  This method, along with EndUpdate, is the preferred
             way of doing this.  Don't forget to call EndUpdate when you're done,
             or else the ListBox won't paint properly afterwards.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.CreateAccessibilityInstance">
            <summary>
             constructs the new instance of the accessibility object for this control. Subclasses
             should not call base.CreateAccessibilityObject.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ClearSelected">
            <summary>
             Unselects all currently selected items.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.EndUpdate">
            <summary>
             While the preferred way to insert items is to set Items.All,
             and set all the items at once, there are times when you may wish to
             insert each item one at a time.  To help with the performance of this,
             it is desirable to prevent the ListBox from painting during these
             operations.  This method, along with BeginUpdate, is the preferred
             way of doing this.  BeginUpdate should be called first, and this method
             should be called when you want the control to start painting again.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.FindString(System.String)">
            <summary>
             Finds the first item in the list box that starts with the given string.
             The search is not case sensitive.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.FindString(System.String,System.Int32)">
            <summary>
             Finds the first item after the given index which starts with the given string.
             The search is not case sensitive.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.FindStringExact(System.String)">
            <summary>
             Finds the first item in the list box that matches the given string.
             The strings must match exactly, except for differences in casing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.FindStringExact(System.String,System.Int32)">
            <summary>
             Finds the first item after the given index that matches the given string.
             The strings must match excatly, except for differences in casing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.FocusedItemIsChanged">
            <summary>
             Shows whether the focused item has changed when calling OnSelectedIndexChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.GetItemHeight(System.Int32)">
            <summary>
             Returns the height of the given item in a list box. The index parameter
             is ignored if drawMode is not OwnerDrawVariable.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.GetItemRectangle(System.Int32)">
            <summary>
             Retrieves a Rectangle object which describes the bounding rectangle
             around an item in the list.  If the item in question is not visible,
             the rectangle will be empty.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <summary>
             List box overrides GetScaledBounds to ensure we always scale the requested
             height, not the current height.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.GetSelected(System.Int32)">
            <summary>
             Tells you whether or not the item at the supplied index is selected
             or not.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.IndexFromPoint(System.Drawing.Point)">
            <summary>
             Retrieves the index of the item at the given coordinates.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.IndexFromPoint(System.Int32,System.Int32)">
            <summary>
             Retrieves the index of the item at the given coordinates.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.NativeAdd(System.Object)">
            <summary>
             Adds the given item to the native List box.  This asserts if the handle hasn't been
             created.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.NativeClear">
            <summary>
             Clears the contents of the List box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.NativeGetItemText(System.Int32)">
            <summary>
             Get the text stored by the native control for the specified list item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.NativeInsert(System.Int32,System.Object)">
            <summary>
             Inserts the given item to the native List box at the index.  This asserts if the handle hasn't been
             created or if the resulting insert index doesn't match the passed in index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.NativeRemoveAt(System.Int32)">
            <summary>
             Removes the native item from the given index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.NativeSetSelected(System.Int32,System.Boolean)">
            <summary>
             Sets the selection of the given index to the native window.  This does not change
             the collection; you must update the collection yourself.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.NativeUpdateSelection">
            <summary>
             This is called by the SelectedObjectCollection in response to the first
             query on that collection after we have called Dirty().  Dirty() is called
             when we receive a LBN_SELCHANGE message.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
             Actually goes and fires the drawItem event.  Inheriting controls
             should use this to know when the event is fired [this is preferable to
             adding an event handler yourself for this event].  They should,
             however, remember to call base.onDrawItem(e); to ensure the event is
             still fired to external listeners
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.OnHandleCreated(System.EventArgs)">
            <summary>
             We need to know when the window handle has been created so we can
             set up a few things, like column width, etc!  Inheriting classes should
             not forget to call base.OnHandleCreated().
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.OnHandleDestroyed(System.EventArgs)">
            <summary>
             Overridden to make sure that we set up and clear out items
             correctly.  Inheriting controls should not forget to call
             base.OnHandleDestroyed()
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.OnParentChanged(System.EventArgs)">
            <summary>
             We override this so we can re-create the handle if the parent has changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
             Actually goes and fires the selectedIndexChanged event.  Inheriting controls
             should use this to know when the event is fired [this is preferable to
             adding an event handler on yourself for this event].  They should,
             however, remember to call base.OnSelectedIndexChanged(e); to ensure the event is
             still fired to external listeners
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.Refresh">
            <summary>
             Forces the ListBox to invalidate and immediately
             repaint itself and any children if OwnerDrawVariable.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.RefreshItems">
            <summary>
             Reparses the objects, getting new text strings for them.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.RefreshItem(System.Int32)">
            <summary>
             Reparses the object at the given index, getting new text string for it.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Overrides Control.SetBoundsCore to remember the requestedHeight.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.SetItemsCore(System.Collections.IList)">
            <summary>
             Performs the work of setting the specified items into the ListBox.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.SetSelected(System.Int32,System.Boolean)">
            <summary>
             Allows the user to set an item as being selected or not.  This should
             only be used with ListBoxes that allow some sort of multi-selection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.Sort">
            <summary>
             Sorts the items in the listbox.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
             The list's window procedure.  Inheriting classes can override this
             to add extra functionality, but should not forget to call
             base.wndProc(m); to ensure the list continues to function properly.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListBox.ItemArray">
             <summary>
              This is similar to ArrayList except that it also
              mantains a bit-flag based state element for each item
              in the array.
            
              The methods to enumerate, count and get data support
              virtualized indexes.  Indexes are virtualized according
              to the state mask passed in.  This allows ItemArray
              to be the backing store for one read-write "master"
              collection and serveral read-only collections based
              on masks.  ItemArray supports up to 31 masks.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.ItemArray.Version">
            <summary>
             The version of this array.  This number changes with each
             change to the item list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.Add(System.Object)">
            <summary>
             Adds the given item to the array.  The state is initially
             zero.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.AddRange(System.Collections.ICollection)">
            <summary>
             Adds the given collection of items to the array.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.Clear">
            <summary>
             Clears this array.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.CreateMask">
            <summary>
             Allocates a new bitmask for use.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.EnsureSpace(System.Int32)">
            <summary>
             Ensures that our internal array has space for
             the requested # of elements.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.GetActualIndex(System.Int32,System.Int32)">
            <summary>
             Turns a virtual index into an actual index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.GetCount(System.Int32)">
            <summary>
             Gets the count of items matching the given mask.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.GetEnumerator(System.Int32)">
            <summary>
             Retrieves an enumerator that will enumerate based on
             the given mask.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.GetEnumerator(System.Int32,System.Boolean)">
            <summary>
             Retrieves an enumerator that will enumerate based on
             the given mask.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.GetItem(System.Int32,System.Int32)">
            <summary>
             Gets the item at the given index.  The index is
             virtualized against the given mask value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.GetEntryObject(System.Int32,System.Int32)">
            <summary>
             Gets the item at the given index.  The index is
             virtualized against the given mask value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.GetState(System.Int32,System.Int32)">
            <summary>
             Returns true if the requested state mask is set.
             The index is the actual index to the array.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.IndexOf(System.Object,System.Int32)">
            <summary>
             Returns the virtual index of the item based on the
             state mask.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.IndexOfIdentifier(System.Object,System.Int32)">
            <summary>
             Returns the virtual index of the item based on the
             state mask. Uses reference equality to identify the
             given object in the list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.Insert(System.Int32,System.Object)">
            <summary>
             Inserts item at the given index.  The index
             is not virtualized.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.Remove(System.Object)">
            <summary>
             Removes the given item from the array.  If
             the item is not in the array, this does nothing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.RemoveAt(System.Int32)">
            <summary>
             Removes the item at the given index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.SetItem(System.Int32,System.Object)">
            <summary>
             Sets the item at the given index to a new value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.SetState(System.Int32,System.Int32,System.Boolean)">
            <summary>
             Sets the state data for the given index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.BinarySearch(System.Object)">
            <summary>
             Find element in sorted array. If element is not found returns a binary complement of index for inserting
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.Sort">
            <summary>
             Sorts our array.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListBox.ItemArray.Entry">
            <summary>
             This is a single entry in our item array.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListBox.ItemArray.EntryEnumerator">
            <summary>
             EntryEnumerator is an enumerator that will enumerate over
             a given state mask.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.EntryEnumerator.#ctor(System.Windows.Forms.ListBox.ItemArray,System.Int32,System.Boolean)">
            <summary>
             Creates a new enumerator that will enumerate over the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.EntryEnumerator.System#Collections#IEnumerator#MoveNext">
            <summary>
             Moves to the next element, or returns false if at the end.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ItemArray.EntryEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
             Resets the enumeration back to the beginning.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.ItemArray.EntryEnumerator.System#Collections#IEnumerator#Current">
            <summary>
             Retrieves the current value in the enumerator.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListBox.ObjectCollection">
            <summary>
             A collection that stores objects.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ObjectCollection.#ctor(System.Windows.Forms.ListBox,System.Windows.Forms.ListBox.ObjectCollection)">
            <summary>
             Initializes a new instance of ListBox.ObjectCollection based on another ListBox.ObjectCollection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ObjectCollection.#ctor(System.Windows.Forms.ListBox,System.Object[])">
            <summary>
             Initializes a new instance of ListBox.ObjectCollection containing any array of objects.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.ObjectCollection.Count">
            <summary>
             Retrieves the number of items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.ObjectCollection.InnerArray">
            <summary>
             Internal access to the actual data store.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ObjectCollection.Add(System.Object)">
            <summary>
             Adds an item to the List box. For an unsorted List box, the item is
             added to the end of the existing list of items. For a sorted List box,
             the item is inserted into the list according to its sorted position.
             The item's toString() method is called to obtain the string that is
             displayed in the List box.
             A SystemException occurs if there is insufficient space available to
             store the new item.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.ObjectCollection.Item(System.Int32)">
            <summary>
             Retrieves the item with the specified index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ObjectCollection.Clear">
            <summary>
             Removes all items from the ListBox.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ObjectCollection.ClearInternal">
            <summary>
             Removes all items from the ListBox.  Bypasses the data source check.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ObjectCollection.CopyTo(System.Object[],System.Int32)">
            <summary>
             Copies the ListBox Items collection to a destination array.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ObjectCollection.GetEnumerator">
            <summary>
             Returns an enumerator for the ListBox Items collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ObjectCollection.Insert(System.Int32,System.Object)">
            <summary>
             Adds an item to the List box. For an unsorted List box, the item is
             added to the end of the existing list of items. For a sorted List box,
             the item is inserted into the list according to its sorted position.
             The item's toString() method is called to obtain the string that is
             displayed in the List box.
             A SystemException occurs if there is insufficient space available to
             store the new item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ObjectCollection.Remove(System.Object)">
            <summary>
             Removes the given item from the ListBox, provided that it is
             actually in the list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt(System.Int32)">
            <summary>
             Removes an item from the ListBox at the given index.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.IntegerCollection.Count">
            <summary>
             Number of current selected items.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.IntegerCollection.AddInternal(System.Int32)">
            <summary>
             Add a unique integer to the collection in sorted order.
             A SystemException occurs if there is insufficient space available to
             store the new item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.IntegerCollection.Add(System.Int32)">
            <summary>
             Adds a unique integer to the collection in sorted order.
             A SystemException occurs if there is insufficient space available to
             store the new item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.IntegerCollection.AddRangeInternal(System.Collections.ICollection)">
            <summary>
             Add range that bypasses the data source check.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.IntegerCollection.EnsureSpace(System.Int32)">
            <summary>
             Ensures that our internal array has space for
             the requested # of elements.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.IntegerCollection.Remove(System.Int32)">
            <summary>
             Removes the given item from the array.  If
             the item is not in the array, this does nothing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.IntegerCollection.RemoveAt(System.Int32)">
            <summary>
             Removes the item at the given index.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.IntegerCollection.Item(System.Int32)">
            <summary>
             Retrieves the specified selected item.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListBox.IntegerCollection.CustomTabOffsetsEnumerator">
            <summary>
             EntryEnumerator is an enumerator that will enumerate over
             a given state mask.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.IntegerCollection.CustomTabOffsetsEnumerator.#ctor(System.Windows.Forms.ListBox.IntegerCollection)">
            <summary>
             Creates a new enumerator that will enumerate over the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.IntegerCollection.CustomTabOffsetsEnumerator.System#Collections#IEnumerator#MoveNext">
            <summary>
             Moves to the next element, or returns false if at the end.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.IntegerCollection.CustomTabOffsetsEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
             Resets the enumeration back to the beginning.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.IntegerCollection.CustomTabOffsetsEnumerator.System#Collections#IEnumerator#Current">
            <summary>
             Retrieves the current value in the enumerator.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.SelectedIndexCollection.Count">
            <summary>
             Number of current selected items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.SelectedIndexCollection.Item(System.Int32)">
            <summary>
             Retrieves the specified selected item.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.SelectedIndexCollection.InnerArray">
            <summary>
             This is the item array that stores our data.  We share this backing store
             with the main object collection.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListBox.SelectedIndexCollection.SelectedIndexEnumerator">
            <summary>
             EntryEnumerator is an enumerator that will enumerate over
             a given state mask.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.SelectedIndexCollection.SelectedIndexEnumerator.#ctor(System.Windows.Forms.ListBox.SelectedIndexCollection)">
            <summary>
             Creates a new enumerator that will enumerate over the given state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.SelectedIndexCollection.SelectedIndexEnumerator.System#Collections#IEnumerator#MoveNext">
            <summary>
             Moves to the next element, or returns false if at the end.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.SelectedIndexCollection.SelectedIndexEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
             Resets the enumeration back to the beginning.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.SelectedIndexCollection.SelectedIndexEnumerator.System#Collections#IEnumerator#Current">
            <summary>
             Retrieves the current value in the enumerator.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.SelectedObjectCollection.Count">
            <summary>
             Number of current selected items.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.SelectedObjectCollection.Dirty">
            <summary>
             Called by the list box to dirty the selected item state.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.SelectedObjectCollection.InnerArray">
            <summary>
             This is the item array that stores our data.  We share this backing store
             with the main object collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.SelectedObjectCollection.EnsureUpToDate">
            <summary>
             This is the function that Ensures that the selections are uptodate with
             current listbox handle selections.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.SelectedObjectCollection.Item(System.Int32)">
            <summary>
             Retrieves the specified selected item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.SelectedObjectCollection.GetSelected(System.Int32)">
            <summary>
             This method returns if the actual item index is selected.  The index is the index to the MAIN
             collection, not this one.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.SelectedObjectCollection.SetSelected(System.Int32,System.Boolean)">
            <summary>
             Same thing for GetSelected.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListBox.ListBoxItemAccessibleObject">
            <summary>
             ListBox control accessible object with UI Automation provider functionality.
             This inherits from the base ListBoxExAccessibleObject and ListBoxAccessibleObject
             to have all base functionality.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.ListBoxItemAccessibleObject.RuntimeId">
            <summary>
             Gets the runtime ID.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.ListBoxItemAccessibleObject.Bounds">
            <summary>
             Gets the ListBox Item bounds.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.ListBoxItemAccessibleObject.DefaultAction">
            <summary>
             Gets the ListBox item default action.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.ListBoxItemAccessibleObject.Help">
            <summary>
             Gets the help text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.ListBoxItemAccessibleObject.Name">
            <summary>
             Gets or sets the accessible name.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.ListBoxItemAccessibleObject.Role">
            <summary>
             Gets the accessible role.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListBox.ListBoxItemAccessibleObject.State">
            <summary>
             Gets the accessible state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListBox.ListBoxItemAccessibleObject.IsPatternSupported(Interop.UiaCore.UIA)">
            <summary>
             Indicates whether specified pattern is supported.
            </summary>
            <param name="patternId">The pattern ID.</param>
            <returns>True if specified </returns>
        </member>
        <member name="P:System.Windows.Forms.ListControl.DataSource">
            <summary>
             The ListSource to consume as this ListBox's source of data.
             When set, a user can not modify the Items collection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListControl.DisplayMember">
            <summary>
             If the ListBox contains objects that support properties, this indicates
             which property of the object to show. If "", the object shows it's ToString().
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListControl.DisplayMemberConverter">
            <summary>
             Cached type converter of the property associated with the display member
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListControl.AllowSelection">
            <summary>
             Indicates whether list currently allows selection of list items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListControl.BindingFieldEmpty">
            <remarks>
             We use this to prevent getting the selected item when mouse is hovering
             over the dropdown.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.ListControl.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
             Handling special input keys, such as PageUp, PageDown, Home, End, etc...
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListControl.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
             Actually goes and fires the selectedIndexChanged event. Inheriting controls
             should use this to know when the event is fired [this is preferable to
             adding an event handler on yourself for this event]. They should,
             however, remember to call base.OnSelectedIndexChanged(e); to ensure the event is
             still fired to external listeners
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListControlConvertEventHandler">
            <summary>
             Represents a method that will handle the <see cref="E:System.Windows.Forms.ListControl.Format"/> event of a <see cref="T:System.Windows.Forms.ListControl"/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListViewItemConverter">
            <summary>
             ListViewItemConverter is a class that can be used to convert
             ListViewItem objects from one data type to another.  Access this
             class through the TypeDescriptor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewItemConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Gets a value indicating whether this converter can convert an object to the given
             destination type using the context.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewItemConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type. The most common types to convert
             are to and from a string object. The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string. If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListManagerBindingsCollection">
            <summary>
             BindingsCollection is a collection of bindings for a Control. It has Add/Remove capabilities,
             as well as an All array property, enumeration, etc.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListManagerBindingsCollection.#ctor(System.Windows.Forms.BindingManagerBase)">
            <summary>
             ColumnsCollection constructor.  Used only by DataSource.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListView">
            <summary>
             Displays a list of items in one of four
             views. Each item displays a caption and optionally an image.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.#ctor">
            <summary>
             Creates an empty ListView with default styles.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.Activation">
            <summary>
             The activation style specifies what kind of user action is required to
             activate an item.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.Alignment">
            <summary>
             The alignment style specifies which side of the window items are aligned
             to by default
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.AllowColumnReorder">
            <summary>
             Specifies whether the user can drag column headers to
             other column positions, thus changing the order of displayed columns.
             This property is only meaningful in Details view.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.AutoArrange">
            <summary>
             If AutoArrange is true items are automatically arranged according to
             the alignment property.  Items are also kept snapped to grid.
             This property is only meaningful in Large Icon or Small Icon views.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.BorderStyle">
            <summary>
             Describes the border style of the window.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.CheckBoxes">
            <summary>
             If CheckBoxes is true, every item will display a checkbox next
             to it.  The user can change the state of the item by clicking the checkbox.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.CheckedIndices">
            <summary>
             The indices of the currently checked list items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.CheckedItems">
            <summary>
             The currently checked list items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.ComctlSupportsVisualStyles">
            <summary>
             Actually we are using this to indicate whether ComCtl supports
             the new listview features. This is true for ComCtl 6 and above, same as
             the versions that support visual styles.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.CreateParams">
            <summary>
             Computes the handle creation parameters for the ListView control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.FocusedItem">
            <summary>
             Retreives the item which currently has the user focus.  This is the
             item that's drawn with the dotted focus rectangle around it.
             Returns null if no item is currently focused.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.FullRowSelect">
            <summary>
             Specifies whether a click on an item will select the entire row instead
             of just the item itself.
             This property is only meaningful in Details view
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.GridLines">
            <summary>
             If true, draws grid lines between items and subItems.
             This property is only meaningful in Details view
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.Groups">
            <summary>
             The collection of groups belonging to this ListView
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.HeaderStyle">
            <summary>
             Column headers can either be invisible, clickable, or non-clickable.
             This property is only meaningful in Details view
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.HideSelection">
            <summary>
             If false, selected items will still be highlighted (in a
             different color) when focus is moved away from the ListView.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.HoverSelection">
            <summary>
             Determines whether items can be selected by hovering over them with the mouse.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.LabelEdit">
            <summary>
             Tells whether the EditLabels style is currently set.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.LabelWrap">
            <summary>
             Tells whether the LabelWrap style is currently set.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.LargeImageList">
            <summary>
             The Currently set ImageList for Large Icon mode.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.ListViewHandleDestroyed">
            <summary>
             Returns the current LISTVIEWSTATE_handleDestroyed value so that this
             value can be accessed from child classes.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.ListViewItemSorter">
            <summary>
             The sorting comparer for this ListView.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.MultiSelect">
            <summary>
             Tells whether the MultiSelect style is currently set.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.OwnerDraw">
            <summary>
             Indicates whether the list view items (and sub-items in the Details view) will be
             drawn by the system or the user. This includes the column header when item index = -1.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.ListView.RightToLeftLayout" -->
        <member name="P:System.Windows.Forms.ListView.Scrollable">
            <summary>
             Tells whether the ScrollBars are visible or not.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.SelectedIndices">
            <summary>
             The indices of the currently selected list items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.SelectedItems">
            <summary>
             The currently selected list items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.SmallImageList">
            <summary>
             The currently set SmallIcon image list.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ListView.ColumnReordered">
            <summary>
             Tell the user that the column headers are being rearranged
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ListView.ColumnWidthChanged">
            <summary>
             Tell the user that the column width changed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ListView.ColumnWidthChanging">
            <summary>
             Tell the user that the column width is being changed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ListView.DrawColumnHeader">
            <summary>
             Fires in owner draw + Details mode when a column header needs to be drawn.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ListView.DrawItem">
            <summary>
             Fires in owner draw mode when a ListView item needs to be drawn.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ListView.DrawSubItem">
            <summary>
             Fires in owner draw mode and Details view when a ListView sub-item needs to be drawn.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ListView.Paint">
            <summary>
             ListView Onpaint.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ApplyUpdateCachedItems">
            <summary>
             Called to add any delayed update items we have to the list view.  We do this because
             we have optimnized the case where a user is only adding items within a beginupdate/endupdate
             block.  If they do any other operations (get the count, remove, insert, etc.), we push in the
             cached up items first, then do the requested operation.  This keeps it simple so we don't have to
             try to maintain parellel state of the cache during a begin update end update.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ArrangeIcons(System.Windows.Forms.ListViewAlignment)">
            <summary>
             In Large Icon or Small Icon view, arranges the items according to one
             of the following behaviors:
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ArrangeIcons">
            <summary>
             In Large Icon or Small Icon view, arranges items according to the ListView's
             current alignment style.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.BeginUpdate">
            <summary>
             Prevents the ListView from redrawing itself until EndUpdate is called.
             Calling this method before individually adding or removing a large number of Items
             will improve performance and reduce flicker on the ListView as items are
             being updated.  Always call EndUpdate immediately after the last item is updated.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.Clear">
            <summary>
             Removes all items and columns from the ListView.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.CompareFunc(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
             This is the sorting callback function called by the system ListView control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.CustomDraw(System.Windows.Forms.Message@)">
             <summary>
              Handles custom drawing of list items - for individual item font/color changes.
            
              If OwnerDraw is true, we fire the OnDrawItem and OnDrawSubItem (in Details view)
              events and let the user do the drawing.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.DetachImageList(System.Object,System.EventArgs)">
            <summary>
             Resets the imageList to null.  We wire this method up to the imageList's
             Dispose event, so that we don't hang onto an imageList that's gone away.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.Dispose(System.Boolean)">
            <summary>
             Disposes of the component.  Call dispose when the component is no longer needed.
             This method removes the component from its container (if the component has a site)
             and triggers the dispose event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.EndUpdate">
            <summary>
             Cancels the effect of BeginUpdate.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)">
            <summary>
             Ensure that the item is visible, scrolling the view as necessary.
             @index  Index of item to scroll into view
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.GetDisplayIndex(System.Windows.Forms.ListViewItem,System.Int32)">
            <summary>
             Gets the real index for the given item.  lastIndex is the last return
             value from GetDisplayIndex, or -1 if you don't know.  If provided,
             the search for the index can be greatly improved.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.GetColumnIndex(System.Windows.Forms.ColumnHeader)">
            <summary>
             Called by ColumnHeader objects to determine their position
             in the ListView
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.GetItemAt(System.Int32,System.Int32)">
            <summary>
             Returns the current ListViewItem corresponding to the specific
             x,y co-ordinate.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.GetItemRect(System.Int32)">
            <summary>
             Returns a list item's bounding rectangle, including subitems.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.GetItemRect(System.Int32,System.Windows.Forms.ItemBoundsPortion)">
            <summary>
             Returns a specific portion of a list item's bounding rectangle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.GetItemRectOrEmpty(System.Int32)">
            <summary>
             Private version of GetItemRect that fails silently. We use this instead of catching
             exceptions thrown by GetItemRect, to avoid first chance exceptions confusing the user.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.GetSubItemRect(System.Int32,System.Int32)">
            <summary>
             Returns a listview sub-item's bounding rectangle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.InsertColumn(System.Int32,System.Windows.Forms.ColumnHeader,System.Boolean)">
            <summary>
             Inserts a new Column into the ListView
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.InsertItems(System.Int32,System.Windows.Forms.ListViewItem[],System.Boolean)">
            <summary>
             Inserts a new ListViewItem into the ListView.  The item will be inserted
             either in the correct sorted position, or, if no sorting is set, at the
             position indicated by the index parameter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.InsertItemsNative(System.Int32,System.Windows.Forms.ListViewItem[])">
            <summary>
             Inserts a new ListViewItem into the list view itself.
             This only will be called when the Handle has been created for the list view.
             This method loops through the items, sets up their state then adds them.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
             Handling special input keys, such as pgup, pgdown, home, end, etc...
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)">
            <summary>
             Fires the afterLabelEdit event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.OnMouseLeave(System.EventArgs)">
            <summary>
             We keep track of if we've hovered already so we don't fire multiple hover events
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)">
            <summary>
             In order for the MouseHover event to fire for each item in a ListView,
             the item the mouse is hovering over is found. Each time a new item is hovered
             over a new event is raised.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)">
            <summary>
             Fires the beforeLabelEdit event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)">
            <summary>
             Fires the columnClick event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)">
            <summary>
             Fires the column header rearranged event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)">
            <summary>
             Fires the column width changing event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)">
            <summary>
             Fires the column width changing event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)">
            <summary>
             Fires the DrawColumnHeader event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)">
            <summary>
             Fires the DrawItem event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)">
            <summary>
             Fires the DrawSubItem event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)">
            <summary>
             Fires the itemActivate event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)">
            <summary>
             This is the code that actually fires the KeyEventArgs.  Don't
             forget to call base.onItemCheck() to ensure that itemCheck vents
             are correctly fired for all other keys.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)">
            <summary>
             Fires the ItemMouseHover event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)">
            <summary>
             Fires the ItemSelectionChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)">
            <summary>
             Fires the search for virtual item event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
             Actually goes and fires the selectedIndexChanged event.  Inheriting controls
             should use this to know when the event is fired [this is preferable to
             adding an event handler on yourself for this event].  They should,
             however, remember to call base.onSelectedIndexChanged(e); to ensure the event is
             still fired to external listeners
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.RedrawItems(System.Int32,System.Int32,System.Boolean)">
            <summary>
             Forces the redraw of a range of listview items.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.SetColumnWidth(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)">
            <summary>
             Setting width is a special case 'cuz LVM_SETCOLUMNWIDTH accepts more values
             for width than LVM_SETCOLUMN does.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.UpdateSavedCheckedItems(System.Windows.Forms.ListViewItem,System.Boolean)">
            <summary>
             This is a new internal method added which is used by ListView Item to set
             the check state of the item in the savedCheckedItems collection
             if the ListView Checkboxes is OFF.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.SetToolTip(System.Windows.Forms.ToolTip,System.String)">
            <summary>
             Called by ToolTip to poke in that Tooltip into this ComCtl so that the Native ChildToolTip is not exposed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.SetItemText(System.Int32,System.Int32,System.String,Interop.ComCtl32.LVITEMW@)">
            <summary>
              For perf, allow a LVITEM to be passed in so we can reuse in tight loops.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.Sort">
            <summary>
             Updated the sorted order
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListView.IconComparer">
            new class for comparing and sorting Icons ....
        </member>
        <member name="P:System.Windows.Forms.ListView.CheckedIndexCollection.Count">
            <summary>
             Number of currently selected items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.CheckedIndexCollection.Item(System.Int32)">
            <summary>
             Selected item in the list.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ListView.CheckedListViewItemCollection.lastAccessedIndex">
             A caching mechanism for key accessor
             We use an index here rather than control so that we don't have lifetime
             issues by holding on to extra references.
        </member>
        <member name="P:System.Windows.Forms.ListView.CheckedListViewItemCollection.Count">
            <summary>
             Number of currently selected items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.CheckedListViewItemCollection.Item(System.Int32)">
            <summary>
             Selected item in the list.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.CheckedListViewItemCollection.Item(System.String)">
            <summary>
             Retrieves the child control with the specified key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.CheckedListViewItemCollection.ContainsKey(System.String)">
            <summary>
             Returns true if the collection contains an item with the specified key, false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.CheckedListViewItemCollection.IndexOfKey(System.String)">
            <summary>
             The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.CheckedListViewItemCollection.IsValidIndex(System.Int32)">
            <summary>
             Determines if the index is valid for the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.SelectedIndexCollection.Count">
            <summary>
             Number of currently selected items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.SelectedIndexCollection.Item(System.Int32)">
            <summary>
             Selected item in the list.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ListView.SelectedListViewItemCollection.lastAccessedIndex">
             A caching mechanism for key accessor
             We use an index here rather than control so that we don't have lifetime
             issues by holding on to extra references.
        </member>
        <member name="P:System.Windows.Forms.ListView.SelectedListViewItemCollection.Count">
            <summary>
             Number of currently selected items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.SelectedListViewItemCollection.Item(System.Int32)">
            <summary>
             Selected item in the list.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.SelectedListViewItemCollection.Item(System.String)">
            <summary>
             Retrieves the child control with the specified key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.SelectedListViewItemCollection.IsValidIndex(System.Int32)">
            <summary>
             Determines if the index is valid for the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.SelectedListViewItemCollection.Clear">
            <summary>
             Unselects all items.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.SelectedListViewItemCollection.ContainsKey(System.String)">
            <summary>
             Returns true if the collection contains an item with the specified key, false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.SelectedListViewItemCollection.IndexOfKey(System.String)">
            <summary>
             The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.ColumnHeaderCollection.Item(System.Int32)">
            <summary>
             Given a Zero based index, returns the ColumnHeader object
             for the column at that index
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.ColumnHeaderCollection.Item(System.String)">
            <summary>
             Retrieves the child control with the specified key.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.ColumnHeaderCollection.Count">
            <summary>
             The number of columns the ListView currently has in Details view.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ColumnHeaderCollection.RemoveByKey(System.String)">
            <summary>
             Removes the child control with the specified key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ListView.ColumnHeaderCollection.lastAccessedIndex">
             A caching mechanism for key accessor
             We use an index here rather than control so that we don't have lifetime
             issues by holding on to extra references.
             Note this is not Thread Safe - but WinForms has to be run in a STA anyways.
        </member>
        <member name="M:System.Windows.Forms.ListView.ColumnHeaderCollection.IndexOfKey(System.String)">
            <summary>
             The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ColumnHeaderCollection.IsValidIndex(System.Int32)">
            <summary>
             Determines if the index is valid for the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ColumnHeaderCollection.Add(System.String,System.Int32,System.Windows.Forms.HorizontalAlignment)">
            <summary>
             Adds a column to the end of the Column list
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ColumnHeaderCollection.Clear">
            <summary>
             Removes all columns from the list view.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ColumnHeaderCollection.ContainsKey(System.String)">
            <summary>
             Returns true if the collection contains an item with the specified key, false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ColumnHeaderCollection.RemoveAt(System.Int32)">
            <summary>
             removes a column from the ListView
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListView.ListViewItemCollection">
            <summary>
             Represents the collection of items in a ListView or ListViewGroup
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ListView.ListViewItemCollection.lastAccessedIndex">
             A caching mechanism for key accessor
             We use an index here rather than control so that we don't have lifetime
             issues by holding on to extra references.
        </member>
        <member name="P:System.Windows.Forms.ListView.ListViewItemCollection.Count">
            <summary>
             Returns the total number of items within the list view.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.ListViewItemCollection.Item(System.Int32)">
            <summary>
             Returns the ListViewItem at the given index.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListView.ListViewItemCollection.Item(System.String)">
            <summary>
             Retrieves the child control with the specified key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)">
            <summary>
             Add an item to the ListView.  The item will be inserted either in
             the correct sorted position, or, if no sorting is set, at the end
             of the list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String,System.Int32)">
            <summary>
             Add an item to the ListView.  The item will be inserted either in
             the correct sorted position, or, if no sorting is set, at the end
             of the list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.Windows.Forms.ListViewItem)">
            <summary>
             Add an item to the ListView.  The item will be inserted either in
             the correct sorted position, or, if no sorting is set, at the end
             of the list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String,System.String)">
            <summary>
             Add an item to the ListView.  The item will be inserted either in
             the correct sorted position, or, if no sorting is set, at the end
             of the list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String,System.String,System.String)">
            <summary>
             Add an item to the ListView.  The item will be inserted either in
             the correct sorted position, or, if no sorting is set, at the end
             of the list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String,System.String,System.Int32)">
            <summary>
             Add an item to the ListView.  The item will be inserted either in
             the correct sorted position, or, if no sorting is set, at the end
             of the list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ListViewItemCollection.Clear">
            <summary>
             Removes all items from the list view.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ListViewItemCollection.ContainsKey(System.String)">
            <summary>
             Returns true if the collection contains an item with the specified key, false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ListViewItemCollection.Find(System.String,System.Boolean)">
            <summary>
             Searches for Controls by their Name property, builds up an array
             of all the controls that match.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ListViewItemCollection.FindInternal(System.String,System.Boolean,System.Windows.Forms.ListView.ListViewItemCollection,System.Collections.ArrayList)">
            <summary>
             Searches for Controls by their Name property, builds up an arraylist
             of all the controls that match.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ListViewItemCollection.IndexOfKey(System.String)">
            <summary>
             The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ListViewItemCollection.IsValidIndex(System.Int32)">
            <summary>
             Determines if the index is valid for the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ListViewItemCollection.Remove(System.Windows.Forms.ListViewItem)">
            <summary>
             Removes an item from the ListView
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ListViewItemCollection.RemoveAt(System.Int32)">
            <summary>
             Removes an item from the ListView
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.ListViewItemCollection.RemoveByKey(System.String)">
            <summary>
             Removes the child control with the specified key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListView.CreateAccessibilityInstance">
            <summary>
             Creates the new instance of AccessibleObject for this ListView control.
             Returning ListViewAccessibleObject.
            </summary>
            <returns>
             The AccessibleObject for this ListView instance.
            </returns>
        </member>
        <member name="T:System.Windows.Forms.ListViewAlignment">
            <summary>
             Specifies how items align in the <see cref='T:System.Windows.Forms.ListView'/>.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ListViewAlignment.Default">
            <summary>
             When the user moves an item, it remains where it is dropped.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ListViewAlignment.Top">
            <summary>
             Items are aligned to the top of the <see cref='T:System.Windows.Forms.ListView'/> control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ListViewAlignment.Left">
            <summary>
             Items are aligned to the left of the <see cref='T:System.Windows.Forms.ListView'/> control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ListViewAlignment.SnapToGrid">
            <summary>
             Items are aligned to an invisible grid in the control. When the user
             moves an item, it moves to the closest juncture in the grid.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListViewGroup">
            <summary>
             Represents a group within a ListView.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewGroup.#ctor">
            <summary>
             Creates a ListViewGroup.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewGroup.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Creates a ListViewItem object from an Stream.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewGroup.#ctor(System.String,System.String)">
            <summary>
             Creates a ListViewItem object from a Key and a Name
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewGroup.#ctor(System.String)">
            <summary>
             Creates a ListViewGroup.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewGroup.#ctor(System.String,System.Windows.Forms.HorizontalAlignment)">
            <summary>
             Creates a ListViewGroup.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewGroup.Header">
            <summary>
             The text displayed in the group header.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewGroup.HeaderAlignment">
            <summary>
             The alignment of the group header.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewGroup.Items">
            <summary>
             The items that belong to this group.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListViewGroupCollection">
            <summary>
             A collection of listview groups.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListViewGroupConverter">
            <summary>
             ListViewGroupConverter is a class that can be used to convert  ListViewGroup objects
             from one data type to another. Access this class through the TypeDescriptor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewGroupConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Determines if this converter can convert an object in the given source type to
             the native type of the converter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewGroupConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Gets a value indicating whether this converter can convert an object to the given
             destination type using the context.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewGroupConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
             Converts the given object to the converter's native type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewGroupConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type. The most common types to convert
             are to and from a string object. The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string. If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewGroupConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Retrieves a collection containing a set of standard values for the data type this
             validator is designed for. This will return null if the data type does not support
             a standard set of values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewGroupConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if the list of standard values returned from GetStandardValues is an
             exclusive list.  If the list is exclusive, then no other values are valid, such as
             in an enum data type.  If the list is not exclusive, then there are other valid values
             besides the list of standard values GetStandardValues provides.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewGroupConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if this object supports a standard set of values that can be picked
             from a list.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListViewHitTestInfo">
            <summary>
             Specifies the return value for HITTEST on ListView.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewHitTestInfo.#ctor(System.Windows.Forms.ListViewItem,System.Windows.Forms.ListViewItem.ListViewSubItem,System.Windows.Forms.ListViewHitTestLocations)">
            <summary>
             Creates a ListViewHitTestInfo instance.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewHitTestInfo.Location">
            <summary>
             This gives the exact location returned by hit test on listview.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewHitTestInfo.Item">
            <summary>
             This gives the ListViewItem returned by hit test on listview.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewHitTestInfo.SubItem">
            <summary>
             This gives the ListViewSubItem returned by hit test on listview.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListViewInsertionMark">
            <summary>
             Encapsulates insertion-mark information
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem">
            <summary>
             Specifies whether the insertion mark appears
             after the item - otherwise it appears
             before the item (the default).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewInsertionMark.Bounds">
            <summary>
             Returns bounds of the insertion-mark.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewInsertionMark.Color">
            <summary>
             The color of the insertion-mark.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewInsertionMark.Index">
            <summary>
             Item next to which the insertion-mark appears.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewInsertionMark.NearestIndex(System.Drawing.Point)">
            <summary>
             Performs a hit-test at the specified insertion point
             and returns the closest item.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListViewItem">
            <summary>
             Implements an item of a <see cref='T:System.Windows.Forms.ListView'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Creates a ListViewItem object from an Stream.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.BackColor">
            <summary>
             The font that this item will be displayed in. If its value is null, it will be displayed
             using the global font for the ListView control that hosts it.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.Bounds">
            <summary>
             Returns the ListViewItem's bounding rectangle, including subitems. The bounding rectangle is empty if
             the ListViewItem has not been added to a ListView control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.Focused">
            <summary>
             Returns the focus state of the ListViewItem.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.ImageIndex">
            <summary>
             Returns the ListViewItem's currently set image index
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.ImageKey">
            <summary>
             Returns the ListViewItem's currently set image index
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.Index">
            <summary>
             Returns ListViewItem's current index in the listview, or -1 if it has not been added to a ListView control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.ListView">
            <summary>
             Returns the ListView control that holds this ListViewItem. May be null if no
             control has been assigned yet.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.Name">
            <summary>
             Name associated with this ListViewItem
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.SavedStateImageIndex">
            <summary>
             Accessor for our state bit vector.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.Selected">
            <summary>
             Treats the ListViewItem as a row of strings, and returns an array of those strings
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.StateSelected">
            <summary>
             Accessor for our state bit vector.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.SubItemCount">
            <summary>
             Accessor for our state bit vector.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.Text">
            <summary>
             Text associated with this ListViewItem
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.ToolTipText">
            <summary>
             Tool tip text associated with this ListViewItem
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.UseItemStyleForSubItems">
            <summary>
             Whether or not the font and coloring for the ListViewItem will be used for all of its subitems.
             If true, the ListViewItem style will be used when drawing the subitems.
             If false, the ListViewItem and its subitems will be drawn in their own individual styles
             if any have been set.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewItem.BeginEdit">
            <summary>
             Initiate editing of the item's label. Only effective if LabelEdit property is true.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewItem.EnsureVisible">
            <summary>
             Ensure that the item is visible, scrolling the view as necessary.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewItem.GetBounds(System.Windows.Forms.ItemBoundsPortion)">
            <summary>
             Returns a specific portion of the ListViewItem's bounding rectangle.
             The rectangle returned is empty if the ListViewItem has not been added to a ListView control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewItem.UpdateGroupFromName">
            <summary>
             This is used to map list view items w/ their respective groups in localized forms.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewItem.UpdateStateToListView(System.Int32,Interop.ComCtl32.LVITEMW@,System.Boolean)">
            <summary>
             Called when we have just pushed this item into a list view and we need
             to configure the list view's state for the item. Use a valid index
             if you can, or use -1 if you can't.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewItem.Serialize(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Saves this ListViewItem object to the given data stream.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.ListViewSubItemCollection.Count">
            <summary>
             Returns the total number of items within the list view.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.ListViewSubItemCollection.Item(System.Int32)">
            <summary>
             Returns a ListViewSubItem given it's zero based index into the ListViewSubItemCollection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItem.ListViewSubItemCollection.Item(System.String)">
            <summary>
             Retrieves the child control with the specified key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewItem.ListViewSubItemCollection.ContainsKey(System.String)">
            <summary>
             Returns true if the collection contains an item with the specified key, false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewItem.ListViewSubItemCollection.EnsureSubItemSpace(System.Int32,System.Int32)">
            <summary>
             Ensures that the sub item array has the given
             capacity. If it doesn't, it enlarges the
             array until it does. If index is -1, additional
             space is tacked onto the end. If it is a valid
             insertion index into the array, this will move
             the array data to accomodate the space.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewItem.ListViewSubItemCollection.IndexOfKey(System.String)">
            <summary>
             The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewItem.ListViewSubItemCollection.IsValidIndex(System.Int32)">
            <summary>
             Determines if the index is valid for the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewItem.ListViewSubItemCollection.RemoveByKey(System.String)">
            <summary>
             Removes the child control with the specified key.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListViewItemMouseHoverEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)'/> event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListViewItemMouseHoverEventHandler">
            <summary>
             Represents a method that will handle the <see cref='E:System.Windows.Forms.ListView.ItemMouseHover'/>
             event of a <see cref='T:System.Windows.Forms.ListView'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListViewItemSelectionChangedEventArgs">
            <summary>
             The event class that is created when the selection state of a ListViewItem is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewItemSelectionChangedEventArgs.#ctor(System.Windows.Forms.ListViewItem,System.Int32,System.Boolean)">
            <summary>
             Constructs a ListViewItemSelectionChangedEventArgs object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItemSelectionChangedEventArgs.Item">
            <summary>
             The list view item whose selection changed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItemSelectionChangedEventArgs.ItemIndex">
            <summary>
             The list view item's index
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItemSelectionChangedEventArgs.IsSelected">
            <summary>
             Return true if the item is selected
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListViewItemSelectionChangedEventHandler">
            <summary>
             Represents a method that will handle the <see cref='E:System.Windows.Forms.ListView.ItemSelectionChanged'/>
             event of a <see cref='T:System.Windows.Forms.ListView'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListViewItemStates">
            <summary>
             Gives state information about a ListView item/sub-item. Used with owner draw.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListViewItemStateImageIndexConverter">
            <summary>
             Provides a type converter to convert state image index values from one data type to another.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewItemStateImageIndexConverter.IncludeNoneAsStandardValue">
            <summary>
             Gets a value that indicates whether a <see cref="!:none" /> or <see langword="null" /> value
             is valid in the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> collection.
            </summary>
            <value>
             Always returns <see langword="false" /> to indicate that a <see cref="!:none" /> or
             <see langword="null" /> value isn't valid in the standard values collection.
            </value>
        </member>
        <member name="M:System.Windows.Forms.ListViewItemStateImageIndexConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Retrieves a collection containing a set of standard values for the data type this validator is designed for.
            </summary>
            <param name="context">
             An object that provides a format context, which can be used to extract additional
             information about the environment this type converter is being invoked from. 
             This parameter or its properties can be <see langword="null" />.
            </param>
            <returns>
             A collection that holds a standard set of valid index values.If no image list is found,
             this collection contains a single object with a value of -1. This method returns<see langword="null" />
             if the data type doesn't support a standard set of values.
            </returns>
        </member>
        <member name="T:System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs">
            <summary>
             The event class that is created when the selection state of a ListViewItem is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
             Constructs a ListViewVirtualItemsSelectionRangeChangedEventArgs object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs.StartIndex">
            <summary>
             Returns the begining of the range where the selection changed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs.EndIndex">
            <summary>
             Returns the end of the range where the selection changed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs.IsSelected">
            <summary>
             Return true if the items are selected
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler">
            <summary>
             Represents a method that will handle the <see cref='E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged'/>
             event of a <see cref='T:System.Windows.Forms.ListView'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MaskedTextBox">
            <summary>
             MaskedTextBox control definition class.
             Uses the services from the System.ComponentModel.MaskedTextBoxProvider class.
             See spec at http://dotnetclient/whidbey/Specs/MaskEdit.doc
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.#ctor">
            <summary>
             Constructs the MaskedTextBox with the specified MaskedTextProvider object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.#ctor(System.String)">
            <summary>
             Constructs the MaskedTextBox with the specified MaskedTextProvider object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.#ctor(System.ComponentModel.MaskedTextProvider)">
            <summary>
             Constructs the MaskedTextBox with the specified MaskedTextProvider object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.Initialize(System.ComponentModel.MaskedTextProvider)">
            <summary>
             Initializes the object with the specified MaskedTextProvider object and default
             property values.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.AcceptsTab">
            
             <summary>
              Unsupported method/property.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput">
            <summary>
             Specifies whether the prompt character should be treated as a valid input character or not.
             The setter resets the underlying MaskedTextProvider object and attempts
             to add the existing input text (if any) using the new mask, failure is ignored.
             This property has no particular effect if no mask has been set.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged">
            <summary>
             Unsupported method/property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.AsciiOnly">
            <summary>
             Specifies whether only ASCII characters are accepted as valid input.
             This property has no particular effect if no mask has been set.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.BeepOnError">
            <summary>
             Specifies whether to play a beep when the input is not valid according to the mask.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.CanUndo">
            <summary>
             Gets a value indicating whether the user can undo the previous operation in a text box control.
             Unsupported method/property.
             WndProc ignores EM_CANUNDO.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.CreateParams">
            <summary>
             Returns the parameters needed to create the handle. Inheriting classes
             can override this to provide extra functionality. They should not,
             however, forget to call base.getCreateParams() first to get the struct
             filled up with the basic info.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.Culture">
            <summary>
             The culture that determines the value of the localizable mask language separators and placeholders.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat">
            <summary>
             Specifies the formatting options for text cut/copited to the clipboard (Whether the mask returned from the Text
             property includes Literals and/or prompt characters).
             When prompt characters are excluded, theyare returned as spaces in the string returned.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.FormatProvider">
            <summary>
             Specifies the IFormatProvider to be used when parsing the string to the ValidatingType.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave">
            <summary>
             Specifies whether the PromptCharacter is displayed when the control loses focus.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.IncludeLiterals">
            <summary>
             Specifies whether to include mask literal characters when formatting the text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.IncludePrompt">
            <summary>
             Specifies whether to include the mask prompt character when formatting the text in places
             where an edit char has not being assigned.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.InsertKeyMode">
            <summary>
             Specifies the text insertion mode of the text box.  This can be used to simulated the Access masked text
             control behavior where insertion is set to TextInsertionMode.AlwaysOverwrite
             This property has no particular effect if no mask has been set.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
             Overridden to handle unsupported RETURN key.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode">
            <summary>
             Specifies whether text insertion mode in 'on' or not.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged">
            <summary>
             Event to notify when the insert mode has changed.  This is required for data binding.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.Lines">
            <summary>
             Unsupported method/property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.Mask">
            <summary>
             The mask applied to this control.  The setter resets the underlying MaskedTextProvider object and attempts
             to add the existing input text (if any) using the new mask, failure is ignored.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.MaskedTextBox.MaskChanged">
            <summary>
             Event to notify when the mask has changed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.MaskCompleted">
            <summary>
             Specifies whether the test string required input positions, as specified by the mask, have
             all been assigned.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.MaskFull">
            <summary>
             Specifies whether all inputs (required and optional) have been provided into the mask successfully.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider">
            <summary>
             Returns a copy of the control's internal MaskedTextProvider.  This is useful for user's to provide
             cloning semantics for the control (we don't want to do it) w/o incurring in any perf penalty since
             some of the properties require recreating the underlying provider when they are changed.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected">
            <summary>
             Event to notify when an input has been rejected according to the mask.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.MaskedTextBox.MaxLength" -->
        <member name="P:System.Windows.Forms.MaskedTextBox.Multiline">
            <summary>
             Unsupported method/property.
             virtual method.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.MaskedTextBox.MultilineChanged">
            <summary>
             Unsupported method/property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.PasswordChar">
            <summary>
             Specifies the character to be used in the formatted string in place of editable characters, if
             set to any printable character, the text box becomes a password text box, to reset it use the null
             character.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.PasswordProtect">
            <summary>
             Determines if the control is in password protect mode.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.PromptChar">
            <summary>
             Specifies the prompt character to be used in the formatted string for unsupplied characters.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.ReadOnly">
            <summary>
             Overwrite base class' property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure">
            <summary>
             Specifies whether to include the mask prompt character when formatting the text in places
             where an edit char has not being assigned.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt">
            <summary>
             Specifies whether to reset and skip the current position if editable, when the input character
             has the same value as the prompt.  This property takes precedence over AllowPromptAsInput.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace">
            <summary>
             Specifies whether to reset and skip the current position if editable, when the input
             is the space character.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.SkipLiterals">
            <summary>
             Specifies whether to skip the current position if non-editable and the input character has
             the same value as the literal at that position.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.SelectedText">
            <summary>
             The currently selected text (if any) in the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.ImeComplete">
            <summary>
             Set the composition string as the result string.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.ImeNotify(Interop.Imm32.CPS)">
            <summary>
             Notifies the IMM about changes to the status of the IME input context.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.SetEditControlPasswordChar(System.Char)">
            <summary>
             Sets the underlying edit control's password char to the one obtained from this.PasswordChar.
             This is used when the control is passworded and this.flagState[IS_NULL_MASK].
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.SystemPasswordChar">
            <summary>
             The value of the Edit control default password char.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.Text">
            <summary>
             The Text setter validates the input char by char, raising the MaskInputRejected event for invalid chars.
             The Text getter returns the formatted text according to the IncludeLiterals and IncludePrompt properties.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.TextLength">
            <summary>
             Returns the length of the displayed text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.TextOutput">
            <summary>
             The formatted text, it is what the Text getter returns when a mask has been applied to the control.
             The text format follows the IncludeLiterals and IncludePrompt properties (See MaskedTextProvider.ToString()).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.TextAlign">
            <summary>
             Gets or sets how text is aligned in the control.
             Note: This code is duplicated in TextBox for simplicity.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged">
            <summary>
             Event to notify the text alignment has changed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat">
            <summary>
             Specifies the formatting options for text output (Whether the mask returned from the Text
             property includes Literals and/or prompt characters).
             When prompt characters are excluded, theyare returned as spaces in the string returned.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.ToString">
            <summary>
             Provides some interesting information for the TextBox control in String form.
             Returns the test string (no password, including literals and prompt).
            </summary>
        </member>
        <member name="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted">
            <summary>
             Event to notify when the validating object completes parsing the formatted text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar">
            <summary>
             Indicates if the text in the edit control should appear as the default password character.
             This property has precedence over the PasswordChar property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.ValidatingType">
            <summary>
             Type of the object to be used to parse the text when the user leaves the control.
             A ValidatingType object must implement a method with one fo the following signature:
             public static Object Parse(string)
             public static Object Parse(string, IFormatProvider)
             See DateTime.Parse(...) for an example.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskedTextBox.WordWrap">
            <summary>
             Unsupported method/property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.ClearUndo">
            <summary>
             Clears information about the most recent operation from the undo buffer of the control.
             Unsupported property/method.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.CreateHandle">
            <summary>
             Creates a handle for this control. This method is called by the framework, this should
             not be called directly. Inheriting classes should always call <c>base.CreateHandle</c> when overriding this method.
             Overridden to be able to set the control text with the masked (passworded) value when recreating
             handle, since the underlying native edit control is not aware of it.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.Delete(System.Windows.Forms.Keys,System.Int32,System.Int32)">
            <summary>
             Deletes characters from the control's text according to the key pressed (Delete/Backspace).
             Returns true if something gets actually deleted, false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.GetCharFromPosition(System.Drawing.Point)">
            <summary>
             Returns the character nearest to the given point.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.GetCharIndexFromPosition(System.Drawing.Point)">
            <summary>
             Returns the index of the character nearest to the given point.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.GetEndPosition">
            <summary>
             Returns the position of the last input character (or if available, the next edit position).
             This is used by base.AppendText.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine">
            <summary>
             Unsupported method/property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)">
            <summary>
             Unsupported method/property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.GetFormattedDisplayString">
            <summary>
             Gets the string in the text box following the formatting parameters includePrompt and includeLiterals and
             honoring the PasswordChar property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)">
            <summary>
             Unsupported method/property.
             virtual method.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.GetPositionFromCharIndex(System.Int32)">
            <summary>
             Returns the location of the character at the given index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.GetPreferredSizeCore(System.Drawing.Size)">
            <summary>
             Need to override this method so when get_Text is called we return the text that is actually
             painted in the control so measuring text works on the actual text and not the formatted one.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.GetSelectedText">
            <summary>
             The selected text in the control according to the CutCopyMaskFormat properties (IncludePrompt/IncludeLiterals).
             This is used in Cut/Copy operations (SelectedText).
             The prompt character is always replaced with a blank character.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.OnHandleCreated(System.EventArgs)">
            <summary>
             Overridden to update the newly created handle with the settings of the PasswordChar properties
             if no mask has been set.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)">
            <summary>
             Raises the IsOverwriteModeChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.KeyDown'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.KeyPress'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.KeyUp'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)">
            <summary>
             Raises the MaskChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.OnMaskInputRejected(System.Windows.Forms.MaskInputRejectedEventArgs)">
            <summary>
             Raises the MaskInputRejected event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.OnMultilineChanged(System.EventArgs)">
            <summary>
             Unsupported method/property.
             virtual method.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)">
            <summary>
             Raises the TextAlignChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.OnTypeValidationCompleted(System.Windows.Forms.TypeValidationEventArgs)">
            <summary>
             Raises the TypeValidationCompleted event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
             Raises the  System.Windows.Forms.Control.Validating event.
             Overridden here to be able to control the order validating events are
             raised [TypeValidationCompleted - Validating - Validated - Leave - KillFocus]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)">
            <summary>
             Raises the TextChanged event and related Input/Output text events when mask is null.
             Overriden here to be able to control order of text changed events.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.Replace(System.String,System.Int32,System.Int32)">
            <summary>
             Replaces the current selection in the text box specified by the startPosition and selectionLen parameters
             with the contents of the supplied string.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.PasteInt(System.String)">
            <summary>
             Pastes specified text over the currently selected text (if any) shifting upper characters if
             input is longer than selected text, and/or removing remaining characters from the selection if
             input contains less characters.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.PerformTypeValidation(System.ComponentModel.CancelEventArgs)">
            <summary>
             Performs validation of the input string using the provided ValidatingType object (if any).
             Returns an object created from the formatted text.
             If the CancelEventArgs param is not null, it is assumed the control is leaving focus and
             the validation event chain is being executed (TypeValidationCompleted - Validating - Validated...);
             the value of the CancelEventArgs.Cancel property is the same as the TypeValidationEventArgs.Cancel
             on output (Cancel provides proper handling of focus shifting at the Control class level).
             Note: The text being validated does not include prompt chars.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.PlaceChar(System.Char,System.Int32,System.Int32,System.Boolean,System.ComponentModel.MaskedTextResultHint@)">
            <summary>
             Insert or replaces the specified character into the control's text and updates the caret position.
             If overwrite is true, it replaces the character at the selection start position.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.PlaceChar(System.ComponentModel.MaskedTextProvider,System.Char,System.Int32,System.Int32,System.Boolean,System.ComponentModel.MaskedTextResultHint@)">
            <summary>
             Override version to be able to perform the operation on a cloned provider.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.MaskedTextBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" -->
        <member name="M:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage(System.Windows.Forms.Message@)">
            <summary>
             We need to override this method so we can handle input language changes properly.  Control
             doesn't handle the WM_CHAR messages generated after WM_IME_CHAR messages, it passes them
             to DefWndProc (the characters would be displayed in the text box always).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.ResetCulture">
            <summary>
             Designe time support for resetting Culture property..
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.ScrollToCaret">
            <summary>
             Unsupported method/property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.SetMaskedTextProvider(System.ComponentModel.MaskedTextProvider)">
            <summary>
             Sets the underlying MaskedTextProvider object.  Used when the control is initialized
             and one of its properties, backed up by the MaskedTextProvider, changes; this requires
             recreating the provider because it is immutable.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.SetMaskedTextProvider(System.ComponentModel.MaskedTextProvider,System.String)">
            <summary>
             Overload to allow for passing the text when the mask is being changed from null,
             in this case the maskedTextProvider holds backend info only (not the text).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.SetText">
            <summary>
             Sets the control's text to the formatted text obtained from the underlying MaskedTextProvider.
             TextChanged is raised always, this assumes the display or the output text changed.
             The caret position is lost (unless cached somewhere else like when lossing the focus).
             This is the common way of changing the text in the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.SetWindowText">
            <summary>
             Sets the control's text to the formatted text obtained from the underlying MaskedTextProvider.
             TextChanged is not raised. [PasswordChar]
             The caret position is preserved.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.SetWindowText(System.String,System.Boolean,System.Boolean)">
            <summary>
             Sets the text directly in the underlying edit control to the value specified.
             The 'raiseTextChangedEvent' param determines whether TextChanged event is raised or not.
             The 'preserveCaret' param determines whether an attempt to preserve the caret position should be made or not
             after the call to SetWindowText (WindowText) is performed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.ShouldSerializeCulture">
            <summary>
             Designe time support for checking if Culture value in the designer should be serialized.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.Undo">
            <summary>
             Undoes the last edit operation in the text box.
             Unsupported property/method.
             WndProc ignores EM_UNDO.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.ValidateText">
            <summary>
             Forces type validation.  Returns the validated text value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.WmClear">
            <summary>
             Deletes all input characters in the current selection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.WmCopy">
            <summary>
             Copies current selection text to the clipboard, formatted according to the IncludeLiterals properties but
             ignoring the prompt character.
             Returns true if the operation succeeded, false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.WmImeComposition(System.Windows.Forms.Message@)">
            <summary>
             Processes the WM_IME_COMPOSITION message when using Korean IME.
             Korean IME uses the control's caret as the composition string (it processes only one character at a time),
             we need to have special message handling for it.
             Returns true if the message is handled, false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.WmImeStartComposition">
            <summary>
             Processes the WM_IME_STARTCOMPOSITION message.
             Returns true if the message is handled, false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.WmPaste">
            <summary>
             Processes the WM_PASTE message. Copies the text from the clipboard, if is valid,
             formatted according to the mask applied to this control.
             Returns true if the operation succeeded, false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
             We need to override the WndProc method to have full control over what characters can be
             displayed in the text box; particularly, we have special handling when IME is turned on.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.WmKillFocus">
            <summary>
             Processes the WM_KILLFOCUS message. Updates control's text replacing promp chars with space.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MaskedTextBox.WmSetFocus">
            <summary>
             Processes the WM_SETFOCUS message. Updates control's text with formatted text according to
             the include prompt property.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MaskFormat">
            <summary>
             Enum defining inclusion of special characters.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MaskInputRejectedEventArgs">
            <summary>
             Provides data for the MaskInputRejected event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskInputRejectedEventArgs.Position">
            <summary>
             The position where the test failed the mask constraint.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MaskInputRejectedEventArgs.RejectionHint">
            <summary>
             Retreives a hint on why the input is rejected.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MaskInputRejectedEventHandler">
            <summary>
             Describes a delegate for an event that has a MaskInputRejectedEventArgs as
             a parameter.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MdiClient">
            <summary>
            Represents the container for multiple-document interface (MDI) child forms. 
            This class cannot be inherited.
            </summary>
            <remarks>
             Don't create an <see cref="T:System.Windows.Forms.MdiClient"/> control.
             A form creates and uses the <see cref="T:System.Windows.Forms.MdiClient"/> when you set the <see cref="P:System.Windows.Forms.Form.IsMdiContainer"/> property to <see langword="true"/>.  
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.MdiClient.#ctor">
            <summary>
             Creates a new MdiClient.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MdiClient.BackgroundImage">
            <summary>
             Gets or sets the background image displayed in the <see cref="T:System.Windows.Forms.MdiClient" /> control.
            </summary>
            <value>The image to display in the background of the control.</value>
        </member>
        <member name="P:System.Windows.Forms.MdiClient.CreateParams">
            <summary>
             Gets the required creation parameters when the control handle is created.
            </summary>
            <value>The required creation parameters when the control handle is created.</value>
        </member>
        <member name="P:System.Windows.Forms.MdiClient.MdiChildren">
            <summary>
             The list of MDI children contained. This list
             will be sorted by the order in which the children were
             added to the form, not the current ZOrder.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MdiClient.LayoutMdi(System.Windows.Forms.MdiLayout)">
            <summary>
             Arranges the multiple-document interface (MDI) child forms within the MDI parent form.
            </summary>
            <param name="value">One of the enumeration values that defines the layout of MDI child forms.</param>
        </member>
        <member name="M:System.Windows.Forms.MdiClient.OnResize(System.EventArgs)">
            <summary>
             Raises the <see cref="E:System.Windows.Forms.Control.Resize" /> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Forms.MdiClient.ScaleCore(System.Single,System.Single)">
            <summary>
             Scales the entire control and any child controls.
            </summary>
            <param name="dx">The scaling factor for the x-axis</param>
            <param name="dy">The scaling factor for the y-axis.</param>
        </member>
        <member name="M:System.Windows.Forms.MdiClient.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Scales this form's location, size, padding, and margin. The <see cref="T:System.Windows.Forms.MdiClient" /> overrides 
             <see cref="M:System.Windows.Forms.MdiClient.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" /> to enforce a minimum and maximum size.
            </summary>
            <param name="factor">The factor by which the height and width of the control will be scaled.</param>
            <param name="specified">The bounds of the control to use when defining its size and position.</param>
        </member>
        <member name="M:System.Windows.Forms.MdiClient.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Sets the specified bounds of the control.
            </summary>
            <param name="x">The new <see cref="P:System.Windows.Forms.Control.Left" /> property value of the control.</param>
            <param name="y">The new <see cref="P:System.Windows.Forms.Control.Top" /> property value of the control.</param>
            <param name="width">The new <see cref="P:System.Windows.Forms.Control.Width" /> property value of the control.</param>
            <param name="height">The new <see cref="P:System.Windows.Forms.Control.Height" /> property value of the control.</param>
            <param name="specified">A bitwise combination of the enumeration values that specifies the bounds of the control to use.</param>
        </member>
        <member name="M:System.Windows.Forms.MdiClient.SetWindowRgn">
            <summary>
             This code is required to set the correct window region during the resize of the Form at design time.
             There is case when the form contains a MainMenu and also has IsMdiContainer property set, in which, the MdiClient fails to
             resize and hence draw the correct backcolor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MdiClient.WndProc(System.Windows.Forms.Message@)">
            <summary>
             Processes Windows messages.
            </summary>
            <param name="m">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</param>
        </member>
        <member name="T:System.Windows.Forms.MdiClient.ControlCollection">
            <summary>
             Collection of controls...
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MdiClient.ControlCollection.Add(System.Windows.Forms.Control)">
            <summary>
             Adds a control to the MDI Container. This child must be
             a Form that is marked as an MDI Child to be added to the
             container. You should not call this directly, but rather
             set the child form's (ctl) MDIParent property:
            <code>
             //     wrong
             Form child = new ChildForm();
             this.getMdiClient().add(child);
             //     right
             Form child = new ChildForm();
             child.setMdiParent(this);
            </code>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MdiClient.ControlCollection.Remove(System.Windows.Forms.Control)">
            <summary>
             Removes a child control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MdiControlStrip">
            <summary>
             This is the toolstrip used for merging the [:)]    [_][#][X] buttons onto an
             mdi parent when an MDI child is maximized.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MdiControlStrip.#ctor(System.Windows.Forms.IWin32Window)">
            <summary> target is ideally the MDI Child to send the system commands to.
             although there's nothing MDI child specific to it... you could have this
             a toplevel window.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MdiLayout">
            <summary>
             Specifies the layout of multiple document interface (MDI) child windows in an MDI parent window.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MdiLayout.Cascade">
            <summary>
             All MDI child windows are cascaded within the client region of the
             MDI parent form.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MdiLayout.TileHorizontal">
            <summary>
             All MDI child windows are tiled horizontally within the client region
             of the MDI parent form.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MdiLayout.TileVertical">
            <summary>
             All MDI child windows are tiled vertically within the client region of
             the MDI parent form.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MdiLayout.ArrangeIcons">
            <summary>
             All MDI child icons are arranged within the client region of the MDI
             parent form. An application sets this layout to arrange all minimized
             MDI child windows (in the bottom of the client area).
             It does not affect child windows that are not minimized.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MdiWindowDialog.InitializeComponent">
            <summary>
             NOTE: The following code is required by the Windows Forms
             designer.  It can be modified using the form editor.  Do not
             modify it using the code editor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MdiWindowListItemConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Gets a collection of standard values for the data type this validator is
             designed for.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MdiWindowListStrip">
            <summary> this is the menu that merges into the MdiWindowListItem
             in an MDI parent when an MDI child is maximized.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MdiWindowListStrip.PopulateItems(System.Windows.Forms.Form,System.Windows.Forms.ToolStripMenuItem,System.Boolean)">
             <summary> Given a form, the items on this toolstrip populate with the mdi children
              with mnemonics 1-9 and More Windows menu item.
              These items can then be merged into a menustrip.
            
              Based on similar code in MenuItem.cs::PopulateMdiList(), which is unfortunately just different
              enough in its working environment that we can't readily combine the two.
              But if you're fixing something here, chances are that the same issue will need scrutiny over there.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MdiWindowListStrip.OnMoreWindowsMenuItemClick(System.Object,System.EventArgs)">
            <summary> handler for More Windows... This is similar to MenuItem.cs</summary>
        </member>
        <member name="M:System.Windows.Forms.MdiWindowListStrip.OnWindowListItemClick(System.Object,System.EventArgs)">
            <summary> handler for 1 - 9.  This is similar to MenuItem.cs</summary>
        </member>
        <member name="T:System.Windows.Forms.MeasureItemEventArgs">
            <summary>
             This event is sent by controls such as the ListBox or ComboBox that need users
             to tell them how large a given item is to be.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MeasureItemEventArgs.Graphics">
            <summary>
             A Graphics object to measure relative to.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MeasureItemEventArgs.Index">
            <summary>
             The index of item for which the height/width is needed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MeasureItemEventArgs.ItemHeight">
            <summary>
             Where the recipient of the event should put the height of the item specified by
             the index.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MeasureItemEventArgs.ItemWidth">
            <summary>
             Where the recipient of the event should put the width of the item specified by
             the index.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MenuGlyph">
            <summary>
             Enum to be used with the drawMenuGlyph function.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MenuGlyph.Arrow">
            <summary>
             Draws a submenu arrow.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MenuGlyph.Checkmark">
            <summary>
             Draws a menu checkmark.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MenuGlyph.Bullet">
            <summary>
             Draws a menu bullet.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MenuStrip.DefaultSize">
            <!-- Failed to insert some or all of included XML --><include file="doc\MenuStrip.uex" path="docs/doc[@for=&quot;MenuStrip.DefaultSize&quot;]/*" />
        </member>
        <member name="M:System.Windows.Forms.MenuStrip.OnMenuKey">
            <summary>
             Called from ToolStripManager.ProcessMenuKey.  Fires MenuActivate event and sets focus.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.MenuStrip.WndProc(System.Windows.Forms.Message@)" -->
        <member name="T:System.Windows.Forms.MessageBox">
            <summary>
             Displays a
             message box that can contain text, buttons, and symbols that
             inform and instruct the
             user.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.#ctor">
            <summary>
             This constructor is private so people aren't tempted to try and create
             instances of these -- they should just use the static show
             methods.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)">
            <summary>
             Displays a message box with specified text, caption, and style with Help Button.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.String)">
            <summary>
             Displays a message box with specified text, caption, style and Help file Path .
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.String)">
            <summary>
             Displays a message box with specified text, caption, style and Help file Path for a IWin32Window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.String,System.String)">
            <summary>
             Displays a message box with specified text, caption, style, Help file Path and keyword.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.String,System.String)">
            <summary>
             Displays a message box with specified text, caption, style, Help file Path and keyword for a IWin32Window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.String,System.Windows.Forms.HelpNavigator)">
            <summary>
             Displays a message box with specified text, caption, style, Help file Path and HelpNavigator.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.String,System.Windows.Forms.HelpNavigator)">
            <summary>
             Displays a message box with specified text, caption, style, Help file Path and HelpNavigator for IWin32Window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.String,System.Windows.Forms.HelpNavigator,System.Object)">
            <summary>
             Displays a message box with specified text, caption, style, Help file Path ,HelpNavigator and object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.String,System.Windows.Forms.HelpNavigator,System.Object)">
            <summary>
             Displays a message box with specified text, caption, style, Help file Path ,HelpNavigator and object for a IWin32Window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
            <summary>
             Displays a message box with specified text, caption, and style.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
             Displays a message box with specified text, caption, and style.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
             Displays a message box with specified text, caption, and style.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
             Displays a message box with specified text, caption, and style.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.String,System.String)">
            <summary>
             Displays a message box with specified text and caption.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.String)">
            <summary>
             Displays a message box with specified text.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
            <summary>
             Displays a message box with specified text, caption, and style.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
             Displays a message box with specified text, caption, and style.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
             Displays a message box with specified text, caption, and style.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
             Displays a message box with specified text, caption, and style.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
             Displays a message box with specified text and caption.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
             Displays a message box with specified text.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxButtons.OK">
            <summary>
             Specifies that the message box contains an OK button. This field is
             constant.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxButtons.OKCancel">
            <summary>
             Specifies that the message box contains OK and Cancel buttons. This
             field is constant.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxButtons.AbortRetryIgnore">
            <summary>
             Specifies that the message box contains Abort, Retry, and Ignore
             buttons.
             This field is constant.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxButtons.YesNoCancel">
            <summary>
             Specifies that the message box contains Yes, No, and Cancel buttons.
             This field is constant.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxButtons.YesNo">
            <summary>
             Specifies that the
             message box contains Yes and No buttons. This field is
             constant.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxButtons.RetryCancel">
            <summary>
             Specifies that the message box contains Retry and Cancel buttons.
             This field is constant.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxDefaultButton.Button1">
            <summary>
             Specifies that the first button on the message box should be the
             default button.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxDefaultButton.Button2">
            <summary>
             Specifies that the second button on the message box should be the
             default button.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxDefaultButton.Button3">
            <summary>
             Specifies that the third button on the message box should be the
             default button.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxIcon.None">
            <summary>
             Specifies that the message box contain no symbols.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxIcon.Hand">
            <summary>
             Specifies that the message box contains a hand symbol.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxIcon.Question">
            <summary>
             Specifies that the message box contains a question mark symbol.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxIcon.Exclamation">
            <summary>
             Specifies that the message box contains an exclamation symbol.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxIcon.Asterisk">
            <summary>
             Specifies that the message box contains an asterisk symbol.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxIcon.Stop">
            <summary>
             Specifies that the message box contains a hand icon. This field is
             constant.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxIcon.Error">
            <summary>
             Specifies that the message box contains a hand icon.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxIcon.Warning">
            <summary>
             Specifies that the message box contains an exclamation icon.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxIcon.Information">
            <summary>
             Specifies that the message box contains an asterisk icon.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxOptions.ServiceNotification">
            <summary>
             Specifies that the message box is displayed on the active desktop.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxOptions.DefaultDesktopOnly">
            <summary>
             Specifies that the message box is displayed on the active desktop.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxOptions.RightAlign">
            <summary>
             Specifies that the message box text is right-aligned.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxOptions.RtlReading">
            <summary>
             Specifies that the message box text is displayed with Rtl reading order.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MethodInvoker">
            <summary>
             Represents a delegate that can execute any method in managed code that is declared void and takes no parameters.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MonthCalendar">
            <summary>
             This control is an encapsulateion of the Windows month calendar control.
             A month calendar control implements a calendar-like user interface, that
             provides the user with a very intuitive and recognizable method of entering
             or selecting a date.
             Users can also select which days bold.  The most efficient way to add the
             bolded dates is via an array all at once.  (The below descriptions can be applied
             equally to annually and monthly bolded dates as well)
             The following is an example of this:
            <code>
             MonthCalendar mc = new MonthCalendar();
             //     add specific dates to bold
             DateTime[] time = new DateTime[3];
             time[0] = DateTime.Now;
             time[1] = time[0].addDays(2);
             time[2] = time[1].addDays(2);
             mc.setBoldedDates(time);
            </code>
             Removal of all bolded dates is accomplished with:
            <code>
             mc.removeAllBoldedDates();
            </code>
             Although less efficient, the user may need to add or remove bolded dates one at
             a time.  To improve the performance of this, neither addBoldedDate nor
             removeBoldedDate repaints the monthcalendar.  The user must call updateBoldedDates
             to force the repaint of the bolded dates, otherwise the monthCalendar will not
             paint properly.
             The following is an example of this:
            <code>
             DateTime time1 = new DateTime("3/5/98");
             DateTime time2 = new DateTime("4/19/98");
             mc.addBoldedDate(time1);
             mc.addBoldedDate(time2);
             mc.removeBoldedDate(time1);
             mc.updateBoldedDates();
            </code>
             The same applies to addition and removal of annual and monthly bolded dates.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MonthCalendar.CalendarBodyAccessibleObject">
            <summary>
            Represents the calendar body accessible object.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MonthCalendar.CalendarCellAccessibleObject">
            <summary>
            Represents the calendar cell accessible object.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MonthCalendar.CalendarChildAccessibleObject">
            <summary>
            Represents the calendar child accessible object.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MonthCalendar.CalendarGridChildAccessibleObject">
            <summary>
            Represents the calendar grid child accessible object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.INSERT_WIDTH_SIZE">
            <summary>
             This is the arbitrary number of pixels that the Win32 control
             inserts between calendars horizontally, regardless of font.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.INSERT_HEIGHT_SIZE">
            <summary>
             This is the arbitrary number of pixels that the Win32 control
             inserts between calendars vertically, regardless of font.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.monthsOfYear">
            <summary>
             Bitmask for the annually bolded dates.  Months start on January.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.datesToBoldMonthly">
            <summary>
             Bitmask for the dates bolded monthly.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.arrayOfDates">
            <summary>
             Lists are slow, so this section can be optimized.
             Implementation is such that inserts are fast, removals are slow.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.#ctor">
            <summary>
             Creates a new MonthCalendar object.  Styles are the default for a
             regular month calendar control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.CreateAccessibilityInstance">
            <summary>
             MonthCalendar control  accessbile object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.AnnuallyBoldedDates">
            <summary>
             The array of DateTime objects that determines which annual days are shown
             in bold.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.BoldedDates">
            <summary>
             The array of DateTime objects that determines which non-recurring
             specified dates are shown in bold.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.CalendarDimensions">
            <summary>
             The number of columns and rows of months that will be displayed
             in the MonthCalendar control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.CreateParams">
            <summary>
             This is called when creating a window.  Inheriting classes can ovveride
             this to add extra functionality, but should not forget to first call
             base.getCreateParams() to make sure the control continues to work
             correctly.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.DoubleBuffered">
            <summary>
             This property is overridden and hidden from statement completion
             on controls that are based on Win32 Native Controls.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.FirstDayOfWeek">
            <summary>
             The first day of the week for the month calendar control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.MaxDate">
            <summary>
             The maximum allowable date that can be selected.  By default, there
             is no maximum date.  The maximum date is not set if max less than the
             current minimum date.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.MaxSelectionCount">
            <summary>
             The maximum number of days that can be selected in a
             month calendar control.  This method does not affect the current
             selection range.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.MinDate">
            <summary>
             The minimum allowable date that can be selected.  By default, there
             is no minimum date.  The minimum date is not set if min greater than the
             current maximum date.  MonthCalendar does not support dates prior to 1753.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.MonthlyBoldedDates">
            <summary>
             The array of DateTime objects that determine which monthly days to bold.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.MonthCalendar.RightToLeftLayout" -->
        <member name="P:System.Windows.Forms.MonthCalendar.ScrollChange">
            <summary>
             The scroll rate for a month calendar control. The scroll
             rate is the number of months that the control moves its display
             when the user clicks a scroll button.  If this value is zero,
             the month delta is reset to the default, which is the number of
             months displayed in the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.SelectionEnd">
            <summary>
             Indicates the end date of the selected range of dates.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.SelectionStart">
            <summary>
             Indicates
             the start date of the selected range of dates.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.SelectionRange">
            <summary>
             Retrieves the selection range for a month calendar control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.ShowToday">
            <summary>
             Indicates whether the month calendar control will display
             the "today" date at the bottom of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.ShowTodayCircle">
            <summary>
             Indicates whether the month calendar control will circle
             the "today" date.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.ShowWeekNumbers">
            <summary>
             Indicates whether the month calendar control will the display
             week numbers (1-52) to the left of each row of days.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.SingleMonthSize">
            <summary>
             The minimum size required to display a full month.  The size
             information is presented in the form of a Point, with the x
             and y members representing the minimum width and height required
             for the control.  The minimum required window size for a month calendar
             control depends on the currently selected font.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.Size">
            <summary>
             Unlike most controls, serializing the MonthCalendar's Size is really bad:
             when it's restored at runtime, it uses a a default SingleMonthSize, which
             may not be right, especially for JPN/CHS machines.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.TodayDate">
            <summary>
             The date shown as "Today" in the Month Calendar control.
             By default, "Today" is the current date at the time
             the MonthCalendar control is created.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.TodayDateSet">
            <summary>
             Indicates whether or not the TodayDate property has been explicitly
             set by the user. If TodayDateSet is true, TodayDate will return whatever
             the user has set it to. If TodayDateSet is false, TodayDate will follow
             wall-clock time; ie. TodayDate will always equal the current system date.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.TitleBackColor">
            <summary>
             The background color displayed in the month calendar's
             title.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.TitleForeColor">
            <summary>
             The foreground color used to display text within the month
             calendar's title.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.TrailingForeColor">
            <summary>
             The color used to display the previous and following months that
             appear on the current month calendar.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.AddAnnuallyBoldedDate(System.DateTime)">
            <summary>
             Adds a day that will be bolded annually on the month calendar.
             Be sure to call updateBoldedDates() afterwards.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.AddBoldedDate(System.DateTime)">
            <summary>
             Adds a day that will be bolded on the month calendar.
             Be sure to call updateBoldedDates() afterwards.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.AddMonthlyBoldedDate(System.DateTime)">
            <summary>
             Adds a day that will be bolded monthly on the month calendar.
             Be sure to call updateBoldedDates() afterwards.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.MonthCalendar.Click">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.MonthCalendar.DoubleClick">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.MonthCalendar.MouseClick">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.MonthCalendar.MouseDoubleClick">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.MonthCalendar.Paint">
            <summary>
             MonthCalendar Onpaint.
            </summary>
            <hideinheritance/>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.AdjustSize">
            <summary>
             Used to auto-size the control.  The requested number of rows and columns are
             restricted by the maximum size of the parent control, hence the requested number
             of rows and columns may not be what you get.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.BoldDates(System.Windows.Forms.DateBoldEventArgs)">
            <summary>
             Event handler that bolds dates indicated by arrayOfDates
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.CompareDayAndMonth(System.DateTime,System.DateTime)">
            <summary>
             Compares only the day and month of each time.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.Dispose(System.Boolean)">
            <summary>
             Called to cleanup a MonthCalendar.  Normally you do not need
             to call this as the garbage collector will cleanup the buffer
             for you.  However, there may be times when you may want to expedite
             the garbage collectors cleanup.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.GetDisplayRange(System.Boolean)">
            <summary>
             Retrieves date information that represents the low and high limits of the
             control's display.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.GetHitArea(System.Int32)">
            <summary>
             Retrieves the enumeration value corresponding to the hit area.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.GetMinReqRect">
            <summary>
             stub for getMinReqRect (int, boolean)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.GetMinReqRect(System.Int32,System.Boolean,System.Boolean)">
            <summary>
             Used internally to get the minimum size needed to display the
             MonthCalendar. This is needed because
             ComCtl32.MCM.GETMINREQRECT
             returns an incorrect value if showToday
             is set to false. If updateRows is true, then the
             number of rows will be updated according to height.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.GetPreferredHeight(System.Int32,System.Boolean)">
            <summary>
             Called by setBoundsCore.  If updateRows is true, then the
             number of rows will be updated according to height.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.GetPreferredWidth(System.Int32,System.Boolean)">
            <summary>
             Called by setBoundsCore.  If updateCols is true, then the
             number of columns will be updated according to width.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.HitTest(System.Int32,System.Int32)">
            <summary>
             Determines which portion of a month calendar control is at
             at a given point on the screen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.HitTest(System.Drawing.Point)">
            <summary>
             Determines which portion of a month calendar control is at
             at a given point on the screen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
             Handling special input keys, such as pgup, pgdown, home, end, etc...
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.OnHandleCreated(System.EventArgs)">
            <summary>
             Overrides Control.OnHandleCreated()
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.OnHandleDestroyed(System.EventArgs)">
            <summary>
             Overrides Control.OnHandleDestroyed()
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.OnDateChanged(System.Windows.Forms.DateRangeEventArgs)">
            <summary>
             Fires the event indicating that the currently selected date
             or range of dates has changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.OnDateSelected(System.Windows.Forms.DateRangeEventArgs)">
            <summary>
             Fires the event indicating that the user has changed his\her selection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.RemoveAllAnnuallyBoldedDates">
            <summary>
             Removes all annually bolded days.  Be sure to call updateBoldedDates() afterwards.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.RemoveAllBoldedDates">
            <summary>
             Removes all the bolded days.  Be sure to call updateBoldedDates() afterwards.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.RemoveAllMonthlyBoldedDates">
            <summary>
             Removes all monthly bolded days.  Be sure to call updateBoldedDates() afterwards.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.RemoveAnnuallyBoldedDate(System.DateTime)">
            <summary>
             Removes an annually bolded date.  If the date is not found in the
             bolded date list, then no action is taken.  If date occurs more than
             once in the bolded date list, then only the first date is removed.  When
             comparing dates, only the day and month are used. Be sure to call
             updateBoldedDates afterwards.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.RemoveBoldedDate(System.DateTime)">
            <summary>
             Removes a bolded date.  If the date is not found in the
             bolded date list, then no action is taken.  If date occurs more than
             once in the bolded date list, then only the first date is removed.
             Be sure to call updateBoldedDates() afterwards.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.RemoveMonthlyBoldedDate(System.DateTime)">
            <summary>
             Removes a monthly bolded date.  If the date is not found in the
             bolded date list, then no action is taken.  If date occurs more than
             once in the bolded date list, then only the first date is removed.  When
             comparing dates, only the day and month are used.  Be sure to call
             updateBoldedDates afterwards.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.ResetMaxDate">
            <summary>
             Resets the maximum selectable date.  By default value, there is no
             upper limit.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.ResetMinDate">
            <summary>
             Resets the minimum selectable date.  By default value, there is no
             lower limit.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.ResetSelectionRange">
            <summary>
             Resets the limits of the selection range.  By default value, the upper
             and lower limit is the current date.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.ResetTodayDate">
            <summary>
             Resets the "today"'s date.  By default value, "today" is the
             current date (and is automatically updated when the clock crosses
             over to the next day).
             If you set the today date yourself (using the TodayDate property)
             the control will no longer automatically update the current day
             for you. To re-enable this behavior, ResetTodayDate() is used.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.RequestBuffer(System.Int32)">
             <summary>
              reqSize = # elements in int[] array
            
              The size argument should be greater than 0.
              Because of the nature of MonthCalendar, we can expect that
              the requested size will not be ridiculously large, hence
              it is not necessary to decrease the size of an allocated
              block if the new requested size is smaller.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.SendMessage(System.Int32,System.Int32,Interop.ComCtl32.MCGRIDINFO@)">
            <summary>
             Sends a Win32 message to this control.  If the control does not yet
             have a handle, it will be created.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Overrides Control.SetBoundsCore to enforce auto-sizing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.SetControlColor(Interop.ComCtl32.MCSC,System.Drawing.Color)">
            <summary>
             If the handle has been created, this applies the color to the control
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.SetRange">
            <summary>
             Updates the window handle with the min/max ranges if it has been
             created.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.SetCalendarDimensions(System.Int32,System.Int32)">
            <summary>
             Sets the number of columns and rows to display.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.SetDate(System.DateTime)">
            <summary>
             Sets date as the current selected date.  The start and begin of
             the selection range will both be equal to date.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.SetSelectionRange(System.DateTime,System.DateTime)">
            <summary>
             Sets the selection for a month calendar control to a given date range.
             The selection range will not be set if the selection range exceeds the
             maximum selection count.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.SetSelRange(System.DateTime,System.DateTime)">
            <summary>
             Upper must be greater than Lower
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.ShouldSerializeMaxDate">
            <summary>
             Retrieves true if the maxDate should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.ShouldSerializeMinDate">
            <summary>
             Retrieves true if the minDate should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.ShouldSerializeSelectionRange">
            <summary>
             Retrieves true if the selectionRange should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.ShouldSerializeTodayDate">
            <summary>
             Retrieves true if the todayDate should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.UpdateBoldedDates">
            <summary>
             Forces month calendar to display the current set of bolded dates.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.UpdateTodayDate">
            <summary>
             Updates the current setting for "TODAY" in the MonthCalendar control
             If the today date is set, the control will be set to that. Otherwise,
             it will be set to null (running clock mode - the today date will be
             automatically updated).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.WmDateChanged(System.Windows.Forms.Message@)">
            <summary>
             Handles the MCN_SELCHANGE notification
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.WmDateBold(System.Windows.Forms.Message@)">
            <summary>
             Handles the MCN_GETDAYSTATE notification
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.WmCalViewChanged(System.Windows.Forms.Message@)">
            <summary>
             Handles the MCN_VIEWCHANGE  notification
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.WmDateSelected(System.Windows.Forms.Message@)">
            <summary>
             Handles the MCN_SELECT notification
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.WmGetDlgCode(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_GETDLGCODE message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.WmReflectCommand(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_COMMAND messages reflected from the parent control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.WndProc(System.Windows.Forms.Message@)">
            <summary>
             Overrided wndProc
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MonthCalendar.HitTestInfo">
            <summary>
             HitTestInfo objects are returned by MonthCalendar in response to the hitTest method.
             HitTestInfo is for informational purposes only; the user should not construct these objects, and
             cannot modify any of the members.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.HitTestInfo.#ctor(System.Drawing.Point,System.Windows.Forms.MonthCalendar.HitArea,System.DateTime)">
            <summary>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.HitTestInfo.#ctor(System.Drawing.Point,System.Windows.Forms.MonthCalendar.HitArea)">
            <summary>
             This constructor is used when the DateTime member is invalid.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.HitTestInfo.Point">
            <summary>
             The point that was hit-tested
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.HitTestInfo.HitArea">
            <summary>
             Output member that receives an enumeration value from System.Windows.Forms.MonthCalendar.HitArea
             representing the result of the hit-test operation.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MonthCalendar.HitTestInfo.Time">
            <summary>
             The time information specific to the location that was hit-tested.  This value
             will only be valid at certain values of hitArea.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MonthCalendar.HitTestInfo.HitAreaHasValidDateTime(System.Windows.Forms.MonthCalendar.HitArea)">
            <summary>
             Determines whether a given HitArea should have a corresponding valid DateTime
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MonthCalendar.HitArea">
            <summary>
             This enumeration has specific areas of the MonthCalendar control as
             its enumerated values. The hitArea member of System.Windows.Forms.Win32.HitTestInfo
             will be one of these enumerated values, and indicates which portion of
             a month calendar is under a specific point.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.HitArea.Nowhere">
            <summary>
             The given point was not on the month calendar control, or it was
             in an inactive portion of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.HitArea.TitleBackground">
            <summary>
             The given point was over the background of a month's title
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.HitArea.TitleMonth">
            <summary>
             The given point was in a month's title bar, over a month name
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.HitArea.TitleYear">
            <summary>
             The given point was in a month's title bar, over the year value
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.HitArea.NextMonthButton">
            <summary>
             The given point was over the button at the top right corner of
             the control. If the user clicks here, the month calendar will
             scroll its display to the next month or set of months
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.HitArea.PrevMonthButton">
            <summary>
             The given point was over the button at the top left corner of
             the control. If the user clicks here, the month calendar will
             scroll its display to the previous month or set of months
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.HitArea.CalendarBackground">
            <summary>
             The given point was in the calendar's background
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.HitArea.Date">
            <summary>
             The given point was on a particular date within the calendar,
             and the time member of HitTestInfo will be set to the date at
             the given point.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.HitArea.NextMonthDate">
            <summary>
             The given point was over a date from the next month (partially
             displayed at the end of the currently displayed month). If the
             user clicks here, the month calendar will scroll its display to
             the next month or set of months.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.HitArea.PrevMonthDate">
            <summary>
             The given point was over a date from the previous month (partially
             displayed at the end of the currently displayed month). If the
             user clicks here, the month calendar will scroll its display to
             the previous month or set of months.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.HitArea.DayOfWeek">
            <summary>
             The given point was over a day abbreviation ("Fri", for example).
             The time member of HitTestInfo will be set to the corresponding
             date on the top row.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.HitArea.WeekNumbers">
            <summary>
             The given point was over a week number.  This will only occur if
             the showWeekNumbers property of MonthCalendar is enabled. The
             time member of HitTestInfo will be set to the corresponding date
             in the leftmost column.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MonthCalendar.HitArea.TodayLink">
            <summary>
             The given point was on the "today" link at the bottom of the
             month calendar control
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MouseButtons">
            <summary>
             Specifies constants that define which mouse button was pressed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MouseButtons.Left">
            <summary>
             The left mouse button was pressed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MouseButtons.None">
            <summary>
             No mouse button was pressed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MouseButtons.Right">
            <summary>
             The right mouse button was pressed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MouseButtons.Middle">
            <summary>
             The middle mouse button was pressed.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MouseEventArgs">
            <summary>
             Provides data for the <see cref='E:System.Windows.Forms.Control.MouseUp'/>, <see cref='E:System.Windows.Forms.Control.MouseDown'/> and
            <see cref='E:System.Windows.Forms.Control.MouseMove'/> events.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MouseEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.MouseEventArgs'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MouseEventArgs.Button">
            <summary>
             Gets which mouse button was pressed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MouseEventArgs.Clicks">
            <summary>
             Gets the number of times the mouse button was pressed and released.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MouseEventArgs.X">
            <summary>
             Gets the x-coordinate of a mouse click.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MouseEventArgs.Y">
            <summary>
             Gets the y-coordinate of a mouse click.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MouseEventArgs.Delta">
            <summary>
             Gets a signed count of the number of detents the mouse wheel has rotated.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MouseEventArgs.Location">
            <summary>
             Gets the location of the mouse during MouseEvent.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MouseEventHandler">
            <summary>
             Represents a method that will handle the <see cref='E:System.Windows.Forms.Control.MouseDown'/>,
             <see cref='E:System.Windows.Forms.Control.MouseUp'/> or <see cref='E:System.Windows.Forms.Control.MouseMove'/> events of a form,
             control or other component.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.NativeWindow">
            <summary>
             Provides a low-level encapsulation of a window handle
             and a window procedure. The class automatically manages window class creation and registration.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NativeWindow.DpiAwarenessContext">
            <summary>
             Cache window DpiContext awareness information that helps to create handle with right context at the later time.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.Finalize">
            <summary>
             Override's the base object's finalize method.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.ForceExitMessageLoop">
            <summary>
             This was factored into another function so the finalizer in control that releases the window
             can perform the exact same code without further changes.  If you make changes to the finalizer,
             change this method -- try not to change NativeWindow's finalizer.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.NativeWindow.AnyHandleCreated" -->
        <member name="P:System.Windows.Forms.NativeWindow.Handle">
            <summary>
             Gets the handle for this window.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NativeWindow.PreviousWindow">
            <summary>
             This returns the prior NativeWindow created with the same native handle, if any.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NativeWindow.DefaultWindowProc">
            <summary>
             Address of the Windows default WNDPROC (DefWindowProcW).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.AddWindowToTable(System.IntPtr,System.Windows.Forms.NativeWindow)">
            <summary>
             Inserts an entry into this hashtable.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.CreateWindowId(IHandle)">
            <summary>
             Creates and applies a unique identifier to the given window <paramref name="handle"/>.
            </summary>
            <returns>
             The identifier given to the window.
            </returns>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
            <summary>
             Assigns a handle to this <see cref="T:System.Windows.Forms.NativeWindow"/> instance.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.Callback(System.IntPtr,Interop.User32.WindowMessage,System.IntPtr,System.IntPtr)">
            <summary>
             Window message callback method. Control arrives here when a window
             message is sent to this Window. This method packages the window message
             in a Message object and invokes the wndProc() method. A WM_NCDESTROY
             message automatically causes the releaseHandle() method to be called.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.CheckReleased">
            <summary>
             Raises an exception if the window handle is not zero.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
            <summary>
             Creates a window handle for this window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
            <summary>
             Invokes the default window procedure associated with this Window. It is
             an error to call this method when the Handle property is zero.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.DestroyHandle">
            <summary>
             Destroys the handle associated with this window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)">
            <summary>
             Retrieves the window associated with the specified <paramref name="handle"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.GetWindowFromTable(System.IntPtr)">
            <summary>
             Returns the native window for the given handle, or null if
             the handle is not in our hash table.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.GetHandleFromWindowId(System.Int16)">
            <summary>
             Returns the handle from the given <paramref name="id"/> if found, otherwise returns
             <see cref="F:System.IntPtr.Zero"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.OnHandleChange">
            <summary>
             Specifies a notification method that is called when the handle for a
             window is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.OnShutdown(System.Object,System.EventArgs)">
            <summary>
             On class load, we connect an event to Application to let us know when
             the process or domain terminates.  When this happens, we attempt to
             clear our window class cache.  We cannot destroy windows (because we don't
             have access to their thread), and we cannot unregister window classes
             (because the classes are in use by the windows we can't destroy).  Instead,
             we move the class and window procs to DefWndProc
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)">
            <summary>
             When overridden in a derived class, manages an unhandled thread exception.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
            <summary>
             Releases the handle associated with this window.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.NativeWindow.ReleaseHandle(System.Boolean)" -->
        <member name="M:System.Windows.Forms.NativeWindow.RemoveWindowFromIDTable(System.Int16)">
            <summary>
             Removes the given Window from the lookup table.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.SetUnhandledExceptionModeInternal(System.Windows.Forms.UnhandledExceptionMode,System.Boolean)">
             <summary>
              This method can be used to modify the exception handling behavior of
              NativeWindow.  By default, NativeWindow will detect if an application
              is running under a debugger, or is running on a machine with a debugger
              installed.  In this case, an unhandled exception in the NativeWindow's
              WndProc method will remain unhandled so the debugger can trap it.  If
              there is no debugger installed NativeWindow will trap the exception
              and route it to the Application class's unhandled exception filter.
            
              You can control this behavior via a config file, or directly through
              code using this method.  Setting the unhandled exception mode does
              not change the behavior of any NativeWindow objects that are currently
              connected to window handles; it only affects new handle connections.
            
              When threadScope is false, the application exception mode is set. The
              application exception mode is used for all threads that have the Automatic mode.
              Setting the application exception mode does not affect the setting of the current thread.
            
              When threadScope is true, the thread exception mode is set. The thread
              exception mode overrides the application exception mode if it's not Automatic.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.UnSubclass">
             <summary>
              Unsubclassing is a tricky business.  We need to account for some border cases:
            
               1) User has done multiple subclasses but has un-subclassed out of order.
               2) User has done multiple subclasses but now our defWindowProc points to
                   a NativeWindow that has GC'd.
               3) User releasing this handle but this NativeWindow is not the current
                   window proc.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
            <summary>
             Invokes the default window procedure associated with this window.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.NativeWindow.WindowClass">
            <summary>
             WindowClass encapsulates a Windows window class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.WindowClass.Create(System.String,Interop.User32.CS)">
            <summary>
             Retrieves a WindowClass object for use.  This will create a new
             object if there is no such class/style available, or retrun a
             cached object if one exists.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.WindowClass.GetFullClassName(System.String)">
            <summary>
             Fabricates a full class name from a partial.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NativeWindow.WindowClass.RegisterClass">
            <summary>
             Once the classname and style bits have been set, this can be called to register the class.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.NodeLabelEditEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.TreeView.OnBeforeLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)'/>
             or <see cref='M:System.Windows.Forms.TreeView.OnAfterLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)'/> event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.NodeLabelEditEventHandler">
            <summary>
             Represents a method that will handle the <see cref='M:System.Windows.Forms.TreeView.OnBeforeLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)'/>
             or <see cref='M:System.Windows.Forms.TreeView.OnAfterLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)'/> event of
             a <see cref='T:System.Windows.Forms.TreeView'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.NoneExcludedImageIndexConverter">
            <summary>
             Just returns false for IncludeNoneAsStandardValue
            </summary>
        </member>
        <member name="T:System.Windows.Forms.NotifyIcon">
            <summary>
             Specifies a component that creates
             an icon in the Windows System Tray. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.NotifyIcon'/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.#ctor(System.ComponentModel.IContainer)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.NotifyIcon'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NotifyIcon.BalloonTipText">
            <summary>
             Gets or sets the BalloonTip text displayed when
             the mouse hovers over a system tray icon.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NotifyIcon.BalloonTipIcon">
            <summary>
             Gets or sets the BalloonTip icon displayed when
             the mouse hovers over a system tray icon.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NotifyIcon.BalloonTipTitle">
            <summary>
             Gets or sets the BalloonTip title displayed when
             the mouse hovers over a system tray icon.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.NotifyIcon.BalloonTipClicked">
            <summary>
             [This event is raised on the NIN_BALLOONUSERCLICK message.]
            </summary>
        </member>
        <member name="E:System.Windows.Forms.NotifyIcon.BalloonTipClosed">
            <summary>
             [This event is raised on the NIN_BALLOONTIMEOUT message.]
            </summary>
        </member>
        <member name="E:System.Windows.Forms.NotifyIcon.BalloonTipShown">
            <summary>
             [This event is raised on the NIN_BALLOONSHOW or NIN_BALLOONHIDE message.]
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NotifyIcon.Icon">
            <summary>
             Gets or sets the current
             icon.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NotifyIcon.Text">
            <summary>
             Gets or sets the ToolTip text displayed when
             the mouse hovers over a system tray icon.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NotifyIcon.Visible">
            <summary>
             Gets or sets a value indicating whether the icon is visible in the Windows System Tray.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.NotifyIcon.Click">
            <summary>
             Occurs when the user clicks the icon in the system tray.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.NotifyIcon.DoubleClick">
            <summary>
             Occurs when the user double-clicks the icon in the system tray.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.NotifyIcon.MouseClick">
            <summary>
             Occurs when the user clicks the icon in the system tray.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.NotifyIcon.MouseDoubleClick">
            <summary>
             Occurs when the user mouse double clicks the icon in the system tray.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.NotifyIcon.MouseDown">
            <summary>
             Occurs when the
             user presses a mouse button while the pointer is over the icon in the system tray.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.NotifyIcon.MouseMove">
            <summary>
             Occurs
             when the user moves the mouse pointer over the icon in the system tray.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.NotifyIcon.MouseUp">
            <summary>
             Occurs when the
             user releases the mouse button while the pointer
             is over the icon in the system tray.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.Dispose(System.Boolean)">
            <summary>
             Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.NotifyIcon" />
             and optionally releases the managed resources.
            </summary>
            <param name="disposing">
             <see langword="true" /> to release both managed and unmanaged resources;
             <see langword="false" /> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.OnBalloonTipClicked">
            <summary>
             This method raised the BalloonTipClicked event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.OnBalloonTipClosed">
            <summary>
             This method raised the BalloonTipClosed event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.OnBalloonTipShown">
            <summary>
             This method raised the BalloonTipShown event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.OnClick(System.EventArgs)">
            <summary>
             This method actually raises the Click event. Inheriting classes should
             override this if they wish to be notified of a Click event. (This is far
             preferable to actually adding an event handler.) They should not,
             however, forget to call base.onClick(e); before exiting, to ensure that
             other recipients do actually get the event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.OnDoubleClick(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.onDoubleClick to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.OnMouseClick to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.OnMouseDoubleClick to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.NotifyIcon.MouseDown'/> event.
             Inheriting classes should override this method to handle this event.
             Call base.onMouseDown to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.onMouseMove to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.onMouseUp to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.ShowBalloonTip(System.Int32)">
             <summary>
              Displays a balloon tooltip in the taskbar.
            
              The system enforces minimum and maximum timeout values. Timeout
              values that are too large are set to the maximum value and values
              that are too small default to the minimum value. The operating system's
              default minimum and maximum timeout values are 10 seconds and 30 seconds,
              respectively.
            
              No more than one balloon ToolTip at at time is displayed for the taskbar.
              If an application attempts to display a ToolTip when one is already being displayed,
              the ToolTip will not appear until the existing balloon ToolTip has been visible for at
              least the system minimum timeout value. For example, a balloon ToolTip with timeout
              set to 30 seconds has been visible for seven seconds when another application attempts
              to display a balloon ToolTip. If the system minimum timeout is ten seconds, the first
              ToolTip displays for an additional three seconds before being replaced by the second ToolTip.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.ShowBalloonTip(System.Int32,System.String,System.String,System.Windows.Forms.ToolTipIcon)">
             <summary>
              Displays a balloon tooltip in the taskbar with the specified title,
              text, and icon for a duration of the specified timeout value.
            
              The system enforces minimum and maximum timeout values. Timeout
              values that are too large are set to the maximum value and values
              that are too small default to the minimum value. The operating system's
              default minimum and maximum timeout values are 10 seconds and 30 seconds,
              respectively.
            
              No more than one balloon ToolTip at at time is displayed for the taskbar.
              If an application attempts to display a ToolTip when one is already being displayed,
              the ToolTip will not appear until the existing balloon ToolTip has been visible for at
              least the system minimum timeout value. For example, a balloon ToolTip with timeout
              set to 30 seconds has been visible for seven seconds when another application attempts
              to display a balloon ToolTip. If the system minimum timeout is ten seconds, the first
              ToolTip displays for an additional three seconds before being replaced by the second ToolTip.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.ShowContextMenu">
            <summary>
             Shows the context menu for the tray icon.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.UpdateIcon(System.Boolean)">
            <summary>
             Updates the icon in the system tray.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.WmMouseDown(System.Windows.Forms.Message@,System.Windows.Forms.MouseButtons,System.Int32)">
            <summary>
             Handles the mouse-down event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.WmMouseMove(System.Windows.Forms.Message@)">
            <summary>
             Handles the mouse-move event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.WmMouseUp(System.Windows.Forms.Message@,System.Windows.Forms.MouseButtons)">
            <summary>
             Handles the mouse-up event
            </summary>
        </member>
        <member name="T:System.Windows.Forms.NotifyIcon.NotifyIconNativeWindow">
            <summary>
             Defines a placeholder window that the NotifyIcon is attached to.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.NotifyIconNativeWindow.#ctor(System.Windows.Forms.NotifyIcon)">
            <summary>
             Create a new NotifyIcon, and bind the window to the NotifyIcon component.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NotifyIcon.NotifyIconNativeWindow.WndProc(System.Windows.Forms.Message@)">
            <summary>
             Pass messages on to the NotifyIcon object's wndproc handler.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.NumericUpDown">
            <summary>
             Represents a Windows up-down control that displays numeric values.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.NumericUpDown.decimalPlaces">
            <summary>
             The number of decimal places to display.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.NumericUpDown.increment">
            <summary>
             The amount to increment by.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NumericUpDown.Accelerations">
            <summary>
             Specifies the acceleration information.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NumericUpDown.DecimalPlaces">
            <summary>
             Gets or sets the number of decimal places to display in the up-down control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NumericUpDown.Hexadecimal">
            <summary>
             Gets or
             sets a value indicating whether the up-down control should
             display the value it contains in hexadecimal format.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NumericUpDown.Increment">
            <summary>
             Gets or sets the value
             to increment or
             decrement the up-down control when the up or down buttons are clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NumericUpDown.Maximum">
            <summary>
             Gets or sets the maximum value for the up-down control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NumericUpDown.Minimum">
            <summary>
             Gets or sets the minimum allowed value for the up-down control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NumericUpDown.Spinning">
            <summary>
             Determines whether the UpDownButtons have been pressed for enough time to activate acceleration.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NumericUpDown.Text">
            <summary>
             The text displayed in the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NumericUpDown.ThousandsSeparator">
            <summary>
             Gets or sets a value indicating whether a thousands
             separator is displayed in the up-down control when appropriate.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NumericUpDown.Value">
            <summary>
             Gets or sets the value
             assigned to the up-down control.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.NumericUpDown.ValueChanged">
            <summary>
             Occurs when the <see cref='P:System.Windows.Forms.NumericUpDown.Value'/> property has been changed in some way.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.BeginInit">
            <summary>
             Handles tasks required when the control is being initialized.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.DownButton">
            <summary>
             Decrements the value of the up-down control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.EndInit">
            <summary>
             Called when initialization of the control is complete.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
             Overridden to set/reset acceleration variables.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
             Overridden to set/reset acceleration variables.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.OnTextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
             Restricts the entry of characters to digits (including hex), the negative sign,
             the decimal point, and editing keystrokes (backspace).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.OnValueChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.NumericUpDown.OnValueChanged(System.EventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.OnStartTimer">
            <summary>
             Overridden to start/end acceleration.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.OnStopTimer">
            <summary>
             Overridden to start/end acceleration.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.ParseEditText">
            <summary>
             Converts the text displayed in the up-down control to a
             numeric value and evaluates it.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.SetNextAcceleration">
            <summary>
             Updates the index of the UpDownNumericAcceleration entry to use (if needed).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.ShouldSerializeIncrement">
            <summary>
             Indicates whether the <see cref='P:System.Windows.Forms.NumericUpDown.Increment'/> property should be
             persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.ShouldSerializeMaximum">
            <summary>
             Indicates whether the <see cref='P:System.Windows.Forms.NumericUpDown.Maximum'/> property should be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.ShouldSerializeMinimum">
            <summary>
             Indicates whether the <see cref='P:System.Windows.Forms.NumericUpDown.Minimum'/> property should be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.ShouldSerializeValue">
            <summary>
             Indicates whether the <see cref='P:System.Windows.Forms.NumericUpDown.Value'/> property should be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.StartAcceleration">
            <summary>
             Records when UpDownButtons are pressed to enable acceleration.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.StopAcceleration">
            <summary>
             Reset when UpDownButtons are pressed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.ToString">
            <summary>
             Provides some interesting info about this control in String form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.UpButton">
            <summary>
             Increments the value of the up-down control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.UpdateEditText">
            <summary>
             Displays the current value of the up-down control in the appropriate format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDown.ValidateEditText">
            <summary>
             Validates and updates
             the text displayed in the up-down control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NumericUpDown.NumericUpDownAccessibleObject.Name">
            <summary>
             Gets or sets the accessible name.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.NumericUpDownAcceleration">
            <summary>
             Comprises the information specifying how acceleration should be performed
             on a Windows up-down control when the up/down button is pressed for certain
             amount of time.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NumericUpDownAcceleration.Seconds">
            <summary>
             Determines the amount of time for the UpDown control to wait to set the increment
             step when holding the up/down button.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NumericUpDownAcceleration.Increment">
            <summary>
             Determines the amount to increment by.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.NumericUpDownAccelerationCollection">
            <summary>
             Represents a SORTED collection of NumericUpDownAcceleration objects in the NumericUpDown Control.
             The elements in the collection are sorted by the NumericUpDownAcceleration.Seconds property.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.NumericUpDownAccelerationCollection.Add(System.Windows.Forms.NumericUpDownAcceleration)" -->
        <member name="M:System.Windows.Forms.NumericUpDownAccelerationCollection.Clear">
            <summary>
             Removes all items from the ICollection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDownAccelerationCollection.Contains(System.Windows.Forms.NumericUpDownAcceleration)">
            <summary>
             Determines whether the IList contains a specific value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDownAccelerationCollection.CopyTo(System.Windows.Forms.NumericUpDownAcceleration[],System.Int32)">
            <summary>
             Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NumericUpDownAccelerationCollection.Count">
            <summary>
             Gets the number of elements contained in the ICollection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NumericUpDownAccelerationCollection.IsReadOnly">
            <summary>
             Gets a value indicating whether the ICollection is read-only.
             This collection property returns false always.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDownAccelerationCollection.Remove(System.Windows.Forms.NumericUpDownAcceleration)">
            <summary>
             Removes the specified item from the ICollection.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.NumericUpDownAccelerationCollection.System#Collections#Generic#IEnumerable{System#Windows#Forms#NumericUpDownAcceleration}#GetEnumerator" -->
        <member name="M:System.Windows.Forms.NumericUpDownAccelerationCollection.#ctor">
             NumericUpDownAccelerationCollection methods.
            <summary>
             Class constructor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.NumericUpDownAccelerationCollection.AddRange(System.Windows.Forms.NumericUpDownAcceleration[])">
            <summary>
             Adds the elements of specified array to the collection, keeping the collection sorted.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.NumericUpDownAccelerationCollection.Item(System.Int32)">
            <summary>
             Gets (ReadOnly) the element at the specified index. In C#, this property is the indexer for
             the IList class.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.OpacityConverter">
            <summary>
             OpacityConverter is a class that can be used to convert opacity values from one
             data type to another. Access this class through the TypeDescriptor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.OpacityConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Determines if this converter can convert an object in the given source
             type to the native type of the converter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.OpacityConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
             Converts the given object to the converter's native type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.OpacityConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type. The most common types to convert
             are to and from a string object. The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string. If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.OpenFileDialog">
            <summary>
             Represents a common dialog box
             that displays the control that allows the user to open a file. This class
             cannot be inherited.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.OpenFileDialog.CheckFileExists">
            <summary>
             Gets or sets a value indicating whether the dialog box displays a
             warning if the user specifies a file name that does not exist.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.OpenFileDialog.Multiselect">
            <summary>
             Gets or sets a value
             indicating whether the dialog box allows multiple files to be selected.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked">
            <summary>
             Gets or sets a value indicating whether
             the read-only check box is selected.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.OpenFileDialog.ShowReadOnly">
            <summary>
             Gets or sets a value indicating whether the dialog contains a read-only check box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.OpenFileDialog.OpenFile">
            <summary>
             Opens the file selected by the user with read-only permission.  The file
             attempted is specified by the <see cref='P:System.Windows.Forms.FileDialog.FileName'/> property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.OpenFileDialog.Reset">
            <summary>
             Resets all properties to their default values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.OpenFileDialog.RunFileDialog(System.Windows.Forms.NativeMethods.OPENFILENAME_I)">
            <summary>
             Displays a file open dialog.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Orientation">
            <summary>
             Specifies the orientation of controls or elements of controls.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Orientation.Horizontal">
            <summary>
             The control or element is oriented horizontally.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Orientation.Vertical">
            <summary>
             The control or element is oriented vertically.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.OSFeature">
            <summary>
             Provides operating-system specific feature queries.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.OSFeature.LayeredWindows">
            <summary>
             Represents the layered, top-level windows feature. This <see langword='static'/> field
             is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.OSFeature.Themes">
            <summary>
             Determines if the OS supports themes
            </summary>
        </member>
        <member name="M:System.Windows.Forms.OSFeature.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.OSFeature'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.OSFeature.Feature">
            <summary>
             Represents the <see langword='static'/> instance of <see cref='T:System.Windows.Forms.OSFeature'/>
             to use for feature queries. This property is read-only.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.OSFeature.GetVersionPresent(System.Object)">
            <summary>
             Retrieves the version of the specified feature currently available on the system.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.OSFeature.IsPresent(System.Windows.Forms.SystemParameter)">
            <summary>
             Retrieves whether SystemParameterType is supported on the Current OS version.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.OwnerDrawPropertyBag">
            <summary>
             Class used to pass new font/color information around for "partial" ownerdraw list/treeview items.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.OwnerDrawPropertyBag.IsEmpty">
            <summary>
             Returns whether or not this property bag contains all default values (is empty)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.OwnerDrawPropertyBag.Copy(System.Windows.Forms.OwnerDrawPropertyBag)">
            <summary>
             Copies the bag. Always returns a valid ODPB object
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PaintEventArgs">
            <summary>
             Provides data for the <see cref='E:System.Windows.Forms.Control.Paint'/>
             event.
             NOTE: Please keep this class consistent with PrintPageEventArgs.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PaintEventArgs._graphics">
            <summary>
             Graphics object with which painting should be done.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PaintEventArgs._savedGraphicsState">
            <summary>
             See ResetGraphics()
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PaintEventArgs._dc">
            <summary>
             DC (Display context) for obtaining the graphics object. Used to delay
             getting the graphics object until absolutely necessary (for perf reasons)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PaintEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.PaintEventArgs'/>
             class with the specified graphics and clipping rectangle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PaintEventArgs.#ctor(System.IntPtr,System.Drawing.Rectangle)">
            <summary>
             Internal version of constructor for performance
             We try to avoid getting the graphics object until needed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PaintEventArgs.ClipRectangle">
            <summary>
             Gets the rectangle in which to paint.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PaintEventArgs.HDC">
            <summary>
             Gets the HDC this paint event is connected to.  If there is no associated
             HDC, or the GDI+ Graphics object has been created (meaning GDI+ now owns the
             HDC), 0 is returned.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PaintEventArgs.Graphics">
            <summary>
             Gets the <see cref='T:System.Drawing.Graphics'/> object used to paint.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PaintEventArgs.Dispose">
            <summary>
             Disposes of the resources (other than memory) used by the
            <see cref='T:System.Windows.Forms.PaintEventArgs'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PaintEventArgs.ResetGraphics">
            <summary>
             If ControlStyles.AllPaintingInWmPaint, we call this method
             after OnPaintBackground so it appears to OnPaint that it's getting a fresh
             Graphics.  We want to make sure AllPaintingInWmPaint is purely an optimization,
             and doesn't change behavior, so we need to make sure any clipping regions established
             in OnPaintBackground don't apply to OnPaint.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PaintEventHandler">
            <summary>
             Represents a method that will handle the <see cref='E:System.Windows.Forms.Control.Paint'/> event of a <see cref='T:System.Windows.Forms.Control'/> class.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Panel">
            <summary>
             Represents a <see cref='T:System.Windows.Forms.Panel'/> control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Panel.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Panel'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Panel.AutoSize">
            <summary>
             Override to re-expose AutoSize.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Panel.AutoSizeMode">
            <summary>
             Allows the control to optionally shrink when AutoSize is true.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Panel.BorderStyle">
            <summary>
             Indicates the border style for the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Panel.CreateParams">
            <summary>
             Returns the parameters needed to create the handle. Inheriting classes can override
             this to provide extra functionality. They should not, however, forget to call
             base.getCreateParams() first to get the struct filled up with the basic info.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Panel.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Panel.OnResize(System.EventArgs)">
            <summary>
             Fires the event indicating that the panel has been resized.
             Inheriting controls should use this in favour of actually listening to
             the event, but should not forget to call base.onResize() to
             ensure that the event is still fired for external listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Panel.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PictureBox">
            <summary>
             Displays an image that can be a graphic from a bitmap, icon, or metafile, as well as from
             an enhanced metafile, JPEG, or GIF files.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PictureBox._borderStyle">
            <summary>
             The type of border this control will have.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PictureBox._image">
            <summary>
             The image being displayed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PictureBox._sizeMode">
            <summary>
             Controls how the image is placed within our bounds, or how we are sized to fit said image.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PictureBox._localImageStreamReader">
            <summary>
             http://msdn.microsoft.com/en-us/library/93z9ee4x(v=VS.100).aspx
             if we load an image from a stream, we must keep the stream open for the lifetime of the Image
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PictureBox.#ctor">
            <summary>
             Creates a new picture with all default properties and no Image. The default PictureBox.SizeMode
             will be PictureBoxSizeMode.NORMAL.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PictureBox.BorderStyle">
            <summary>
             Indicates the border style for the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PictureBox.CalculateUri(System.String)">
            <summary>
             Try to build a URI, but if that fails, that means it's a relative path, and we treat it as
             relative to the working directory (which is what GetFullPath uses).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PictureBox.CreateParams">
            <summary>
             Returns the parameters needed to create the handle.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PictureBox.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PictureBox.Image">
            <summary>
             Retrieves the Image that the <see cref='T:System.Windows.Forms.PictureBox'/> is currently displaying.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PictureBox.Load">
            <summary>
             Synchronous load
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PictureBox.ShouldSerializeInitialImage">
            <summary>
             Be sure not to re-serialized initial image if it's the default.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PictureBox.ShouldSerializeErrorImage">
            <summary>
             Be sure not to re-serialized error image if it's the default.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PictureBox.ShouldSerializeImage">
            <summary>
             Be sure not to serialize image if it wasn't directly specified
             through the Image property (e.g., if it's a download, or an initial
             or error image)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PictureBox.SizeMode">
            <summary>
             Indicates how the image is displayed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PictureBox.AdjustSize">
            <summary>
             If the PictureBox has the SizeMode property set to AutoSize, this makes sure that the
             picturebox is large enough to hold the image.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PictureBox.GetPreferredSizeCore(System.Drawing.Size)">
            <summary>
             Overriding this method allows us to get the caching and clamping the proposedSize/output to
             MinimumSize / MaximumSize from GetPreferredSize for free.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PictureBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Overridden onPaint to make sure that the image is painted correctly.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PictureBox.OnResize(System.EventArgs)">
            <summary>
             OnResize override to invalidate entire control in Stetch mode
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PictureBox.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PictureBoxSizeMode">
            <summary>
             Specifies how an image is positioned within a <see cref='T:System.Windows.Forms.PictureBox'/>.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PictureBoxSizeMode.Normal">
            <summary>
             The image is placed in the top-left corner of the
            <see cref='T:System.Windows.Forms.PictureBox'/>. The image is clipped
             if the <see cref='T:System.Windows.Forms.PictureBox'/> is to small.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:System.Windows.Forms.PictureBoxSizeMode.StretchImage" -->
        <member name="F:System.Windows.Forms.PictureBoxSizeMode.AutoSize">
            <summary>
             The <see cref='T:System.Windows.Forms.PictureBox'/> is sized to fit the
             size of the image that is displayed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PictureBoxSizeMode.CenterImage">
            <summary>
             The image is displayed in the center if the
            <see cref='T:System.Windows.Forms.PictureBox'/> is larger than the
             image. If the image is larger than the <see cref='T:System.Windows.Forms.PictureBox'/>,
             the center of the picture is placed in the center of the
            <see cref='T:System.Windows.Forms.PictureBox'/> and the outside edges are
             clipped.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PictureBoxSizeMode.Zoom">
            <summary>
             The size of image is increased or decresed maintaining the aspect ratio.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PopupEventArgs">
            <summary>
             This class contains the information a user needs to paint the ToolTip.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PopupEventArgs.#ctor(System.Windows.Forms.IWin32Window,System.Windows.Forms.Control,System.Boolean,System.Drawing.Size)">
            <summary>
             Creates a new PopupEventArgs with the given parameters.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PopupEventArgs.AssociatedWindow">
            <summary>
             The Associated Window for which the tooltip is being painted.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PopupEventArgs.AssociatedControl">
            <summary>
             The control for which the tooltip is being painted.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PopupEventArgs.ToolTipSize">
            <summary>
             The rectangle outlining the area in which the painting should be done.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PopupEventArgs.IsBalloon">
            <summary>
             Whether the tooltip is Ballooned.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PopupEventHandler">
            <summary>
             Handler for the Popup event of the ToolTip control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PreProcessControlState.MessageProcessed">
            <summary>
             Indicates the message has been processed, and no further processing
             is necessary
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PreProcessControlState.MessageNeeded">
            <summary>
             Indicates the control wants the message and processing should continue
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PreProcessControlState.MessageNotNeeded">
            <summary>
             Indicates the control doesn't care about the message
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PreviewKeyDownEventArgs">
            <summary>
             Provides data for the PreviewKeyDownEvent
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PreviewKeyDownEventArgs.KeyData">
            <summary>
             Gets the key data for a <see cref='E:System.Windows.Forms.Control.KeyDown'/>
             or <see cref='E:System.Windows.Forms.Control.KeyUp'/> event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PreviewKeyDownEventArgs.Control">
            <summary>
             Gets a value indicating whether the CTRL key was pressed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PreviewKeyDownEventArgs.KeyCode">
            <summary>
             Gets the keyboard code for a <see cref='E:System.Windows.Forms.Control.KeyDown'/>
             or <see cref='E:System.Windows.Forms.Control.KeyUp'/> event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PreviewKeyDownEventArgs.KeyValue">
            <summary>
             Gets the keyboard value for a <see cref='E:System.Windows.Forms.Control.KeyDown'/>
             or <see cref='E:System.Windows.Forms.Control.KeyUp'/> event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PreviewKeyDownEventArgs.Modifiers">
            <summary>
             Gets the modifier flags for a <see cref='E:System.Windows.Forms.Control.KeyDown'/>
             or <see cref='E:System.Windows.Forms.Control.KeyUp'/> event.
             This indicates which modifier keys (CTRL, SHIFT, and/or ALT) were pressed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PreviewKeyDownEventArgs.Shift">
            <summary>
             Gets a value indicating whether the SHIFT key was pressed.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PreviewKeyDownEventHandler">
            <summary>
             Represents a method that will handle <see cref="E:System.Windows.Forms.Control.PreviewKeyDown"/> event of a <see cref="T:System.Windows.Forms.Control"/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PageSetupDialog">
            <summary>
             Represents a dialog box that allows users to manipulate page settings,
             including margins and paper orientation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PageSetupDialog.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.PageSetupDialog'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PageSetupDialog.AllowMargins">
            <summary>
             Gets or sets a value indicating whether the margins section of the dialog box is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PageSetupDialog.AllowOrientation">
            <summary>
             Gets or sets a value indicating whether the orientation section of the dialog box (landscape vs. portrait)
             is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PageSetupDialog.AllowPaper">
            <summary>
             Gets or sets a value indicating whether the paper section of the dialog box (paper size and paper source)
             is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PageSetupDialog.AllowPrinter">
            <summary>
             Gets or sets a value indicating whether the Printer button is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PageSetupDialog.Document">
            <summary>
             Gets or sets a value indicating the <see cref='T:System.Drawing.Printing.PrintDocument'/> to get page settings from.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PageSetupDialog.EnableMetric">
            <summary>
             This allows the user to override the current behavior where the Metric is converted to ThousandOfInch even for METRIC MEASUREMENTSYSTEM
             which returns a HUNDREDSOFMILLIMETER value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PageSetupDialog.MinMargins">
            <summary>
             Gets or sets a value indicating the minimum margins the user is allowed to select,
             in hundredths of an inch.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PageSetupDialog.PageSettings">
            <summary>
             Gets or sets a value indicating the page settings modified by the dialog box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PageSetupDialog.PrinterSettings">
            <summary>
             Gets
             or sets the printer
             settings the dialog box will modify if the user clicks the Printer button.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PageSetupDialog.ShowHelp">
            <summary>
             Gets or sets a value indicating whether the Help button is visible.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PageSetupDialog.ShowNetwork">
            <summary>
             Gets or sets a value indicating whether the Network button is visible.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PageSetupDialog.Reset">
            <summary>
             Resets all options to their default values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PageSetupDialog.ShouldSerializeMinMargins">
            <summary>
             Indicates whether the <see cref='P:System.Windows.Forms.PageSetupDialog.MinMargins'/>
             property should be
             persisted.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintControllerWithStatusDialog.IsPreview">
            <summary>
             This is new public property which notifies if this controller is used for PrintPreview.. so get the underlying Controller
             and return its IsPreview Property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintControllerWithStatusDialog.OnStartPrint(System.Drawing.Printing.PrintDocument,System.Drawing.Printing.PrintEventArgs)">
            <summary>
             Implements StartPrint by delegating to the underlying controller.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintControllerWithStatusDialog.OnStartPage(System.Drawing.Printing.PrintDocument,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
             Implements StartPage by delegating to the underlying controller.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintControllerWithStatusDialog.OnEndPage(System.Drawing.Printing.PrintDocument,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
             Implements EndPage by delegating to the underlying controller.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintControllerWithStatusDialog.OnEndPrint(System.Drawing.Printing.PrintDocument,System.Drawing.Printing.PrintEventArgs)">
            <summary>
             Implements EndPrint by delegating to the underlying controller.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintControllerWithStatusDialog.StatusDialog.IsRTLResources">
            <summary>
             Tells whether the current resources for this dll have been
             localized for a RTL language.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PrintDialog">
            <summary>
             Allows users to select a printer and choose which
             portions of the document to print.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintDialog.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.PrintDialog'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintDialog.AllowCurrentPage">
            <summary>
             Gets or sets a value indicating whether the Current Page option button is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintDialog.AllowSomePages">
            <summary>
             Gets or sets a value indicating whether the Pages option button is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintDialog.AllowPrintToFile">
            <summary>
             Gets or sets a value indicating whether the Print to file check box is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintDialog.AllowSelection">
            <summary>
             Gets or sets a value indicating whether the From... To... Page option button is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintDialog.Document">
            <summary>
             Gets or sets a value indicating the <see cref='T:System.Drawing.Printing.PrintDocument'/> used to obtain <see cref='T:System.Drawing.Printing.PrinterSettings'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintDialog.PrinterSettings">
            <summary>
             Gets or sets the <see cref='T:System.Drawing.Printing.PrinterSettings'/> the
             dialog box will be modifying.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintDialog.PrintToFile">
            <summary>
             Gets or sets a value indicating whether the Print to file check box is checked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintDialog.ShowHelp">
            <summary>
             Gets or sets a value indicating whether the Help button is displayed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintDialog.ShowNetwork">
            <summary>
             Gets or sets a value indicating whether the Network button is displayed.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.PrintDialog.UseEXDialog" -->
        <member name="M:System.Windows.Forms.PrintDialog.Reset">
            <summary>
             Resets all options, the last selected printer, and the page
             settings to their default values.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PrintPreviewControl">
            <summary>
             The raw "preview" part of print previewing, without any dialogs or buttons.
             Most PrintPreviewControl's are found on PrintPreviewDialog's,
             but they don't have to be.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintPreviewControl.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.PrintPreviewControl'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewControl.AutoZoom">
            <summary>
             Gets or sets a value If true (the default), resizing the control or changing the number of pages shown
             will automatically adjust Zoom to make everything visible.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewControl.Document">
            <summary>
             Gets or sets a value indicating the document to preview.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewControl.Columns">
            <summary>
             Gets or sets the number of pages
             displayed horizontally across the screen.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewControl.CreateParams">
            <summary>
             Gets the CreateParams used to create the window.
             If a subclass overrides this function, it must call the base implementation.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewControl.Position">
            <summary>
             The virtual coordinate of the upper left visible pixel.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewControl.Rows">
            <summary>
             Gets or sets the number of pages
             displayed vertically down the screen.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewControl.RightToLeft">
            <summary>
             This is used for international applications where the language
             is written from RightToLeft. When this property is true,
             control placement and text will be from right to left.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewControl.StartPage">
            <summary>
             Gets or sets the page number of the upper left page.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewControl.VirtualSize">
            <summary>
             How big the control would be if the screen was infinitely large.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewControl.Zoom">
            <summary>
             Gets or sets a value indicating how large the pages will appear.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintPreviewControl.InvalidatePreview">
            <summary>
             Refreshes the preview of the document.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintPreviewControl.OnResize(System.EventArgs)">
            <summary>
             Invalidate the layout, if necessary.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintPreviewControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Paints the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintPreviewControl.ResetBackColor">
            <summary>
             Resets the back color to the defaults for the PrintPreviewControl.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintPreviewControl.ResetForeColor">
            <summary>
             Resets the back color to the defaults for the PrintPreviewControl.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintPreviewControl.WmHScroll(System.Windows.Forms.Message@)">
            <summary>
             WM_HSCROLL handler
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintPreviewControl.WmVScroll(System.Windows.Forms.Message@)">
            <summary>
             WM_VSCROLL handler
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintPreviewControl.WmKeyDown(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_KEYDOWN message.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintPreviewControl.ShouldSerializeBackColor">
            <summary>
             Indicates whether the <see cref='P:System.Windows.Forms.Control.BackColor'/> property should be
             persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintPreviewControl.ShouldSerializeForeColor">
            <summary>
             Indicates whether the <see cref='P:System.Windows.Forms.Control.ForeColor'/> property should be
             persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintPreviewControl.GetBackColor(System.Boolean)">
            <summary>
             Gets back color respectively to the High Contrast theme is applied or not
             and taking into account saved custom back color.
            </summary>
            <param name="isHighContract">Indicates whether High Contrast theme is applied or not.</param>
            <returns>
             Standard back color for PrintPreview control in standard theme (1),
             contrasted color if there is High Contrast theme applied (2) and
             custom color if this is set irrespectively to HC or not HC mode (3).
            </returns>
        </member>
        <member name="T:System.Windows.Forms.PrintPreviewDialog">
            <summary>
             Represents a
             dialog box form that contains a <see cref='T:System.Windows.Forms.PrintPreviewControl'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintPreviewDialog.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.PrintPreviewDialog'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.AcceptButton">
            <summary>
             Indicates the <see cref='T:System.Windows.Forms.Button'/> control on the form that is clicked when
             the user presses the ENTER key.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.AutoScale">
            <summary>
             Gets or sets a value indicating whether the form will adjust its size
             to fit the height of the font used on the form and scale
             its controls.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.AutoScroll">
            <summary>
             Gets or sets a value indicating whether the form implements
             autoscrolling.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.AutoSize">
            <summary>
             Hide the property
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.AutoValidate">
            <summary>
             Hide the property
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.BackColor">
            <summary>
             The background color of this control. This is an ambient property and
             will always return a non-null value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.CancelButton">
            <summary>
             Gets
             or
             sets the button control that will be clicked when the
             user presses the ESC key.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.ControlBox">
            <summary>
             Gets or sets a value indicating whether a control box is displayed in the
             caption bar of the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.ContextMenuStrip">
            <summary>
             Hide the property
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.FormBorderStyle">
            <summary>
             Gets or sets the border style of the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.HelpButton">
            <summary>
             Gets or sets a value indicating whether a
             help button should be displayed in the caption box of the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.Icon">
            <summary>
             Gets or sets the icon for the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.IsMdiContainer">
            <summary>
             Gets or sets a value indicating whether the form is a container for multiple document interface
             (MDI) child forms.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.KeyPreview">
            <summary>
             Gets or sets a value
             indicating whether the form will receive key events
             before the event is passed to the control that has focus.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.MaximumSize">
            <summary>
             Gets or Sets the maximum size the dialog can be resized to.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.MaximizeBox">
            <summary>
             Gets or sets a value indicating whether the maximize button is
             displayed in the caption bar of the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.Margin">
            <summary>
             Hide the value
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.MinimumSize">
            <summary>
             Gets the minimum size the form can be resized to.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.Padding">
            <summary>
             Hide the value
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.Size">
            <summary>
             Gets or sets the size of the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.StartPosition">
            <summary>
             Gets or sets the
             starting position of the form at run time.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.TopMost">
            <summary>
             Gets or sets a value indicating whether the form should be displayed as the top-most
             form of your application.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.TransparencyKey">
            <summary>
             Gets or sets the color that will represent transparent areas of the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.UseWaitCursor">
            <summary>
             Hide the value
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.WindowState">
            <summary>
             Gets or sets the form's window state.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.AccessibleRole">
            <summary>
             The accessible role of the control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.AccessibleDescription">
            <summary>
             The accessible description of the control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.AccessibleName">
            <summary>
             The accessible name of the control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.CausesValidation">
             <summary>
            
              Indicates whether entering the control causes validation on the controls requiring validation.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.DataBindings">
            <summary>
             Retrieves the bindings for this control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.Enabled">
            <summary>
             Indicates whether the control is currently enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.Location">
            <summary>
             The location of this control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.AllowDrop">
            <summary>
             The AllowDrop property. If AllowDrop is set to true then
             this control will allow drag and drop operations and events to be used.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.Cursor">
            <summary>
             Retrieves the cursor that will be displayed when the mouse is over this
             control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.BackgroundImage">
            <summary>
             The background image of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.BackgroundImageLayout">
            <summary>
             The background image layout of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.ImeMode">
            <summary>
             Specifies a value that determines the IME (Input Method Editor) status of the
             object when that object is selected.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.AutoScrollMargin">
            <summary>
             Gets or
             sets the size of the auto-scroll
             margin.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.AutoScrollMinSize">
            <summary>
             Gets or sets the mimimum size of the auto-scroll.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.Anchor">
            <summary>
             The current value of the anchor property. The anchor property
             determines which edges of the control are anchored to the container's
             edges.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.Visible">
            <summary>
             Indicates whether the control is visible.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.ForeColor">
            <summary>
             The foreground color of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.RightToLeft">
            <summary>
             This is used for international applications where the language
             is written from RightToLeft. When this property is true,
             control placement and text will be from right to left.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.PrintPreviewDialog.RightToLeftLayout" -->
        <member name="P:System.Windows.Forms.PrintPreviewDialog.TabStop">
            <summary>
             Indicates whether the user can give the focus to this control using the TAB
             key. This property is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.Text">
            <summary>
             The current text associated with this control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.Dock">
            <summary>
             The dock property. The dock property controls to which edge
             of the container this control is docked to. For example, when docked to
             the top of the container, the control will be displayed flush at the
             top of the container, extending the length of the container.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.Font">
            <summary>
             Retrieves the current font for this control. This will be the font used
             by default for painting and text in the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.AutoScaleBaseSize">
            <summary>
             PrintPreviewDialog does not support AutoScaleBaseSize.
            </summary>
             Keeping implementation of obsoleted AutoScaleBaseSize API
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.Document">
            <summary>
             Gets or sets the document to preview.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.PrintPreviewControl">
            <summary>
             Gets or sets a value indicating the <see cref='T:System.Windows.Forms.PrintPreviewControl'/>
             contained in this form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PrintPreviewDialog.Opacity">
            <summary>
             Opacity does not apply to PrintPreviewDialogs.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintPreviewDialog.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
             Forces the preview to be regenerated every time the dialog comes up
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintPreviewDialog.CreateHandle">
            <summary>
             Creates the handle for the PrintPreviewDialog. If a
             subclass overrides this function,
             it must call the base implementation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintPreviewDialog.ProcessTabKey(System.Boolean)">
            <summary>
             In Everett we used to TAB around the PrintPreviewDialog. Now since the PageCounter is added into the ToolStrip we dont
             This is breaking from Everett.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PrintPreviewDialog.ShouldSerializeAutoScaleBaseSize">
            <summary>
             AutoScaleBaseSize should never be persisted for PrintPreviewDialogs.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ProfessionalColorTable.UseSystemColors">
            <summary> when this is specified, professional colors picks from SystemColors rather than colors
             that match the current theme.  If theming is not turned on, we'll fall back to SystemColors.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ProgressBar">
            <summary>
             Represents a Windows progress bar control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ProgressBar.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.ProgressBar'/> class in its default state.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ProgressBar.Style">
            <summary>
             Gets or sets the style of the ProgressBar. This is can be either Blocks or Continuous.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ProgressBar.MarqueeAnimationSpeed">
            <summary>
             Gets or sets the marquee animation speed of the <see cref='T:System.Windows.Forms.ProgressBar'/>.
             Sets the value to a positive number causes the progressBar to move, while setting it to 0
             stops the ProgressBar.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ProgressBar.StartMarquee">
            <summary>
             Start the Marquee rolling (or stop it, if the speed = 0)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ProgressBar.Maximum">
            <summary>
             Gets or sets the maximum value of the <see cref='T:System.Windows.Forms.ProgressBar'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ProgressBar.Minimum">
            <summary>
             Gets or sets the minimum value of the <see cref='T:System.Windows.Forms.ProgressBar'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ProgressBar.RightToLeftLayout">
            <summary>
             This is used for international applications where the language is written from RightToLeft.
             When this property is true, and the RightToLeft is true, mirroring will be turned on on
             the form, and control placement and text will be from right to left.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ProgressBar.Step">
            <summary>
             Gets or sets the amount that a call to <see cref='M:System.Windows.Forms.ProgressBar.PerformStep'/> increases the progress
             bar's current position.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ProgressBar.Value">
            <summary>
             Gets or sets the current position of the <see cref='T:System.Windows.Forms.ProgressBar'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ProgressBar.Increment(System.Int32)">
            <summary>
             Advances the current position of the <see cref='T:System.Windows.Forms.ProgressBar'/> by the specified increment
             and redraws the control to reflect the new position.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ProgressBar.OnHandleCreated(System.EventArgs)">
            <summary>
             Overridden to set up our properties.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ProgressBar.OnHandleDestroyed(System.EventArgs)">
            <summary>
             Overridden to remove event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ProgressBar.PerformStep">
            <summary>
             Advances the current position of the <see cref='T:System.Windows.Forms.ProgressBar'/> by the amount of the
             <see cref='P:System.Windows.Forms.ProgressBar.Step'/> property, and redraws the control to reflect the new position.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ProgressBar.ResetForeColor">
            <summary>
             Resets the fore color to be based on the parent's fore color.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ProgressBar.ShouldSerializeForeColor">
            <summary>
             Returns true if the ForeColor should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ProgressBar.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ProgressBar.UpdatePos">
            <summary>
             Sends the underlying window a PBM_SETPOS message to update the current value of the
             <see cref='T:System.Windows.Forms.ProgressBar'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ProgressBar.UserPreferenceChangedHandler(System.Object,Microsoft.Win32.UserPreferenceChangedEventArgs)">
            <remarks>
             Note: <see cref='T:System.Windows.Forms.ProgressBar'/> doesn't work like other controls as far as setting ForeColor/BackColor.
             You need to send messages to update the colors.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.ProgressBar.CreateAccessibilityInstance">
            <summary>
             Creates a new AccessibleObject for this <see cref='T:System.Windows.Forms.ProgressBar'/> instance.
             The AccessibleObject instance returned by this method supports ControlType UIA property.
            </summary>
            <returns>
             AccessibleObject for this <see cref='T:System.Windows.Forms.ProgressBar'/> instance.
            </returns>
        </member>
        <member name="T:System.Windows.Forms.ProgressBarRenderer">
            <summary>
             This is a rendering class for the ProgressBar control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ProgressBarRenderer.IsSupported">
            <summary>
             Returns true if this class is supported for the current OS and user/application settings,
             otherwise returns false.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ProgressBarRenderer.DrawHorizontalBar(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Renders a horizontal bar.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ProgressBarRenderer.DrawVerticalBar(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Renders a vertical bar.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ProgressBarRenderer.DrawHorizontalChunks(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Renders a number of constant size horizontal chunks in the given bounds.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ProgressBarRenderer.DrawVerticalChunks(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Renders a number of constant size vertical chunks in the given bounds.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ProgressBarRenderer.ChunkThickness">
            <summary>
             Returns the  width/height of a single horizontal/vertical progress bar chunk.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ProgressBarRenderer.ChunkSpaceThickness">
            <summary>
             Returns the  width/height of the space between horizontal/vertical progress bar chunks.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ProgressBarStyle">
            <summary>
             This Enumeration represents the styles the ProgressBar can take.
             Blocks and Continuous.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ProgressBarStyle.Blocks">
            <summary>
             The progress bar displays the progress status as a segmented bar.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ProgressBarStyle.Continuous">
            <summary>
             The progress bar displays the progress status in a smooth scrolling bar.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ProgressBarStyle.Marquee">
            <summary>
             The progress bar displays the progress status in the marquee style.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.CanShowCommands">
            <summary>
             true if the commands pane will be can be made visible
             for the currently selected objects.  Objects that
             expose verbs can show commands.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.CategoryForeColor">
            <summary>
             The text used color for category headings. The background color is determined by the LineColor property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.CommandsBackColor">
            <summary>
             The background color for the hot commands region.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.CommandsForeColor">
            <summary>
             The forground color for the hot commands region.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.CommandsLinkColor">
            <summary>
             The link color for the hot commands region.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.CommandsActiveLinkColor">
            <summary>
             The active link color for the hot commands region.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.CommandsDisabledLinkColor">
            <summary>
             The color for the hot commands region when the link is disabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.CommandsBorderColor">
            <summary>
             The border color for the hot commands region
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.CommandsVisible">
            <summary>
             Returns true if the commands pane is currently shown.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.CommandsVisibleIfAvailable">
            <summary>
             Returns true if the commands pane will be shown for objects
             that expose verbs.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.ContextMenuDefaultLocation">
            <summary>
             Returns a default location for showing the context menu.  This
             location is the center of the active property label in the grid, and
             is used useful to position the context menu when the menu is invoked
             via the keyboard.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.Controls">
            <summary>
             Collection of child controls.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.HelpAccessibleObject">
            <summary>
             Gets the help control accessibility object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.HelpBackColor">
            <summary>
             The background color for the help region.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.HelpForeColor">
            <summary>
             The forground color for the help region.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.HelpBorderColor">
            <summary>
             The border color for the help region
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.HelpVisible">
            <summary>
             Sets or gets the visiblity state of the help pane.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.HotCommandsAccessibleObject">
            <summary>
             Gets the hot commands control accessible object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.GridViewAccessibleObject">
            <summary>
             Gets the main entry accessible object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.GridViewVisible">
            <summary>
             Gets the value indicating whether the main entry is visible.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.SelectedItemWithFocusBackColor">
            <summary>
             Background color for Highlighted text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.SelectedItemWithFocusForeColor">
            <summary>
             Foreground color for Highlighted (selected) text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.DisabledItemForeColor">
            <summary>
             Foreground color for disabled text in the Grid View
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.CategorySplitterColor">
            <summary>
             Color for the horizontal splitter line separating property categories.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.CanShowVisualStyleGlyphs">
            <summary>
             Enable/Disable use of VisualStyle glyph for PropertyGrid node expansion.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.PropertySort">
            <summary>
             Sets or gets the current property sort type, which can be
             PropertySort.Categorized or PropertySort.Alphabetical.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.SelectedObject">
            <summary>
             Sets a single Object into the grid to be browsed.  If multiple
             objects are being browsed, this property will return the first
             one in the list.  If no objects are selected, null is returned.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.SortedByCategories">
            <summary>
             Gets the value indicating whether the Property grid is sorted by categories.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.ToolbarAccessibleObject">
            <summary>
             Gets the toolbar control accessibility object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.ToolbarVisible">
            <summary>
             Sets or gets the visiblity state of the toolStrip.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.ViewBorderColor">
            <summary>
             Border color for the property grid view.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.PropertyGrid.KeyDown">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.PropertyGrid.KeyPress">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.PropertyGrid.KeyUp">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.PropertyGrid.MouseDown">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.PropertyGrid.MouseUp">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.PropertyGrid.MouseMove">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.PropertyGrid.MouseEnter">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.PropertyGrid.MouseLeave">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.PropertyGrid.PropertyValueChanged">
            <summary> Event that is fired when a property value is modified.</summary>
        </member>
        <member name="E:System.Windows.Forms.PropertyGrid.PropertyTabChanged">
            <summary> Event that is fired when the current view tab is changed, such as changing from Properties to Events</summary>
        </member>
        <member name="E:System.Windows.Forms.PropertyGrid.PropertySortChanged">
            <summary> Event that is fired when the sort mode is changed.</summary>
        </member>
        <member name="E:System.Windows.Forms.PropertyGrid.SelectedGridItemChanged">
            <summary> Event that is fired when the selected GridItem is changed</summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGrid.CollapseAllGridItems">
            <summary> Collapses all the nodes in the PropertyGrid</summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGrid.ClearTabs(System.ComponentModel.PropertyTabScope)">
            <summary>
             Clears the tabs of the given scope or smaller.
             tabScope must be PropertyTabScope.Component or PropertyTabScope.Document.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGrid.CreateAccessibilityInstance">
            <summary>
             Constructs the new instance of the accessibility object for current PropertyGrid control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGrid.GetElementFromPoint(System.Drawing.Point)">
            <summary>
             Gets the element from point.
            </summary>
            <param name="point">The point where to search the element.</param>
            <returns>The element found in the current point.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGrid.Interop#Ole32#IPropertyNotifySink#OnChanged(Interop.Ole32.DispatchID)">
            <summary>
             Called when a property on an Ole32 Object changes.
             See IPropertyNotifySink::OnChanged
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGrid.OnChildMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             We forward messages from several of our children
             to our mouse move so we can put up the spliter over their borders
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGrid.OnChildMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             We forward messages from several of our children
             to our mouse move so we can put up the spliter over their borders
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGrid.Interop#Ole32#IPropertyNotifySink#OnRequestEdit(Interop.Ole32.DispatchID)">
            <summary>
             Called when a property on an Ole32 Object that is tagged with "requestedit" is
             about to be edited. See IPropertyNotifySink::OnRequestEdit
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGrid.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
             Returns the last child control that can take focus
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGrid.RefreshTabs(System.ComponentModel.PropertyTabScope)">
            <summary>
             Refreshes the tabs of the given scope by deleting them and requerying objects and documents
             for them.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.SortByPropertyImage">
            <summary>
             This 16x16 Bitmap is applied to the button which orders properties alphabetically.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.SortByCategoryImage">
            <summary>
             This 16x16 Bitmap is applied to the button which displays properties under the assigned categories.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.ShowPropertyPageImage">
            <summary>
             This 16x16 Bitmap is applied to the button which displays property page in the designer pane.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGrid.SinkPropertyNotifyEvents">
             <summary>
              Sinks the property notify events on all the objects we are currently
              browsing.
            
              See IPropertyNotifySink
             </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.UseCompatibleTextRendering">
            <summary>
             Determines whether to use compatible text rendering engine (GDI+) or not (GDI).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.SupportsUiaProviders">
            <summary>
             Indicates whether or not the control supports UIA Providers via
             IRawElementProviderFragment/IRawElementProviderFragmentRoot interfaces.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.SupportsUseCompatibleTextRendering">
            <summary>
             Determines whether the control supports rendering text using GDI+ and GDI.
             This is provided for container controls to iterate through its children to set UseCompatibleTextRendering to the same
             value if the child control supports it.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGrid.RescaleConstants">
            <summary>
             Rescaling constants.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGrid.RescaleConstantsForDpi(System.Int32,System.Int32)">
            <summary>
             Rescale constants when DPI changed
            </summary>
            <param name="deviceDpiOld">old dpi</param>
            <param name="deviceDpiNew">new dpi</param>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.PropertyTabCollection.Count">
            <summary>
             Retrieves the number of member attributes.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGrid.PropertyTabCollection.Item(System.Int32)">
            <summary>
             Retrieves the member attribute with the specified index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGrid.PropertyTabCollection.Clear(System.ComponentModel.PropertyTabScope)">
            <summary>
             Clears the tabs of the given scope or smaller.
             tabScope must be PropertyTabScope.Component or PropertyTabScope.Document.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGrid.PropertyTabCollection.GetEnumerator">
            <summary>
             Creates and retrieves a new enumerator for this collection.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyGrid.IUnimplemented">
             <summary>
              An unimplemented interface.  What is this?  It is an interface that nobody ever
              implements, of course? Where and why would it be used?  Why, to find cross-process
              remoted objects, of course!  If a well-known object comes in from a cross process
              connection, the remoting layer does contain enough type information to determine
              if an object implements an interface.  It assumes that if you are going to cast
              an object to an interface that you know what you're doing, and allows the cast,
              even for objects that DON'T actually implement the interface.  The error here
              is raised later when you make your first call on that interface pointer:  you
              get a remoting exception.
            
              This is a big problem for code that does "is" and "as" checks to detect the
              presence of an interface.  We do that all over the place here, so we do a check
              during parameter validation to see if an object implements IUnimplemented.  If it
              does, we know that what we really have is a lying remoting proxy, and we bail.
             </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyGrid.MeasureTextHelper">
            <summary>
             Helper class to support rendering text using either GDI or GDI+.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AutomationMessages.WriteAutomationText(System.String)">
            <summary>
             Writes the specified text into a temporary file of the form %TEMP%\"Maui.[file id].log", where
             'file id' is a unique id that is return by this method.
             This is to support MAUI interaction with the PropertyGrid control and MAUI should remove the
             file after used.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AutomationMessages.ReadAutomationText(System.IntPtr)">
            <summary>
             Writes the contents of a test file as text.  This file needs to have the following naming convention:
             %TEMP%\"Maui.[file id].log", where 'file id' is a unique id sent to this window.
             This is to support MAUI interaction with the PropertyGrid control and MAUI should create/delete this file.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.AutomationMessages.GenerateLogFileName(System.IntPtr@)">
            <summary>
             Generate log file from id.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyGridAccessibleObject">
            <summary>
             Represents the PropertyGrid accessibility object.
             Is used only in Accessibility Improvements of level3 to show correct accessible hierarchy.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridAccessibleObject.#ctor(System.Windows.Forms.PropertyGrid)">
            <summary>
             Initializes new instance of PropertyGridAccessibleObject
            </summary>
            <param name="owningPropertyGrid">The PropertyGrid owning control.</param>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridAccessibleObject.ElementProviderFromPoint(System.Double,System.Double)">
            <summary>
             Return the child element at the specified point, if one exists,
             otherwise return this element if the point is on this element,
             otherwise return null.
            </summary>
            <param name="x">x coordinate of point to check</param>
            <param name="y">y coordinate of point to check</param>
            <returns>Return the child element at the specified point, if one exists,
             otherwise return this element if the point is on this element,
             otherwise return null.
            </returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridAccessibleObject.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Request to return the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridAccessibleObject.ChildFragmentNavigate(System.Windows.Forms.AccessibleObject,Interop.UiaCore.NavigateDirection)">
            <summary>
             Request to return the element in the specified direction regarding the provided child element.
            </summary>
            <param name="childFragment">The child element regarding which the target element is searched.</param>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridAccessibleObject.FragmentRoot">
            <summary>
             Return the element that is the root node of this fragment of UI.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridAccessibleObject.GetChildFragment(System.Int32)">
            <summary>
             Gets the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The child index.</param>
            <returns>The accessible child.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridAccessibleObject.GetChildFragmentCount">
            <summary>
             Gets the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridAccessibleObject.GetFocus">
            <summary>
             Return the element in this fragment which has the keyboard focus,
            </summary>
            <returns>Return the element in this fragment which has the keyboard focus,
             if any; otherwise return null.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridAccessibleObject.GetChildFragmentIndex(System.Windows.Forms.AccessibleObject)">
            <summary>
             Gets the child control index.
            </summary>
            <param name="controlAccessibleObject">The control accessible object which index should be found.</param>
            <returns>The child accessible index or -1 if not found.</returns>
        </member>
        <member name="T:System.Windows.Forms.PropertyGridToolStrip">
            <summary>
             Represents the PropertyGrid inner ToolStrip control.
             Is used starting with Accessibility Improvements of level 3.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridToolStrip.#ctor(System.Windows.Forms.PropertyGrid)">
            <summary>
             Initializes new instance of PropertyGridToolStrip control.
            </summary>
            <param name="parentPropertyGrid">The parent PropertyGrid control.</param>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridToolStrip.SupportsUiaProviders">
            <summary>
             Indicates whether or not the control supports UIA Providers via
             IRawElementProviderFragment/IRawElementProviderFragmentRoot interfaces.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridToolStrip.CreateAccessibilityInstance">
            <summary>
             Constructs the new instance of the accessibility object for this control.
            </summary>
            <returns>The accessibility object for this control.</returns>
        </member>
        <member name="T:System.Windows.Forms.PropertyGridToolStripAccessibleObject">
            <summary>
             Represents the PropertyGridToolStrip control accessibility object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridToolStripAccessibleObject.#ctor(System.Windows.Forms.PropertyGridToolStrip,System.Windows.Forms.PropertyGrid)">
            <summary>
             Constructs new instance of PropertyGridToolStripAccessibleObject
            </summary>
            <param name="owningPropertyGridToolStrip">The PropertyGridToolStrip owning control.</param>
            <param name="parentPropertyGrid">The parent PropertyGrid control.</param>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridToolStripAccessibleObject.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Request to return the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridToolStripAccessibleObject.GetPropertyValue(Interop.UiaCore.UIA)">
            <summary>
             Request value of specified property from an element.
            </summary>
            <param name="propertyId">Identifier indicating the property to return</param>
            <returns>Returns a ValInfo indicating whether the element supports this property, or has no value for it.</returns>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.CategoryGridEntry.HasValue">
            <summary>
             Returns true if this GridEntry has a value field in the right hand column.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.CategoryGridEntry.GetAccessibilityObject">
            <summary>
             Gets the accessibility object for the current category grid entry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.CategoryGridEntry.GetChildValueOwner(System.Windows.Forms.PropertyGridInternal.GridEntry)">
            <summary>
             Gets the owner of the current value.  This is usually the value of the
             root entry, which is the object being browsed
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyGridInternal.CategoryGridEntry.CategoryGridEntryAccessibleObject">
            <summary>
             Defines the Category Grid Entry accessible object that is derived from Grid Entry accessible object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.CategoryGridEntry.CategoryGridEntryAccessibleObject.#ctor(System.Windows.Forms.PropertyGridInternal.CategoryGridEntry)">
            <summary>
             Initializes new instance of CategoryGridEntryAccessibleObject.
            </summary>
            <param name="owningCategoryGridEntry">The owning Category Grid Entry object.</param>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.CategoryGridEntry.CategoryGridEntryAccessibleObject.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Returns the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.DocComment.SetChildLabelsBounds">
            <summary>
             Setting child label bounds
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.DocComment.RescaleConstantsForDpi(System.Int32,System.Int32)">
            <summary>
             Rescaling constants when DPi of the window changed.
            </summary>
            <param name="deviceDpiOld"> old dpi</param>
            <param name="deviceDpiNew"> new dpi</param>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.DocComment.CreateAccessibilityInstance">
            <summary>
             Constructs the new instance of the accessibility object for this control.
            </summary>
            <returns>The accessibility object for this control.</returns>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.DocComment.SupportsUiaProviders">
            <summary>
             Indicates whether or not the control supports UIA Providers via
             IRawElementProviderFragment/IRawElementProviderFragmentRoot interfaces.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyGridInternal.DocCommentAccessibleObject">
            <summary>
             Represents the DocComment control accessible object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.DocCommentAccessibleObject.#ctor(System.Windows.Forms.PropertyGridInternal.DocComment,System.Windows.Forms.PropertyGrid)">
            <summary>
             Initializes new instance of DocCommentAccessibleObject.
            </summary>
            <param name="owningDocComment">The owning DocComment control.</param>
            <param name="parentPropertyGrid">The parent PropertyGrid control.</param>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.DocCommentAccessibleObject.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Request to return the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.DocCommentAccessibleObject.GetPropertyValue(Interop.UiaCore.UIA)">
            <summary>
             Request value of specified property from an element.
            </summary>
            <param name="propertyId">Identifier indicating the property to return</param>
            <returns>Returns a ValInfo indicating whether the element supports this property, or has no value for it.</returns>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.DropDownButton.SupportsUiaProviders">
            <summary>
             Indicates whether or not the control supports UIA Providers via
             IRawElementProviderFragment/IRawElementProviderFragmentRoot interfaces.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.DropDownButton.CreateAccessibilityInstance">
            <summary>
             Constructs the new instance of the accessibility object for this control.
            </summary>
            <returns>The accessibility object for this control.</returns>
        </member>
        <member name="T:System.Windows.Forms.PropertyGridInternal.DropDownButtonAccessibleObject">
            <summary>
             Represents the accessibility object for the PropertyGrid DropDown button.
             This DropDownButtonAccessibleObject is available in Level3 only.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.DropDownButtonAccessibleObject.#ctor(System.Windows.Forms.PropertyGridInternal.DropDownButton)">
            <summary>
             Constructs the new instance of DropDownButtonAccessibleObject.
            </summary>
            <param name="owningDropDownButton"></param>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.DropDownButtonAccessibleObject.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Request to return the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.DropDownButtonAccessibleObject.FragmentRoot">
            <summary>
             Returns the element that is the root node of this fragment of UI.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.DropDownButtonAccessibleObject.GetPropertyValue(Interop.UiaCore.UIA)">
            <summary>
             Request value of specified property from an element.
            </summary>
            <param name="propertyId">Identifier indicating the property to return</param>
            <returns>Returns a ValInfo indicating whether the element supports this property, or has no value for it.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.DropDownButtonAccessibleObject.IsPatternSupported(Interop.UiaCore.UIA)">
            <summary>
             Indicates whether the specified pattern is supported.
            </summary>
            <param name="patternId">The pattern ID.</param>
            <returns>True if specified pattern is supported, otherwise false.</returns>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.DropDownButtonAccessibleObject.Role">
            <summary>
             Gets the accessible role.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.DropDownButtonAccessibleObject.SetFocus">
            <summary>
             Request that focus is set to this item.
             The UIAutomation framework will ensure that the UI hosting this fragment is already
             focused before calling this method, so this method should only update its internal
             focus state; it should not attempt to give its own HWND the focus, for example.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyGridInternal.GridEntry">
            <summary>
             Base Entry for properties to be displayed in properties window.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.OutlineIconPadding">
            <summary>
             Outline Icon padding
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.AllowMerge">
            <summary>
             specify that this grid entry should be allowed to be merged for.
             multi-select.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetBackgroundBrush(System.Drawing.Graphics)">
            <summary>
             Gets the value of the background brush to use.  Override
             this member to cause the entry to paint it's background in a different color.
             The base implementation returns null.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.BrowsableAttributes">
            <summary>
             The set of attributes that will be used for browse filtering
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.Component">
            <summary>
             Retrieves the component that is invoking the
             method on the formatter object.  This may
             return null if there is no component
             responsible for the call.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.Container">
            <summary>
             Retrieves the container that contains the
             set of objects this formatter may work
             with.  It may return null if there is no
             container, or of the formatter should not
             use any outside objects.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.DefaultChild">
            <summary>
             Returns the default child GridEntry of this item.  Usually the default property
             of the target object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.Focus">
            <summary>
             Checks if the entry is currently expanded
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.FullLabel">
            <summary>
             Returns the label including the object name, and properties.  For example, the value
             of the Font size property on a Button called Button1 would be "Button1.Font.Size"
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.HasValue">
            <summary>
             Returns true if this GridEntry has a value field in the right hand column.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.HelpKeyword">
            <summary>
             Retrieves the keyword that the VS help dynamic help window will
             use when this IPE is selected.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.Instance">
            <summary>
             Retrieves the component that is invoking the
             method on the formatter object.  This may
             return null if there is no component
             responsible for the call.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.PropertyDescriptor">
            <summary>
             Retrieves the PropertyDescriptor that is surfacing the given object/
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.PropertyLabelIndent">
            <summary>
             Returns the pixel indent of the current GridEntry's label.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.OutlineRect">
            <summary>
             Returns rect that the outline icon (+ or - or arrow) will be drawn into, relative
             to the upper left corner of the GridEntry.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.PropertyCategory">
            <summary>
             Returns category name of the current property
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.PropertyDepth">
            <summary>
             Returns "depth" of this property.  That is, how many parent's between
             this property and the root property.  The root property has a depth of -1.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.PropertyDescription">
            <summary>
             Returns the description helpstring for this GridEntry.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.PropertyLabel">
            <summary>
             Returns the label of this property.  Usually
             this is the property name.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.PropertyName">
            <summary>
             Returns non-localized name of this property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.PropertyType">
            <summary>
             Returns the Type of the value of this GridEntry, or null if the value is null.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.PropertyValue">
            <summary>
             Gets or sets the value for the property that is represented
             by this GridEntry.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.TypeConverter">
            <summary>
             Returns the type converter for this entry.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.UITypeEditor">
            <summary>
             Returns the type editor for this entry.  This may return null if there
             is no type editor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.AddOnLabelClick(System.EventHandler)">
            <summary>
             Add an event handler to be invoked when the label portion of
             the prop entry is clicked
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.AddOnLabelDoubleClick(System.EventHandler)">
            <summary>
             Add an event handler to be invoked when the label portion of
             the prop entry is double
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.AddOnValueClick(System.EventHandler)">
            <summary>
             Add an event handler to be invoked when the value portion of
             the prop entry is clicked
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.AddOnValueDoubleClick(System.EventHandler)">
            <summary>
             Add an event handler to be invoked when the value portion of
             the prop entry is double-clicked
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.AddOnOutlineClick(System.EventHandler)">
            <summary>
             Add an event handler to be invoked when the outline icone portion of
             the prop entry is clicked
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.AddOnOutlineDoubleClick(System.EventHandler)">
            <summary>
             Add an event handler to be invoked when the outline icone portion of
             the prop entry is double clicked
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.AddOnRecreateChildren(System.Windows.Forms.PropertyGridInternal.GridEntryRecreateChildrenEventHandler)">
            <summary>
             Add an event handler to be invoked when the children grid entries are re-created.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.ConvertTextToValue(System.String)">
            <summary>
             Converts the given string of text to a value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.Create(System.Windows.Forms.PropertyGridInternal.PropertyGridView,System.Object[],System.IServiceProvider,System.ComponentModel.Design.IDesignerHost,System.Windows.Forms.Design.PropertyTab,System.Windows.Forms.PropertySort)">
            <summary>
             Create the base prop entries given an object or set of objects
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.CreateChildren">
            <summary>
             Populates the children of this grid entry
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.CreateChildren(System.Boolean)">
            <summary>
             Populates the children of this grid entry
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.DisposeChildren">
            <summary>
             Disposes the array of children
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.EditPropertyValue(System.Windows.Forms.PropertyGridInternal.PropertyGridView)">
            <summary>
             Invokes the type editor for editing this item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.Equals(System.Object)">
            <summary>
             Tests two GridEntries for equality
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.FindPropertyValue(System.String,System.Type)">
            <summary>
             Searches for a value of a given property for a value editor user
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetChildIndex(System.Windows.Forms.PropertyGridInternal.GridEntry)">
            <summary>
             Returns the index of a child GridEntry
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetComponents">
            <summary>
             Gets the components that own the current value.  This is usually the value of the
             root entry, which is the object being browsed.  Walks up the GridEntry tree
             looking for an owner that is an IComponent
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetValueOwner">
            <summary>
             Gets the owner of the current value.  This is usually the value of the
             root entry, which is the object being browsed
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetValueOwners">
            <summary>
             Gets the owners of the current value.  This is usually the value of the
             root entry, which is the objects being browsed for a multiselect item
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetChildValueOwner(System.Windows.Forms.PropertyGridInternal.GridEntry)">
            <summary>
             Gets the owner of the current value.  This is usually the value of the
             root entry, which is the object being browsed
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetTestingInfo">
            <summary>
             Returns a string with info about the currently selected GridEntry
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetValueType">
            <summary>
             Retrieves the type of the value for this GridEntry
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetPropEntries(System.Windows.Forms.PropertyGridInternal.GridEntry,System.Object,System.Type)">
            <summary>
             Returns the child GridEntries for this item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.ResetPropertyValue">
            <summary>
             Resets the current item
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.CanResetPropertyValue">
            <summary>
             Returns if the property can be reset
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.DoubleClickPropertyValue">
            <summary>
             Called when the item is double clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetPropertyTextValue">
            <summary>
             Returns the text value of this property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetPropertyTextValue(System.Object)">
            <summary>
             Returns the text value of this property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetPropertyValueList">
            <summary>
             Returns the text values of this property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetFlagSet(System.Int32)">
            <summary>
             Checks if a given flag is set
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetService(System.Type)">
            <summary>
             Retrieves the requested service.  This may
             return null if the requested service is not
             available.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.PaintLabel(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
             Paints the label portion of this GridEntry into the given Graphics object.  This
             is called by the GridEntry host (the PropertyGridView) when this GridEntry is
             to be painted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.PaintOutline(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Paints the outline portion of this GridEntry into the given Graphics object.  This
             is called by the GridEntry host (the PropertyGridView) when this GridEntry is
             to be painted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.PaintValue(System.Object,System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.PropertyGridInternal.GridEntry.PaintValueFlags)">
            <summary>
             Paints the value portion of this GridEntry into the given Graphics object.  This
             is called by the GridEntry host (the PropertyGridView) when this GridEntry is
             to be painted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.OnLabelClick(System.EventArgs)">
            <summary>
             Called when the label portion of this GridEntry is clicked.
             Default implmentation fired the event to any listeners, so be sure
             to call base.OnLabelClick(e) if this is overrideen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.OnLabelDoubleClick(System.EventArgs)">
            <summary>
             Called when the label portion of this GridEntry is double-clicked.
             Default implmentation fired the event to any listeners, so be sure
             to call base.OnLabelDoubleClick(e) if this is overrideen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.OnMouseClick(System.Int32,System.Int32,System.Int32,System.Windows.Forms.MouseButtons)">
            <summary>
             Called when the GridEntry is clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.OnOutlineClick(System.EventArgs)">
            <summary>
             Called when the outline icon portion of this GridEntry is clicked.
             Default implmentation fired the event to any listeners, so be sure
             to call base.OnOutlineClick(e) if this is overrideen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.OnOutlineDoubleClick(System.EventArgs)">
            <summary>
             Called when the outline icon portion of this GridEntry is double-clicked.
             Default implmentation fired the event to any listeners, so be sure
             to call base.OnOutlineDoubleClick(e) if this is overrideen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.OnRecreateChildren(System.Windows.Forms.PropertyGridInternal.GridEntryRecreateChildrenEventArgs)">
            <summary>
             Called when RecreateChildren is called.
             Default implmentation fired the event to any listeners, so be sure
             to call base.OnOutlineDoubleClick(e) if this is overrideen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.OnValueClick(System.EventArgs)">
            <summary>
             Called when the value portion of this GridEntry is clicked.
             Default implmentation fired the event to any listeners, so be sure
             to call base.OnValueClick(e) if this is overrideen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.OnValueDoubleClick(System.EventArgs)">
            <summary>
             Called when the value portion of this GridEntry is clicked.
             Default implmentation fired the event to any listeners, so be sure
             to call base.OnValueDoubleClick(e) if this is overrideen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.SetFlag(System.Int32,System.Boolean)">
            <summary>
             Sets the specified flag
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.SetFlag(System.Int32,System.Int32,System.Boolean)">
            <summary>
             Sets the default child of this entry, given a valid value mask.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.SetFlag(System.Int32,System.Int32)">
            <summary>
             Sets the value of a flag
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.ShouldSerializePropertyValue">
            <summary>
             Checks if this value should be persisited.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.NotifyValueGivenParent(System.Object,System.Int32)">
            <summary>
             Sends a notify message to this GridEntry, and returns the success result
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.NotifyChildValue(System.Windows.Forms.PropertyGridInternal.GridEntry,System.Int32)">
            <summary>
             Sends a notify message to the child GridEntry, and returns the success result
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.Refresh">
            <summary>
             Refresh the current GridEntry's value and it's children
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.SetPropertyTextValue(System.String)">
            <summary>
             Sets the value of this GridEntry from text
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GridEntryAccessibleObject.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Request to return the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.GridEntryAccessibleObject.FragmentRoot">
            <summary>
             Return the element that is the root node of this fragment of UI.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GridEntryAccessibleObject.GetFocused">
            <summary>
             Returns the currently focused child, if any.
             Returns this if the object itself is focused.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GridEntryAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
             Navigate to the next or previous grid entry.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyGridInternal.GridErrorDlg">
            <summary>
             Implements a dialog that is displayed when an unhandled exception occurs in
             a thread. This dialog's width is defined by the summary message
             in the top pane. We don't restrict dialog width in any way.
             Use caution and check at all DPI scaling factors if adding a new message
             to be displayed in the top pane.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.GridErrorDlg.DetailsClick(System.Object,System.EventArgs)">
            <summary>
             Called when the details button is clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridErrorDlg.IsRTLResources">
            <summary>
             Tells whether the current resources for this dll have been
             localized for a RTL language.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.GridToolTip.CreateParams">
            <summary>
             The createParams to create the window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.HotCommands.CreateAccessibilityInstance">
            <summary>
             Constructs the new instance of the accessibility object for this control.
            </summary>
            <returns>The accessibility object for this control.</returns>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.HotCommands.SupportsUiaProviders">
            <summary>
             Indicates whether or not the control supports UIA Providers via
             IRawElementProviderFragment/IRawElementProviderFragmentRoot interfaces.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyGridInternal.HotCommandsAccessibleObject">
            <summary>
             Represents the hot commands control accessible object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.HotCommandsAccessibleObject.#ctor(System.Windows.Forms.PropertyGridInternal.HotCommands,System.Windows.Forms.PropertyGrid)">
            <summary>
             Initializes new instance of DocCommentAccessibleObject.
            </summary>
            <param name="owningHotCommands">The owning HotCommands control.</param>
            <param name="parentPropertyGrid">The parent PropertyGrid control.</param>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.HotCommandsAccessibleObject.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Request to return the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.HotCommandsAccessibleObject.GetPropertyValue(Interop.UiaCore.UIA)">
            <summary>
             Request value of specified property from an element.
            </summary>
            <param name="propertyId">Identifier indicating the property to return</param>
            <returns>Returns a ValInfo indicating whether the element supports this property, or has no value for it.</returns>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.ComponentType">
            <summary>
             When overridden in a derived class, gets the type of the
             component this property
             is bound to.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.Converter">
            <summary>
             Gets the type converter for this property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.IsLocalizable">
            <summary>
             Gets a value
             indicating whether this property should be localized, as
             specified in the <see cref='T:System.ComponentModel.LocalizableAttribute'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.IsReadOnly">
            <summary>
             When overridden in
             a derived class, gets a value
             indicating whether this property is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.PropertyType">
            <summary>
             When overridden in a derived class,
             gets the type of the property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.CanResetValue(System.Object)">
            <summary>
             When overridden in a derived class, indicates whether
             resetting the <paramref name="component"/> will change the value of the
             <paramref name="component"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.CopyValue(System.Object)">
            <summary>
             This method attempts to copy the given value so unique values are
             always passed to each object.  If the object cannot be copied it
             will be returned.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.CreateAttributeCollection">
            <summary>
             Creates a collection of attributes using the
             array of attributes that you passed to the constructor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.GetEditor(System.Type)">
            <summary>
             Gets an editor of the specified type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.GetValue(System.Object)">
            <summary>
             When overridden in a derived class, gets the current
             value
             of the
             property on a component.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.ResetValue(System.Object)">
            <summary>
             When overridden in a derived class, resets the
             value
             for this property
             of the component.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
             When overridden in a derived class, sets the value of
             the component to a different value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
             When overridden in a derived class, indicates whether the
             value of
             this property needs to be persisted.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.MultiMergeCollection.Count">
            <summary>
             Retrieves the number of items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.MultiMergeCollection.Locked">
            <summary>
             Prevents the contents of the collection from being re-initialized;
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.MultiMergeCollection.MergeCollection(System.Collections.ICollection)">
            <summary>
             Ensures that the new collection equals the exisitng one.
             Otherwise, it wipes out the contents of the new collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.MultiPropertyDescriptorGridEntry.GetPropertyTextValue(System.Object)">
            <summary>
             Returns the text value of this property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.MultiSelectRootGridEntry.PropertyMerger.UnsortedMerge(System.ComponentModel.PropertyDescriptor[],System.Collections.ArrayList)">
            <summary>
             merges an unsorted array of grid entries with a sorted array of grid entries that
             have already been merged.  The resulting array is the intersection of entries between the two,
             but in the order of baseEntries.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.AllowMerge">
            <summary>
             specify that this grid entry should be allowed to be merged for.
             multi-select.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.HelpKeyword">
            <summary>
             Retrieves the keyword that the VS help dynamic help window will
             use when this IPE is selected.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.PropertyDescriptor">
            <summary>
             Retrieves the PropertyDescriptor that is surfacing the given object/
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.PropertyName">
            <summary>
             Returns non-localized name of this property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.PropertyValue">
            <summary>
             Gets or sets the value for the property that is represented
             by this GridEntry.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.TypeConverter">
            <summary>
             Returns the type converter for this entry.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.UITypeEditor">
            <summary>
             Returns the type editor for this entry.  This may return null if there
             is no type editor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.EditPropertyValue(System.Windows.Forms.PropertyGridInternal.PropertyGridView)">
            <summary>
             Invokes the type editor for editing this item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.ViewEvent(System.Object,System.String,System.ComponentModel.EventDescriptor,System.Boolean)">
            <summary>
             Navigates code to the given event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.ShowCodeIdle(System.Object,System.EventArgs)">
            <summary>
             Displays the user code for the given event.  This will return true if the user
             code could be displayed, or false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.GetAccessibilityObject">
            <summary>
             Creates a new AccessibleObject for this PropertyDescriptorGridEntry instance.
             The AccessibleObject instance returned by this method supports IsEnabled UIA property.
            </summary>
            <returns>
             AccessibleObject for this PropertyDescriptorGridEntry instance.
            </returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.PropertyDescriptorGridEntryAccessibleObject.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Returns the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="T:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.ExceptionConverter">
            <summary>
             The exception converter is a type converter that displays an exception to the user.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.ExceptionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type.  The most common types to convert
             are to and from a string object.  The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string.  If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.ExceptionEditor">
            <summary>
             The exception editor displays a message to the user.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.ExceptionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
             Edits the given object value using the editor style provided by
             GetEditorStyle.  A service provider is provided so that any
             required editing services can be obtained.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.ExceptionEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Retrieves the editing style of the Edit method.  If the method
             is not supported, this will return None.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyGridInternal.PropertyGridCommands">
            <summary>
             This class contains the set of menu commands our property browser
             uses.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PropertyGridInternal.PropertyGridCommands.wfcMenuGroup">
            <summary>
             This guid corresponds to the menu grouping windows forms will use for its menus.  This is
             defined in the windows forms menu CTC file, but we need it here so we can define what
             context menus to use.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PropertyGridInternal.PropertyGridCommands.wfcMenuCommand">
            <summary>
             This guid corresponds to the windows forms command set.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.EditAccessibleObject">
            <summary>
             Represents the Editor's control accessible object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.DropDownListBoxAccessibleObject">
            <summary>
             Represents the DropDownListBox accessible object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.ContextMenuDefaultLocation">
            <summary>
             Returns a default location for showing the context menu.  This
             location is the center of the active property label in the grid, and
             is used useful to position the context menu when the menu is invoked
             via the keyboard.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.ServiceProvider">
            <summary>
             Returns or sets the IServiceProvider the PropertyGridView will use to obtain
             services.  This may be null.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.SupportsUiaProviders">
            <summary>
             Indicates whether or not the control supports UIA Providers via
             IRawElementProviderFragment/IRawElementProviderFragmentRoot interfaces.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.TopLevelGridEntries">
            <summary>
             Gets the top level grid entries.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.CloseDropDown">
            <summary>
             Closes a previously opened drop down.  This should be called by the
             drop down when the user does something that should close it.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.CreateAccessibilityInstance">
            <summary>
             Constructs the new instance of the accessibility object for this control. Subclasses
             should not call base.CreateAccessibilityObject.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GetElementFromPoint(System.Int32,System.Int32)">
            <summary>
             Gets the element from point.
            </summary>
            <param name="x">The point x coordinate.</param>
            <param name="y">The point y coordinate.</param>
            <returns>The found grid element.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.DropDownControl(System.Windows.Forms.Control)">
            <summary>
             Displays the provided control in a drop down.  When possible, the
             current dimensions of the control will be respected.  If this is not possible
             for the current screen layout the control may be resized, so it should
             be implemented using appropriate docking and anchoring so it will resize
             nicely.  If the user performs an action that would cause the drop down
             to prematurely disappear the control will be hidden.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GetGridEntryHierarchy(System.Windows.Forms.PropertyGridInternal.GridEntry)">
            <summary>
             returns an array of IPE specifying the current heirarchy of ipes from the given
             gridEntry through its parents to the root.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GetTestingInfo(System.Int32)">
            <summary>
             Returns a string containing test info about a given GridEntry. Requires an offset into the top-level
             entry collection (ie. nested entries are not accessible). Or specify -1 to get info for the current
             selected entry (which can be any entry, top-level or nested).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
             Overridden to handle TAB key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.ShowDialog(System.Windows.Forms.Form)">
            <summary>
             Shows the given dialog, and returns its dialog result.  You should always
             use this method rather than showing the dialog directly, as this will
             properly position the dialog and provide it a dialog owner.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.RescaleConstantsForDpi(System.Int32,System.Int32)">
            <summary>
             rescale constants for the DPI change
            </summary>
            <param name="deviceDpiOld"></param>
            <param name="deviceDpiNew"></param>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.RescaleConstants">
            <summary>
             Rescale constants on this object
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.ResetOutline(System.Windows.Forms.PropertyGridInternal.GridEntry)">
            <summary>
             private method to recursively reset outlinerect for grid entries ( both visible and invisible)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.DropDownHolder.ResizeUp">
            <summary>
             This gets set to true if there isn't enough space below the currently selected
             row for the drop down, so it appears above the row.  In this case, we make the resize
             grip appear at the top left.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.DropDownHolder.GetInstanceCreationEditor(System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry)">
             <summary>
              Get an InstanceCreationEditor for this entry.  First, we look on the property type, and if we
              don't find that we'll go up to the editor type itself.  That way people can associate the InstanceCreationEditor with
              the type of DropDown UIType Editor.
            
             </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.DropDownHolder.GetSizeGripGlyph(System.Drawing.Graphics)">
            <summary>
             Get a glyph for sizing the lower left hand grip.  The code in ControlPaint only does lower-right glyphs
             so we do some GDI+ magic to take that glyph and mirror it.  That way we can still share the code (in case it changes for theming, etc),
             not have any special cases, and possibly solve world hunger.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.DropDownHolder.OwnsWindow(System.IntPtr)">
             <summary>
              General purpose method, based on Control.Contains()...
            
              Determines whether a given window (specified using native window handle)
              is a descendant of this control. This catches both contained descendants
              and 'owned' windows such as modal dialogs. Using window handles rather
              than Control objects allows it to catch un-managed windows as well.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.DropDownHolder.MoveTypeFromPoint(System.Int32,System.Int32)">
            <summary>
             Just figure out what kind of sizing we would do at a given drag location.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.DropDownHolder.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Decide if we're going to be sizing at the given point, and if so, Capture and safe our current state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.DropDownHolder.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Either set the cursor or do a move, depending on what our currentMoveType is/
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.DropDownHolder.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Just paint and draw our glyph.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBox.OwningPropertyGridView">
            <summary>
             Gets the owning PropertyGridView.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBox.SupportsUiaProviders">
            <summary>
             Indicates whether or not the control supports UIA Providers via
             IRawElementProviderFragment/IRawElementProviderFragmentRoot interfaces
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBox.CreateAccessibilityInstance">
            <summary>
             Constructs the new instance of the accessibility object for this control.
            </summary>
            <returns>The accessibility object instance.</returns>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBoxItemAccessibleObject.Bounds">
            <summary>
             Gets the DropDown button bounds.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBoxItemAccessibleObject.DefaultAction">
            <summary>
             Gets the DropDown button default action.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBoxItemAccessibleObject.Help">
            <summary>
             Gets the help text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBoxItemAccessibleObject.KeyboardShortcut">
            <summary>
             Gets the keyboard shortcut.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBoxItemAccessibleObject.IsPatternSupported(Interop.UiaCore.UIA)">
            <summary>
             Indicates whether specified pattern is supported.
            </summary>
            <param name="patternId">The pattern ID.</param>
            <returns>True if specified </returns>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBoxItemAccessibleObject.Name">
            <summary>
             Gets or sets the accessible name.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBoxItemAccessibleObject.Role">
            <summary>
             Gets the accessible role.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBoxItemAccessibleObject.RuntimeId">
            <summary>
             Gets the runtime ID.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBoxItemAccessibleObject.State">
            <summary>
             Gets the accessible state.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBoxAccessibleObject">
            <summary>
             Represents the PropertyGridView ListBox accessibility object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBoxAccessibleObject.#ctor(System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBox)">
            <summary>
             Constructs the new instance of GridViewListBoxAccessibleObject.
            </summary>
            <param name="owningGridViewListBox">The owning GridViewListBox.</param>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBoxAccessibleObject.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Request to return the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBoxAccessibleObject.FragmentRoot">
            <summary>
             Return the element that is the root node of this fragment of UI.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewListBoxAccessibleObject.GetPropertyValue(Interop.UiaCore.UIA)">
            <summary>
             Request value of specified property from an element.
            </summary>
            <param name="propertyId">Identifier indicating the property to return</param>
            <returns>Returns a ValInfo indicating whether the element supports this property, or has no value for it.</returns>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewEdit.SupportsUiaProviders">
            <summary>
             Indicates whether or not the control supports UIA Providers via
             IRawElementProviderFragment/IRawElementProviderFragmentRoot interfaces
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewEdit.CreateAccessibilityInstance">
            <summary>
             Creates a new AccessibleObject for this GridViewEdit instance.
             The AccessibleObject instance returned by this method overrides several UIA properties.
            </summary>
            <returns>
             AccessibleObject for this GridViewEdit instance.
            </returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewEdit.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
             Overridden to handle TAB key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewEdit.IsInputChar(System.Char)">
            <summary>
             Overridden to handle TAB key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewEdit.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
             Overrides Control.ProcessDialogKey to handle the Escape and Return
             keys.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewEdit.GridViewEditAccessibleObject.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Returns the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewEdit.GridViewEditAccessibleObject.FragmentRoot">
            <summary>
             Gets the top level element.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.MouseHook.HookMouse">
            <summary>
             Sets up the needed windows hooks to catch messages.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.MouseHook.MouseHookProc(Interop.User32.HC,System.IntPtr,System.IntPtr)">
            <summary>
             HookProc used for catch mouse messages.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.MouseHook.UnhookMouse">
            <summary>
             Removes the windowshook that was installed.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyGridInternal.PropertyGridView.MouseHook.MouseHookObject">
            <summary>
             Forwards messageHook calls to ToolTip.messageHookProc
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject">
            <summary>
             The accessible object class for a PropertyGridView. The child accessible objects
             are accessible objects corresponding to the property grid entries.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.#ctor(System.Windows.Forms.PropertyGridInternal.PropertyGridView,System.Windows.Forms.PropertyGrid)">
            <summary>
             Construct a PropertyGridViewAccessibleObject
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.ElementProviderFromPoint(System.Double,System.Double)">
            <summary>
             Return the child element at the specified point, if one exists,
             otherwise return this element if the point is on this element,
             otherwise return null.
            </summary>
            <param name="x">x coordinate of point to check</param>
            <param name="y">y coordinate of point to check</param>
            <returns>Return the child element at the specified point, if one exists,
             otherwise return this element if the point is on this element,
             otherwise return null.
            </returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Request to return the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.FragmentRoot">
            <summary>
             Return the element that is the root node of this fragment of UI.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.GetFocus">
            <summary>
             Gets the accessible object for the currently focused grid entry.
            </summary>
            <returns>The accessible object for the currently focused grid entry.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.GetPropertyValue(Interop.UiaCore.UIA)">
            <summary>
             Request value of specified property from an element.
            </summary>
            <param name="propertyId">Identifier indicating the property to return</param>
            <returns>Returns a ValInfo indicating whether the element supports this property, or has no value for it.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.GetPreviousGridEntry(System.Windows.Forms.PropertyGridInternal.GridEntry,System.Windows.Forms.PropertyGridInternal.GridEntryCollection,System.Boolean@)">
            <summary>
             Gets the previous grid entry accessibility object.
            </summary>
            <param name="currentGridEntry">The current grid entry.</param>
            <param name="gridEntryCollection">The grid entry collection.</param>
            <param name="currentGridEntryFound">Indicates whether the current grid entry is found.</param>
            <returns>The previous grid entry.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.GetNextGridEntry(System.Windows.Forms.PropertyGridInternal.GridEntry,System.Windows.Forms.PropertyGridInternal.GridEntryCollection,System.Boolean@)">
            <summary>
             Gets the next grid entry.
            </summary>
            <param name="currentGridEntry">The current grid entry.</param>
            <param name="gridEntryCollection">The grid entry collection.</param>
            <param name="currentGridEntryFound">Indicates whether the current grid entry is found.</param>
            <returns>The next grid entry.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.GetFirstChildProperty(System.Windows.Forms.PropertyGridInternal.CategoryGridEntry)">
            <summary>
             Gets the first child property.
            </summary>
            <param name="current">The current grid entry.</param>
            <returns>The first child property.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.GetLastChildProperty(System.Windows.Forms.PropertyGridInternal.CategoryGridEntry)">
            <summary>
             Gets the last child property.
            </summary>
            <param name="current">The current grid entry.</param>
            <returns>The last child property.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.GetNextCategory(System.Windows.Forms.PropertyGridInternal.CategoryGridEntry)">
            <summary>
             Gets the next category.
            </summary>
            <param name="current">The current grid entry.</param>
            <returns>The next category.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.GetPreviousCategory(System.Windows.Forms.PropertyGridInternal.CategoryGridEntry)">
            <summary>
             Gets the previous category.
            </summary>
            <param name="current">The current grid entry.</param>
            <returns>The previous category.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.GetChild(System.Int32)">
            <summary>
             Get the accessible child at the given index.
             The accessible children of a PropertyGridView are accessible objects
             corresponding to the property grid entries.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.GetChildCount">
            <summary>
             Get the number of accessible children.
             The accessible children of a PropertyGridView are accessible objects
             corresponding to the property grid entries.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.GetFocused">
            <summary>
             Get the accessible object for the currently focused grid entry.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.GetSelected">
            <summary>
             Get the accessible object for the currently selected grid entry.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.HitTest(System.Int32,System.Int32)">
            <summary>
             Get the accessible child at the given screen location.
             The accessible children of a PropertyGridView are accessible objects
             corresponding to the property grid entries.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
             Navigate to another object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.SingleSelectRootGridEntry.BrowsableAttributes">
            <summary>
             The set of attributes that will be used for browse filtering
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.SingleSelectRootGridEntry.HelpKeyword">
            <summary>
             Retrieves the keyword that the VS help dynamic help window will
             use when this IPE is selected.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyGridInternal.SingleSelectRootGridEntry.PropertyValue">
            <summary>
             Gets or sets the value for the property that is represented
             by this GridEntry.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.SingleSelectRootGridEntry.ResetBrowsableAttributes">
            <summary>
             Reset the Browsable attributes to the default (BrowsableAttribute.Yes)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyGridInternal.SingleSelectRootGridEntry.ShowCategories(System.Boolean)">
            <summary>
             Sets the value of this GridEntry from text
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PropertyManager.Current">
            <summary>
             An object that represents the object to which the property belongs.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyManager.ResumeBinding">
            <summary>
             Resumes data binding.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyManager.GetListName(System.Collections.ArrayList)">
            <summary>
             Gets the name of the list supplying the data for the binding.
            </summary>
            <returns>Always returns an empty string.</returns>
        </member>
        <member name="M:System.Windows.Forms.PropertyManager.CancelCurrentEdit">
            <summary>
             Cancels the current edit.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyManager.EndCurrentEdit">
            <summary>
             Ends the current edit.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyManager.OnCurrentChanged(System.EventArgs)">
            <summary>
             Raises the <see cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" /> event.
            </summary>
            <param name="ea">The event data.</param>
        </member>
        <member name="M:System.Windows.Forms.PropertyManager.OnCurrentItemChanged(System.EventArgs)">
            <summary>
             Raises the <see cref="E:System.Windows.Forms.BindingManagerBase.CurrentItemChanged" /> event.
            </summary>
            <param name="ea">The event data.</param>
        </member>
        <member name="P:System.Windows.Forms.PropertyManager.Position">
            <summary>
             Gets the position in the underlying list that controls bound to this data source point to.
            </summary>
            <value>Always returns 0.</value>
        </member>
        <member name="P:System.Windows.Forms.PropertyManager.Count">
            <summary>
             Gets the number of rows managed by the <see cref="T:System.Windows.Forms.BindingManagerBase" />.
            </summary>
            <value>Always returns 1.</value>
        </member>
        <member name="M:System.Windows.Forms.PropertyManager.AddNew">
            <summary>
            Throws a <see cref="T:System.NotSupportedException" /> in all cases.
            </summary>
            <exception cref="T:System.NotSupportedException">In all cases.</exception>
        </member>
        <member name="M:System.Windows.Forms.PropertyManager.RemoveAt(System.Int32)">
            <summary>
             Throws a <see cref="T:System.NotSupportedException" /> in all cases.
            </summary>
            <param name="index">The index of the row to delete.</param>
            <exception cref="T:System.NotSupportedException">In all cases.</exception>
        </member>
        <member name="T:System.Windows.Forms.PropertySort">
            <summary>
             Possible values for property grid sorting mode
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PropertySort.NoSort">
            <summary>
             Properties will not be sorted, rather they will be displayed in the
             order that they are retrieved from the TypeDescriptor.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PropertySort.Alphabetical">
            <summary>
             Properties are sorted as a flat, alphabetical list.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PropertySort.Categorized">
            <summary>
             Properties are under category groups, which are defined by the
             properties themselves.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.PropertySort.CategorizedAlphabetical">
            <summary>
             Properties are under category groups, which are defined by the
             properties themselves, and are alphabetical within those groups.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyStore">
            <summary>
             This is a small class that can efficiently store property values.
             It tries to optimize for size first, "get" access second, and
             "set" access third.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.ContainsInteger(System.Int32)">
            <summary>
             Retrieves an integer value from our property list.
             This will set value to zero and return false if the
             list does not contain the given key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.ContainsObject(System.Int32)">
            <summary>
             Retrieves an integer value from our property list.
             This will set value to zero and return false if the
             list does not contain the given key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.CreateKey">
            <summary>
             Creates a new key for this property store. This is NOT
             guarded by any thread safety so if you are calling it on
             multiple threads you should guard. For our purposes,
             we're fine because this is designed to be called in a class
             initializer, and we never have the same class hierarchy
             initializing on multiple threads at once.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.GetColor(System.Int32,System.Boolean@)">
            <summary>
             A wrapper around GetObject designed to reduce the boxing hit
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.GetPadding(System.Int32,System.Boolean@)">
            <summary>
             A wrapper around GetObject designed to reduce the boxing hit.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.GetSize(System.Int32,System.Boolean@)">
            <summary>
             A wrapper around GetObject designed to reduce the boxing hit.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.GetRectangle(System.Int32,System.Boolean@)">
            <summary>
             A wrapper around GetObject designed to reduce the boxing hit.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.GetInteger(System.Int32)">
            <summary>
             Retrieves an integer value from our property list.
             This will set value to zero and return false if the
             list does not contain the given key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.GetInteger(System.Int32,System.Boolean@)">
            <summary>
             Retrieves an integer value from our property list.
             This will set value to zero and return false if the
             list does not contain the given key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.GetObject(System.Int32)">
            <summary>
             Retrieves an object value from our property list.
             This will set value to null and return false if the
             list does not contain the given key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.GetObject(System.Int32,System.Boolean@)">
            <summary>
             Retrieves an object value from our property list.
             This will set value to null and return false if the
             list does not contain the given key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.LocateIntegerEntry(System.Int16,System.Int32@)">
            <summary>
             Locates the requested entry in our array if entries. This does
             not do the mask check to see if the entry is currently being used,
             but it does locate the entry. If the entry is found, this returns
             true and fills in index and element. If the entry is not found,
             this returns false. If the entry is not found, index will contain
             the insert point at which one would add a new element.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.LocateObjectEntry(System.Int16,System.Int32@)">
            <summary>
             Locates the requested entry in our array if entries. This does
             not do the mask check to see if the entry is currently being used,
             but it does locate the entry. If the entry is found, this returns
             true and fills in index and element. If the entry is not found,
             this returns false. If the entry is not found, index will contain
             the insert point at which one would add a new element.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.RemoveInteger(System.Int32)">
            <summary>
             Removes the given key from the array
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.RemoveObject(System.Int32)">
            <summary>
             Removes the given key from the array
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.SetInteger(System.Int32,System.Int32)">
            <summary>
             Stores the given value in the key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.SetObject(System.Int32,System.Object)">
            <summary>
             Stores the given value in the key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PropertyStore.SplitKey(System.Int32,System.Int16@)">
            <summary>
             Takes the given key and splits it into an index and an element.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyStore.IntegerEntry">
            <summary>
             Stores the relationship between a key and a value.
             We do not want to be so inefficient that we require
             four bytes for each four byte property, so use an algorithm
             that uses the bottom two bits of the key to identify
             one of four elements in an entry.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyStore.ObjectEntry">
            <summary>
             Stores the relationship between a key and a value.
             We do not want to be so inefficient that we require
             four bytes for each four byte property, so use an algorithm
             that uses the bottom two bits of the key to identify
             one of four elements in an entry.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyValueChangedEventArgs">
            <summary>
             The event class that is created when a property in the grid is modified by the user.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.PropertyValueChangedEventHandler">
            <summary>
             The event handler class that is invoked when a property
             in the grid is modified by the user.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.QueryAccessibilityHelpEventArgs">
            <summary>
             The QueryAccessibilityHelpEventArgs is fired when AccessibleObject is providing help
             to accessibility applications.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.QueryContinueDragEventArgs">
            <summary>
             Provides data for the <see cref='E:System.Windows.Forms.Control.QueryContinueDrag'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.QueryContinueDragEventArgs.#ctor(System.Int32,System.Boolean,System.Windows.Forms.DragAction)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.QueryContinueDragEventArgs'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.QueryContinueDragEventArgs.KeyState">
            <summary>
             Gets a value indicating the current state of the SHIFT, CTRL, and ALT keys.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.QueryContinueDragEventArgs.EscapePressed">
            <summary>
             Gets a value indicating whether the user pressed the ESC key.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.QueryContinueDragEventArgs.Action">
            <summary>
             Gets or sets the status of a drag-and-drop operation.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.QueryContinueDragEventHandler">
            <summary>
             Represents a method that will handle the <see cref='E:System.Windows.Forms.Control.QueryContinueDrag'/>
             event of a <see cref='T:System.Windows.Forms.Control'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.QuestionEventHandler">
            <summary>
             Describes a delegate for an event that has a QuestionEventArgs as
             a parameter.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RadioButton">
            <summary>
             Encapsulates a
             standard
             Windows radio button (option button).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RadioButton.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.RadioButton'/>
             class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RadioButton.AutoCheck">
            <summary>
             Gets or sets a value indicating whether the <see cref='P:System.Windows.Forms.RadioButton.Checked'/>
             value and the appearance of
             the control automatically change when the control is clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RadioButton.Appearance">
            <summary>
             Gets or sets the appearance of the radio
             button
             control is drawn.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RadioButton.CheckAlign">
            <summary>
             Gets or
             sets the location of the check box portion of the
             radio button control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RadioButton.Checked">
            <summary>
             Gets or sets a value indicating whether the
             control is checked or not.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RadioButton.DoubleClick">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.RadioButton.MouseDoubleClick">
            <hideinheritance/>
        </member>
        <member name="P:System.Windows.Forms.RadioButton.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RadioButton.RescaleConstantsForDpi(System.Int32,System.Int32)">
            <summary>
             When overridden in a derived class, handles rescaling of any magic numbers used in control painting.
             For RadioButton controls, scale the width of the system-style padding and height of the radio button image.
             Must call the base class method to get the current DPI values. This method is invoked only when
             Application opts-in into the Per-monitor V2 support, targets .NETFX 4.7 and has
             EnableDpiChangedMessageHandling and EnableDpiChangedHighDpiImprovements config switches turned on.
            </summary>
            <param name="deviceDpiOld">Old DPI value</param>
            <param name="deviceDpiNew">New DPI value</param>
        </member>
        <member name="P:System.Windows.Forms.RadioButton.TextAlign">
            <summary>
             Gets or sets the value indicating whether the user can give the focus to this
             control using the TAB key.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RadioButton.CheckedChanged">
            <summary>
             Occurs when the
             value of the <see cref='P:System.Windows.Forms.RadioButton.Checked'/>
             property changes.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RadioButton.CreateAccessibilityInstance">
            <summary>
             Constructs the new instance of the accessibility object for this control. Subclasses
             should not call base.CreateAccessibilityObject.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RadioButton.OnCheckedChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.CheckBox.CheckedChanged'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RadioButton.OnClick(System.EventArgs)">
            <summary>
             We override this to implement the autoCheck functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RadioButton.WipeTabStops(System.Boolean)">
            <summary>
             Removes tabstops from all radio buttons, other than the one that currently has the focus.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RadioButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.ButtonBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RadioButton.PerformClick">
            <summary>
             Generates a <see cref='E:System.Windows.Forms.Control.Click'/> event for the
             button, simulating a click by a user.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RadioButton.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RadioButtonRenderer">
            <summary>
             This is a rendering class for the RadioButton control. It works downlevel too (obviously
             without visual styles applied.)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RadioButtonRenderer.RenderMatchingApplicationState">
            <summary>
             If this property is true, then the renderer will use the setting from Application.RenderWithVisualStyles to
             determine how to render.
             If this property is false, the renderer will always render with visualstyles.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RadioButtonRenderer.IsBackgroundPartiallyTransparent(System.Windows.Forms.VisualStyles.RadioButtonState)">
            <summary>
             Returns true if the background corresponding to the given state is partially transparent, else false.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RadioButtonRenderer.DrawParentBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.Control)">
            <summary>
             This is just a convenience wrapper for VisualStyleRenderer.DrawThemeParentBackground. For downlevel,
             this isn't required and does nothing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RadioButtonRenderer.DrawRadioButton(System.Drawing.Graphics,System.Drawing.Point,System.Windows.Forms.VisualStyles.RadioButtonState)">
            <summary>
             Renders a RadioButton control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RadioButtonRenderer.DrawRadioButton(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Boolean,System.Windows.Forms.VisualStyles.RadioButtonState)">
            <summary>
             Renders a RadioButton control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RadioButtonRenderer.DrawRadioButton(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Windows.Forms.TextFormatFlags,System.Boolean,System.Windows.Forms.VisualStyles.RadioButtonState)">
            <summary>
             Renders a RadioButton control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RadioButtonRenderer.DrawRadioButton(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Drawing.Image,System.Drawing.Rectangle,System.Boolean,System.Windows.Forms.VisualStyles.RadioButtonState)">
            <summary>
             Renders a RadioButton control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RadioButtonRenderer.DrawRadioButton(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Windows.Forms.TextFormatFlags,System.Drawing.Image,System.Drawing.Rectangle,System.Boolean,System.Windows.Forms.VisualStyles.RadioButtonState)">
            <summary>
             Renders a RadioButton control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RadioButtonRenderer.GetGlyphSize(System.Drawing.Graphics,System.Windows.Forms.VisualStyles.RadioButtonState)">
            <summary>
             Returns the size of the RadioButton glyph.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RelatedCurrencyManager">
            <summary>
             Represents the child version of the System.Windows.Forms.ListManager
             that is used when a parent/child relationship exists in a System.Windows.Forms.DataSet.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RelatedCurrencyManager.GetItemProperties">
            <summary>
             Gets the properties of the item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RelatedCurrencyManager.GetListName(System.Collections.ArrayList)">
            <summary>
             Gets the name of the specified list.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RelatedImageListAttribute">
            <summary>
             Specifies which imagelist a property relates to. For example ImageListIndex must relate to a
             specific ImageList property
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RetrieveVirtualItemEventHandler">
            <summary>
             Represents a method that will handle the <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem"/> event
             of a <see cref="T:System.Windows.Forms.ListView"/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RichTextBox">
            <summary>
             Rich Text control. The RichTextBox is a control that contains formatted text.
             It supports font selection, boldface, and other type attributes.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBox.INPUT">
            <summary>
             Paste special flags.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.#ctor">
            <summary>
             Constructs a new RichTextBox.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.AllowDrop">
            <summary>
             RichTextBox controls have built-in drag and drop support, but AllowDrop, DragEnter, DragDrop
             may still be used: this should be hidden in the property grid, but not in code
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.AutoSize">
             <summary>
              Gets or sets a value indicating whether the size
              of the control automatically adjusts when the font assigned to the control
              is changed.
            
              Note: this works differently than other Controls' AutoSize, so we're hiding
              it to avoid confusion.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.AutoWordSelection">
            <summary>
             Controls whether whether mouse selection snaps to whole words.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.BulletIndent">
            <summary>
             Returns the amount of indent used in a RichTextBox control when
             SelectionBullet is set to true.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.CanRedo">
            <summary>
             Whether or not there are actions that can be Redone on the RichTextBox control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.DetectUrls">
            <summary>
             Controls whether or not the rich edit control will automatically highlight URLs.
             By default, this is true. Note that changing this property will not update text that is
             already present in the RichTextBox control; it only affects text which is entered after the
             property is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.EnableAutoDragDrop">
            <summary>
             We can't just enable drag/drop of text by default: it's a breaking change.
             Should be false by default.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.LanguageOption">
            <summary>
             Sets or gets the rich text box control' language option.
             The IMF_AUTOFONT flag is set by default.
             The IMF_AUTOKEYBOARD and IMF_IMECANCELCOMPLETE flags are cleared by default.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.RedoActionName">
            <summary>
             Returns the name of the action that will be performed if the user
             Redo's their last Undone operation. If no operation can be redone,
             an empty string ("") is returned.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.RightMargin">
            <summary>
             The right margin of a RichTextBox control.  A nonzero margin implies WordWrap.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.Rtf">
            <summary>
             The text of a RichTextBox control, including all Rtf codes.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.ScrollBars">
            <summary>
             The current scrollbar settings for a multi-line rich edit control.
             Possible return values are given by the RichTextBoxScrollBars enumeration.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.SelectionAlignment">
            <summary>
             The alignment of the paragraphs in a RichTextBox control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.SelectionBullet">
            <summary>
             Determines if a paragraph in the RichTextBox control
             contains the current selection or insertion point has the bullet style.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.SelectionCharOffset">
            <summary>
             Determines whether text in the RichTextBox control
             appears on the baseline (normal), as a superscript above the baseline,
             or as a subscript below the baseline.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.SelectionColor">
            <summary>
             The color of the currently selected text in the
             RichTextBox control.
             Returns Color.Empty if the selection has more than one color.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.SelectionBackColor">
            <summary>
             The background color of the currently selected text in the RichTextBox control.
             Returns Color.Empty if the selection has more than one color.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.SelectionFont">
            <summary>
             The font used to display the currently selected text
             or the characters(s) immediately following the insertion point in the
             RichTextBox control.  Null if the selection has more than one font.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.SelectionHangingIndent">
            <summary>
             The distance (in pixels) between the left edge of the first line of text
             in the selected paragraph(s) (as specified by the SelectionIndent property)
             and the left edge of subsequent lines of text in the same paragraph(s).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.SelectionIndent">
            <summary>
             The distance (in pixels) between the left edge of the RichTextBox control and
             the left edge of the text that is selected or added at the current
             insertion point.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.SelectionLength">
            <summary>
             Gets or sets the number of characters selected in the text
             box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.SelectionProtected">
            <summary>
             true if the current selection prevents any changes to its contents.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.SelectedRtf">
            <summary>
             The currently selected text of a RichTextBox control, including
             all Rtf codes.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.SelectionRightIndent">
            <summary>
             The distance (in pixels) between the right edge of the RichTextBox control and
             the right edge of the text that is selected or added at the current
             insertion point.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.SelectionTabs">
            <summary>
             The absolute tab positions (in pixels) of text in a RichTextBox control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.SelectedText">
            <summary>
             The currently selected text of a RichTextBox control; consists of a
             zero length string if no characters are selected.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.SelectionType">
            <summary>
             The type of the current selection. The returned value is one
             of the values enumerated in RichTextBoxSelectionType.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.ShowSelectionMargin">
            <summary>
             Whether or not the left edge of the control will have a "selection margin" which
             can be used to select entire lines
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.UndoActionName">
            <summary>
             Returns the name of the action that will be undone if the user
             Undo's their last operation. If no operation can be undone, it will
             return an empty string ("").
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RichTextBox.ZoomFactor">
            <summary>
             The current zoom level for the RichTextBox control. This may be between 1/64 and 64. 1.0 indicates
             no zoom (i.e. normal viewing).  Zoom works best with TrueType fonts;
             for non-TrueType fonts, ZoomFactor will be treated as the nearest whole number.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RichTextBox.DragDrop">
            <summary>
             RichTextBox controls have built-in drag and drop support, but AllowDrop, DragEnter, DragDrop
             may still be used: this should be hidden in the property grid, but not in code
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RichTextBox.DragEnter">
            <summary>
             RichTextBox controls have built-in drag and drop support, but AllowDrop, DragEnter, DragDrop
             may still be used: this should be hidden in the property grid, but not in code
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.CanPaste(System.Windows.Forms.DataFormats.Format)">
            <summary>
             Returns a boolean indicating whether the RichTextBoxConstants control can paste the
             given clipboard format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.Find(System.String)">
            <summary>
             Searches the text in a RichTextBox control for a given string.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.Find(System.String,System.Windows.Forms.RichTextBoxFinds)">
            <summary>
             Searches the text in a RichTextBox control for a given string.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.Find(System.String,System.Int32,System.Windows.Forms.RichTextBoxFinds)">
            <summary>
             Searches the text in a RichTextBox control for a given string.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.Find(System.String,System.Int32,System.Int32,System.Windows.Forms.RichTextBoxFinds)">
            <summary>
             Searches the text in a RichTextBox control for a given string.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.Find(System.Char[])">
            <summary>
             Searches the text in a RichTextBox control for the given characters.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.Find(System.Char[],System.Int32)">
            <summary>
             Searches the text in a RichTextBox control for the given characters.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.Find(System.Char[],System.Int32,System.Int32)">
            <summary>
             Searches the text in a RichTextBox control for the given characters.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.GetCharIndexFromPosition(System.Drawing.Point)">
            <summary>
             Returns the index of the character nearest to the given point.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.GetLineFromCharIndex(System.Int32)">
            <summary>
             Returns the number of the line containing a specified character position
             in a RichTextBox control. Note that this returns the physical line number
             and not the conceptual line number. For example, if the first conceptual
             line (line number 0) word-wraps and extends to the second line, and if
             you pass the index of a overflowed character, GetLineFromCharIndex would
             return 1 and not 0.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.GetPositionFromCharIndex(System.Int32)">
            <summary>
             Returns the location of the character at the given index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.LoadFile(System.String)">
            <summary>
             Loads the contents of the given RTF or text file into a RichTextBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.LoadFile(System.String,System.Windows.Forms.RichTextBoxStreamType)">
            <summary>
             Loads the contents of a RTF or text into a RichTextBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.LoadFile(System.IO.Stream,System.Windows.Forms.RichTextBoxStreamType)">
            <summary>
             Loads the contents of a RTF or text into a RichTextBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.OnContentsResized(System.Windows.Forms.ContentsResizedEventArgs)">
            <summary>
             Fires an event when the user changes the control's contents
             are either smaller or larger than the control's window size.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.OnHScroll(System.EventArgs)">
            <summary>
             Fires an event when the user clicks a RichTextBox control's horizontal
             scroll bar.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.OnLinkClicked(System.Windows.Forms.LinkClickedEventArgs)">
            <summary>
             Fires an event when the user clicks on a link
             in a rich-edit control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.OnImeChange(System.EventArgs)">
            <summary>
             Fires an event when the user changes the control's IME conversion status.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.OnProtected(System.EventArgs)">
            <summary>
             Fires an event when the user is taking an action that would change
             a protected range of text in the RichTextBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.OnSelectionChanged(System.EventArgs)">
            <summary>
             Fires an event when the current selection of text in the RichTextBox
             control has changed or the insertion point has moved.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.OnVScroll(System.EventArgs)">
            <summary>
             Fires an event when the user clicks a RichTextBox control's vertical
             scroll bar.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.Paste(System.Windows.Forms.DataFormats.Format)">
            <summary>
             Pastes the contents of the clipboard in the given clipboard format.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.Redo">
            <summary>
             Redoes the last undone editing operation.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.SaveFile(System.String)">
            <summary>
             Saves the contents of a RichTextBox control to a file.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.SaveFile(System.String,System.Windows.Forms.RichTextBoxStreamType)">
            <summary>
             Saves the contents of a RichTextBox control to a file.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.SaveFile(System.IO.Stream,System.Windows.Forms.RichTextBoxStreamType)">
            <summary>
             Saves the contents of a RichTextBox control to a file.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.SendZoomFactor(System.Single)">
            <summary>
             Core Zoom calculation and message passing (used by ZoomFactor property and CreateHandle()
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.CreateRichEditOleCallback">
            <summary>
             Creates the IRichEditOleCallback compatible object for handling RichEdit callbacks. For more
             information look up the MSDN info on this interface. This is designed to be a back door of
             sorts, which is why it is fairly obscure, and uses the RichEdit name instead of RichTextBox.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.EnLinkMsgHandler(System.Windows.Forms.Message@)">
            <summary>
             Handles link messages (mouse move, down, up, dblclk, etc)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RichTextBox.CharRangeToString(Interop.Richedit.CHARRANGE)">
            <summary>
             Converts a CHARRANGE to a string.
            </summary>
            <remarks>
             The behavior of this is dependent on the current window class name being used. 
             We have to create a CharBuffer of the type of RichTextBox DLL we're using,
             not based on the SystemCharWidth.
            </remarks>
        </member>
        <member name="T:System.Windows.Forms.RichTextBoxFinds">
            <summary>
             Specifies how the <see cref='M:System.Windows.Forms.RichTextBox.Find(System.String)'/> method works.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxFinds.None">
            <summary>
             Find the text without any special characteristics.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxFinds.WholeWord">
            <summary>
             Match only a whole word.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxFinds.MatchCase">
            <summary>
             Match the case exactly.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxFinds.NoHighlight">
            <summary>
             If the text is found, do not highlight it.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxFinds.Reverse">
            <summary>
             Search from the end of the current selection to the beginning of the
             document.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RichTextBoxLanguageOptions">
            <summary>
             Rich edit control's option settings for Input Method Editor (IME) and
             Asian language support
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxLanguageOptions.AutoFont">
            <summary>
             If this flag is set, the control automatically changes fonts when the
             user explicitly changes to a different keyboard layout.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxLanguageOptions.AutoFontSizeAdjust">
            <summary>
             Font-bound font sizes are scaled from insertion point size according to
             a script. For example, Asian fonts are slightly larger than Western.
             This is the default.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxLanguageOptions.AutoKeyboard">
            <summary>
             If this flag is set, the control automatically changes the keyboard
             layout when the  user explicitly changes to a different font, or when
             the user explicitly changes the insertion point to a new location in
             the text.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxLanguageOptions.DualFont">
            <summary>
             Sets the control to dual-font mode. Used for Asian language text.
             The control uses an English font for ASCII text and an Asian font for
             Asian text.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxLanguageOptions.ImeAlwaysSendNotify">
            <summary>
             Controls how Rich Edit notifies the client during IME composition:
             0: No EN_CHANGE or EN_SELCHANGE notifications during undetermined state.
             Send notification when final string comes in. (default)
             1: Send EN_CHANGE and EN_SELCHANGE events during undetermined state.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxLanguageOptions.ImeCancelComplete">
            <summary>
             This flag determines how the control uses the composition string of an
             IME if the user cancels it. If this flag is set, the control discards
             the composition string. If this flag is not set, the control uses the
             composition string as the result string.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxLanguageOptions.UIFonts">
            <summary>
             Use UI default fonts. This option is turned off by default.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RichTextBoxScrollBars">
            <summary>
             Specifies how a <see cref='T:System.Windows.Forms.RichTextBox'/> control displays scroll bars.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxScrollBars.None">
            <summary>
             Never display scroll bars.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxScrollBars.Horizontal">
            <summary>
             Display only a horizontal scroll bar when needed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxScrollBars.Vertical">
            <summary>
             Display only a vertical scroll bar when needed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxScrollBars.Both">
            <summary>
             Display both a horizontal and a vertical scroll bar when needed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxScrollBars.ForcedHorizontal">
            <summary>
             Always display only a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxScrollBars.ForcedVertical">
            <summary>
             Always display only a vertical scroll bar.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxScrollBars.ForcedBoth">
            <summary>
             Always display both a horizontal and a vertical scroll bar.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RichTextBoxSelectionAttribute">
            <summary>
             Specifies whether any characters in the
             current selection have the style or attribute.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxSelectionAttribute.Mixed">
            <summary>
             Some but not all characters.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxSelectionAttribute.None">
            <summary>
             No characters.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxSelectionAttribute.All">
            <summary>
             All characters.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RichTextBoxSelectionTypes">
            <summary>
             Defines the possible kinds selection types in a RichTextBox control.
             The actual vale returned by RichTextBox.getSelType() is a combination
             of any of the below options.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxSelectionTypes.Empty">
            <summary>
             The current selection is empty.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxSelectionTypes.Text">
            <summary>
             The current selection is text only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxSelectionTypes.Object">
            <summary>
             The current selection contains atleast one OLE object.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxSelectionTypes.MultiChar">
            <summary>
             The current selection contains more than one character.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxSelectionTypes.MultiObject">
            <summary>
             The current selection contains more than one OLE object.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RichTextBoxStreamType">
            <summary>
             Defines the possible kinds of input/output streams used by RichTextBox
             control's load/save mechansim. These stream options are also used the
             control's text modification methods.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxStreamType.RichText">
            <summary>
             Rich Text Format (RTF).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxStreamType.PlainText">
            <summary>
             Text with spaces in place of OLE objects.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxStreamType.RichNoOleObjs">
            <summary>
             RTF with spaces in place of OLE object (valid only for saveFile).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxStreamType.TextTextOleObjs">
            <summary>
             Text with a text representation of OLE objects (valid only for saveFile).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxStreamType.UnicodePlainText">
            <summary>
             Text with spaces in place of OLE objects, encoded in Unicode.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RichTextBoxWordPunctuations">
            <summary>
             This class defines the possible kinds of punctuation tables that
             can be used with the RichTextBox word wrapping and word breaking features.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxWordPunctuations.Level1">
            <summary>
             Use pre-defined Level 1 punctuation table as default.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxWordPunctuations.Level2">
            <summary>
             Use pre-defined Level 2 punctuation table as default.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxWordPunctuations.Custom">
            <summary>
             Use a custom defined punctuation table.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RichTextBoxWordPunctuations.All">
            <summary>
             Used as a mask.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RightToLeft">
            <summary>
             Specifies a value indicating whether the text appears from right to
             left, as when using Hebrew or Arabic fonts.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RightToLeft.No">
            <summary>
             The text reads from left to right. This is the default.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RightToLeft.Yes">
            <summary>
             The text reads from right to left.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RightToLeft.Inherit">
            <summary>
             The direction the text appears in is inherited from the parent control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SaveFileDialog">
            <summary>
             Represents
             a common dialog box that allows the user to specify options for saving a
             file. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SaveFileDialog.CreatePrompt">
            <summary>
             Gets or sets a value indicating whether the dialog box prompts the user for
             permission to create a file if the user specifies a file that does not exist.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SaveFileDialog.OverwritePrompt">
            <summary>
             Gets or sets a value indicating whether the Save As dialog box displays a warning if the user specifies
             a file name that already exists.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SaveFileDialog.OpenFile">
            <summary>
             Opens the file with read/write permission selected by the user.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SaveFileDialog.PromptFileCreate(System.String)">
            <summary>
             Prompts the user with a <see cref='T:System.Windows.Forms.MessageBox'/>
             when a file is about to be created. This method is
             invoked when the CreatePrompt property is true and the specified file
             does not exist. A return value of false prevents the dialog from
             closing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SaveFileDialog.PromptFileOverwrite(System.String)">
            <summary>
             Prompts the user when a file is about to be overwritten. This method is
             invoked when the "overwritePrompt" property is true and the specified
             file already exists. A return value of false prevents the dialog from
             closing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SaveFileDialog.Reset">
            <summary>
             Resets all dialog box options to their default
             values.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Screen">
            <summary>
             Represents a display device or multiple display devices on a single system.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Screen.bounds">
            <summary>
             Bounds of the screen
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Screen.workingArea">
            <summary>
             Available working area on the screen. This excludes taskbars and other
             docked windows.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Screen.primary">
            <summary>
             Set to true if this screen is the primary monitor
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Screen.deviceName">
            <summary>
             Device name associated with this monitor
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Screen.AllScreens">
            <summary>
             Gets an array of all of the displays on the system.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Screen.BitsPerPixel">
            <summary>
             Gets Bits per Pixel value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Screen.Bounds">
            <summary>
             Gets the bounds of the display.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Screen.DeviceName">
            <summary>
             Gets the device name associated with a display.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Screen.Primary">
            <summary>
             Gets a value indicating whether a particular display is
             the primary device.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Screen.PrimaryScreen">
            <summary>
             Gets the
             primary display.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Screen.WorkingArea">
            <summary>
             Gets the working area of the screen.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Screen.DesktopChangedCount">
            <summary>
             Screen instances call this property to determine
             if their WorkingArea cache needs to be invalidated.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Screen.Equals(System.Object)">
            <summary>
             Specifies a value that indicates whether the specified object is equal to
             this one.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Screen.FromPoint(System.Drawing.Point)">
            <summary>
             Retrieves a <see cref='T:System.Windows.Forms.Screen'/>
             for the monitor that contains the specified point.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Screen.FromRectangle(System.Drawing.Rectangle)">
            <summary>
             Retrieves a <see cref='T:System.Windows.Forms.Screen'/>
             for the monitor that contains the
             largest region of the rectangle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Screen.FromControl(System.Windows.Forms.Control)">
            <summary>
             Retrieves a <see cref='T:System.Windows.Forms.Screen'/> for the monitor that contains
             the largest region of the window of the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Screen.FromHandle(System.IntPtr)">
            <summary>
             Retrieves a <see cref='T:System.Windows.Forms.Screen'/> for the monitor that contains
             the largest region of the window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Screen.GetWorkingArea(System.Drawing.Point)">
            <summary>
             Retrieves the working area for the monitor that is closest to the
             specified point.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Screen.GetWorkingArea(System.Drawing.Rectangle)">
            <summary>
             Retrieves the working area for the monitor that contains the largest region
             of the specified rectangle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Screen.GetWorkingArea(System.Windows.Forms.Control)">
            <summary>
             Retrieves the working area for the monitor that contains the largest
             region of the specified control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Screen.GetBounds(System.Drawing.Point)">
            <summary>
             Retrieves the bounds of the monitor that is closest to the specified
             point.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Screen.GetBounds(System.Drawing.Rectangle)">
            <summary>
             Retrieves the bounds of the monitor that contains the largest region of the
             specified rectangle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Screen.GetBounds(System.Windows.Forms.Control)">
            <summary>
             Retrieves the bounds of the monitor
             that contains the largest region of the specified control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Screen.GetHashCode">
            <summary>
             Computes and retrieves a hash code for an object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Screen.OnDisplaySettingsChanging(System.Object,System.EventArgs)">
            <summary>
             Called by the SystemEvents class when our display settings are
             changing.  We cache screen information and at this point we must
             invalidate our cache.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Screen.OnUserPreferenceChanged(System.Object,Microsoft.Win32.UserPreferenceChangedEventArgs)">
            <summary>
             Called by the SystemEvents class when our display settings have
             changed.  Here, we increment a static counter that Screen instances
             can check against to invalidate their cache.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Screen.ToString">
            <summary>
             Retrieves a string representing this object.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ScrollableControl">
            <summary>
             Defines a base class for controls that support auto-scrolling behavior.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollableControl._displayRect">
            <summary>
             Current size of the displayRect.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollableControl._scrollMargin">
            <summary>
             Current margins for autoscrolling.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollableControl._requestedScrollMargin">
            <summary>
             User requested margins for autoscrolling.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollableControl._scrollPosition">
            <summary>
             User requested autoscroll position - used for form creation only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollableControl.resetRTLHScrollValue">
            <summary>
             Used to figure out what the horizontal scroll value should be set to when the horizontal
             scrollbar is first shown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.ScrollableControl'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollableControl.AutoScroll">
            <summary>
             Gets or sets a value indicating whether the container will allow the user to
             scroll to any controls placed outside of its visible boundaries.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollableControl.AutoScrollMargin">
            <summary>
             Gets or sets the size of the auto-scroll margin.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollableControl.AutoScrollPosition">
            <summary>
             Gets or sets the location of the auto-scroll position.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollableControl.CreateParams">
            <summary>
             Retrieves the CreateParams used to create the window.
             If a subclass overrides this function, it must call the base implementation.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollableControl.DisplayRectangle">
            <summary>
             Retreives the current display rectangle. The display rectangle is the virtual
             display area that is used to layout components. The position and dimensions of
             the Form's display rectangle change during autoScroll.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollableControl.HScroll">
            <summary>
             Gets or sets a value indicating whether the horizontal scroll bar is visible.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.ScrollableControl.HorizontalScroll" -->
        <member name="P:System.Windows.Forms.ScrollableControl.VScroll">
            <summary>
             Gets or sets a value indicating whether the vertical scroll bar is visible.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollableControl.VerticalScroll">
            <summary>
             Gets the Veritcal Scroll bar for this ScrollableControl.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollableControl.DockPadding">
            <summary>
             Gets the dock padding settings for all edges of the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.AdjustFormScrollbars(System.Boolean)">
            <summary>
             Adjusts the auto-scroll bars on the container based on the current control
             positions and the control currently selected.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.GetScrollState(System.Int32)">
            <summary>
             Tests a given scroll state bit to determine if it is set.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
             Forces the layout of any docked or anchored child controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Handles mouse wheel processing for our scrollbars.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Scale this form. Form overrides this to enforce a maximum / minimum size.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.SetDisplayFromScrollProps(System.Int32,System.Int32)">
            <summary>
             Allows to set the <see cref="P:System.Windows.Forms.ScrollableControl.DisplayRectangle" /> to enable the visual scroll effect.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.SetDisplayRectLocation(System.Int32,System.Int32)">
            <summary>
             Adjusts the displayRect to be at the offset x, y. The contents of the
             Form is scrolled using Windows.ScrollWindowEx.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.ScrollControlIntoView(System.Windows.Forms.Control)">
            <summary>
             Scrolls the currently active control into view if we are an AutoScroll
             Form that has the Horiz or Vert scrollbar displayed...
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.ScrollToControl(System.Windows.Forms.Control)">
            <summary> Allow containers to tweak autoscrolling. when you tab between controls contained in the scrollable control
             this allows you to set the scroll location. This would allow you to scroll to the middle of a control, where as the default is
             the top of the control.
             Additionally there is a new AutoScrollOffset property on the child controls themselves. This lets them control where they want to
             be scrolled to. E.g. In SelectedIndexChanged for a ListBox, you could do:
             listBox1.AutoScrollOffset = parent.AutoScrollPosition;
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ScrollableControl.Scroll">
            <summary>
             Occurs when the scroll box has been moved by either a mouse or keyboard action.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.ScrollBar.OnScroll(System.Windows.Forms.ScrollEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.SetAutoScrollMargin(System.Int32,System.Int32)">
            <summary>
             Sets the size of the auto-scroll margins.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.SetVisibleScrollbars(System.Boolean,System.Boolean)">
            <summary>
             Actually displays or hides the horiz and vert autoscrollbars. This will
             also adjust the values of formState to reflect the new state
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.SetDisplayRectangleSize(System.Int32,System.Int32)">
            <summary>
             Sets the width and height of the virtual client area used in autoscrolling.
             This will also adjust the x and y location of the virtual client area if the
             new size forces it.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.SetScrollState(System.Int32,System.Boolean)">
            <summary>
             Sets a given scroll state bit.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.ShouldSerializeAutoScrollPosition">
            <summary>
             Indicates whether the <see cref='P:System.Windows.Forms.ScrollableControl.AutoScrollPosition'/> property should
             be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.ShouldSerializeAutoScrollMargin">
            <summary>
             Indicates whether the <see cref='P:System.Windows.Forms.ScrollableControl.AutoScrollMargin'/> property should be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.ShouldSerializeAutoScrollMinSize">
            <summary>
             Indicates whether the <see cref='P:System.Windows.Forms.ScrollableControl.AutoScrollMinSize'/>
             property should be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.SyncScrollbars(System.Boolean)">
            <summary>
             Updates the value of the autoscroll scrollbars based on the current form
             state. This is a one-way sync, updating the scrollbars only.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.UpdateFullDrag">
            <summary>
             Queries the system to determine the users preference for full drag
             of windows.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.WmVScroll(System.Windows.Forms.Message@)">
            <summary>
             WM_VSCROLL handler
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.WmHScroll(System.Windows.Forms.Message@)">
            <summary>
             WM_HSCROLL handler
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.WmOnScroll(System.Windows.Forms.Message@,System.Int32,System.Int32,System.Windows.Forms.ScrollOrientation)">
            <summary>
             This function gets called which populates the eventArgs and fires the OnScroll( ) event passing
             the appropriate scroll event and scroll bar.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
             The button's window procedure. Inheriting classes can override this
             to add extra functionality, but should not forget to call
             base.wndProc(m); to ensure the button continues to function properly.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ScrollableControl.DockPaddingEdges">
            <summary>
             Determines the border padding for docked controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.DockPaddingEdges.#ctor(System.Windows.Forms.ScrollableControl)">
            <summary>
             Creates a new DockPaddingEdges. The specified owner will be notified when
             the values are changed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollableControl.DockPaddingEdges.All">
            <summary>
             Gets or ssets the padding width for all edges of a docked control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollableControl.DockPaddingEdges.Bottom">
            <summary>
             Gets or sets the padding width for the bottom edge of a docked control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollableControl.DockPaddingEdges.Left">
            <summary>
             Gets or sets the padding width for the left edge of a docked control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollableControl.DockPaddingEdges.Right">
            <summary>
             Gets or sets the padding width for the right edge of a docked control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollableControl.DockPaddingEdges.Top">
            <summary>
             Gets or sets the padding width for the top edge of a docked control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.DockPaddingEdgesConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
             Retrieves the set of properties for this type. By default, a type has does
             not return any properties. An easy implementation of this method can just
             call TypeDescriptor.GetProperties for the correct data type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollableControl.DockPaddingEdgesConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if this object supports properties. By default, this is false.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ScrollBar">
            <summary>
             Implements the basic functionality of a scroll bar control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBar.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.ScrollBar'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollBar.AutoSize">
            <summary>
             Hide AutoSize: it doesn't make sense for this control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollBar.ForeColor">
            <summary>
             Gets or sets the foreground color of the scroll bar control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollBar.LargeChange">
            <summary>
             Gets or sets a value to be added or subtracted to the <see cref='P:System.Windows.Forms.ScrollBar.Value'/>
             property when the scroll box is moved a large distance.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollBar.Maximum">
            <summary>
             Gets or sets the upper limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollBar.Minimum">
            <summary>
             Gets or sets the lower limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollBar.SmallChange">
            <summary>
             Gets or sets the value to be added or subtracted to the <see cref='P:System.Windows.Forms.ScrollBar.Value'/>
             property when the scroll box is moved a small distance.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollBar.Value">
            <summary>
             Gets or sets a numeric value that represents the current position of the scroll box
             on the scroll bar control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollBar.ScaleScrollBarForDpiChange">
            <summary>
             Get/Set flag to let scrollbar scale according to the DPI of the window.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ScrollBar.Scroll">
            <summary>
             Occurs when the scroll box has been moved by either a mouse or keyboard action.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ScrollBar.ValueChanged">
            <summary>
             Occurs when the <see cref='P:System.Windows.Forms.ScrollBar.Value'/> property has
             changed, either by a <see cref='M:System.Windows.Forms.ScrollBar.OnScroll(System.Windows.Forms.ScrollEventArgs)'/> event
             or programatically.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBar.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <summary>
             This is a helper method that is called by ScaleControl to retrieve the bounds
             that the control should be scaled by. You may override this method if you
             wish to reuse ScaleControl's scaling logic but you need to supply your own
             bounds. The default implementation returns scaled bounds that take into
             account the BoundsSpecified, whether the control is top level, and whether
             the control is fixed width or auto size, and any adornments the control may have.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBar.OnHandleCreated(System.EventArgs)">
            <summary>
             Creates the handle. overridden to help set up scrollbar information.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBar.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.ScrollBar.ValueChanged'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBar.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Converts mouse wheel movements into scrolling, when scrollbar has the focus.
             Typically one wheel step will cause one small scroll increment, in either
             direction. A single wheel message could represent either one wheel step, multiple
             wheel steps (fast wheeling), or even a fraction of a step (smooth-wheeled mice).
             So we accumulate the total wheel delta, and consume it in whole numbers of steps.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBar.OnValueChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.ScrollBar.ValueChanged'/> event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ScrollBarRenderer">
            <summary>
             This is a rendering class for the ScrollBar control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollBarRenderer.IsSupported">
            <summary>
             Returns true if this class is supported for the current OS and user/application settings,
             otherwise returns false.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBarRenderer.DrawArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.ScrollBarArrowButtonState)">
            <summary>
             Renders a ScrollBar arrow button.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBarRenderer.DrawHorizontalThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.ScrollBarState)">
            <summary>
             Renders a horizontal ScrollBar thumb.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBarRenderer.DrawVerticalThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.ScrollBarState)">
            <summary>
             Renders a vertical ScrollBar thumb.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBarRenderer.DrawHorizontalThumbGrip(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.ScrollBarState)">
            <summary>
             Renders a horizontal ScrollBar thumb grip.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBarRenderer.DrawVerticalThumbGrip(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.ScrollBarState)">
            <summary>
             Renders a vertical ScrollBar thumb grip.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBarRenderer.DrawRightHorizontalTrack(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.ScrollBarState)">
            <summary>
             Renders a horizontal ScrollBar thumb.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBarRenderer.DrawLeftHorizontalTrack(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.ScrollBarState)">
            <summary>
             Renders a horizontal ScrollBar thumb.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBarRenderer.DrawUpperVerticalTrack(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.ScrollBarState)">
            <summary>
             Renders a vertical ScrollBar thumb in the center of the given bounds.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBarRenderer.DrawLowerVerticalTrack(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.ScrollBarState)">
            <summary>
             Renders a vertical ScrollBar thumb in the center of the given bounds.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBarRenderer.DrawSizeBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.ScrollBarSizeBoxState)">
            <summary>
             Renders a ScrollBar size box in the center of the given bounds.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBarRenderer.GetThumbGripSize(System.Drawing.Graphics,System.Windows.Forms.VisualStyles.ScrollBarState)">
            <summary>
             Returns the size of the ScrollBar thumb grip.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollBarRenderer.GetSizeBoxSize(System.Drawing.Graphics,System.Windows.Forms.VisualStyles.ScrollBarState)">
            <summary>
             Returns the size of the ScrollBar size box.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ScrollBars">
            <summary>
             Specifies which scroll bars will be visible on a control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollBars.None">
            <summary>
             No scroll bars are shown.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollBars.Horizontal">
            <summary>
             Only horizontal scroll bars are shown.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollBars.Vertical">
            <summary>
             Only vertical scroll bars are shown.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollBars.Both">
            <summary>
             Both horizontal and vertical scroll bars are shown.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Windows.Forms.ScrollButton" -->
        <member name="F:System.Windows.Forms.ScrollButton.Down">
            <summary>
             A down-scroll arrow.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollButton.Left">
            <summary>
             A left-scroll arrow.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollButton.Right">
            <summary>
             A right-scroll arrow.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollButton.Up">
            <summary>
             An up-scroll arrow.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ScrollEventArgs">
            <summary>
             Provides data for the <see cref='E:System.Windows.Forms.ScrollBar.Scroll'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollEventArgs.#ctor(System.Windows.Forms.ScrollEventType,System.Int32)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.ScrollEventArgs'/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ScrollEventArgs.#ctor(System.Windows.Forms.ScrollEventType,System.Int32,System.Windows.Forms.ScrollOrientation)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.ScrollEventArgs'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollEventArgs.Type">
            <summary>
             Specifies the type of scroll event that occurred.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollEventArgs.NewValue">
            <summary>
             Specifies the new location of the scroll box within the scroll bar.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollEventArgs.OldValue">
            <summary>
             Specifies the last position  within the scroll bar.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollEventArgs.ScrollOrientation">
            <summary>
             Specifies the type of scroll event that occurred.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ScrollEventHandler">
            <summary>
             Represents a method that handles the <c>Scroll</c> event
             of a <see cref='T:System.Windows.Forms.ScrollBar'/>, <see cref='T:System.Windows.Forms.TrackBar'/> or <see cref='!:DataGrid'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ScrollEventType">
            <summary>
             Specifies the type of action used to raise the <see cref='E:System.Windows.Forms.ScrollBar.Scroll'/> event.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollEventType.SmallDecrement">
            <summary>
             The scroll box was moved a small distance. The user clicked the
             left (horizontal) or top (vertical) scroll arrow or pressed
             the UP ARROW
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollEventType.SmallIncrement">
            <summary>
             The scroll box was moved a small distance. The user clicked the
             right (horizontal) or bottom (vertical) scroll arrow or pressed
             the DOWN ARROW key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollEventType.LargeDecrement">
            <summary>
             The scroll box moved a large distance. The user clicked the scroll bar
             to the left (horizontal) or above (vertical) the scroll box, or pressed
             the PAGE UP key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollEventType.LargeIncrement">
            <summary>
             The scroll box moved a large distance. The user clicked the scroll bar
             to the right (horizontal) or below (vertical) the scroll box, or pressed
             the PAGE DOWN key.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollEventType.ThumbPosition">
            <summary>
             The scroll box was moved.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollEventType.ThumbTrack">
            <summary>
             The scroll box is currently being moved.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollEventType.First">
            <summary>
             The scroll box was moved to the <see cref='P:System.Windows.Forms.ScrollBar.Minimum'/>
             position.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollEventType.Last">
            <summary>
             The scroll box was moved to the <see cref='P:System.Windows.Forms.ScrollBar.Maximum'/>
             position.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollEventType.EndScroll">
            <summary>
             The scroll box has stopped moving.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ScrollOrientation">
            <summary>
             Provides data for the <see cref='E:System.Windows.Forms.ScrollBar.Scroll'/>
             event. This enumeration gives the orientation of the scroll that took place
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollOrientation.HorizontalScroll">
            <summary>
             Denotes that horizontal scrolling took place.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ScrollOrientation.VerticalScroll">
            <summary>
             Denotes that vertical scrolling took place.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ScrollProperties">
            <summary>
             Basic Properties for Scrollbars.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollProperties.Enabled">
            <summary>
             Gets or sets a bool value controlling whether the scrollbar is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollProperties.LargeChange">
            <summary>
             Gets or sets a value to be added or subtracted to the <see cref='P:System.Windows.Forms.ScrollProperties.LargeChange'/>
             property when the scroll box is moved a large distance.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollProperties.Maximum">
            <summary>
             Gets or sets the upper limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollProperties.Minimum">
            <summary>
             Gets or sets the lower limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollProperties.SmallChange">
            <summary>
             Gets or sets the value to be added or subtracted to the <see cref='P:System.Windows.Forms.ScrollBar.Value'/>
             property when the scroll box is moved a small distance.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollProperties.Value">
            <summary>
             Gets or sets a numeric value that represents the current position of the scroll box
             on the scroll bar control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ScrollProperties.Visible">
            <summary>
             Gets or sets a bool value controlling whether the scrollbar is showing.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SearchForVirtualItemEventHandler">
            <summary>
             Represents a method that will handle the SearchForVirtualItem event of a ListView.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SelectedGridItemChangedEventArgs">
            <summary>
             The event class that is created when the selected GridItem in the PropertyGrid is changed by the user.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SelectedGridItemChangedEventArgs.#ctor(System.Windows.Forms.GridItem,System.Windows.Forms.GridItem)">
            <summary>
             Constructs a SelectedGridItemChangedEventArgs object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SelectedGridItemChangedEventArgs.OldSelection">
            <summary>
             The previously selected GridItem object. This can be null.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SelectedGridItemChangedEventArgs.NewSelection">
            <summary>
             The newly selected GridItem object
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SelectionMode.None">
            <summary>
             Indicates that no items can be selected.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SelectionMode.One">
            <summary>
             Indicates that only one item at a time can be selected.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SelectionMode.MultiSimple">
            <summary>
             Indicates that more than one item at a time can be selected.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SelectionMode.MultiExtended">
            <summary>
             Indicates that more than one item at a time can be selected, and
             keyboard combinations, such as SHIFT and CTRL can be used to help
             in selection.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SelectionRange">
            <summary>
             This is a class that represents the date selection range of a MonthCalendar control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SelectionRange.start">
            <summary>
             The lower limit of the selection range.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SelectionRange.end">
            <summary>
             The upper limit of the selection range.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SelectionRange.#ctor">
            <summary>
             Create a new SelectionRange object with the range [null, null].
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SelectionRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
             Create a new SelectionRange object with the given range.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SelectionRange.#ctor(System.Windows.Forms.SelectionRange)">
            <summary>
             Create a new SelectionRange object given an existing SelectionRange object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SelectionRange.End">
            <summary>
             Returns the ending time of this range.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SelectionRange.Start">
            <summary>
             Starting time of this range
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SelectionRange.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SelectionRangeConverter">
            <summary>
             SelectionRangeConverter is a class that can be used to convert
             SelectionRange objects from one data type to another.  Access this
             class through the TypeDescriptor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SelectionRangeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Determines if this converter can convert an object in the given source
             type to the native type of the converter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SelectionRangeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Gets a value indicating whether this converter can
             convert an object to the given destination type using the context.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SelectionRangeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
             Converts the given object to the converter's native type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SelectionRangeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type.  The most common types to convert
             are to and from a string object.  The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string.  If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SelectionRangeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
             Creates an instance of this type given a set of property values
             for the object.  This is useful for objects that are immutable, but still
             want to provide changable properties.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SelectionRangeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if changing a value on this object should require a call to
             CreateInstance to create a new value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SelectionRangeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
             Retrieves the set of properties for this type.  By default, a type has
             does not return any properties.  An easy implementation of this method
             can just call TypeDescriptor.GetProperties for the correct data type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SelectionRangeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if this object supports properties.  By default, this
             is false.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SendKeys">
            <summary>
             Provides methods for sending keystrokes to an application.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SendKeys.s_stopHook">
            <summary>
             should we stop using the hook?
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SendKeys.s_hhook">
            <summary>
             HHOOK
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SendKeys.events">
            <summary>
             vector of events that we have yet to post to the journaling hook.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SendKeys.#ctor">
            <summary>
             private constructor to prevent people from creating one of these.  they
             should use public static methods
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SendKeys.AddEvent(System.Windows.Forms.SendKeys.SKEvent)">
            <summary>
             adds an event to our list of events for the hook
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SendKeys.AddMsgsForVK(System.Int32,System.Int32,System.Boolean,System.IntPtr)">
            <summary>
             given the vk, add the appropriate messages for it
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SendKeys.CancelMods(System.Int32[],System.Int32,System.IntPtr)">
            <summary>
             called whenever there is a closing parenthesis, or the end of a
             character.  This generates events for the end of a modifier.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SendKeys.InstallHook">
            <summary>
             install the hook.  quite easy
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SendKeys.JournalCancel">
            <summary>
             tells us to shut down the server, perhaps if we're shutting down and the
             hook is still running
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SendKeys.ClearKeyboardState">
            <summary>
             before we do a sendkeys, we want to  clear the state
             of a couple of keys [capslock, numlock, scrolllock] so they don't
             interfere.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SendKeys.MatchKeyword(System.String)">
            <summary>
             given the string, match the keyword to a VK.  return -1 if it don't match
             nuthin'
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SendKeys.OnThreadExit(System.Object,System.EventArgs)">
            <summary>
             This event is raised from Application when each window thread
             termiantes.  It gives us a chance to uninstall our journal
             hook if we had one installed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SendKeys.ParseKeys(System.String,System.IntPtr)">
            <summary>
             parse the string the user has given us, and generate the appropriate
             events for the journaling hook
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SendKeys.Send(System.String)">
            <summary>
             Sends keystrokes to the active application.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SendKeys.Send(System.String,System.Windows.Forms.Control,System.Boolean)">
            <summary>
             Sends keystrokes to the active application.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SendKeys.SendWait(System.String)">
            <summary>
             Sends the given keys to the active application, and then waits for
             the messages to be processed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SendKeys.SendWait(System.String,System.Windows.Forms.Control)">
            <summary>
             Sends the given keys to the active application, and then waits for
             the messages to be processed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SendKeys.Flush">
            <summary>
             Processes all the Windows messages currently in the message queue.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SendKeys.UninstallJournalingHook">
            <summary>
             cleans up and uninstalls the hook
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SendKeys.SKWindow">
            <summary>
             SendKeys creates a window to monitor WM_CANCELJOURNAL messages.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SendKeys.SKEvent">
            <summary>
             helps us hold information about the various events we're going to journal
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SendKeys.KeywordVk">
            <summary>
             holds a keyword and the associated VK_ for it
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SendKeys.SendKeysHookProc">
            <summary>
             this class is our callback for the journaling hook we install
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Shortcut">
            <summary>
             Specifies shortcut keys that can be used by menu items.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.None">
            <summary>
             No shortcut key is associated with the menu item.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlA">
            <summary>
             The shorcut keys CTRL+A.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlB">
            <summary>
             The shorcut keys CTRL+B.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlC">
            <summary>
             The shorcut keys CTRL+C.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlD">
            <summary>
             The shorcut keys CTRL+D.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlE">
            <summary>
             The shorcut keys CTRL+E.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlF">
            <summary>
             The shorcut keys CTRL+F.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlG">
            <summary>
             The shorcut keys CTRL+G.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlH">
            <summary>
             The shorcut keys CTRL+H.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlI">
            <summary>
             The shorcut keys CTRL+I.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlJ">
            <summary>
             The shorcut keys CTRL+J.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlK">
            <summary>
             The shorcut keys CTRL+K.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlL">
            <summary>
             The shorcut keys CTRL+L.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlM">
            <summary>
             The shorcut keys CTRL+M.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlN">
            <summary>
             The shorcut keys CTRL+N.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlO">
            <summary>
             The shorcut keys CTRL+O.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlP">
            <summary>
             The shorcut keys CTRL+P.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlQ">
            <summary>
             The shorcut keys CTRL+Q.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlR">
            <summary>
             The shorcut keys CTRL+R.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlS">
            <summary>
             The shorcut keys CTRL+S.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlT">
            <summary>
             The shorcut keys CTRL+T.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlU">
            <summary>
             The shorcut keys CTRL+U
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlV">
            <summary>
             The shorcut keys CTRL+V.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlW">
            <summary>
             The shorcut keys CTRL+W.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlX">
            <summary>
             The shorcut keys CTRL+X.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlY">
            <summary>
             The shorcut keys CTRL+Y.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlZ">
            <summary>
             The shorcut keys CTRL+Z.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftA">
            <summary>
             The shortcut keys CTRL+SHIFT+A.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftB">
            <summary>
             The shortcut keys CTRL+SHIFT+B.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftC">
            <summary>
             The shortcut keys CTRL+SHIFT+C.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftD">
            <summary>
             The shortcut keys CTRL+SHIFT+D.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftE">
            <summary>
             The shortcut keys CTRL+SHIFT+E.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF">
            <summary>
             The shortcut keys CTRL+SHIFT+F.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftG">
            <summary>
             The shortcut keys CTRL+SHIFT+G.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftH">
            <summary>
             The shortcut keys CTRL+SHIFT+H.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftI">
            <summary>
             The shortcut keys CTRL+SHIFT+I.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftJ">
            <summary>
             The shortcut keys CTRL+SHIFT+J.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftK">
            <summary>
             The shortcut keys CTRL+SHIFT+K.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftL">
            <summary>
             The shortcut keys CTRL+SHIFT+L.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftM">
            <summary>
             The shortcut keys CTRL+SHIFT+M.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftN">
            <summary>
             The shortcut keys CTRL+SHIFT+N.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftO">
            <summary>
             The shortcut keys CTRL+SHIFT+O.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftP">
            <summary>
             The shortcut keys CTRL+SHIFT+P.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftQ">
            <summary>
             The shortcut keys CTRL+SHIFT+Q.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftR">
            <summary>
             The shortcut keys CTRL+SHIFT+R.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftS">
            <summary>
             The shortcut keys CTRL+SHIFT+S.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftT">
            <summary>
             The shortcut keys CTRL+SHIFT+T.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftU">
            <summary>
             The shortcut keys CTRL+SHIFT+U.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftV">
            <summary>
             The shortcut keys CTRL+SHIFT+V.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftW">
            <summary>
             The shortcut keys CTRL+SHIFT+W.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftX">
            <summary>
             The shortcut keys CTRL+SHIFT+X.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftY">
            <summary>
             The shortcut keys CTRL+SHIFT+Y.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftZ">
            <summary>
             The shortcut keys CTRL+SHIFT+Z.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.F1">
            <summary>
             The shortcut key F1.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.F2">
            <summary>
             The shortcut key F2.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.F3">
            <summary>
             The shortcut key F3.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.F4">
            <summary>
             The shortcut key F4.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.F5">
            <summary>
             The shortcut key F5.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.F6">
            <summary>
             The shortcut key F6.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.F7">
            <summary>
             The shortcut key F7.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.F9">
            <summary>
             The shortcut key F9.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.F10">
            <summary>
             The shortcut key F10.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.F11">
            <summary>
             The shortcut key F11.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.F12">
            <summary>
             The shortcut key F12.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.ShiftF1">
            <summary>
             The shortcut keys SHIFT+F1.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.ShiftF2">
            <summary>
             The shortcut keys SHIFT+F2.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.ShiftF3">
            <summary>
             The shortcut keys SHIFT+F3.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.ShiftF4">
            <summary>
             The shortcut keys SHIFT+F4.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.ShiftF5">
            <summary>
             The shortcut keys SHIFT+F5.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.ShiftF6">
            <summary>
             The shortcut keys SHIFT+F6.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.ShiftF7">
            <summary>
             The shortcut keys SHIFT+F7.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.ShiftF8">
            <summary>
             The shortcut keys SHIFT+F8.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.ShiftF9">
            <summary>
             The shortcut keys SHIFT+F9.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.ShiftF10">
            <summary>
             The shortcut keys SHIFT+F10.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.ShiftF11">
            <summary>
             The shortcut keys SHIFT+F11.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.ShiftF12">
            <summary>
             The shortcut keys SHIFT+F12.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlF1">
            <summary>
             The shortcut keys CTRL+F1.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlF2">
            <summary>
             The shortcut keys CTRL+F2.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlF3">
            <summary>
             The shortcut keys CTRL+F3.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlF4">
            <summary>
             The shortcut keys CTRL+F4.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlF5">
            <summary>
             The shortcut keys CTRL+F5.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlF6">
            <summary>
             The shortcut keys CTRL+F6.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlF7">
            <summary>
             The shortcut keys CTRL+F7.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlF8">
            <summary>
             The shortcut keys CTRL+F8.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlF9">
            <summary>
             The shortcut keys CTRL+F9.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlF10">
            <summary>
             The shortcut keys CTRL+F10.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlF11">
            <summary>
             The shortcut keys CTRL+F11.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlF12">
            <summary>
             The shortcut keys CTRL+F12.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF1">
            <summary>
             The shortcut keys CTRL+SHIFT+F1.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF2">
            <summary>
             The shortcut keys CTRL+SHIFT+F2.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF3">
            <summary>
             The shortcut keys CTRL+SHIFT+F3.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF4">
            <summary>
             The shortcut keys CTRL+SHIFT+F4.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF5">
            <summary>
             The shortcut keys CTRL+SHIFT+F5.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF6">
            <summary>
             The shortcut keys CTRL+SHIFT+F6.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF7">
            <summary>
             The shortcut keys CTRL+SHIFT+F7.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF8">
            <summary>
             The shortcut keys CTRL+SHIFT+F8.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF9">
            <summary>
             The shortcut keys CTRL+SHIFT+F9.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF10">
            <summary>
             The shortcut keys CTRL+SHIFT+F10.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF11">
            <summary>
             The shortcut keys CTRL+SHIFT+F11.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF12">
            <summary>
             The shortcut keys CTRL+SHIFT+F12.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Ins">
            <summary>
             The shortcut key INSERT.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlIns">
            <summary>
             The shortcut keys CTRL+INSERT.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.ShiftIns">
            <summary>
             The shortcut keys SHIFT+INSERT.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Del">
            <summary>
             The shortcut key DELETE.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlDel">
            <summary>
             The shortcut keys CTRL+DELETE.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.ShiftDel">
            <summary>
             The shortcut keys SHIFT+DELETE.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.AltRightArrow">
            <summary>
             The shortcut keys Alt + RightArrow.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.AltLeftArrow">
            <summary>
             The shortcut keys ALT+LeftArrow.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.AltUpArrow">
            <summary>
             The shortcut keys ALT+UpArrow.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.AltDownArrow">
            <summary>
             The shortcut keys Alt + DownArrow.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.AltBksp">
            <summary>
             The shortcut keys ALT+BACKSPACE.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.AltF1">
            <summary>
             The shortcut keys ALT+F1.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.AltF2">
            <summary>
             The shortcut keys ALT+F2.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.AltF3">
            <summary>
             The shortcut keys ALT+F3.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.AltF4">
            <summary>
             The shortcut keys ALT+F4.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.AltF5">
            <summary>
             The shortcut keys ALT+F5.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.AltF6">
            <summary>
             The shortcut keys ALT+F6.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.AltF7">
            <summary>
             The shortcut keys ALT+F7.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.AltF8">
            <summary>
             The shortcut keys ALT+F8.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.AltF9">
            <summary>
             The shortcut keys ALT+F9.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.AltF10">
            <summary>
             The shortcut keys ALT+F10.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.AltF11">
            <summary>
             The shortcut keys ALT+F11.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.AltF12">
            <summary>
             The shortcut keys ALT+F12.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Alt0">
            <summary>
             The shortcut keys ALT+0.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Alt1">
            <summary>
             The shortcut keys ALT+1.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Alt2">
            <summary>
             The shortcut keys ALT+2.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Alt3">
            <summary>
             The shortcut keys ALT+3.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Alt4">
            <summary>
             The shortcut keys ALT+4.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Alt5">
            <summary>
             The shortcut keys ALT+5.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Alt6">
            <summary>
             The shortcut keys ALT+6.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Alt7">
            <summary>
             The shortcut keys ALT+7.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Alt8">
            <summary>
             The shortcut keys ALT+8.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Alt9">
            <summary>
             The shortcut keys ALT+9.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Ctrl0">
            <summary>
             The shortcut keys CTRL+0.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Ctrl1">
            <summary>
             The shortcut keys CTRL+1.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Ctrl2">
            <summary>
             The shortcut keys CTRL+2.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Ctrl3">
            <summary>
             The shortcut keys CTRL+3.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Ctrl4">
            <summary>
             The shortcut keys CTRL+4.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Ctrl5">
            <summary>
             The shortcut keys CTRL+5.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Ctrl6">
            <summary>
             The shortcut keys CTRL+6.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Ctrl7">
            <summary>
             The shortcut keys CTRL+7.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Ctrl8">
            <summary>
             The shortcut keys CTRL+8.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.Ctrl9">
            <summary>
             The shortcut keys CTRL+9.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShift0">
            <summary>
             The shortcut keys CTRL+SHIFT+0.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShift1">
            <summary>
             The shortcut keys CTRL+SHIFT+1.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShift2">
            <summary>
             The shortcut keys CTRL+SHIFT+2.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShift3">
            <summary>
             The shortcut keys CTRL+SHIFT+3.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShift4">
            <summary>
             The shortcut keys CTRL+SHIFT+4.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShift5">
            <summary>
             The shortcut keys CTRL+SHIFT+5.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShift6">
            <summary>
             The shortcut keys CTRL+SHIFT+6.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShift7">
            <summary>
             The shortcut keys CTRL+SHIFT+7.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShift8">
            <summary>
             The shortcut keys CTRL+SHIFT+8.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Shortcut.CtrlShift9">
            <summary>
             The shortcut keys CTRL+SHIFT+9.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SizeGripStyle">
            <summary>
             Specifies the style of the sizing grip on a <see cref='T:System.Windows.Forms.Form'/>.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SizeGripStyle.Auto">
            <summary>
             The size grip is automatically display when needed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SizeGripStyle.Show">
            <summary>
             The sizing grip is always shown on the form.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SizeGripStyle.Hide">
            <summary>
             The sizing grip is hidden.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SortOrder">
            <summary>
             Specifies how items in a list are sorted.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SortOrder.None">
            <summary>
             The items are not sorted.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SortOrder.Ascending">
            <summary>
             The items are sorted in ascending order.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SortOrder.Descending">
            <summary>
             The items are sorted in descending order.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SpecialFolderEnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Personal appears twice in type editor because its numeric value matches with MyDocuments.
             This code filters out the duplicate value.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SplitContainer">
            <summary>
             A SplitContainer is a ContainerControl with 2 panels separated with a splitter
             in the middle. This is a composite control. The user can drag and drop this control from Toolbox.
             Controls can be added to the right panel and the left panel. The Orientation can be either Horizontal or Vertical.
             The Controls inside the Panels would be redrawn with the new Orientation.
             With this control the user need be aware of docking, z-order of the controls. The controls get parented when thry are
             dropped on the SpitContainer.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.AutoScroll">
            <summary>
             This property is overridden to allow the AutoScroll to be set on all the panels when
             The autoScroll on SplitContainer is shown.
             Here we dont set the base value ... but set autoscroll for panels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.AutoScrollMinSize">
            <summary>
             Override AutoScrollMinSize to make it hidden from the user in the designer
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.AutoScrollMargin">
            <summary>
             Override AutoScrollMargin to make it hidden from the user in the designer
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.AutoSize">
            <summary>
             Hide AutoSize, as it can mean more than one thing and might confuse users
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.BindingContext">
            <summary>
             The binding manager for the container control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.BorderStyle">
            <summary>
             Indicates what type of border the Splitter control has.  This value
             comes from the System.Windows.Forms.BorderStyle enumeration.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.Controls">
            <summary>
             Controls Collection...
             This is overriden so that the Controls.Add ( ) is not Code Gened...
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.Dock">
            <summary>
             The dock property. The dock property controls to which edge
             of the container this control is docked to. For example, when docked to
             the top of the container, the control will be displayed flush at the
             top of the container, extending the length of the container.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.FixedPanel">
            <summary>
             Indicates what type of border the Splitter control has.  This value
             comes from the System.Windows.Forms.BorderStyle enumeration.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.IsSplitterFixed">
            <summary>
             This property determines whether the the splitter can move.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.Orientation">
            <summary>
             This Property sets or gets if the splitter is vertical or horizontal.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.CollapsedMode">
            <summary>
              Indicates if either panel is collapsed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.Panel1">
            <summary>
             The Left or Top panel in the SplitContainer.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.CollapsePanel(System.Windows.Forms.SplitterPanel,System.Boolean)">
            <summary>
              Collapses or restores the given panel
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.Panel1Collapsed">
            <summary>
             Collapses or restores panel1
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.Panel2Collapsed">
            <summary>
             Collapses or restores panel2
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.Panel1MinSize">
            <summary>
             This property determines the minimum distance of pixels of the splitter from the left or the top edge of Panel1.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.Panel2">
            <summary>
             This is the Right or Bottom panel in the SplitContainer.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.Panel2MinSize">
            <summary>
             This property determines the minimum distance of pixels of the splitter from the right or the bottom edge of Panel2
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.SplitterDistance">
            <summary>
             This property determines pixel distance of the splitter from the left or top edge.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.SplitterIncrement">
            <summary>
             This determines the number of pixels the splitter moves in increments.This is defaulted to 1.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.SplitterRectangle">
            <summary>
             This property determines the rectangle bounds of the splitter.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.SplitterWidth">
            <summary>
             This property determines the thickness of the splitter.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.SplitterWidthInternal">
            <summary>
             We need to have a internal Property for the SplitterWidth which returns zero if we are in collapased mode.
             This property is used to Layout SplitContainer.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitContainer.TabStop">
            <summary>
             Indicates whether the user can give the focus to this control using the TAB
             key. This property is read-only.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.BeginInit">
            <summary>
             ISupportInitialize support. Disables splitter panel min size and splitter width
             validation during initialization.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.EndInit">
            <summary>
             ISupportInitialize support. Enables splitter panel min size and splitter width
             validation after initialization.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.OnGotFocus(System.EventArgs)">
            <summary>
             Overides the Control.OnGotFocus to Invalidate...
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
             Overrides the Control.OnKeydown for implementing splitter movements.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
             Overrides the Control.OnKeydown for implementing splitter movements.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
             Overrides the Control.OnLayout.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.OnLostFocus(System.EventArgs)">
            <summary>
             Overrides the Control.OnLostFocus to Invalidate.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='!:SplitContainer.MouseMove'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.OnMouseLeave(System.EventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.SplitContainer.OnMouseLeave(System.EventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.SplitContainer.OnMouseDown(System.Windows.Forms.MouseEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.SplitContainer.OnMouseUp(System.Windows.Forms.MouseEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.OnMove(System.EventArgs)">
            <summary>
             Overrides the Control.OnMove() to synchronize the
             splitterRect with the position of the SplitContainer.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Overrides the Control.OnPaint() to focus the Splitter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.OnSplitterMoving(System.Windows.Forms.SplitterCancelEventArgs)">
            <summary>
             Inherriting classes should override this method to respond to the
             splitterMoving event. This event occurs while the splitter is
             being moved by the user.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.OnSplitterMoved(System.Windows.Forms.SplitterEventArgs)">
            <summary>
             Inherriting classes should override this method to respond to the
             splitterMoved event. This event occurs when the user finishes
             moving the splitter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.OnRightToLeftChanged(System.EventArgs)">
            END DELEGATES                                                                              //
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.ApplyPanel1MinSize(System.Int32)">
            <summary>
             Validate and set the minimum size for Panel1.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.ApplyPanel2MinSize(System.Int32)">
            <summary>
             Validate and set the minimum size for Panel2.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.ApplySplitterWidth(System.Int32)">
            <summary>
             Validate and set the splitter width.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.ApplySplitterDistance">
            <summary>
             Sets the split position to be the current split size. This is called
             by splitEdit
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.CalcSplitLine(System.Int32,System.Int32)">
            <summary>
             Calculates the bounding rect of the split line. minWeight refers
             to the minimum height or width of the splitline.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.DrawSplitBar(System.Int32)">
            <summary>
             Draws the splitter bar at the current location. Will automatically
             cleanup anyplace the splitter was drawn previously.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.DrawFocus(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Draws the focus rectangle if the control has focus.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.DrawSplitHelper(System.Int32)">
            <summary>
             Draws the splitter line at the requested location. Should only be called
             by drawSpltBar.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.GetSplitterDistance(System.Int32,System.Int32)">
            <summary>
             Calculates the split size based on the mouse position (x, y).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.ProcessArrowKey(System.Boolean)">
            <summary>
             Process an arrowKey press by selecting the next control in the group
             that the activeControl belongs to.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.RepaintSplitterRect">
            <summary>
             Re paint SplitterRect for SplitContainer
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.ResizeSplitContainer">
            <summary>
             Reize SplitContainer
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
             <summary>
              Scales an individual control's location, size, padding and margin.
              If the control is top level, this will not scale the control's location.
              This does not scale children or the size of auto sized controls.  You can
              omit scaling in any direction by changing BoundsSpecified.
            
              After the control is scaled the RequiredScaling property is set to
              BoundsSpecified.None.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.SelectNextControlInContainer(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Selects the next control following ctl.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.SelectNextControlInPanel(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Selects the next control following ctl.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.SetInnerMostBorder(System.Windows.Forms.SplitContainer)">
            <summary>
             Selects the innermost PANEL.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
             This protected override allows us to check is an unvalid value is set for Width and Height.
             The SplitContainer would not throw on invalid Size (i.e Width and Height) settings, but would correct the error like Form
             Say, the Panel1MinSize == 150 , Panel2MinSize == 50 and SplitterWidth == 4 and the user tries
             to set SplitContainer.Width = 50 ... then this function would try to correct the value to 204.. instead of throwing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.SplitBegin(System.Int32,System.Int32)">
            <summary>
             Begins the splitter moving.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.SplitMove(System.Int32,System.Int32)">
            <summary>
             The split movement.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.SplitEnd(System.Boolean)">
            <summary>
             Finishes the split movement.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.UpdateSplitter">
            <summary>
             Update Splitter
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.WmSetCursor(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_SETCURSOR message
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
             Processes a dialog key. Overrides Control.processDialogKey(). This
             method implements handling of the TAB, LEFT, RIGHT, UP, and DOWN
             keys in dialogs.
             The method performs no processing on keys that include the ALT or
             CONTROL modifiers. For the TAB key, the method selects the next control
             on the form. For the arrow keys,
             !!!
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.ProcessTabKey(System.Boolean)">
             /// <summary>
             This will process the TabKey for the SplitContainer. The Focus needs to Shift from controls to the Left of the Splitter
             to the splitter and then to the controls on the right of the splitter. This override implements this Logic.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitContainer.SplitContainerMessageFilter.System#Windows#Forms#IMessageFilter#PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SplitContainer.SplitContainerTypedControlCollection">
            <summary>
             This control collection only allows a specific type of control
             into the controls collection.  It optionally supports readonlyness.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Splitter">
            <summary>
             Provides user resizing of docked elements at run time. To use a Splitter you can
             dock any control to an edge of a container, and then dock the splitter to the same
             edge. The splitter will then resize the control that is previous in the docking
             order.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Splitter.#ctor">
            <summary>
             Creates a new Splitter.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Splitter.Anchor">
            <summary>
             The current value of the anchor property. The anchor property
             determines which edges of the control are anchored to the container's
             edges.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Splitter.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Splitter.BorderStyle">
            <summary>
             Indicates what type of border the Splitter control has.  This value
             comes from the System.Windows.Forms.BorderStyle enumeration.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Splitter.CreateParams">
            <summary>
             Returns the parameters needed to create the handle.  Inheriting classes
             can override this to provide extra functionality.  They should not,
             however, forget to call base.getCreateParams() first to get the struct
             filled up with the basic info.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Splitter.Horizontal">
            <summary>
             Determines if the splitter is horizontal.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Splitter.MinExtra">
            <summary>
             The minExtra is this minimum size (in pixels) of the remaining
             area of the container. This area is center of the container that
             is not occupied by edge docked controls, this is the are that
             would be used for any fill docked control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Splitter.MinSize">
            <summary>
             The minSize is the minimum size (in pixels) of the target of the
             splitter. The target of a splitter is always the control adjacent
             to the splitter, just prior in the dock order.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Splitter.SplitPosition">
            <summary>
             The position of the splitter. If the splitter is not bound
             to a control, SplitPosition will be -1.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Splitter.DrawSplitBar(System.Int32)">
            <summary>
             Draws the splitter bar at the current location. Will automatically
             cleanup anyplace the splitter was drawn previously.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Splitter.CalcSplitLine(System.Int32,System.Int32)">
            <summary>
             Calculates the bounding rect of the split line. minWeight refers
             to the minimum height or width of the splitline.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Splitter.CalcSplitSize">
            <summary>
             Calculates the current size of the splitter-target.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Splitter.CalcSplitBounds">
            <summary>
             Calculates the bounding criteria for the splitter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Splitter.DrawSplitHelper(System.Int32)">
            <summary>
             Draws the splitter line at the requested location. Should only be called
             by drawSpltBar.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Splitter.FindTarget">
            <summary>
             Finds the target of the splitter. The target of the splitter is the
             control that is "outside" or the splitter. For example, if the splitter
             is docked left, the target is the control that is just to the left
             of the splitter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Splitter.GetSplitSize(System.Int32,System.Int32)">
            <summary>
             Calculates the split size based on the mouse position (x, y).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Splitter.OnSplitterMoving(System.Windows.Forms.SplitterEventArgs)">
            <summary>
             Inherriting classes should override this method to respond to the
             splitterMoving event. This event occurs while the splitter is
             being moved by the user.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Splitter.OnSplitterMoved(System.Windows.Forms.SplitterEventArgs)">
            <summary>
             Inherriting classes should override this method to respond to the
             splitterMoved event. This event occurs when the user finishes
             moving the splitter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Splitter.SplitBegin(System.Int32,System.Int32)">
            <summary>
             Begins the splitter moving.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Splitter.SplitEnd(System.Boolean)">
            <summary>
             Finishes the split movement.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Splitter.ApplySplitPosition">
            <summary>
             Sets the split position to be the current split size. This is called
             by splitEdit
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Splitter.SplitMove(System.Int32,System.Int32)">
            <summary>
             Moves the splitter line to the splitSize for the mouse position
             (x, y).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Splitter.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Splitter.SplitData">
            <summary>
             Return value holder...
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Splitter.SplitterMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SplitterCancelEventArgs">
            <summary>
             Provides data for splitter events.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitterCancelEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Initializes an instance of the <see cref='T:System.Windows.Forms.SplitterCancelEventArgs'/> class with the specified coordinates
             of the mouse pointer and the upper-left corner of the <see cref='T:System.Windows.Forms.SplitContainer'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterCancelEventArgs.MouseCursorX">
            <summary>
             Gets the x-coordinate of the mouse pointer (in client coordinates).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterCancelEventArgs.MouseCursorY">
            <summary>
             Gets the y-coordinate of the mouse pointer (in client coordinates).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterCancelEventArgs.SplitX">
            <summary>
             Gets the x-coordinate of the upper-left corner of the <see cref='T:System.Windows.Forms.SplitContainer'/> (in client coordinates).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterCancelEventArgs.SplitY">
            <summary>
             Gets the y-coordinate of the upper-left corner of the <see cref='T:System.Windows.Forms.SplitContainer'/> (in client coordinates).
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SplitterCancelEventHandler">
            <summary>
             Represents a method that will handle splitter events.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SplitterEventArgs">
            <summary>
             Provides data for splitter events.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SplitterEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Initializes an instance of the <see cref='T:System.Windows.Forms.SplitterEventArgs'/> class with the specified coordinates
             of the mouse pointer and the upper-left corner of the <see cref='T:System.Windows.Forms.Splitter'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterEventArgs.X">
            <summary>
             Gets the x-coordinate of the mouse pointer (in client coordinates).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterEventArgs.Y">
            <summary>
             Gets the y-coordinate of the mouse pointer (in client coordinates).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterEventArgs.SplitX">
            <summary>
             Gets the x-coordinate of the upper-left corner of the <see cref='T:System.Windows.Forms.Splitter'/> (in client coordinates).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterEventArgs.SplitY">
            <summary>
             Gets the y-coordinate of the upper-left corner of the <see cref='T:System.Windows.Forms.Splitter'/> (in client coordinates).
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SplitterEventHandler">
            <summary>
             Represents a method that will handle splitter events.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.AutoSize">
            <summary>
             Gets or sets a value that indicates whether the <see cref="T:System.Windows.Forms.SplitterPanel" /> is automatically
             resized to display its entire contents. This property is not relevant to this class.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.SplitterPanel.AutoSizeChanged">
            <summary>
             Occurs when the value of the <see cref="P:System.Windows.Forms.SplitterPanel.AutoSize" /> property has changed.
             This event is not relevant to this class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.AutoSizeMode">
            <summary>
             Allows the control to optionally shrink when AutoSize is true.
            </summary>
            <value>One of the <see cref="P:System.Windows.Forms.SplitterPanel.AutoSizeMode" /> values. </value>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.Anchor">
            <summary>
             Override Anchor to make it hidden from the user in the designer
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.BorderStyle">
            <summary>
             Indicates what type of border the Splitter control has.  This value
             comes from the System.Windows.Forms.BorderStyle enumeration.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.Dock">
            <summary>
             Gets or sets which edge of the <see cref="T:System.Windows.Forms.SplitContainer" /> that the
             <see cref="T:System.Windows.Forms.SplitterPanel" /> is docked to.
             This property is not relevant to this class.
            </summary>
            <value>
             One of the enumeration values that specifies which edge of the <see cref="T:System.Windows.Forms.SplitContainer" />
             that the <see cref="T:System.Windows.Forms.SplitterPanel" /> is docked to.
            </value>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.DockPadding">
            <summary>
             Override DockPadding to make it hidden from the user in the designer
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.Height">
            <summary>
             The height of this SplitterPanel
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.Location">
            <summary>
             Override Location to make it hidden from the user in the designer
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.DefaultMargin">
            <summary>
             Gets the default space, in pixels, that separates the controls.
            </summary>
            <value>
             A new instance of the <see cref="T:System.Windows.Forms.Padding" /> struct with the padding set to 0 for all edges.
            </value>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.MinimumSize">
            <summary>
             Override AutoSize to make it hidden from the user in the designer
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.MaximumSize">
            <summary>
             Override AutoSize to make it hidden from the user in the designer
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.Name">
            <summary>
             The name of this <see cref="T:System.Windows.Forms.SplitterPanel" />.
             This property is not relevant to this class.
            </summary>
            <value>The name of this <see cref="T:System.Windows.Forms.SplitterPanel" />.</value>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.Owner">
            <summary>
             The parent of this control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.Parent">
            <summary>
             Gets or sets the <see cref="T:System.Windows.Forms.SplitContainer" /> that contains this <see cref="T:System.Windows.Forms.SplitterPanel" />.
             This property is not relevant to this class.
            </summary>
            <value>
             A control representing the <see cref="T:System.Windows.Forms.SplitContainer" /> that contains this <see cref="T:System.Windows.Forms.SplitterPanel" />.
            </value>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.Size">
            <summary>
             Override Size to make it hidden from the user in the designer
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.TabIndex">
            <summary>
             Override TabIndex to make it hidden from the user in the designer
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.TabStop">
            <summary>
             Gets or sets a value that indicates whether the user can give the focus to this
             <see cref="T:System.Windows.Forms.SplitterPanel" /> using the TAB key.
             This property is not relevant to this class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.Visible">
            <summary>
             Gets or sets a value that indicates whether the <see cref="T:System.Windows.Forms.SplitterPanel" /> is displayed.
             This property is not relevant to this class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SplitterPanel.Width">
            <summary>
             The width of this control.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.SplitterPanel.VisibleChanged">
            <summary>
             Override VisibleChanged to make it hidden from the user in the designer
            </summary>
        </member>
        <member name="E:System.Windows.Forms.SplitterPanel.DockChanged">
            <summary>
             Override DockChanged to make it hidden from the user in the designer
            </summary>
        </member>
        <member name="E:System.Windows.Forms.SplitterPanel.LocationChanged">
            <summary>
             Override LocationChanged to make it hidden from the user in the designer
            </summary>
        </member>
        <member name="E:System.Windows.Forms.SplitterPanel.TabIndexChanged">
            <summary>
             Override TabIndexChanged to make it hidden from the user in the designer
            </summary>
        </member>
        <member name="E:System.Windows.Forms.SplitterPanel.TabStopChanged">
            <summary>
             Override TabStopChanged to make it hidden from the user in the designer
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StatusBar">
            <summary>
             Represents a Windows status bar control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.#ctor">
            <summary>
             Initializes a new default instance of the <see cref='T:System.Windows.Forms.StatusBar'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.VisualStyleRenderer">
            <summary>
             A VisualStyleRenderer we can use to get information about the current UI theme
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.BackColor">
            <summary>
             The background color of this control. This is an ambient property and will
             always return a non-null value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.BackgroundImage">
            <summary>
             Gets or sets the image rendered on the background of the
             <see cref='T:System.Windows.Forms.StatusBar'/>
             control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.CreateParams">
            <summary>
             Returns the CreateParams used to create the handle for this control.
             Inheriting classes should call base.getCreateParams in the manor below:
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.DoubleBuffered">
            <summary>
             This property is overridden and hidden from statement completion
             on controls that are based on Win32 Native Controls.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.Dock">
            <summary>
             Gets or sets the docking behavior of the <see cref='T:System.Windows.Forms.StatusBar'/> control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.Font">
            <summary>
             Gets or sets the font the <see cref='T:System.Windows.Forms.StatusBar'/>
             control will use to display
             information.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.ForeColor">
            <summary>
             Gets or sets
             the forecolor for the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.Panels">
            <summary>
             Gets the collection of <see cref='T:System.Windows.Forms.StatusBar'/>
             panels contained within the
             control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.Text">
            <summary>
             The status bar text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.ShowPanels">
            <summary>
             Gets or sets a value indicating whether panels should be shown.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.SizingGrip">
            <summary>
             Gets or sets a value indicating whether a sizing grip
             will be rendered on the corner of the <see cref='T:System.Windows.Forms.StatusBar'/>
             control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.TabStop">
            <summary>
             Gets or sets a value indicating whether the user will be able to tab to the
             <see cref='T:System.Windows.Forms.StatusBar'/> .
            </summary>
        </member>
        <member name="E:System.Windows.Forms.StatusBar.DrawItem">
            <summary>
             Occurs when a visual aspect of an owner-drawn status bar changes.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.StatusBar.PanelClick">
            <summary>
             Occurs when a panel on the status bar is clicked.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.StatusBar.Paint">
            <summary>
             StatusBar Onpaint.
            </summary>
            <hideinheritance/>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.ArePanelsRealized">
            <summary>
             Tells whether the panels have been realized.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.ApplyPanelWidths">
            <summary>
             Makes the panel according to the sizes in the panel list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.Dispose(System.Boolean)">
            <summary>
             Disposes this control
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.ForcePanelUpdate">
            <summary>
             Forces the panels to be updated, location, repainting, etc.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.OnHandleCreated(System.EventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.CreateHandle'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.OnHandleDestroyed(System.EventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.StatusBar.OnHandleDestroyed(System.EventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.StatusBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.OnPanelClick(System.Windows.Forms.StatusBarPanelClickEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.StatusBar.PanelClick'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.RealizePanels">
            <summary>
             This function sets up all the panel on the status bar according to
             the internal this.panels List.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.RemoveAllPanelsWithoutUpdate">
            <summary>
             Remove the internal list of panels without updating the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.SetPanelContentsWidths(System.Boolean)">
            <summary>
             Sets the widths of any panels that have the
             StatusBarPanelAutoSize.CONTENTS property set.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.LayoutPanels">
            <summary>
             Sizes the the panels appropriately.  It looks at the SPRING AutoSize
             property.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.OnDrawItem(System.Windows.Forms.StatusBarDrawItemEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.StatusBar.OnDrawItem(System.Windows.Forms.StatusBarDrawItemEventArgs)'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.OnResize(System.EventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.StatusBar.OnResize(System.EventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.WmDrawItem(System.Windows.Forms.Message@)">
            <summary>
             Processes messages for ownerdraw panels.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.WndProc(System.Windows.Forms.Message@)">
            <summary>
             Base wndProc. All messages are sent to wndProc after getting filtered through
             the preProcessMessage function. Inheriting controls should call base.wndProc
             for any messages that they don't handle.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StatusBar.StatusBarPanelCollection">
            <summary>
             The collection of StatusBarPanels that the StatusBar manages.
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.#ctor(System.Windows.Forms.StatusBar)">
            <summary>
             Constructor for the StatusBarPanelCollection class
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.StatusBarPanelCollection.Item(System.Int32)">
            <summary>
             This method will return an individual StatusBarPanel with the appropriate index.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.StatusBarPanelCollection.Item(System.String)">
            <summary>
             Retrieves the child control with the specified key.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.StatusBarPanelCollection.Count">
            <summary>
             Returns an integer representing the number of StatusBarPanels
             in this collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.Add(System.String)">
            <summary>
             Adds a StatusBarPanel to the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.Add(System.Windows.Forms.StatusBarPanel)">
            <summary>
             Adds a StatusBarPanel to the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.ContainsKey(System.String)">
            <summary>
             Returns true if the collection contains an item with the specified key, false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.IndexOfKey(System.String)">
            <summary>
             The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.Insert(System.Int32,System.Windows.Forms.StatusBarPanel)">
            <summary>
             Inserts a StatusBarPanel in the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.IsValidIndex(System.Int32)">
            <summary>
             Determines if the index is valid for the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.Clear">
            <summary>
             Removes all the StatusBarPanels in the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.Remove(System.Windows.Forms.StatusBarPanel)">
            <summary>
             Removes an individual StatusBarPanel in the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.RemoveAt(System.Int32)">
            <summary>
             Removes an individual StatusBarPanel in the collection at the given index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.RemoveByKey(System.String)">
            <summary>
             Removes the child control with the specified key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.GetEnumerator">
            <summary>
             Returns the Enumerator for this collection.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StatusBar.ControlToolTip">
            <summary>
             This is a tooltip control that provides tips for a single
             control. Each "tool" region is defined by a rectangle and
             the string that should be displayed. This implementation
             is based on System.Windows.Forms.ToolTip, but this control
             is lighter weight and provides less functionality... however
             this control binds to rectangular regions, instead of
             full controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.ControlToolTip.#ctor(System.Windows.Forms.Control)">
            <summary>
             Creates a new ControlToolTip.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBar.ControlToolTip.CreateParams">
            <summary>
             Returns the createParams to create the window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.ControlToolTip.SetTool(System.Object,System.Windows.Forms.StatusBar.ControlToolTip.Tool)">
            <summary>
             Sets the tool for the specified key. Keep in mind
             that as soon as setTool is called, the handle for
             the ControlToolTip is created, and the handle for
             the parent control is also created. If the parent
             handle is recreated in the future, all tools must
             be re-added. The old tool for the specified key
             will be removed. Passing null in for the
             tool parameter will result in the tool
             region being removed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.ControlToolTip.GetTool(System.Object)">
            <summary>
             Returns the tool associated with the specified key,
             or null if there is no area.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.ControlToolTip.CreateHandle">
            <summary>
             Creates the handle for the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.ControlToolTip.DestroyHandle">
            <summary>
             Destroys the handle for this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.ControlToolTip.Dispose">
            <summary>
             Disposes of the component.  Call dispose when the component is no longer needed.
             This method removes the component from its container (if the component has a site)
             and triggers the dispose event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.ControlToolTip.GetMinTOOLINFO(System.Windows.Forms.StatusBar.ControlToolTip.Tool)">
            <summary>
             Returns a new instance of the TOOLINFO_T structure with the minimum
             required data to uniquely identify a region. This is used primarily
             for delete operations. NOTE: This cannot force the creation of a handle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBar.ControlToolTip.GetTOOLINFO(System.Windows.Forms.StatusBar.ControlToolTip.Tool)">
            <summary>
             Returns a detailed TOOLINFO_T structure that represents the specified
             region. NOTE: This may force the creation of a handle.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StatusBarDrawItemEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.StatusBar.OnDrawItem(System.Windows.Forms.StatusBarDrawItemEventArgs)'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBarDrawItemEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DrawItemState,System.Windows.Forms.StatusBarPanel)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.StatusBarDrawItemEventArgs'/>
             class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBarDrawItemEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DrawItemState,System.Windows.Forms.StatusBarPanel,System.Drawing.Color,System.Drawing.Color)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.StatusBarDrawItemEventArgs'/>
             class using the Forecolor and Backcolor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBarDrawItemEventArgs.Panel">
            <summary>
             Specifies the <see cref='T:System.Windows.Forms.StatusBarPanel'/> to draw.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StatusBarDrawItemEventHandler">
            <summary>
             Represents a method that will handle the <see cref='M:System.Windows.Forms.StatusBar.OnDrawItem(System.Windows.Forms.StatusBarDrawItemEventArgs)'/>
             event of a <see cref='T:System.Windows.Forms.StatusBar'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StatusBarPanel">
            <summary>
             Stores the <see cref='T:System.Windows.Forms.StatusBar'/>
             control panel's information.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBarPanel.#ctor">
            <summary>
             Initializes a new default instance of the <see cref='T:System.Windows.Forms.StatusBarPanel'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBarPanel.Alignment">
            <summary>
             Gets or sets the <see cref='P:System.Windows.Forms.StatusBarPanel.Alignment'/>
             property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBarPanel.AutoSize">
            <summary>
             Gets or sets the <see cref='P:System.Windows.Forms.StatusBarPanel.AutoSize'/>
             property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBarPanel.BorderStyle">
            <summary>
             Gets or sets the <see cref='P:System.Windows.Forms.StatusBarPanel.BorderStyle'/> property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBarPanel.Icon">
            <summary>
             Gets or sets the <see cref='P:System.Windows.Forms.StatusBarPanel.Icon'/>
             property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBarPanel.Index">
            <summary>
             Expose index internally
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBarPanel.MinWidth">
            <summary>
             Gets or sets the minimum width the <see cref='T:System.Windows.Forms.StatusBarPanel'/> can be within the <see cref='T:System.Windows.Forms.StatusBar'/>
             control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBarPanel.Name">
            <summary>
             Gets or sets the name of the panel.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBarPanel.Parent">
            <summary>
             Represents the <see cref='T:System.Windows.Forms.StatusBar'/>
             control which hosts the
             panel.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBarPanel.ParentInternal">
            <summary>
             Expose a direct setter for parent internally
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBarPanel.Right">
            <summary>
             Expose right internally
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBarPanel.Style">
            <summary>
             Gets or sets the style of the panel.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBarPanel.Text">
            <summary>
             Gets or sets the text of the panel.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBarPanel.ToolTipText">
            <summary>
             Gets
             or sets the panel's tool tip text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBarPanel.Width">
            <summary>
             Gets or sets the width of the <see cref='T:System.Windows.Forms.StatusBarPanel'/> within the <see cref='T:System.Windows.Forms.StatusBar'/>
             control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBarPanel.BeginInit">
            <summary>
             Handles tasks required when the control is being initialized.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBarPanel.EndInit">
            <summary>
             Called when initialization of the control is complete.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBarPanel.GetContentsWidth(System.Boolean)">
            <summary>
             Gets the width of the contents of the panel
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBarPanel.GetIndex">
            <summary>
             Returns the index of the panel by making the parent control search
             for it within its list.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBarPanel.Realize">
            <summary>
             Sets all the properties for this panel.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBarPanel.ToString">
            <summary>
             Retrieves a string that contains information about the
             panel.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StatusBarPanelAutoSize">
            <summary>
             Specifies how a panel on a status bar changes when the status bar resizes.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StatusBarPanelAutoSize.None">
            <summary>
             The panel does not change its size when the status bar resizes.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StatusBarPanelAutoSize.Spring">
            <summary>
             The panel shares the available status bar space (the space not taken
             up by panels with the <see cref='F:System.Windows.Forms.StatusBarPanelAutoSize.None'/> and <see cref='F:System.Windows.Forms.StatusBarPanelAutoSize.Contents'/>
             settings) with other panels that have the <see cref='F:System.Windows.Forms.StatusBarPanelAutoSize.Spring'/> setting.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StatusBarPanelAutoSize.Contents">
            <summary>
             The width of the panel is determined by its contents.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StatusBarPanelBorderStyle">
            <summary>
             Specifies the border style of a panel on the <see cref='T:System.Windows.Forms.StatusBar'/>.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StatusBarPanelBorderStyle.None">
            <summary>
             No border.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StatusBarPanelBorderStyle.Raised">
            <summary>
             A raised border.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StatusBarPanelBorderStyle.Sunken">
            <summary>
             A sunken border.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StatusBarPanelClickEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.StatusBar.OnPanelClick(System.Windows.Forms.StatusBarPanelClickEventArgs)'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusBarPanelClickEventArgs.#ctor(System.Windows.Forms.StatusBarPanel,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.StatusBarPanelClickEventArgs'/>
             class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.StatusBarPanelClickEventArgs.StatusBarPanel">
            <summary>
             Specifies the <see cref='T:System.Windows.Forms.StatusBarPanel'/> that represents the clicked panel.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StatusBarPanelClickEventHandler">
            <summary>
             Represents a method that will handle the <see cref='M:System.Windows.Forms.StatusBar.OnPanelClick(System.Windows.Forms.StatusBarPanelClickEventArgs)'/>
             event of a <see cref='T:System.Windows.Forms.StatusBar'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StatusBarPanelStyle">
            <summary>
             Specifies whether a panel on a status bar is owner drawn or system drawn.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StatusBarPanelStyle.Text">
            <summary>
             The panel is drawn by the system.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StatusBarPanelStyle.OwnerDraw">
            <summary>
             The panel is drawn by the owner.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StatusStrip.OnSpringTableLayoutCore">
            <summary>
             Override this function if you want to do custom table layouts for the
             StatusStrip.  The default layoutstyle is tablelayout, and we need to play
             with the row/column styles
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StringSorter">
            <summary>
             This class provides methods to perform locale based comparison of strings
             and sorting of arrays.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StringSorter.IgnoreCase">
            <summary>
             Ignore case when comparing two strings. When this flag is specified in
             calls to compare() and sort(), two strings are considered equal if they
             differ only in casing.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StringSorter.IgnoreKanaType">
            <summary>
             Do not differentiate between Hiragana and Katakana characters. When this
             flag is specified in calls to compare() and sort(), corresponding
             Hiragana and Katakana characters compare as equal.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StringSorter.IgnoreNonSpace">
            <summary>
             Ignore nonspacing marks (accents, diacritics, and vowel marks). When
             this flag is specified in calls to compare() and sort(), strings compare
             as equal if they differ only in how characters are accented.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StringSorter.IgnoreSymbols">
            <summary>
             Ignore symbols. When this flag is specified in calls to compare() and
             sort(), strings compare as equal if they differ only in what symbol
             characters they contain.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StringSorter.IgnoreWidth">
            <summary>
             Ignore character widths. When this flag is specified in calls to
             compare() and sort(), string comparisons do not differentiate between a
             single-ubyte character and the same character as a double-ubyte character.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StringSorter.StringSort">
            <summary>
             Treat punctuation the same as symbols. Typically, strings are compared
             using what is called a "word sort" technique. In a word sort, all
             punctuation marks and other nonalphanumeric characters, except for the
             hyphen and the apostrophe, come before any alphanumeric character. The
             hyphen and the apostrophe are treated differently than the other
             nonalphanumeric symbols, in order to ensure that words such as "coop"
             and "co-op" stay together within a sorted list. If the STRINGSORT flag
             is specified, strings are compared using what is called a "string sort"
             technique. In a string sort, the hyphen and apostrophe are treated just
             like any other nonalphanumeric symbols: they come before the
             alphanumeric symbols.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StringSorter.Descending">
            <summary>
             Descending sort. When this flag is specified in a call to sort(), the
             strings are sorted in descending order. This flag should not be used in
             calls to compare().
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSorter.#ctor(System.Globalization.CultureInfo,System.String[],System.Object[],System.Int32)">
            <summary>
             Constructs a StringSorter. Instances are created by the sort() routines,
             but never by the user.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSorter.Compare(System.String,System.String)">
            <summary>
             Compares two strings using the default locale and no additional string
             comparison flags.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSorter.Compare(System.String,System.String,System.Int32)">
            <summary>
             Compares two strings using the default locale with the given set of
             string comparison flags.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSorter.Compare(System.Globalization.CultureInfo,System.String,System.String,System.Int32)">
            <summary>
             Compares two strings using a given locale and a given set of comparison
             flags. If the two strings are of different lengths, they are compared up
             to the length of the shortest one. If they are equal to that point, then
             the return value will indicate that the longer string is greater. Notice
             that if the return value is 0, the two strings are "equal" in the
             collation sense, though not necessarily identical.
             A <embedcode term='null'/> string always sorts before a non-null string. Two
            <embedcode term='null'/> strings are considered equal.
             The <paramref name='options'/> parameter is a combination of zero or more of
             the following flags: <code>IGNORECASE</code>, <code>IGNOREKANATYPE</code>,
            <code>IGNORENONSPACE</code>, <code>IGNORESYMBOLS</code>,
            <code>IGNOREWIDTH</code>, and <code>STRINGSORT</code>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSorter.QuickSort(System.Int32,System.Int32)">
            <summary>
             Implementation of Quicksort algorithm. Within the outer <code>do</code>
             loop, the method recurses on the shorter side and loops on the longer
             side. This bounds the recursive depth by log2(n) in the worst case.
             Otherwise, worst case recursive depth would be n.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSorter.Sort(System.Object[])">
            <summary>
             Sorts an object array based on the string representation of the
             elements. If the <code>items</code> parameter is not a string array, the
            <code>toString</code> method of each of the elements is called to
             produce the string representation. The objects are then sorted by their
             string representations using the default locale.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSorter.Sort(System.Object[],System.Int32,System.Int32)">
            <summary>
             Sorts a range in an object array based on the string representation of
             the elements. If the <code>items</code> parameter is not a string array,
             the <code>toString</code> method of each of the elements is called to
             produce the string representation. The objects are then sorted by their
             string representations using the default locale.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSorter.Sort(System.String[],System.Object[])">
            <summary>
             Sorts a string array and an object array based on the elements of the
             string array. The arrays are sorted using the default locale.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSorter.Sort(System.String[],System.Object[],System.Int32,System.Int32)">
            <summary>
             Sorts a range in a string array and a range in an object array based on
             the elements of the string array. The arrays are sorted using the
             default locale.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSorter.Sort(System.Object[],System.Int32)">
            <summary>
             Sorts an object array based on the string representation of the
             elements. If the <code>items</code> parameter is not a string array, the
            <code>toString</code> method of each of the elements is called to
             produce the string representation. The objects are then sorted by their
             string representations using the default locale and the given sorting
             options.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSorter.Sort(System.Object[],System.Int32,System.Int32,System.Int32)">
            <summary>
             Sorts a range in an object array based on the string representation of
             the elements. If the <code>items</code> parameter is not a string array,
             the <code>toString</code> method of each of the elements is called to
             produce the string representation. The objects are then sorted by their
             string representations using the default locale and the given sorting
             options.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSorter.Sort(System.String[],System.Object[],System.Int32)">
            <summary>
             Sorts a string array and an object array based on the elements of the
             string array. The arrays are sorted using the default locale and the
             given sorting options.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSorter.Sort(System.String[],System.Object[],System.Int32,System.Int32,System.Int32)">
            <summary>
             Sorts a range in a string array and a range in an object array based on
             the elements of the string array. The arrays are sorted using the
             default locale and the given sorting options.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSorter.Sort(System.Globalization.CultureInfo,System.Object[],System.Int32)">
            <summary>
             Sorts an object array based on the string representation of the
             elements. If the <code>items</code> parameter is not a string array, the
            <code>toString</code> method of each of the elements is called to
             produce the string representation. The objects are then sorted by their
             string representations using the given locale and the given sorting
             options.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSorter.Sort(System.Globalization.CultureInfo,System.Object[],System.Int32,System.Int32,System.Int32)">
            <summary>
             Sorts a range in an object array based on the string representation of
             the elements. If the <code>items</code> parameter is not a string array,
             the <code>toString</code> method of each of the elements is called to
             produce the string representation. The objects are then sorted by their
             string representations using the given locale and the given sorting
             options.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSorter.Sort(System.Globalization.CultureInfo,System.String[],System.Object[],System.Int32)">
            <summary>
             Sorts a string array and an object array based on the elements of the
             string array. The arrays are sorted using the given locale and the
             given sorting options.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSorter.Sort(System.Globalization.CultureInfo,System.String[],System.Object[],System.Int32,System.Int32,System.Int32)">
            <summary>
             Sorts a range in a string array and a range in an object array based on
             the elements of the string array. Elements in the <code>keys</code>
             array specify the sort keys for corresponding elements in the
            <code>items</code> array. The range of elements given by the
            <code>index</code> and <code>count</code> parameters is sorted in both
             arrays according to the given locale and sorting options.
             If the <code>keys</code> parameter is <code>null</code>, the sort keys
             are instead computed by calling the <code>toString</code> method of each
             element in the <code>items</code> array.
            <code>null</code> keys always sort before a non-null keys.
             The <code>options</code> parameter is a combination of zero or more of
             the following flags: <code>IGNORECASE</code>, <code>IGNOREKANATYPE</code>,
            <code>IGNORENONSPACE</code>, <code>IGNORESYMBOLS</code>,
            <code>IGNOREWIDTH</code>, <code>STRINGSORT</code>, and
            <code>DESCENDING</code>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.StringSource">
            <summary>
             Represents an internal class that is used bu ComboBox and TextBox AutoCompleteCustomSource property.
             This class is reponsible for initializing the SHAutoComplete COM object and setting options in it.
             The StringSource contains an array of Strings which is passed to the COM object as the custom source.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.StringSource.autoCompleteClsid">
            <summary>
             SHAutoComplete COM object CLSID.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSource.#ctor(System.String[])">
            <summary>
             Constructor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.StringSource.Bind(System.Runtime.InteropServices.HandleRef,Interop.Shell32.AUTOCOMPLETEOPTIONS)">
            <summary>
             This is the method that binds the custom source with the IAutoComplete interface.The "hWndEdit" is the handle
             to the edit Control and the "options' are the options that need to be set in the AUTOCOMPLETE mode.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.SystemInformation">
            <summary>
             Provides information about the operating system.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.DragFullWindows">
            <summary>
             Gets a value indicating whether the user has enabled full window drag.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.HighContrast">
            <summary>
             Gets a value indicating whether the user has selected to run in high contrast.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MouseWheelScrollLines">
            <summary>
             Gets the number of lines to scroll when the mouse wheel is rotated.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.PrimaryMonitorSize">
            <summary>
             Gets the dimensions of the primary display monitor in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.VerticalScrollBarWidth">
            <summary>
             Gets the width of the vertical scroll bar in pixels.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SystemInformation.GetVerticalScrollBarWidthForDpi(System.Int32)">
            <summary>
             Gets the width of the vertical scroll bar in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.HorizontalScrollBarHeight">
            <summary>
             Gets the height of the horizontal scroll bar in pixels.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SystemInformation.GetHorizontalScrollBarHeightForDpi(System.Int32)">
            <summary>
             Gets the height of the horizontal scroll bar in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.CaptionHeight">
            <summary>
             Gets the height of the normal caption area of a window in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.BorderSize">
            <summary>
             Gets the width and height of a window border in pixels.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SystemInformation.GetBorderSizeForDpi(System.Int32)">
            <summary>
             Gets the width andheight of a window border in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.FixedFrameBorderSize">
            <summary>
             Gets the thickness in pixels, of the border for a window that has a caption and is not resizable.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.VerticalScrollBarThumbHeight">
            <summary>
             Gets the height of the scroll box in a vertical scroll bar in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.HorizontalScrollBarThumbWidth">
            <summary>
             Gets the width of the scroll box in a horizontal scroll bar in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IconSize">
            <summary>
             Gets the default dimensions of an icon in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.CursorSize">
            <summary>
             Gets the dimensions of a cursor in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MenuFont">
            <summary>
             Gets the system's font for menus.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SystemInformation.GetMenuFontForDpi(System.Int32)">
            <summary>
             Gets the system's font for menus, scaled accordingly to an arbitrary DPI you provide.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MenuHeight">
            <summary>
             Gets the height of a one line of a menu in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.PowerStatus">
            <summary>
             Returns the current system power status.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.WorkingArea">
            <summary>
             Gets the size of the working area in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.KanjiWindowHeight">
            <summary>
             Gets the height, in pixels, of the Kanji window at the bottom of the screen
             for double-byte (DBCS) character set versions of Windows.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MousePresent">
            <summary>
             Gets a value indicating whether the system has a mouse installed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.VerticalScrollBarArrowHeight">
            <summary>
             Gets the height in pixels, of the arrow bitmap on the vertical scroll bar.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SystemInformation.VerticalScrollBarArrowHeightForDpi(System.Int32)">
            <summary>
             Gets the height of the vertical scroll bar arrow bitmap in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.HorizontalScrollBarArrowWidth">
            <summary>
             Gets the width, in pixels, of the arrow bitmap on the horizontal scrollbar.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SystemInformation.GetHorizontalScrollBarArrowWidthForDpi(System.Int32)">
            <summary>
             Gets the width of the horizontal scroll bar arrow bitmap in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.DebugOS">
            <summary>
             Gets a value indicating whether this is a debug version of the operating system.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MouseButtonsSwapped">
            <summary>
             Gets a value indicating whether the functions of the left and right mouse
             buttons have been swapped.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MinimumWindowSize">
            <summary>
             Gets the minimum allowable dimensions of a window in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.CaptionButtonSize">
            <summary>
             Gets the dimensions in pixels, of a caption bar or title bar button.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.FrameBorderSize">
            <summary>
             Gets the thickness in pixels, of the border for a window that can be resized.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MinWindowTrackSize">
            <summary>
             Gets the system's default minimum tracking dimensions of a window in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.DoubleClickSize">
            <summary>
             Gets the dimensions in pixels, of the area that the user must click within
             for the system to consider the two clicks a double-click. The rectangle is
             centered around the first click.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.DoubleClickTime">
            <summary>
             Gets the maximum number of milliseconds allowed between mouse clicks for a
             double-click.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IconSpacingSize">
            <summary>
             Gets the dimensions in pixels, of the grid used to arrange icons in a large
             icon view.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.RightAlignedMenus">
            <summary>
             Gets a value indicating whether drop down menus should be right-aligned with the corresponding menu
             bar item.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.PenWindows">
            <summary>
             Gets a value indicating whether the Microsoft Windows for Pen computing extensions are installed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.DbcsEnabled">
            <summary>
             Gets a value indicating whether the operating system is capable of handling
             double-byte (DBCS) characters.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MouseButtons">
            <summary>
             Gets the number of buttons on mouse.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.Secure">
            <summary>
             Gets a value indicating whether security is present on this operating system.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.Border3DSize">
            <summary>
             Gets the dimensions in pixels, of a 3-D border.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MinimizedWindowSpacingSize">
            <summary>
             Gets the dimensions in pixels, of the grid into which minimized windows will
             be placed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.SmallIconSize">
            <summary>
             Gets the recommended dimensions of a small icon in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.ToolWindowCaptionHeight">
            <summary>
             Gets the height of a small caption in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.ToolWindowCaptionButtonSize">
            <summary>
             Gets the dimensions of small caption buttons in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MenuButtonSize">
            <summary>
             Gets the dimensions in pixels, of menu bar buttons.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.ArrangeStartingPosition">
            <summary>
             Gets flags specifying how the system arranges minimized windows.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.ArrangeDirection">
            <summary>
             Gets flags specifying how the system arranges minimized windows.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MinimizedWindowSize">
            <summary>
             Gets the dimensions in pixels, of a normal minimized window.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MaxWindowTrackSize">
            <summary>
             Gets the default maximum dimensions in pixels, of a window that has a
             caption and sizing borders.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.PrimaryMonitorMaximizedWindowSize">
            <summary>
             Gets the default dimensions, in pixels, of a maximized top-left window on the
             primary monitor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.Network">
            <summary>
             Gets a value indicating whether this computer is connected to a network.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.BootMode">
            <summary>
             Gets a value that specifies how the system was started.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.DragSize">
            <summary>
             Gets the dimensions in pixels, of the rectangle that a drag operation must
             extend to be considered a drag. The rectangle is centered on a drag point.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.ShowSounds">
            <summary>
             Gets a value indicating whether the user requires an application to present
             information visually in situations where it would otherwise present the
             information in audible form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MenuCheckSize">
            <summary>
             Gets the dimensions of the default size of a menu checkmark in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MidEastEnabled">
            <summary>
             Gets a value indicating whether the system is enabled for Hebrew and Arabic languages.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.NativeMouseWheelSupport">
            <summary>
             Gets a value indicating whether a mouse with a mouse wheel is installed.
            </summary>
            <remarks>
             This was never really correct. All versions of Windows NT from 4.0 onward supported the mouse wheel
             directly. This should have been a version check. Rather than change it and risk breaking apps we'll
             keep it equivalent to <see cref="P:System.Windows.Forms.SystemInformation.MouseWheelPresent" />
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MouseWheelPresent">
            <summary>
             Gets a value indicating whether a mouse with a mouse wheel is installed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.VirtualScreen">
            <summary>
             Gets the bounds of the virtual screen.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MonitorCount">
            <summary>
             Gets the number of display monitors on the desktop.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MonitorsSameDisplayFormat">
            <summary>
             Gets a value indicating whether all the display monitors have the same color format.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.ComputerName">
            <summary>
             Gets the computer name of the current system.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.UserDomainName">
            <summary>
             Gets the user's domain name.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.UserInteractive">
            <summary>
             Gets a value indicating whether the current process is running in user
             interactive mode.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.UserName">
            <summary>
             Gets the user name for the current thread, that is, the name of the user currently logged onto
             the system.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IsDropShadowEnabled">
            <summary>
             Gets whether the drop shadow effect in enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IsFlatMenuEnabled">
            <summary>
             Gets whether the native user menus have a flat menu appearance.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IsFontSmoothingEnabled">
            <summary>
             Gets whether font smoothing is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.FontSmoothingContrast">
            <summary>
             Returns the ClearType smoothing contrast value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.FontSmoothingType">
            <summary>
             Returns a type of Font smoothing.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IconHorizontalSpacing">
            <summary>
             Retrieves the width in pixels of an icon cell.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IconVerticalSpacing">
            <summary>
             Retrieves the height in pixels of an icon cell.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IsIconTitleWrappingEnabled">
            <summary>
             Gets whether icon title wrapping is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MenuAccessKeysUnderlined">
            <summary>
             Gets whether menu access keys are underlined.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.KeyboardDelay">
            <summary>
             Retrieves the Keyboard repeat delay setting, which is a value in the range
             from 0 through 3. The actual delay associated with each value may vary
             depending on the hardware.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IsKeyboardPreferred">
            <summary>
             Gets whether the user relies on keyboard instead of mouse and wants
             applications to display keyboard interfaces that would be otherwise hidden.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.KeyboardSpeed">
            <summary>
             Retrieves the Keyboard repeat speed setting, which is a value in the range
             from 0 through 31. The actual rate may vary depending on the hardware.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MouseHoverSize">
            <summary>
             Gets the <see cref="T:System.Drawing.Size"/> in pixels of the rectangle within which the mouse
             pointer has to stay to be considered hovering.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MouseHoverTime">
            <summary>
             Gets the time, in milliseconds, that the mouse pointer has to stay in the hover
             rectangle to be considered hovering.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MouseSpeed">
            <summary>
             Gets the current mouse speed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IsSnapToDefaultEnabled">
            <summary>
             Determines whether the snap-to-default-button feature is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.PopupMenuAlignment">
            <summary>
             Determines whether the popup menus are left aligned or right aligned.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IsMenuFadeEnabled">
            <summary>
             Determines whether the menu fade animation feature is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MenuShowDelay">
            <summary>
             Indicates the time, in milliseconds, that the system waits before displaying
             a shortcut menu.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IsComboBoxAnimationEnabled">
            <summary>
             Indicates whether the slide open effect for combo boxes is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IsTitleBarGradientEnabled">
            <summary>
             Indicates whether the gradient effect for windows title bars is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IsHotTrackingEnabled">
            <summary>
             Indicates whether the hot tracking of user interface elements is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IsListBoxSmoothScrollingEnabled">
            <summary>
             Indicates whether the smooth scrolling effect for listbox is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IsMenuAnimationEnabled">
            <summary>
             Indicates whether the menu animation feature is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IsSelectionFadeEnabled">
            <summary>
             Indicates whether the selection fade effect is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IsToolTipAnimationEnabled">
            <summary>
             Indicates whether tool tip animation is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.UIEffectsEnabled">
            <summary>
             Indicates whether UI effects are enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IsActiveWindowTrackingEnabled">
            <summary>
             Indicates whether the windows tracking (activating the window the mouse in on) is ON or OFF.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.ActiveWindowTrackingDelay">
            <summary>
             Retrieves the active window tracking delay in milliseconds.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.IsMinimizeRestoreAnimationEnabled">
            <summary>
             Indicates whether windows minimize/restore animation is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.BorderMultiplierFactor">
            <summary>
             Retrieves the border multiplier factor that determines the width of a window's sizing border.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.CaretBlinkTime">
            <summary>
             Indicates the caret blink time.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.CaretWidth">
            <summary>
             Indicates the caret width in edit controls.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.VerticalFocusThickness">
            <summary>
             The width of the left and right edges of the focus rectangle.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.HorizontalFocusThickness">
            <summary>
             The width of the top and bottom edges of the focus rectangle.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.VerticalResizeBorderThickness">
            <summary>
             The height of the vertical sizing border around the perimeter of the window that can be resized.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.HorizontalResizeBorderThickness">
            <summary>
             The width of the horizontal sizing border around the perimeter of the window that can be resized.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.ScreenOrientation">
            <summary>
             The orientation of the screen in degrees.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.SizingBorderWidth">
            <summary>
             The thickness, in pixels, of the sizing border.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.SmallCaptionButtonSize">
            <summary>
             The <see cref="T:System.Drawing.Size"/>, in pixels, of the small caption buttons.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.SystemInformation.MenuBarButtonSize">
            <summary>
             The <see cref="T:System.Drawing.Size"/>, in pixels, of the menu bar buttons.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.SystemInformation.InLockedTerminalSession">
            <summary>
             Checks whether the current Winforms app is running on a secure desktop under a terminal
             server session. This is the case when the TS session has been locked.
             This method is useful when calling into GDI+ Graphics methods that modify the object's
             state, these methods fail under a locked terminal session.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SystemParameter.DropShadow">
            <summary>
             DropShadow.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SystemParameter.FlatMenu">
            <summary>
             Flat Menu.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SystemParameter.FontSmoothingContrastMetric">
            <summary>
             FontSmoothingContrastMetric.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SystemParameter.FontSmoothingTypeMetric">
            <summary>
             FontSmoothingTypeMetric.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SystemParameter.MenuFadeEnabled">
            <summary>
             MenuFadeEnabled.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SystemParameter.SelectionFade">
            <summary>
             SelectionFade.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SystemParameter.ToolTipAnimationMetric">
            <summary>
             ToolTipAnimationMetric.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SystemParameter.UIEffects">
            <summary>
             UIEffects.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SystemParameter.CaretWidthMetric">
            <summary>
             CaretWidthMetric.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SystemParameter.VerticalFocusThicknessMetric">
            <summary>
             VerticalFocusThicknessMetric.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.SystemParameter.HorizontalFocusThicknessMetric">
            <summary>
             HorizontalFocusThicknessMetric.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TabAlignment">
            <summary>
             Controls where the tabs will be located in a Tab Control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TabAlignment.Top">
            <summary>
             Tabs will be located across the top of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TabAlignment.Bottom">
            <summary>
             Tabs will be located across the bottom of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TabAlignment.Left">
            <summary>
             Tabs will be located along the left edge of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TabAlignment.Right">
            <summary>
             Tabs will be located along the right edge of the control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TabAppearance">
            <summary>
             The various tab controls will let you configure their appearance.
             This enumeration contains the possible values.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TabAppearance.Normal">
            <summary>
             Indicates that the tabs look like normal tabs typically seen in Property
             page type situations.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TabAppearance.Buttons">
            <summary>
             Indicates that the tabs look like buttons as seen on the taskbar found
             in Windows 95 or Windows NT.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TabAppearance.FlatButtons">
            <summary>
             Indicates that buttons should be draw flat instead of like regular
             windows pushbuttons.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TabControl">
            <summary>
             The TabControl.  This control has a lot of the functionality of a TabStrip
             but manages a list of TabPages which are the 'pages' that appear on each tab.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TabControl._tabBaseReLayoutMessage">
            <summary>
             This message is posted by the control to itself after a TabPage is
             added to it.  On certain occasions, after items are added to a
             TabControl in quick succession, TCM_ADJUSTRECT calls return the wrong
             display rectangle.  When the message is received, the control calls
             updateTabSelection() to layout the TabPages correctly.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.#ctor">
            <summary>
             Constructs a TabBase object, usually as the base class for a TabStrip or TabControl.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.Alignment">
            <summary>
             Returns on what area of the control the tabs reside on (A TabAlignment value).
             The possibilities are Top (the default), Bottom, Left, and Right.  When alignment
             is left or right, the Multiline property is ignored and Multiline is implicitly on.
             If the alignment is anything other than top, TabAppearance.FlatButtons degenerates
             to TabAppearance.Buttons.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.Appearance">
            <summary>
             Indicates whether the tabs in the tabstrip look like regular tabs, or if they look
             like buttons as seen in the Windows 95 taskbar.
             If the alignment is anything other than top, TabAppearance.FlatButtons degenerates
             to TabAppearance.Buttons.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.DoubleBuffered">
            <summary>
             This property is overridden and hidden from statement completion
             on controls that are based on Win32 Native Controls.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.CreateParams">
            <summary>
             Returns the parameters needed to create the handle.  Inheriting classes
             can override this to provide extra functionality.  They should not,
             however, forget to call base.getCreateParams() first to get the struct
             filled up with the basic info.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.DisplayRectangle">
            <summary>
             The rectangle that represents the Area of the tab strip not
             taken up by the tabs, borders, or anything else owned by the Tab.  This
             is typically the rectangle you want to use to place the individual
             children of the tab strip.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.DrawMode">
            <summary>
             The drawing mode of the tabs in the tab strip.  This will indicate
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.HotTrack">
            <summary>
             Indicates whether the tabs visually change when the mouse passes over them.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.ImageList">
            <summary>
             Returns the imageList the control points at.  This is where tabs that have imageIndex
             set will get there images from.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.ItemSize">
            <summary>
             By default, tabs will automatically size themselves to fit their icon, if any, and their label.
             However, the tab size can be explicity set by setting this property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.InsertingItem">
            <summary>
             This private property is set by the TabPageCollection when the user calls "InsertItem".
             The problem is when InsertItem is called then we add this item to the ControlsCollection (in addition to the TabPageCollection)
             to keep both the collections is sync. But the controlCollection.Add is overriden to again ADD the item to the TabPageCollection.
             So we keep this flag in order to aviod repeatd addition (only during insert)
             When the Add ends ... we reset this flag.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.Multiline">
            <summary>
             Indicates if there can be more than one row of tabs.  By default [when
             this property is false], if there are more tabs than available display
             space, arrows are shown to let the user navigate between the extra
             tabs, but only one row is shown.  If this property is set to true, then
             Windows spills extra tabs over on to second rows.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.Padding">
            <summary>
             The amount of padding around the items in the individual tabs.
             You can specify both horizontal and vertical padding.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.TabControl.RightToLeftLayout" -->
        <member name="P:System.Windows.Forms.TabControl.RowCount">
            <summary>
             The number of rows currently being displayed in
             the tab strip.  This is most commonly used when the Multline property
             is 'true' and you want to know how many rows the tabs are currently
             taking up.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.SelectedIndex">
            <summary>
             The index of the currently selected tab in the strip, if there
             is one.  If the value is -1, there is currently no selection.  If the
             value is 0 or greater, than the value is the index of the currently
             selected tab.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.SelectedTab">
            <summary>
             The selection to the given tab, provided it .equals a tab in the
             list.  The return value is the index of the tab that was selected,
             or -1 if no tab was selected.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.SizeMode">
            <summary>
             By default, tabs are big enough to display their text, and any space
             on the right of the strip is left as such.  However, you can also
             set it such that the tabs are stretched to fill out the right extent
             of the strip, if necessary, or you can set it such that all tabs
             the same width.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.ShowToolTips">
            <summary>
             Indicates whether tooltips are being shown for tabs that have tooltips set on
             them.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.TabCount">
            <summary>
             Returns the number of tabs in the strip
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControl.TabPages">
            <summary>
             Returns the Collection of TabPages.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.TabControl.Selecting">
            <summary>
             Occurs before a tabpage is selected as the top tabPage.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.TabControl.Selected">
            <summary>
             Occurs after a tabpage is selected as the top tabPage.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.TabControl.Deselecting">
            <summary>
             Occurs before the visible property of the top tabpage is set to false.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.TabControl.Deselected">
            <summary>
             Occurs after the visible property of the top tabpage is set to false.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.TabControl.Paint">
            <summary>
             TabControl Onpaint.
            </summary>
            <hideinheritance/>
        </member>
        <member name="M:System.Windows.Forms.TabControl.DeselectTab(System.Int32)">
            <summary>
             Allows the user to specify the index in Tabcontrol.TabPageCollection of the tabpage to be hidden.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.DeselectTab(System.Windows.Forms.TabPage)">
            <summary>
             Allows the user to specify the tabpage in Tabcontrol.TabPageCollection  to be hidden.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.DeselectTab(System.String)">
            <summary>
             Allows the user to specify the name of the tabpage in Tabcontrol.TabPageCollection to be hidden.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.GetItems">
            <summary>
             This has package scope so that TabStrip and TabControl can call it.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.GetItems(System.Type)">
            <summary>
             This has package scope so that TabStrip and TabControl can call it.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.GetTabRect(System.Int32)">
            <summary>
             Retrieves the bounding rectangle for the given tab in the tab strip.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.InsertItem(System.Int32,System.Windows.Forms.TabPage)">
            <summary>
             This function is used by the Insert Logic to insert a tabPage in the current TabPage in the TabPageCollection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
             Handling special input keys, such as pgup, pgdown, home, end, etc...
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.OnHandleCreated(System.EventArgs)">
            <summary>
             This is a notification that the handle has been created.
             We do some work here to configure the handle.
             Overriders should call base.OnHandleCreated()
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
             Actually goes and fires the OnDrawItem event.  Inheriting controls
             should use this to know when the event is fired [this is preferable to
             adding an event handler on yourself for this event].  They should,
             however, remember to call base.onDrawItem(e); to ensure the event is
             still fired to external listeners
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.OnEnter(System.EventArgs)">
            <summary>
             Actually goes and fires the OnLeave event.  Inheriting controls
             should use this to know when the event is fired [this is preferable to
             adding an event handler on yourself for this event].  They should,
             however, remember to call base.OnLeave(e); to ensure the event is
             still fired to external listeners
             This listener is overidden so that we can fire SAME ENTER and LEAVE
             events on the TabPage.
             TabPage should fire enter when the focus is on the TABPAGE and not when the control
             within the TabPage gets Focused.
             Similary the Leave event should fire when the TabControl (and hence the TabPage) looses
             Focus. To be Backward compatible we have added new bool which can be set to true
             to the get the NEW SANE ENTER-LEAVE EVENTS ON THE TABPAGE.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.OnLeave(System.EventArgs)">
            <summary>
             Actually goes and fires the OnLeave event.  Inheriting controls
             should use this to know when the event is fired [this is preferable to
             adding an event handler on yourself for this event].  They should,
             however, remember to call base.OnLeave(e); to ensure the event is
             still fired to external listeners
             This listener is overidden so that we can fire SAME ENTER and LEAVE
             events on the TabPage.
             TabPage should fire enter when the focus is on the TABPAGE and not when the control
             within the TabPage gets Focused.
             Similary the Leave event  should fire when the TabControl (and hence the TabPage) looses
             Focus. To be Backward compatible we have added new bool which can be set to true
             to the get the NEW SANE ENTER-LEAVE EVENTS ON THE TABPAGE.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
             We override this to get tabbing functionality.
             If overriding this, remember to call base.onKeyDown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
             Actually goes and fires the onSelectedIndexChanged event.  Inheriting controls
             should use this to know when the event is fired [this is preferable to
             adding an event handler on yourself for this event].  They should,
             however, remember to call base.onSelectedIndexChanged(e); to ensure the event is
             still fired to external listeners
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.OnSelecting(System.Windows.Forms.TabControlCancelEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.TabControl.OnSelecting(System.Windows.Forms.TabControlCancelEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.OnSelected(System.Windows.Forms.TabControlEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.TabControl.OnSelected(System.Windows.Forms.TabControlEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.OnDeselecting(System.Windows.Forms.TabControlCancelEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.TabControl.OnDeselecting(System.Windows.Forms.TabControlCancelEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.OnDeselected(System.Windows.Forms.TabControlEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.TabControl.OnDeselected(System.Windows.Forms.TabControlEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.ProcessKeyPreview(System.Windows.Forms.Message@)">
            <summary>
             We override this to get the Ctrl and Ctrl-Shift Tab functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.SetToolTip(System.Windows.Forms.ToolTip,System.String)">
            <summary>
             Called by ToolTip to poke in that Tooltip into this ComCtl so that the Native ChildToolTip is not exposed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.SelectTab(System.Int32)">
            <summary>
             Allows the user to specify the index in Tabcontrol.TabPageCollection of the tabpage to be shown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.SelectTab(System.Windows.Forms.TabPage)">
            <summary>
             Allows the user to specify the tabpage in Tabcontrol.TabPageCollection  to be shown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.SelectTab(System.String)">
            <summary>
             Allows the user to specify the name of the tabpage in Tabcontrol.TabPageCollection to be shown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.SelectNextTab(System.Windows.Forms.KeyEventArgs,System.Boolean)">
            <summary>
             This is called by TabControl in response to the KeyDown event to override the selection of tabpages
             for different key combinations.
             Control + Tab selects the next tabpage.
             Control + Shift + Tab selects the previous tabpage.
             Control + PageDown selects the next tabpage.
             Control + PageUp selects the previous tabpage.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.UpdateTabSelection(System.Boolean)">
            <summary>
             Set the panel selections appropriately
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
             The tab's window procedure.  Inheritng classes can override this
             to add extra functionality, but should not forget to call
             base.wndProc(m); to ensure the tab continues to function properly.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:System.Windows.Forms.TabControl.TabPageCollection._lastAccessedIndex" -->
        <member name="P:System.Windows.Forms.TabControl.TabPageCollection.Item(System.String)">
            <summary>
             Retrieves the child control with the specified key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.TabPageCollection.ContainsKey(System.String)">
            <summary>
             Returns true if the collection contains an item with the specified key, false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.TabPageCollection.IndexOfKey(System.String)">
            <summary>
             The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.TabPageCollection.Insert(System.Int32,System.Windows.Forms.TabPage)">
            <summary>
             Inserts the supplied Tabpage at the given index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.TabPageCollection.IsValidIndex(System.Int32)">
            <summary>
             Determines if the index is valid for the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControl.TabPageCollection.RemoveByKey(System.String)">
            <summary>
             Removes the child control with the specified key.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TabControlAction">
            <summary>
             This enum is used to specify the action that caused a TreeViewEventArgs.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TabControlCancelEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.TabControl.OnDeselecting(System.Windows.Forms.TabControlCancelEventArgs)'/>,
            <see cref='M:System.Windows.Forms.TabControl.OnDeselected(System.Windows.Forms.TabControlEventArgs)'/> event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControlCancelEventArgs.TabPage">
            <summary>
             Stores the referemce to the tabpage that is undergoing the TabControl event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControlCancelEventArgs.TabPageIndex">
            <summary>
             Stores the index to the tabpage that is undergoing the TabControl event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControlCancelEventArgs.Action">
            <summary>
             Stores the TabControl action which instigated the TabControl event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TabControlCancelEventHandler">
            <summary>
             Represents a method that handles the <see cref='E:System.Windows.Forms.TabControl.Deselected'/> and 
             <see cref='E:System.Windows.Forms.TabControl.Deselecting'/> events of a <see cref='T:System.Windows.Forms.TabControl'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TabControlEventArgs">
            <summary>
             Provides data for <see cref='E:System.Windows.Forms.TabControl.Selecting'/> and <see cref='E:System.Windows.Forms.TabControl.Selected'/> events.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabControlEventArgs.#ctor(System.Windows.Forms.TabPage,System.Int32,System.Windows.Forms.TabControlAction)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.TabControlEventArgs'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControlEventArgs.TabPage">
            <summary>
             Stores the referemce to the tabpage that is undergoing the event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControlEventArgs.TabPageIndex">
            <summary>
             Stores the index to the tabpage that is undergoing the event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabControlEventArgs.Action">
            <summary>
             Stores the action which instigated the event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TabControlEventHandler">
            <summary>
             Represents a method that handles the <see cref='E:System.Windows.Forms.TabControl.Selected'/> and 
             <see cref='E:System.Windows.Forms.TabControl.Selecting'/> events of a <see cref='T:System.Windows.Forms.TabControl'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TabDrawMode">
            <summary>
             The TabStrip and TabControl both support ownerdraw functionality, but
             only one type, in which you can paint the tabs individually.  This
             enumeration contains the valid values for it's drawMode property.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TabDrawMode.Normal">
            <summary>
             All the items in the control are painted by the system and are of the
             same size
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TabDrawMode.OwnerDrawFixed">
            <summary>
             The user paints the items in the control manually
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TableLayoutCellPaintEventArgs">
            <summary>
             This is the overrided PaintEventArgs for painting the cell of the table
             It contains additional information indicating the row/column of the cell
             as well as the bound of the cell
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TableLayoutControlCollection">
            <summary>
             Represents a collection of controls on the TableLayoutPanel.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TableLayoutControlCollection.Add(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
             Add control to cell (x, y) on the table. The control becomes absolutely positioned if neither x nor y is equal to -1
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TableLayoutPanel.ColumnCount">
            <summary>
             This sets the maximum number of columns allowed on this table instead of allocating
             actual spaces for these columns. So it is OK to set ColumnCount to Int32.MaxValue without
             causing out of memory exception
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TableLayoutPanel.GrowStyle">
            <summary>
             Specifies if a TableLayoutPanel will gain additional rows or columns once its existing cells
             become full.  If the value is 'FixedSize' then the TableLayoutPanel will throw an exception
             when the TableLayoutPanel is over-filled.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TableLayoutPanel.RowCount">
            <summary>
             This sets the maximum number of rows allowed on this table instead of allocating
             actual spaces for these rows. So it is OK to set RowCount to Int32.MaxValue without
             causing out of memory exception
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TableLayoutPanel.GetControlFromPosition(System.Int32,System.Int32)">
            <summary>
             get the control which covers the specified row and column. return null if we can't find one
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TableLayoutPanel.GetColumnWidths">
            <summary>
             This returns an array representing the widths (in pixels) of the columns in the TableLayoutPanel.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TableLayoutPanel.GetRowHeights">
            <summary>
             This returns an array representing the heights (in pixels) of the rows in the TableLayoutPanel.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TableLayoutPanel.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
             When a layout fires, make sure we're painting all of our
             cell borders.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TableLayoutPanel.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Scale this form.  Form overrides this to enforce a maximum / minimum size.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TableLayoutPanelGrowStyle">
            <summary>
             Specifies if a TableLayoutPanel will gain additional rows or columns once
             its existing cells become full.  If the value is 'None' then the
             TableLayoutPanel will throw an exception when the TableLayoutPanel is
             over-filled.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TableLayoutPanelGrowStyle.FixedSize">
            <summary>
             The TableLayoutPanel will not allow additional rows or columns once
             it is full.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TableLayoutPanelGrowStyle.AddRows">
            <summary>
             The TableLayoutPanel will gain additional rows once it becomes full.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TableLayoutPanelGrowStyle.AddColumns">
            <summary>
             The TableLayoutPanel will gain additional columns once it becomes full.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TableLayoutSettings">
            <summary>
             This is a wrapper class to expose interesting properties of TableLayout
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TableLayoutSettings.CellBorderStyle">
            <summary> internal as this is a TableLayoutPanel feature only </summary>
        </member>
        <member name="P:System.Windows.Forms.TableLayoutSettings.ColumnCount">
            <summary>
             This sets the maximum number of columns allowed on this table instead of allocating
             actual spaces for these columns. So it is OK to set ColumnCount to Int32.MaxValue without
             causing out of memory exception
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TableLayoutSettings.RowCount">
            <summary>
             This sets the maximum number of rows allowed on this table instead of allocating
             actual spaces for these rows. So it is OK to set RowCount to Int32.MaxValue without
             causing out of memory exception
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TableLayoutSettings.GrowStyle">
            <summary>
             Specifies if a TableLayoutPanel will gain additional rows or columns once its existing cells
             become full.  If the value is 'FixedSize' then the TableLayoutPanel will throw an exception
             when the TableLayoutPanel is over-filled.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TableLayoutSettings.GetRow(System.Object)">
            <summary>
             Get the row position of the element
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TableLayoutSettings.SetRow(System.Object,System.Int32)">
            <summary>
             Set the row position of the element
             If we set the row position to -1, it will automatically switch the control from
             absolutely positioned to non-absolutely positioned
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TableLayoutSettings.GetCellPosition(System.Object)">
            <summary>
             Get the column position of the element
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TableLayoutSettings.SetCellPosition(System.Object,System.Windows.Forms.TableLayoutPanelCellPosition)">
            <summary>
             Set the column position of the element
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TableLayoutSettings.GetColumn(System.Object)">
            <summary>
             Get the column position of the element
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TableLayoutSettings.SetColumn(System.Object,System.Int32)">
            <summary>
             Set the column position of the element
             If we set the column position to -1, it will automatically switch the control from
             absolutely positioned to non-absolutely positioned
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TableLayoutSettings.GetControlFromPosition(System.Int32,System.Int32)">
            <summary>
              Get the element which covers the specified row and column. return null if we can't find one
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TableLayoutSettings.TableLayoutSettingsStub.ApplySettings(System.Windows.Forms.TableLayoutSettings)">
             <summary>
              Applies settings from the stub into a full-fledged TableLayoutSettings.
            
              NOTE: this is a one-time only operation - there is data loss to the stub
              as a result of calling this function. We hand as much over to the other settings
              so we dont have to reallocate anything
             </summary>
        </member>
        <member name="T:System.Windows.Forms.TabPage">
            <summary>
             TabPage implements a single page of a tab control. It is essentially a Panel with TabItem
             properties.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabPage.#ctor">
            <summary>
             Constructs an empty TabPage.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabPage.#ctor(System.String)">
            <summary>
             Constructs a TabPage with text for the tab.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabPage.AutoSizeMode">
            <summary>
             Allows the control to optionally shrink when AutoSize is true.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabPage.AutoSize">
            <summary>
             Hide AutoSize: it doesn't make sense for this control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabPage.BackColor">
            <summary>
             The background color of this control. This is an ambient property and will always return
             a non-null value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabPage.CreateControlsInstance">
            <summary>
             Constructs the new instance of the Controls collection objects.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabPage.ImageIndex">
            <summary>
             Returns the imageIndex for the TabPage. This should point to an image
             in the TabControl's associated imageList that will appear on the tab, or be -1.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabPage.ImageKey">
            <summary>
             Returns the imageIndex for the TabPage. This should point to an image in the TabControl's
             associated imageList that will appear on the tab, or be -1.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabPage.Location">
            <summary>
             Make the Location property non-browsable for the tab pages.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabPage.RenderTransparencyWithVisualStyles">
            <summary>
             This property is required by certain controls (TabPage) to render its transparency using
             theming API. We dont want all controls (that are have transparent BackColor) to use
             theming API to render its background because it has large performance cost.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabPage.ToolTipText">
            <summary>
             The toolTipText for the tab, that will appear when the mouse hovers over the tab and the
             TabControl's showToolTips property is true.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabPage.AssignParent(System.Windows.Forms.Control)">
            <summary>
             Assigns a new parent control. Sends out the appropriate property change notifications for
             properties that are affected by the change of parent.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabPage.GetTabPageOfComponent(System.Object)">
            <summary>
             Given a component, this retrieves the tab page that it's parented to, or null if it's not
             parented to any tab page.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabPage.FireLeave(System.EventArgs)">
            <summary>
             This is an internal method called by the TabControl to fire the Leave event when TabControl leave occurs.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabPage.FireEnter(System.EventArgs)">
            <summary>
             This is an internal method called by the TabControl to fire the Enter event when TabControl leave occurs.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabPage.OnEnter(System.EventArgs)">
            <summary>
             Actually goes and fires the OnEnter event. Inheriting controls should use this to know
             when the event is fired [this is preferable to adding an event handler on yourself for
             this event]. They should, however, remember to call base.OnEnter(e); to ensure the event
             i still fired to external listeners
             This listener is overidden so that we can fire SAME ENTER and LEAVE events on the TabPage.
             TabPage should fire enter when the focus is on the TabPage and not when the control
             within the TabPage gets Focused.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabPage.OnLeave(System.EventArgs)">
            <summary>
             Actually goes and fires the OnLeave event. Inheriting controls should use this to know
             when the event is fired [this is preferable to adding an event handler on yourself for
             this event]. They should, however, remember to call base.OnLeave(e); to ensure the event
             is still fired to external listeners
             This listener is overidden so that we can fire same enter and leave events on the TabPage.
             TabPage should fire enter when the focus is on the TabPage and not when the control within
             the TabPage gets Focused.
             Similary the Leave should fire when the TabControl (and hence the TabPage) loses focus.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabPage.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Overrides main setting of our bounds so that we can control our size and that of our
             TabPages.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabPage.ShouldSerializeLocation">
            <summary>
             Determines if the Location property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabPage.ToString">
            <summary>
             The text property is what is returned for the TabPages default printing.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TabPage.TabPageControlCollection">
            <summary>
             Our control collection will throw an exception if you try to add other tab pages.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabPage.TabPageControlCollection.#ctor(System.Windows.Forms.TabPage)">
            <summary>
             Creates a new TabPageControlCollection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabPage.TabPageControlCollection.Add(System.Windows.Forms.Control)">
            <summary>
             Adds a child control to this control. The control becomes the last control
             in the child control list. If the control is already a child of another
             control it is first removed from that control. The tab page overrides
             this method to ensure that child tab pages are not added to it, as these
             are illegal.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TabRenderer">
            <summary>
             This is a rendering class for the Tab control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TabRenderer.IsSupported">
            <summary>
             Returns true if this class is supported for the current OS and user/application settings,
             otherwise returns false.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabRenderer.DrawTabItem(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.TabItemState)">
            <summary>
             Renders a Tab item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabRenderer.DrawTabItem(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Windows.Forms.VisualStyles.TabItemState)">
            <summary>
             Renders a Tab item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabRenderer.DrawTabItem(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Windows.Forms.VisualStyles.TabItemState)">
            <summary>
             Renders a Tab item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabRenderer.DrawTabItem(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Boolean,System.Windows.Forms.VisualStyles.TabItemState)">
            <summary>
             Renders a Tab item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabRenderer.DrawTabItem(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Windows.Forms.TextFormatFlags,System.Boolean,System.Windows.Forms.VisualStyles.TabItemState)">
            <summary>
             Renders a Tab item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabRenderer.DrawTabItem(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,System.Drawing.Rectangle,System.Boolean,System.Windows.Forms.VisualStyles.TabItemState)">
            <summary>
             Renders a Tab item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabRenderer.DrawTabItem(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Drawing.Image,System.Drawing.Rectangle,System.Boolean,System.Windows.Forms.VisualStyles.TabItemState)">
            <summary>
             Renders a Tab item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabRenderer.DrawTabItem(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Windows.Forms.TextFormatFlags,System.Drawing.Image,System.Drawing.Rectangle,System.Boolean,System.Windows.Forms.VisualStyles.TabItemState)">
            <summary>
             Renders a Tab item.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TabRenderer.DrawTabPage(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Renders a TabPage.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TabSizeMode">
            <summary>
             Controls the automatic sizing of certain objects.  This is typically
             used for the sizing of Tabs in a TabStrip control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TabSizeMode.Normal">
            <summary>
             Indicates that items are only as wide as they need to be to display
             their information.  Empty space on the right is left as such
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TabSizeMode.FillToRight">
            <summary>
             indicates that the tags are stretched to ensure they reach the far
             right of the strip, if necesary.  This is only applicable to tab
             strips with more than one row.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TabSizeMode.Fixed">
            <summary>
             Indicates that all tabs are the same width. period.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TaskDialog">
            <summary>
              A task dialog allows to display information and get simple input from the user. It is similar
              to a <see cref="T:System.Windows.Forms.MessageBox"/> (in that it is formatted by the operating system) but provides
              a lot more features.
            </summary>
            <remarks>
            <para>
              For more information, see
            <see href="https://docs.microsoft.com/windows/desktop/Controls/task-dialogs-overview">About Task Dialogs</see>.
            </para>
            <para>
              Note: In order to use the dialog, you need ensure <see cref="M:System.Windows.Forms.Application.EnableVisualStyles"/>
              has been called before showing the dialog, or the application needs to be compiled with a
              manifest that contains a dependency to Microsoft.Windows.Common-Controls (6.0.0.0).
              Additionally, the current thread should use the single-threaded apartment (STA) model.
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TaskDialog.ContinueButtonClickHandlingMessage">
            <summary>
              A self-defined window message that we post to the task dialog when
              handling a <see cref="!:TaskDialogNotification.TDN_BUTTON_CLICKED"/>
              notification, so that we will ignore further
              <see cref="!:TaskDialogNotification.TDN_BUTTON_CLICKED"/> notifications
              until we process the posted message.
            </summary>
            <remarks>
            <para>
              This is used to work-around a bug in the native task dialog, where
              a <see cref="!:TaskDialogNotification.TDN_BUTTON_CLICKED"/> notification
              seems to be sent twice to the callback when you "click" a button by
              pressing its access key (mnemonic) and the dialog is still open when
              continuing the message loop.
            </para>
            <para>
              This work-around should not have negative effects, such as erroneously
              ignoring a valid button clicked notification when the user presses the
              button multiple times while the GUI thread is hangs - this seems
              to work correctly, as our posted message will be processed before
              further (valid) <see cref="!:TaskDialogNotification.TDN_BUTTON_CLICKED"/>
              notifications are processed.
            </para>
            <para>
              See documentation/repro in
              /Documentation/src/System/Windows/Forms/TaskDialog/Issue_ButtonClickHandlerCalledTwice.md
            </para>
            <para>
              Note: We use a WM_APP message with a high value (WM_USER is not
              appropriate as it is private to the control class), in order to avoid
              conflicts with WM_APP messages which other parts of the application
              might want to send when they also subclassed the dialog window, although
              that should be unlikely.
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TaskDialog.s_callbackProcDelegate">
            <summary>
              The delegate for the callback handler (that calls
              <see cref="M:System.Windows.Forms.TaskDialog.HandleTaskDialogCallback(System.IntPtr,Interop.ComCtl32.TDN,System.IntPtr,System.IntPtr)"/>) from which the native function
              pointer <see cref="F:System.Windows.Forms.TaskDialog.s_callbackProcDelegatePtr"/> is created. 
            </summary>
            <remarks>
            <para>
              We must store this delegate (and prevent it from being garbage-collected)
              to ensure the function pointer doesn't become invalid.
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TaskDialog.s_callbackProcDelegatePtr">
            <summary>
              The function pointer created from <see cref="F:System.Windows.Forms.TaskDialog.s_callbackProcDelegate"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialog._waitingNavigationPages">
            <summary>
              A qeueue of <see cref="T:System.Windows.Forms.TaskDialogPage"/>s that have been bound by
              navigating the dialog, but don't yet reflect the state of the
              native dialog because the corresponding
              <see cref="!:TaskDialogNotification.TDN_NAVIGATED"/> notification was
              not yet received.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialog._instanceHandlePtr">
            <summary>
              The <see cref="T:System.IntPtr"/> of a <see cref="T:System.Runtime.InteropServices.GCHandle"/> that represents this
              <see cref="T:System.Windows.Forms.TaskDialog"/> instance.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialog._raisedOpened">
            <summary>
              Stores a value that indicates if the
              <see cref="E:System.Windows.Forms.TaskDialog.Opened"/> event has been called and so the
              <see cref="E:System.Windows.Forms.TaskDialog.Closed"/> event can be called later.
            </summary>
            <remarks>
            <para>
              This is used to prevent raising the 
              <see cref="E:System.Windows.Forms.TaskDialog.Closed"/> event without raising the
              <see cref="E:System.Windows.Forms.TaskDialog.Opened"/> event first (e.g. if the dialog cannot be shown
              due to an invalid icon).
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TaskDialog._raisedPageCreated">
            <summary>
              Stores a value that indicates if the
              <see cref="E:System.Windows.Forms.TaskDialogPage.Created"/> event has been called for the
              current <see cref="T:System.Windows.Forms.TaskDialogPage"/> and so the corresponding
              <see cref="E:System.Windows.Forms.TaskDialogPage.Destroyed"/> can be called later.
            </summary>
            <remarks>
            <para>
              This is used to prevent raising the 
              <see cref="E:System.Windows.Forms.TaskDialogPage.Destroyed"/> event without raising the
              <see cref="E:System.Windows.Forms.TaskDialogPage.Created"/> event first (e.g. if navigation
              fails).
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TaskDialog._buttonClickNavigationCounter">
            <summary>
              A counter which is used to determine whether the dialog has been navigated
              while being in a <see cref="!:TaskDialogNotification.TDN_BUTTON_CLICKED"/> handler.
            </summary>
            <remarks>
            <para>
              When the dialog navigates within a ButtonClicked handler, the handler should
              always return S_FALSE to prevent the dialog from applying the button that
              raised the handler as dialog result. Otherwise, this can lead to memory access
              problems like <see cref="T:System.AccessViolationException"/>s, especially if the
              previous dialog page had radio buttons (but the new ones do not).
            </para>
            <para>
              See the comment in <see cref="M:System.Windows.Forms.TaskDialog.HandleTaskDialogCallback(System.IntPtr,Interop.ComCtl32.TDN,System.IntPtr,System.IntPtr)"/> for more
              information.
            </para>
            <para>
              When the dialog navigates, it sets the <c>navigationIndex</c> to the current
              <c>stackCount</c> value, so that the ButtonClicked handler can determine
              if the dialog has been navigated after it was called.
              Tracking the stack count and navigation index is necessary as there
              can be multiple ButtonClicked handlers on the call stack, for example
              if a ButtonClicked handler runs the message loop so that new click events
              can be processed.
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TaskDialog._resultButton">
            <summary>
              The button designated as the dialog result by the handler for the
              <see cref="!:TaskDialogNotification.TDN_BUTTON_CLICKED"/>
              notification.
            </summary>
            <remarks>
            <para>
              This will be set the first time the
              <see cref="!:TaskDialogNotification.TDN_BUTTON_CLICKED"/> handler returns
              <see cref="!:TaskDialogNativeMethods.S_OK"/> to cache the button instance,
              so that <see cref="M:System.Windows.Forms.TaskDialog.ShowDialog(System.IntPtr)"/> can then return it.
            </para>
            <para>
              Additionally, this is used to check if there was already a 
              <see cref="!:TaskDialogNotification.TDN_BUTTON_CLICKED"/> handler that
              returned <see cref="!:TaskDialogNativeMethods.S_OK"/>, so that further
              handles will return <see cref="!:TaskDialogNativeMethods.S_FALSE"/> to
              not override the previously set result.
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TaskDialog._isInNavigate">
            <summary>
              Specifies if the current code is called from within
              <see cref="M:System.Windows.Forms.TaskDialog.Navigate(System.Windows.Forms.TaskDialogPage)"/>.
            </summary>
            <remarks>
            <para>
              This is used to detect if you call <see cref="M:System.Windows.Forms.TaskDialog.Navigate(System.Windows.Forms.TaskDialogPage)"/>
              from within an event raised by <see cref="M:System.Windows.Forms.TaskDialog.Navigate(System.Windows.Forms.TaskDialogPage)"/>,
              which is not supported.
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TaskDialog._ignoreButtonClickedNotifications">
            <summary>
              Specifies if the <see cref="M:System.Windows.Forms.TaskDialog.HandleTaskDialogCallback(System.IntPtr,Interop.ComCtl32.TDN,System.IntPtr,System.IntPtr)"/> method should
              currently ignore <see cref="!:TaskDialogNotification.TDN_BUTTON_CLICKED"/>
              notifications.
            </summary>
            <remarks>
            <para>
              See <see cref="F:System.Windows.Forms.TaskDialog.ContinueButtonClickHandlingMessage"/> for more information.
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TaskDialog._receivedDestroyedNotification">
            <summary>
              Specifies if the currently showing task dialog already received the
              <see cref="F:Interop.ComCtl32.TDN.DESTROYED"/> notification.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.TaskDialog.Opened">
            <summary>
              Occurs after the task dialog has been created but before it is displayed.
            </summary>
            <remarks>
            <para>
              You can use this event to allocate resources associated with the
              task dialog window handle, as it is the first event where
            <see cref="P:System.Windows.Forms.TaskDialog.Handle"/> is available.
            </para>
            <para>
              Note: The dialog will not show until this handler returns (even if the
              handler would run the message loop).
            </para>
            </remarks>
        </member>
        <member name="E:System.Windows.Forms.TaskDialog.Shown">
            <summary>
              Occurs when the task dialog is first displayed.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.TaskDialog.Closing">
            <summary>
              Occurs when the task dialog is closing.
            </summary>
            <remarks>
            <para>
              You can cancel the close by setting
              <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <see langword="true"/>. Otherwise, the
              dialog window will close, and the <see cref="E:System.Windows.Forms.TaskDialog.Closed"/> event will be
              raised afterwards.
            </para>
            <para>
              Note: The <see cref="E:System.Windows.Forms.TaskDialog.Closed"/> event might not be called immediately
              after the <see cref="E:System.Windows.Forms.TaskDialog.Closing"/> event (even though the dialog window
              has already closed). This can happen, for example, when showing multiple 
              (modeless) dialogs at the same time and then closing the one that
              was shown first. In that case, the <see cref="E:System.Windows.Forms.TaskDialog.Closed"/> event for
              that dialog will be called only after the second dialog is also closed.
            </para>
            <para>
              Note: This event might not always be called. For example, if navigation of the
              dialog fails; however, the <see cref="E:System.Windows.Forms.TaskDialog.Closed"/> event will always be
              called.
            </para>
            </remarks>
        </member>
        <member name="E:System.Windows.Forms.TaskDialog.Closed">
            <summary>
              Occurs when the task dialog is closed.
            </summary>
            <remarks>
            <para>
              You can use this event to free resources associated with the
              task dialog window handle, as it is the last event where
              <see cref="P:System.Windows.Forms.TaskDialog.Handle"/> is available.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialog"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.#ctor(System.Windows.Forms.TaskDialogPage)">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialog"/> class using the
              specified task dialog page.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TaskDialog.Handle">
            <summary>
              Gets the window handle of the task dialog window, or <see cref="F:System.IntPtr.Zero"/>
              if the dialog is currently not being shown.
            </summary>
            <remarks>
            <para>
              When showing the dialog, the handle will be available first when the
              <see cref="E:System.Windows.Forms.TaskDialog.Opened"/> event occurs, and last when the
              <see cref="E:System.Windows.Forms.TaskDialog.Closed"/> event occurs after which you shouldn't use it any more.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialog.Page">
            <summary>
              Gets or sets the <see cref="T:System.Windows.Forms.TaskDialogPage"/> instance that contains 
              the contents which this task dialog will display.
            </summary>
            <value>
              The page instance that contains the contents which this task dialog will
              display.
            </value>
            <remarks>
            <para>
              When setting this property while the task dialog is displayed, its contents
              will be recreated from the specified <see cref="T:System.Windows.Forms.TaskDialogPage"/>
              ("navigation"). This means that the <see cref="E:System.Windows.Forms.TaskDialogPage.Destroyed"/>
              event will occur for the current page, and after the dialog
              completed navigation, the <see cref="E:System.Windows.Forms.TaskDialogPage.Created"/> event
              of the new page will occur.
            </para>
            <para>
              You can't manipulate the task dialog or its controls
              immediately after navigating it (except for calling <see cref="M:System.Windows.Forms.TaskDialog.Close"/>
              or navigating the dialog again).
              You need to wait for the <see cref="E:System.Windows.Forms.TaskDialogPage.Created"/>
              event to occur before you can manipulate the dialog or its controls.
            </para>
            <para>
              When navigating the dialog, the new page will be bound
              immediately, but the previous page won't be unbound until the
              <see cref="E:System.Windows.Forms.TaskDialogPage.Created"/> event of the new page is raised,
              because during that time the task dialog behaves as if it still
              showed the controls of the previous page.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialog.StartupLocation">
            <summary>
              Gets or sets the position of the task dialog when it is shown.
            </summary>
            <value>
              The position of the task dialog when it is shown. The default value is
              <see cref="F:System.Windows.Forms.TaskDialogStartupLocation.CenterParent"/>.
            </value>
        </member>
        <member name="P:System.Windows.Forms.TaskDialog.SetToForeground">
            <summary>
              Gets or sets a value that indicates whether the task dialog should set itself as
              foreground window when showing it.
            </summary>
            <value>
              <see langword="true"/> if the task dialog should set itself as foreground window
              when showing it; otherwise, <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
              When setting this property to <see langword="true"/> and then showing the dialog, it
              causes the dialog to set itself as foreground window. This means that
              if currently none of the application's windows has focus, the task dialog
              tries to "steal" focus (which can result in the task dialog window being
              activated, or the taskbar button for the window flashing orange). However,
              if the application already has focus, the task dialog window will be
              activated in either case.
            </para>
            <para>
              Note: A value of <see langword="false"/> only has an effect on Windows 8/Windows Server 2012
              and higher. On previous versions of Windows, the task dialog will always behave as
              if this property was set to <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialog.IsShown">
            <summary>
              Gets a value that indicates whether <see cref="M:System.Windows.Forms.TaskDialog.ShowDialog(System.IntPtr)"/> is
              currently being called.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TaskDialog.IsHandleCreated">
            <summary>
              Gets a value that indicates whether the native task dialog window has
              been created and its handle is available using the <see cref="P:System.Windows.Forms.TaskDialog.Handle"/>
              property.
            </summary>
            <remarks>
            <para>
              This property can only be <see langword="true"/> if <see cref="P:System.Windows.Forms.TaskDialog.IsShown"/> is
              also <see langword="true"/>. However, normally this property should be equivalent
              to <see cref="P:System.Windows.Forms.TaskDialog.IsShown"/>, because when showing the dialog, the
              callback should have been called setting the handle.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialog.RadioButtonClickedStackCount">
            <summary>
              Gets or sets the current count of stack frames that are in the
              <see cref="E:System.Windows.Forms.TaskDialogRadioButton.CheckedChanged"/> event for the
              current task dialog.
            </summary>
            <remarks>
            <para>
              This is used by the <see cref="P:System.Windows.Forms.TaskDialogRadioButton.Checked"/> setter
              so that it can disallow the change when the count is greater than zero.
              Additionally, it is used to deny navigation of the task dialog in that
              case.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.ShowDialog(System.String,System.String,System.String,System.Windows.Forms.TaskDialogButtons,System.Windows.Forms.TaskDialogIcon)">
            <summary>
              Displays a task dialog with the specified text, instruction,
              caption, buttons, and icon.
            </summary>
            <param name="text">The text ("content") to display in the task dialog.</param>
            <param name="mainInstruction">The main instruction to display in the task dialog.</param>
            <param name="caption">The text to display in the title bar of the task dialog.</param>
            <param name="buttons">A bitwise combination of the enumeration values that specify the buttons to be shown
            in the task dialog.</param>
            <param name="icon">The icon to display in the main area of the task dialog.</param>
            <returns>One of the enumeration values that indicates the return value of the task dialog.</returns>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.ShowDialog(System.Windows.Forms.IWin32Window,System.String,System.String,System.String,System.Windows.Forms.TaskDialogButtons,System.Windows.Forms.TaskDialogIcon)">
            <summary>
              Displays a task dialog in front of the specified window and with the specified
              text, main instruction, caption, buttons, and icon.
            </summary>
            <param name="owner">The owner window, or <see langword="null"/> to show a modeless dialog.</param>
            <param name="text">The text ("content") to display in the task dialog.</param>
            <param name="mainInstruction">The main instruction to display in the task dialog.</param>
            <param name="caption">The text to display in the title bar of the task dialog.</param>
            <param name="buttons">A bitwise combination of the enumeration values that specify the buttons to be shown
            in the task dialog.</param>
            <param name="icon">The icon to display in the main area of the task dialog.</param>
            <returns>One of the <see cref="T:System.Windows.Forms.TaskDialogResult"/> values.</returns>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.ShowDialog(System.IntPtr,System.String,System.String,System.String,System.Windows.Forms.TaskDialogButtons,System.Windows.Forms.TaskDialogIcon)">
            <summary>
              Displays a task dialog in front of the specified window and with the specified
              text, instruction, caption, buttons, and icon.
            </summary>
            <param name="hwndOwner">
            The handle of the owner window, or <see cref="F:System.IntPtr.Zero"/> to show a
            modeless dialog.
            </param>
            <param name="text">The text ("content") to display in the task dialog.</param>
            <param name="mainInstruction">The main instruction to display in the task dialog.</param>
            <param name="caption">The text to display in the title bar of the task dialog.</param>
            <param name="buttons">A bitwise combination of enumeration values that specify the buttons to be shown
            in the task dialog.</param>
            <param name="icon">The icon to display in the main area of the task dialog.</param>
            <returns>One of the <see cref="T:System.Windows.Forms.TaskDialogResult"/> values.</returns>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.ShowDialog">
            <summary>
              Shows the task dialog.
            </summary>
            <remarks>
            <para>
              Showing the dialog will bind the <see cref="P:System.Windows.Forms.TaskDialog.Page"/> and its controls until
              this method returns or the dialog is navigated to a different page.
            </para>
            </remarks>
            <returns>The <see cref="T:System.Windows.Forms.TaskDialogButton"/> which was clicked by the
            user to close the dialog.</returns>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
              Shows the task dialog with the specified owner.
            </summary>
            <remarks>
            <para>
              Showing the dialog will bind the <see cref="P:System.Windows.Forms.TaskDialog.Page"/> and its controls until
              this method returns or the dialog is navigated to a different page.
            </para>
            </remarks>
            <param name="owner">The owner window, or <see langword="null"/> to show a modeless dialog.</param>
            <returns>The <see cref="T:System.Windows.Forms.TaskDialogButton"/> which was clicked by the
            user to close the dialog.</returns>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.ShowDialog(System.IntPtr)">
            <summary>
              Shows the task dialog with the specified owner.
            </summary>
            <remarks>
            <para>
              Showing the dialog will bind the <see cref="P:System.Windows.Forms.TaskDialog.Page"/> and its controls until
              this method returns or the dialog is navigated to a different page.
            </para>
            </remarks>
            <param name="hwndOwner">
            The handle of the owner window, or <see cref="F:System.IntPtr.Zero"/> to show a
            modeless dialog.
            </param>
            <returns>The <see cref="T:System.Windows.Forms.TaskDialogButton"/> which was clicked by the
            user to close the dialog.</returns>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.Close">
            <summary>
              Closes the shown task dialog with a 
              <see cref="F:System.Windows.Forms.TaskDialogResult.Cancel"/> result.
            </summary>
            <remarks>
            <para>
            To close the dialog with a different result, call the
            <see cref="M:System.Windows.Forms.TaskDialogButton.PerformClick"/> method of the
            <see cref="T:System.Windows.Forms.TaskDialogButton"/> that you want to set as a result.
            </para>
            <para>
              Note: This method can be called while the dialog is waiting for
              navigation to complete, whereas <see cref="M:System.Windows.Forms.TaskDialogButton.PerformClick"/>
              would throw in that case. When calling this method, the
              <see cref="E:System.Windows.Forms.TaskDialogButton.Click"/> event won't be raised.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.SwitchProgressBarMode(System.Boolean)">
            <summary>
              While the dialog is being shown, switches the progress bar mode to either a
              marquee progress bar or to a regular progress bar.
              For a marquee progress bar, you can enable or disable the marquee using
              <see cref="M:System.Windows.Forms.TaskDialog.SetProgressBarMarquee(System.Boolean,System.Int32)"/>.
            </summary>
            <param name="marqueeProgressBar"></param>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.SetProgressBarMarquee(System.Boolean,System.Int32)">
            <summary>
              While the dialog is being shown, enables or disables progress bar marquee when
              an marquee progress bar is displayed.
            </summary>
            <param name="enableMarquee"></param>
            <param name="animationSpeed">
            The time in milliseconds between marquee animation updates. If <c>0</c>, the
            animation will be updated every 30 milliseconds.
            </param>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.SetProgressBarRange(System.Int32,System.Int32)">
            <summary>
              While the dialog is being shown, sets the progress bar range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <remarks>
            <para>
              The default range is 0 to 100.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.SetProgressBarPosition(System.Int32)">
            <summary>
              While the dialog is being shown, sets the progress bar position.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.SetProgressBarState(Interop.ComCtl32.PBST)">
            <summary>
              While the dialog is being shown, sets the progress bar state.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.ClickCheckBox(System.Boolean,System.Boolean)">
            <summary>
              While the dialog is being shown, sets the checkbox to the specified
              state.
            </summary>
            <param name="isChecked"></param>
            <param name="focus"></param>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.OnOpened(System.EventArgs)">
            <summary>
              Raises the <see cref="E:System.Windows.Forms.TaskDialog.Opened"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.OnShown(System.EventArgs)">
            <summary>
              Raises the <see cref="E:System.Windows.Forms.TaskDialog.Shown"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.OnClosing(System.Windows.Forms.TaskDialogClosingEventArgs)">
            <summary>
              Raises the <see cref="E:System.Windows.Forms.TaskDialog.Closing"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.OnClosed(System.EventArgs)">
            <summary>
              Raises the <see cref="E:System.Windows.Forms.TaskDialog.Closed"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.Navigate(System.Windows.Forms.TaskDialogPage)">
            <summary>
              While the dialog is being shown, recreates the dialog from the specified
            <paramref name="page"/>.
            </summary>
            <remarks>
            <para>
              Note that you should not call this method in the <see cref="E:System.Windows.Forms.TaskDialog.Opened"/>
              event because the task dialog is not yet displayed in that state.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.HandleCallbackException(System.Exception)">
            <summary>
              Called when an exception occurs in dispatching messages through
              the task dialog callback or its window procedure.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialog.UpdateWindowSize">
            <summary>
              Forces the task dialog to update its window size according to its contents.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogButton">
            <summary>
              Represents a button control of a task dialog.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.TaskDialogButton.Click">
            <summary>
              Occurs when the button is clicked.
            </summary>
            <remarks>
            <para>
              By default, the dialog will be closed after the event handler returns 
              (except for the <see cref="F:System.Windows.Forms.TaskDialogResult.Help"/> button, which instead
              will raise the <see cref="E:System.Windows.Forms.TaskDialogPage.HelpRequest"/> event afterwards).
              To prevent the dialog from closing when this button is clicked, set the
              <see cref="P:System.Windows.Forms.TaskDialogButton.AllowCloseDialog"/> property to <see langword="false"/>.
            </para>
            <para>
              When <see cref="P:System.Windows.Forms.TaskDialogButton.AllowCloseDialog"/> is set to <see langword="true"/>,
              the <see cref="E:System.Windows.Forms.TaskDialog.Closing"/> event will occur afterwards,
              which also allows you to prevent the dialog from closing.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogButton.AllowCloseDialog">
            <summary>
              Gets or sets a value that indicates whether the task dialog should close
              when this button is clicked. Or, if this button represents the
              <see cref="F:System.Windows.Forms.TaskDialogResult.Help"/> result, indicates whether the
              <see cref="E:System.Windows.Forms.TaskDialogPage.HelpRequest"/> should be raised.
            </summary>
            <value>
              <see langword="true"/> if the task dialog should close when
              this button is clicked; otherwise, <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
            <remarks>
            <para>
              If this property is set to <see langword="true"/> after the <see cref="E:System.Windows.Forms.TaskDialogButton.Click"/>
              event handler returns, the <see cref="E:System.Windows.Forms.TaskDialog.Closing"/> event will occur
              (except if this button represents the <see cref="F:System.Windows.Forms.TaskDialogResult.Help"/> result),
              which allows you to cancel the close. If it isn't canceled, the dialog closes and
              sets the clicked button as result value.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogButton.Enabled">
            <summary>
              Gets or sets a value indicating whether the button can respond to user interaction.
            </summary>
            <value>
              <see langword="true"/> if the button can respond to user interaction; otherwise,
              <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
            <remarks>
            <para>
              This property can be set while the dialog is shown.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogButton.ElevationRequired">
            <summary>
              Gets or sets a value that indicates if the User Account Control (UAC) shield icon
              should be shown near the button; that is, whether the action invoked by the button
              requires elevation.
            </summary>
            <value>
              <see langword="true"/> to show the UAC shield icon; otherwise, <see langword="false"/>.
              The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
              This property can be set while the dialog is shown.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogButton.DefaultButton">
            <summary>
              Gets or sets a value that indicates whether this button is the default button
              in the task dialog.
            </summary>
            <value>
              <see langword="true"/> if this button is the default button in the task dialog;
              otherwise, <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
              Only a single button in a task dialog can be set as the default button.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogButton.PerformClick">
            <summary>
              Simulates a click on this button.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogButtons">
            <summary>
              Represents standard buttons of a task dialog.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogButtons.None">
            <summary>
              No standard button is added to the task dialog.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogButtons.OK">
            <summary>
              The task dialog contains a standard button representing an <see cref="F:System.Windows.Forms.TaskDialogResult.OK"/> result.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogButtons.Yes">
            <summary>
              The task dialog contains a standard button representing an <see cref="F:System.Windows.Forms.TaskDialogResult.Yes"/> result.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogButtons.No">
            <summary>
              The task dialog contains a standard button representing an <see cref="F:System.Windows.Forms.TaskDialogResult.No"/> result.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogButtons.Cancel">
            <summary>
              The task dialog contains a standard button representing an <see cref="F:System.Windows.Forms.TaskDialogResult.Cancel"/> result.
            </summary>
            <remarks>
            <para>
              Note: Adding a Cancel button will automatically add a close button
              to the task dialog's title bar and will allow to close the dialog by
              pressing ESC or Alt+F4 (just as if you enabled
              <see cref="P:System.Windows.Forms.TaskDialogPage.AllowCancel"/>).
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogButtons.Retry">
            <summary>
              The task dialog contains a standard button representing an <see cref="F:System.Windows.Forms.TaskDialogResult.Retry"/> result.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogButtons.Close">
            <summary>
              The task dialog contains a standard button representing an <see cref="F:System.Windows.Forms.TaskDialogResult.Close"/> result.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogButtons.Abort">
            <summary>
              The task dialog contains a standard button representing an <see cref="F:System.Windows.Forms.TaskDialogResult.Abort"/> result.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogButtons.Ignore">
            <summary>
              The task dialog contains a standard button representing an <see cref="F:System.Windows.Forms.TaskDialogResult.Ignore"/> result.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogButtons.TryAgain">
            <summary>
              The task dialog contains a standard button representing an <see cref="F:System.Windows.Forms.TaskDialogResult.TryAgain"/> result.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogButtons.Continue">
            <summary>
              The task dialog contains a standard button representing an <see cref="F:System.Windows.Forms.TaskDialogResult.Continue"/> result.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogButtons.Help">
            <summary>
              The task dialog contains a standard button representing an <see cref="F:System.Windows.Forms.TaskDialogResult.Help"/> result.
            </summary>
            <remarks>
            <para>
              Note: Clicking this button will not close the dialog, but will raise the
              <see cref="E:System.Windows.Forms.TaskDialogPage.HelpRequest"/> event.
            </para>
            </remarks>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogCheckBox">
            <summary>
              Represents a checkbox control of a task dialog.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.TaskDialogCheckBox.CheckedChanged">
            <summary>
              Occurs when the value of the <see cref="P:System.Windows.Forms.TaskDialogCheckBox.Checked"/> property changes while 
              this control is shown in a task dialog.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogCheckBox.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogCheckBox"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogCheckBox.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogCheckBox"/> class with
              the given text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogCheckBox.Text">
            <summary>
              Gets or sets the text associated with this control.
            </summary>
            <value>
              The text associated with this control. The default value is <see langword="null"/>.
            </value>
            <remarks>
            <para>
              This control is only shown if this property is not <see langword="null"/> or an empty string.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This control is currently bound to a task dialog.</exception>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogCheckBox.Checked">
            <summary>
              Gets or set a value indicating whether the <see cref="T:System.Windows.Forms.TaskDialogCheckBox"/> is in
              the checked state.
            </summary>
            <value>
              <see langword="true"/> if the <see cref="T:System.Windows.Forms.TaskDialogCheckBox"/> is in the checked state;
              otherwise, <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
              This property can be set while the dialog is shown.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogCheckBox.Focus">
            <summary>
              Sets input focus to the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogCheckBox.ToString">
            <summary>
              Returns a string that represents the current <see cref="T:System.Windows.Forms.TaskDialogCheckBox"/> control.
            </summary>
            <returns>The control text.</returns>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogClosingEventArgs">
            <summary>
              Provides data for the <see cref="E:System.Windows.Forms.TaskDialog.Closing"/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogClosingEventArgs.#ctor(System.Windows.Forms.TaskDialogButton)">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogClosingEventArgs"/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogClosingEventArgs.CloseButton">
            <summary>
              Gets the <see cref="T:System.Windows.Forms.TaskDialogButton"/> that is causing the task dialog
              to close.
            </summary>
            <value>
              The <see cref="T:System.Windows.Forms.TaskDialogButton"/> that is causing the task dialog
              to close.
            </value>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogControl">
            <summary>
              Represents a control of a task dialog.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogControl.Tag">
            <summary>
              Gets or sets the object that contains data about the control.
            </summary>
            <value>
              An <see cref="T:System.Object"/> that contains data about the control.
              The default is <see langword="null"/>.
            </value>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogControl.BoundPage">
            <summary>
              Gets the <see cref="T:System.Windows.Forms.TaskDialogPage"/> instance which this control
              is currently bound to.
            </summary>
            <value>
              The <see cref="T:System.Windows.Forms.TaskDialogPage"/> instance which this control is bound to, or 
              <see langword="null"/> if this control is not currently bound.
            </value>
            <remarks>
            <para>
              A control will be bound to a page while it is being displayed, for exactly the
              same time as the returned page is bound to a dialog that can be retrieved by
              <see cref="P:System.Windows.Forms.TaskDialogPage.BoundDialog"/>.
            </para>
            <para>
              While a control is bound to a page, you cannot show that control instance using a
              different <see cref="T:System.Windows.Forms.TaskDialogPage"/> instance at the same time.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogControl.IsCreatable">
            <summary>
              Gets a value that indicates whether the current state of this control
              allows it to be created in a task dialog when binding it.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogControl.IsCreated">
            <summary>
              Gets or sets a value that indicates whether this control has been created
              in a bound task dialog.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogControl.ApplyInitialization">
            <summary>
              Applies initialization after the task dialog is displayed or navigated.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogControl.BindCore">
            <summary>
              When overridden in a derived class, runs additional binding logic and returns
              flags to be specified before the task dialog is displayed or navigated.
            </summary>
            <remarks>
            <para>
              This method will only be called if <see cref="P:System.Windows.Forms.TaskDialogControl.IsCreatable"/> returns <see langword="true"/>.
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogControl.UnbindCore">
            <summary>
            
            </summary>
            <remarks>
            <para>
              This method will only be called if <see cref="M:System.Windows.Forms.TaskDialogControl.BindCore"/> was called.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogControl.ApplyInitializationCore">
            <summary>
              When overridden in a subclass, applies initialization after the task dialog
              is displayed or navigated.
            </summary>
            <remarks>
            <para>
              This method will only be called if <see cref="P:System.Windows.Forms.TaskDialogControl.IsCreatable"/> returns <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogCustomButton">
            <summary>
              Represents a button control of a task dialog that has a custom text.
            </summary>
            <remarks>
            <para>
              A custom button can either be displayed as regular button or as command link,
              depending on the value of <see cref="P:System.Windows.Forms.TaskDialogPage.CustomButtonStyle"/>.
            </para>
            <para>
              Note: The <see cref="P:System.Windows.Forms.TaskDialogPage.CustomButtonStyle"/> setting applies
              to all <see cref="T:System.Windows.Forms.TaskDialogCustomButton"/> instances of the page; it isn't
              possible to set it for individual buttons.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogCustomButton.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogCustomButton"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogCustomButton.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogCustomButton"/> class
              using the given text and, optionally, a description text.
            </summary>
            <param name="text">The text of the control.</param>
            <param name="descriptionText">An additional description text that will be displayed in
            a separate line when the <see cref="T:System.Windows.Forms.TaskDialogCustomButton"/>s of the task dialog are
            shown as command links (see <see cref="P:System.Windows.Forms.TaskDialogCustomButton.DescriptionText"/>).</param>
            <param name="defaultButton">A value that indicates whether this button is the default button
            in the task dialog.
            </param>
            <param name="allowCloseDialog">A value that indicates whether the task dialog should close
              when this button is clicked.
            </param>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogCustomButton.Text">
            <summary>
              Gets or sets the text associated with this control.
            </summary>
            <value>
              The text associated with this control. The default value is <see langword="null"/>.
            </value>
            <remarks>
            <para>
              This property must not be <see langword="null"/> or an empty string when showing or navigating
              the dialog; otherwise, the operation will fail.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This control is currently bound to a task dialog.</exception>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogCustomButton.DescriptionText">
            <summary>
              Gets or sets an additional description text that will be displayed in a separate
              line when the <see cref="T:System.Windows.Forms.TaskDialogCustomButton"/>s of the task dialog are shown
              as command links (when
            <see cref="P:System.Windows.Forms.TaskDialogPage.CustomButtonStyle"/> is set to
            <see cref="F:System.Windows.Forms.TaskDialogCustomButtonStyle.CommandLinks"/> or
            <see cref="F:System.Windows.Forms.TaskDialogCustomButtonStyle.CommandLinksNoIcon"/>).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogCustomButton.ToString">
            <summary>
              Returns a string that represents the current <see cref="T:System.Windows.Forms.TaskDialogCustomButton"/> control.
            </summary>
            <returns>A string that contains the control text.</returns>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogCustomButtonCollection">
            <summary>
              Represents a collection of <see cref="T:System.Windows.Forms.TaskDialogCustomButton"/> objects.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogCustomButtonCollection.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogCustomButtonCollection"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogCustomButtonCollection.Add(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
              Creates and adds a <see cref="T:System.Windows.Forms.TaskDialogCustomButton"/> to the collection.
            </summary>
            <param name="text">The text of the custom button.</param>
            <param name="descriptionText">The description text of the custom button.</param>
            <param name="enabled">A value indicating whether the button can respond to user interaction.</param>
            <param name="defaultButton">A value that indicates whether this button is the default button
              in the task dialog.
            </param>
            <param name="allowCloseDialog">A value that indicates whether the task dialog should close
              when this button is clicked.
            </param>
            <returns>The created <see cref="T:System.Windows.Forms.TaskDialogCustomButton"/>.</returns>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogCustomButtonCollection.SetItem(System.Int32,System.Windows.Forms.TaskDialogCustomButton)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogCustomButtonCollection.InsertItem(System.Int32,System.Windows.Forms.TaskDialogCustomButton)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogCustomButtonCollection.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogCustomButtonCollection.ClearItems">
            <inheritdoc/>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogCustomButtonStyle">
            <summary>
              Specifies how <see cref="T:System.Windows.Forms.TaskDialogCustomButton"/> instances are to be
              displayed in a task dialog.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogCustomButtonStyle.Default">
            <summary>
              Custom buttons should be displayed as normal buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogCustomButtonStyle.CommandLinks">
            <summary>
              Custom buttons should be displayed as command links.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogCustomButtonStyle.CommandLinksNoIcon">
            <summary>
              Custom buttons should be displayed as command links, but without an icon.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogExpander">
            <summary>
              Represents an expander button and the associated expanded area
              of a task dialog.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.TaskDialogExpander.ExpandedChanged">
            <summary>
              Occurs when the value of the <see cref="P:System.Windows.Forms.TaskDialogExpander.Expanded"/> property changes while
              this control is shown in a task dialog.
            </summary>
            <remarks>
            <para>
              This event will only occur when the expanded state is changed by the user,
              because it isn't possible to programmatically change the <see cref="P:System.Windows.Forms.TaskDialogExpander.Expanded"/>
              property while this control is shown in a task dialog.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogExpander.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogExpander"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogExpander.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogExpander"/> class
              using the given text.
            </summary>
            <param name="text">The text to be displayed in the dialog's expanded area.</param>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogExpander.Text">
            <summary>
              Gets or sets the text to be displayed in the dialog's expanded area.
            </summary>
            <value>
              The text to be displayed in the dialog's expanded area. The default value is
              <see langword="null"/>.
            </value>
            <remarks>
            <para>
              This control will only be shown if this property is not <see langword="null"/> or an empty string.
            </para>
            <para>
              This property can be set while the dialog is shown.</para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogExpander.ExpandedButtonText">
            <summary>
              Gets or sets the text to be displayed in the expander button when it
              is in the expanded state.
            </summary>
            <value>
              The text that is to be displayed in the expander button when it
              is in the expanded state, or <see langword="null"/> or an empty string to use a
              text provided by the operating system. The default value is <see langword="null"/>.
            </value>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogExpander.CollapsedButtonText">
            <summary>
              Gets or sets the text to be displayed in the expander button when it
              is in the collapsed state.
            </summary>
            <value>
              The text that is to be displayed in the expander button when it
              is in the collapsed state, or <see langword="null"/> or an empty string to use a
              text provided by the operating system. The default value is <see langword="null"/>.
            </value>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogExpander.Expanded">
            <summary>
              Gets or sets a value that indicates whether the expander button is in the
              expanded state (so that the dialog's expanded area is visible).
            </summary>
            <value>
              <see langword="true"/> if the expander button is in the expanded state; <see langword="false"/> if
              it's in the collapsed state. The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogExpander.Position">
            <summary>
              Gets or sets the <see cref="T:System.Windows.Forms.TaskDialogExpanderPosition"/> that specifies where
              the expanded area of the task dialog is to be displayed.
            </summary>
            <value>
              The <see cref="T:System.Windows.Forms.TaskDialogExpanderPosition"/> that specifies where the expanded area
              of the task dialog is to be displayed. The default is
              <see cref="F:System.Windows.Forms.TaskDialogExpanderPosition.AfterText"/>.
            </value>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogExpander.ToString">
            <summary>
              Returns a string that represents the current <see cref="T:System.Windows.Forms.TaskDialogExpander"/> control.
            </summary>
            <returns>A string that contains the control text.</returns>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogExpanderPosition">
            <summary>
              Specifies where the expanded area of the
              task dialog is to be displayed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogExpanderPosition.AfterText">
            <summary>
              The expanded area is to be displayed immediately after the
              dialog's text.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogExpanderPosition.AfterFooter">
            <summary>
              The expanded area is to be displayed at the bottom of the dialog's
              footer area.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogFooter">
            <summary>
              Represents the footer area of a task dialog.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogFooter.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogFooter"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogFooter.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogFooter"/> class
              using the given <paramref name="text"/>.
            </summary>
            <param name="text">The text to be displayed in the dialog's footer area.</param>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogFooter.Text">
            <summary>
              Gets or sets the text to be displayed in the dialog's footer area.
            </summary>
            <value>
              The text to be displayed in the dialog's footer area. The default value is <see langword="null"/>.
            </value>
            <remarks>
            <para>
              This control will only be shown if this property is not <see langword="null"/> or an empty string.
            </para>
            <para>
              This property can be set while the dialog is shown.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogFooter.Icon">
            <summary>
              Gets or sets the footer icon.
            </summary>
            <remarks>
            <para>
              This property can be set while the dialog is shown (but in that case, it
              cannot be switched between instances created from an
              <see cref="T:System.Drawing.Icon"/> (or from a handle pointer)
              and standard icon instances).
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogFooter.ToString">
            <summary>
              Returns a string that represents the current <see cref="T:System.Windows.Forms.TaskDialogFooter"/> control.
            </summary>
            <returns>A string that contains the control text.</returns>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogHyperlinkClickedEventArgs">
            <summary>
            Provides data for the <see cref="E:System.Windows.Forms.TaskDialogPage.HyperlinkClicked"/> event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogHyperlinkClickedEventArgs.Hyperlink">
            <summary>
            Gets the value of the <c>href</c> attribute of the hyperlink that the user clicked.
            </summary>
            <remarks>
            Note: In order to avoid possible security vulnerabilities when showing content
            from unsafe sources in a task dialog, you should always verify the value of this
            property before actually opening the link.
            </remarks>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogIcon">
            <summary>
              Represents an icon that can be shown in the main area of a task dialog
              (by setting the <see cref="P:System.Windows.Forms.TaskDialogPage.Icon"/> property) or in the
              footer of a task dialog (by setting the <see cref="P:System.Windows.Forms.TaskDialogFooter.Icon"/>
              property).
            </summary>
            <remarks>
            <para>
              The task dialog currently supports two icon types: Standard icons that are
              stored in static fields of class <see cref="T:System.Windows.Forms.TaskDialogIcon"/>, and custom icons
              created from an <see cref="T:System.Drawing.Icon"/> instance (or an icon handle).
            </para>
            <para>
              Some standard icons play a typical system sound when used as the main icon of
              the task dialog.
            </para>
            <para>
              Note that while a task dialog is shown, you can only update an icon if the
              new icon is of the same type (standard icon or custom icon) as the previous
              one.
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogIcon.None">
            <summary>
              Gets a standard <see cref="T:System.Windows.Forms.TaskDialogIcon"/> instance where the task dialog
              does not display an icon.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogIcon.Information">
            <summary>
              Gets a standard <see cref="T:System.Windows.Forms.TaskDialogIcon"/> instance where the task dialog
              contains a symbol consisting of a lowercase letter i in a circle.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogIcon.Warning">
            <summary>
              Gets a standard <see cref="T:System.Windows.Forms.TaskDialogIcon"/> instance where the task dialog
              contains an icon consisting of an exclamation point in a triangle with a yellow background.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogIcon.Error">
            <summary>
              Gets a standard <see cref="T:System.Windows.Forms.TaskDialogIcon"/> instance where the task dialog
              contains an icon consisting of white X in a circle with a red background.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogIcon.Shield">
            <summary>
              Gets a standard <see cref="T:System.Windows.Forms.TaskDialogIcon"/> instance where the task dialog
              contains an icon consisting of an user account control (UAC) shield.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogIcon.ShieldBlueBar">
            <summary>
              Gets a standard <see cref="T:System.Windows.Forms.TaskDialogIcon"/> instance where the task dialog
              contains an icon consisting of an user account control (UAC) shield and shows a blue bar around the icon.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogIcon.ShieldGrayBar">
            <summary>
              Gets a standard <see cref="T:System.Windows.Forms.TaskDialogIcon"/> instance where the task dialog
              contains an icon consisting of an user account control (UAC) shield and shows a gray bar around the icon.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogIcon.ShieldWarningYellowBar">
            <summary>
              Gets a standard <see cref="T:System.Windows.Forms.TaskDialogIcon"/> instance where the task dialog
              contains an icon consisting of an exclamation point in a yellow shield and shows a yellow bar around the icon.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogIcon.ShieldErrorRedBar">
            <summary>
              Gets a standard <see cref="T:System.Windows.Forms.TaskDialogIcon"/> instance where the task dialog
              contains an icon consisting of white X in a red shield and shows a red bar around the icon.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogIcon.ShieldSuccessGreenBar">
            <summary>
              Gets a standard <see cref="T:System.Windows.Forms.TaskDialogIcon"/> instance where the task dialog
              contains an icon consisting of white tick in a green shield and shows a green bar around the icon.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogIcon.#ctor(System.Drawing.Icon)">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogIcon"/> class from an
              <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="icon">The <see cref="T:System.Drawing.Icon"/> instance</param>
            <remarks>
            <para>
              The <see cref="T:System.Drawing.Icon"/> instance from which this <see cref="T:System.Windows.Forms.TaskDialogIcon"/>
              instance is created must not be disposed while the icon is shown in the task
              dialog.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogIcon.#ctor(System.IntPtr)">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogIcon"/> class from an
              icon handle.
            </summary>
            <param name="iconHandle"></param>
            <remarks>
            <para>
              The specified icon handle must not be released while the icon is shown in the
              task dialog.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogIcon.IconHandle">
            <summary>
              The icon handle (<c>HICON</c>) that is represented by this
              <see cref="T:System.Windows.Forms.TaskDialogIcon"/> instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">
              This <see cref="T:System.Windows.Forms.TaskDialogIcon"/> instance was not created using a
              constructor that takes an icon or icon handle.
            </exception>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogPage">
            <summary>
              Represents a page of content of a task dialog.
            </summary>
            <remarks>
            <para>
              It is possible to navigate a task dialog while it is shown by setting the
              <see cref="P:System.Windows.Forms.TaskDialog.Page"/> property to a different <see cref="T:System.Windows.Forms.TaskDialogPage"/>
              instance. For more information about navigation, see the
              <see cref="P:System.Windows.Forms.TaskDialog.Page"/> property.
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogPage.CustomButtonStartID">
            <summary>
              The start ID for custom buttons.
            </summary>
            <remarks>
            <para>
              We need to ensure we don't use a ID that is already used for a
              standard button (TaskDialogResult), so we start with 100 to be safe
              (100 is also used as first ID in MSDN examples for the task dialog).
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogPage.RadioButtonStartID">
            <summary>
              The start ID for radio buttons.
            </summary>
            <remarks>
            <para>
              This must be at least 1 because 0 already stands for "no button".
            </para>
            </remarks>
        </member>
        <member name="E:System.Windows.Forms.TaskDialogPage.Created">
            <summary>
              Occurs after this instance is bound to a task dialog and the task dialog
              has created the GUI elements represented by this <see cref="T:System.Windows.Forms.TaskDialogPage"/> instance.
            </summary>
            <remarks>
            <para>
              This will happen after showing or navigating the dialog.
            </para>
            <para>
              When this event occurs, the <see cref="P:System.Windows.Forms.TaskDialogPage.BoundDialog"/> property will return
              the <see cref="T:System.Windows.Forms.TaskDialog"/> instance which this page is bound to.
            </para>
            </remarks>
        </member>
        <member name="E:System.Windows.Forms.TaskDialogPage.Destroyed">
            <summary>
              Occurs when the task dialog is about to destroy the GUI elements represented
              by this <see cref="T:System.Windows.Forms.TaskDialogPage"/> instance and it is about to be
              unbound from the task dialog.
            </summary>
            <remarks>
            <para>
              This will happen when closing or navigating the dialog.
            </para>
            <para>
              After this event occurs, the <see cref="P:System.Windows.Forms.TaskDialogPage.BoundDialog"/> property will return
              <see langword="null"/>.
            </para>
            </remarks>
        </member>
        <member name="E:System.Windows.Forms.TaskDialogPage.HelpRequest">
            <summary>
              Occurs when the user presses F1 while the task dialog has focus, or when the
              user clicks the <see cref="F:System.Windows.Forms.TaskDialogResult.Help"/> button.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.TaskDialogPage.HyperlinkClicked">
            <summary>
              Occurs when the user has clicked on a hyperlink.
            </summary>
            <remarks>
            <para>
              This event will only be raised if <see cref="P:System.Windows.Forms.TaskDialogPage.EnableHyperlinks"/> is set to <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogPage.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogPage"/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.StandardButtons">
            <summary>
              Gets or sets the collection of standard buttons
              to be shown in this page.
            </summary>
            <value>
              The collection of standard buttons to be shown in this page.
            </value>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.CustomButtons">
            <summary>
              Gets or sets the collection of custom buttons
              to be shown in this page.
            </summary>
            <value>
              The collection of custom buttons to be shown in this page.
            </value>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.RadioButtons">
            <summary>
              Gets or sets the collection of radio buttons
              to be shown in this page.
            </summary>
            <value>
              The collection of radio buttons to be shown in this page.
            </value>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.CheckBox">
            <summary>
              Gets or sets the check box to be shown in this page.
            </summary>
            <remarks>
            <para>
              The check box will only be shown if its <see cref="P:System.Windows.Forms.TaskDialogCheckBox.Text"/> property
              is not <see langword="null"/> or an empty string.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.Expander">
            <summary>
              Gets or sets the dialog expander to be shown in this page.
            </summary>
            <remarks>
            <para>
              The expander button (and the expanded area) will only be shown if its
              <see cref="P:System.Windows.Forms.TaskDialogExpander.Text"/> property is not <see langword="null"/> or an empty string.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.Footer">
            <summary>
              Gets or sets the footer to be shown in this page.
            </summary>
            <remarks>
            <para>
              The footer will only be shown if its <see cref="P:System.Windows.Forms.TaskDialogFooter.Text"/> property
              is not <see langword="null"/> or an empty string.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.ProgressBar">
            <summary>
              Gets or sets the progress bar to be shown in this page.
            </summary>
            <remarks>
            <para>
              The progress bar will only be shown if its <see cref="P:System.Windows.Forms.TaskDialogProgressBar.State"/>
              property is not <see cref="F:System.Windows.Forms.TaskDialogProgressBarState.None"/>.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.Caption">
            <summary>
              Gets or sets the text to display in the title bar of the task dialog.
            </summary>
            <remarks>
            <para>
              This property can be set while the dialog is shown.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.MainInstruction">
            <summary>
              Gets or sets the main instruction text.
            </summary>
            <remarks>
            <para>
              This property can be set while the dialog is shown.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.Text">
            <summary>
              Gets or sets the dialog's primary text content.
            </summary>
            <remarks>
            <para>
              This property can be set while the dialog is shown.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.Icon">
            <summary>
              Gets or sets the main icon.
            </summary>
            <remarks>
            <para>
              This property can be set while the dialog is shown, however, it
              cannot be switched between instances created from an
              <see cref="T:System.Drawing.Icon"/> (or from a handle pointer)
              and standard icon instances.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.Width">
            <summary>
              Gets or sets the width in dialog units that the dialog's client area will get
              when the dialog is is created or navigated.
              If <c>0</c>, the width will be automatically calculated by the system.
            </summary>
            <value>
              The width in dialog units that the dialog's client area will get. The default is
              <c>0</c> which means the width is calculated by the system.
            </value>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.CustomButtonStyle">
            <summary>
              Gets or sets the <see cref="T:System.Windows.Forms.TaskDialogCustomButtonStyle"/> that specifies how to
              display custom buttons.
            </summary>
            <value>
              The <see cref="T:System.Windows.Forms.TaskDialogCustomButtonStyle"/> that specifies how to display custom
              buttons. The default value is <see cref="F:System.Windows.Forms.TaskDialogCustomButtonStyle.Default"/>.
            </value>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.EnableHyperlinks">
            <summary>
            <para>
              Gets or sets a value that specifies whether the task dialog should
              interpret strings in the form <c>&lt;a href="link"&gt;Hyperlink Text&lt;/a&gt;</c>
              as hyperlink when specified in the <see cref="P:System.Windows.Forms.TaskDialogPage.Text"/>,
              <see cref="P:System.Windows.Forms.TaskDialogFooter.Text"/>
              or <see cref="P:System.Windows.Forms.TaskDialogExpander.Text"/> properties.
              When the user clicks on such a link, the <see cref="E:System.Windows.Forms.TaskDialogPage.HyperlinkClicked"/>
              event is raised, containing the value of the <c>href</c> attribute.
            </para>
            <para>
              <b>Warning:</b> Enabling hyperlinks when using content from an unsafe source
              may cause security vulnerabilities.
            </para>
            </summary>
            <value>
              <see langword="true"/> to enable hyperlinks; otherwise, <see langword="false"/>. 
              The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
              The Task Dialog will not actually execute any hyperlinks.
              Hyperlink execution must be handled in the <see cref="E:System.Windows.Forms.TaskDialogPage.HyperlinkClicked"/> event.
            </para>
            <para>
              Note: Enabling this setting causes the <c>"&amp;"</c> character to be
              interpreted as prefix for an access key character (mnemonic) if at least
              one link is used.
            </para>
            <para>
              When you enable this setting and you want to display a text
              without interpreting links, you must replace the strings <c>"&lt;a"</c>
              and <c>"&lt;A"</c> with something like <c>"&lt;\u200Ba"</c>.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.AllowCancel">
            <summary>
              Gets or sets a value that indicates whether the task dialog can be closed with a
              <see cref="F:System.Windows.Forms.TaskDialogResult.Cancel"/> result by pressing ESC or Alt+F4 or by clicking
              the title bar's close button even if no button with a <see cref="F:System.Windows.Forms.TaskDialogResult.Cancel"/>
              result is added to the <see cref="P:System.Windows.Forms.TaskDialogPage.StandardButtons"/> collection.
            </summary>
            <value>
              <see langword="true"/> to allow to close the dialog by pressing ESC or Alt+F4 or by clicking
              the title bar's close button; otherwise, <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
              You can intercept cancellation of the dialog without displaying a "Cancel"
              button by adding a <see cref="T:System.Windows.Forms.TaskDialogStandardButton"/> with its
              <see cref="P:System.Windows.Forms.TaskDialogStandardButton.Visible"/> set to <see langword="false"/> and specifying
              a <see cref="F:System.Windows.Forms.TaskDialogResult.Cancel"/> result.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.RightToLeftLayout">
            <summary>
              Gets or sets a value that indicates whether text and controls are displayed
              reading right to left. 
            </summary>
            <value>
              <see langword="true"/> to display text and controls reading right to left; <see langword="false"/>
              to display controls reading left to right. The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
              Note that once a task dialog has been opened with or has navigated to a
              <see cref="T:System.Windows.Forms.TaskDialogPage"/> where this flag is set, it will keep on
              subsequent navigations to a new <see cref="T:System.Windows.Forms.TaskDialogPage"/> even when
              it doesn't have this flag set.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.AllowMinimize">
            <summary>
              Gets or sets a value that indicates whether the task dialog can be minimized
              when it is shown modeless.
            </summary>
            <value>
              <see langword="true"/> to specify that the task dialog can be minimized; otherwise, <see langword="false"/>.
              The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
              When setting this property to <see langword="true"/>, <see cref="P:System.Windows.Forms.TaskDialogPage.AllowCancel"/> is
              automatically implied.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.SizeToContent">
            <summary>
              Indicates that the width of the task dialog is determined by the width
              of its content area (similar to Message Box sizing behavior).
            </summary>
            <value>
              <see langword="true"/> to determine the width of the task dialog by the width of
              its content area; otherwise, <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
              This flag is ignored if <see cref="P:System.Windows.Forms.TaskDialogPage.Width"/> is not set to <c>0</c>.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.BoundDialog">
            <summary>
              Gets the <see cref="T:System.Windows.Forms.TaskDialog"/> instance which this page
              is currently bound to.
            </summary>
            <value>
              The <see cref="T:System.Windows.Forms.TaskDialog"/> instance which this page is bound to, or <see langword="null"/>
              if this page is not currently bound.
            </value>
            <remarks>
            <para>
              A page will be bound while it is being displayed, which is indicated by the events
              <see cref="E:System.Windows.Forms.TaskDialogPage.Created"/> and <see cref="E:System.Windows.Forms.TaskDialogPage.Destroyed"/>.
            </para>
            <para>
              While a page is bound to a task dialog, you cannot show that page instance using a
              different <see cref="T:System.Windows.Forms.TaskDialog"/> instance at the same time.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogPage.WaitingForInitialization">
            <summary>
              Gets a value that indicates if the <see cref="P:System.Windows.Forms.TaskDialogPage.BoundDialog"/>
              started navigation to this page but navigation did not yet complete
              (in which case we cannot modify the dialog even though we are bound).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogPage.OnCreated(System.EventArgs)">
            <summary>
              Raises the <see cref="E:System.Windows.Forms.TaskDialogPage.Created"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogPage.OnDestroyed(System.EventArgs)">
            <summary>
              Raises the <see cref="E:System.Windows.Forms.TaskDialogPage.Destroyed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogPage.OnHelpRequest(System.EventArgs)">
            <summary>
              Raises the <see cref="E:System.Windows.Forms.TaskDialogPage.HelpRequest"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogPage.OnHyperlinkClicked(System.Windows.Forms.TaskDialogHyperlinkClickedEventArgs)">
            <summary>
              Raises the <see cref="E:System.Windows.Forms.TaskDialogPage.HyperlinkClicked"/> event.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.TaskDialogHyperlinkClickedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogProgressBar">
            <summary>
              Represents a progress bar control of a task dialog.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogProgressBar.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogProgressBar"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogProgressBar.#ctor(System.Windows.Forms.TaskDialogProgressBarState)">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogProgressBar"/> class
              using the given <paramref name="state"/>.
            </summary>
            <param name="state">The state of the progress bar.</param>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogProgressBar.State">
            <summary>
              Gets or sets the state of the progress bar.
            </summary>
            <value>
              The state of the progress bar. The default is <see cref="F:System.Windows.Forms.TaskDialogProgressBarState.Normal"/>,
              except if this instance is the default instance created by a <see cref="T:System.Windows.Forms.TaskDialogPage"/>,
              where the default value is <see cref="F:System.Windows.Forms.TaskDialogProgressBarState.None"/>.
            </value>
            <remarks>
            <para>
              This control will only be shown if this property is not
              <see cref="F:System.Windows.Forms.TaskDialogProgressBarState.None"/>.
            </para>
            <para>
              This property can be set while the dialog is shown. However, while the dialog is
              shown, it is not possible to change the state from
              <see cref="F:System.Windows.Forms.TaskDialogProgressBarState.None"/> to any other state,
              and vice versa.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogProgressBar.Minimum">
            <summary>
              Gets or sets the minimum value of the range of the control.
            </summary>
            <value>
              The minimum value of the range. The default is <c>0</c>.
            </value>
            <remarks>
            <para>
              This value is only used if the progress bar is not a marquee progress bar (as defined
              by the <see cref="P:System.Windows.Forms.TaskDialogProgressBar.State"/> property).
            </para>
            <para>
              This property can be set while the dialog is shown.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogProgressBar.Maximum">
            <summary>
              Gets or sets the maximum value of the range of the control.
            </summary>
            <value>
              The maximum value of the range. The default is <c>100</c>.
            </value>
            <remarks>
            <para>
              This value is only used if the progress bar is not a marquee progress bar (as defined
              by the <see cref="P:System.Windows.Forms.TaskDialogProgressBar.State"/> property).
            </para>
            <para>
              This property can be set while the dialog is shown.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogProgressBar.Value">
            <summary>
              Gets or sets the current position of the progress bar.
            </summary>
            <value>
              The position within the range of the progress bar. The default is <c>0</c>.
            </value>
            <remarks>
            <para>
              This value is only used if the progress bar is not a marquee progress bar (as defined
              by the <see cref="P:System.Windows.Forms.TaskDialogProgressBar.State"/> property).
            </para>
            <para>
              This property can be set while the dialog is shown.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogProgressBar.MarqueeSpeed">
            <summary>
              Gets or sets the speed of the marquee display of a progress bar.
            </summary>
            <value>
              The speed of the marquee display which is the time, in milliseconds, between marquee
              animation updates. If this value is <c>0</c>, the marquee animation is updated every
              30 milliseconds. The default value is <c>0</c>.
            </value>
            <remarks>
            <para>
              This value is only used if the progress bar is a marquee progress bar (as defined
              by the <see cref="P:System.Windows.Forms.TaskDialogProgressBar.State"/> property).
            </para>
            <para>
              This property can be set while the dialog is shown.
            </para>
            </remarks>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogProgressBarState">
            <summary>
              Contains constants that specify the state of a task dialog progress bar.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogProgressBarState.Normal">
            <summary>
              Shows a regular progress bar.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogProgressBarState.Paused">
            <summary>
              Shows a paused (yellow) progress bar.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogProgressBarState.Error">
            <summary>
              Shows an error (red) progress bar.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogProgressBarState.Marquee">
            <summary>
              Shows a marquee progress bar.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogProgressBarState.MarqueePaused">
            <summary>
              Shows a marquee progress bar where the marquee animation is paused.
            </summary>
            <remarks>
            <para>
              If you switch from <see cref="F:System.Windows.Forms.TaskDialogProgressBarState.Marquee"/> to <see cref="F:System.Windows.Forms.TaskDialogProgressBarState.MarqueePaused"/> while the
              dialog is shown, the  marquee animation will stop.
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogProgressBarState.None">
            <summary>
              The progress bar will not be displayed.
            </summary>
            <remarks>
            <para>
              Note: While the dialog is showing, you cannot switch from
              <see cref="F:System.Windows.Forms.TaskDialogProgressBarState.None"/> to any other state, and vice versa.
            </para>
            </remarks>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogRadioButton">
            <summary>
              Represents a radio button control of a task dialog.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.TaskDialogRadioButton.CheckedChanged">
            <summary>
              Occurs when the value of the <see cref="P:System.Windows.Forms.TaskDialogRadioButton.Checked"/> property changes
              while this control is shown in a task dialog.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogRadioButton.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogCustomButton"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogRadioButton.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogCustomButton"/> class
              using the given <paramref name="text"/> and optionally a <paramref name="descriptionText"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogRadioButton.Enabled">
            <summary>
              Gets or sets a value indicating whether the button can respond to user interaction.
            </summary>
            <value>
            <see langword="true"/> if the button can respond to user interaction; otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
            <remarks>
            <para>
              This property can be set while the dialog is shown.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This control is currently bound to a task dialog
            but it has not been created.</exception>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogRadioButton.Text">
            <summary>
              Gets or sets the text associated with this control.
            </summary>
            <value>
              The text associated with this control. The default value is <see langword="null"/>.
            </value>
            <remarks>
            <para>
              This property must not be <see langword="null"/> or an empty string when showing or navigating
              the dialog; otherwise the operation will fail.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This control is currently bound to a task dialog.</exception>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogRadioButton.Checked">
            <summary>
              Gets or set a value indicating whether the <see cref="T:System.Windows.Forms.TaskDialogRadioButton"/> is
              in the checked state.
            </summary>
            <value>
              <see langword="true"/> if the <see cref="T:System.Windows.Forms.TaskDialogRadioButton"/> is in the checked state;
              otherwise, <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
              While the dialog is shown, this property can only be set to <see langword="true"/> and you cannot
              set it from within the <see cref="E:System.Windows.Forms.TaskDialogRadioButton.CheckedChanged"/> event.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogRadioButton.ToString">
            <summary>
              Returns a string that represents the current <see cref="T:System.Windows.Forms.TaskDialogRadioButton"/> control.
            </summary>
            <returns>A string that contains the control text.</returns>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogRadioButtonCollection">
            <summary>
              Represents a collection of <see cref="T:System.Windows.Forms.TaskDialogRadioButton"/> objects.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogRadioButtonCollection.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogRadioButtonCollection"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogRadioButtonCollection.Add(System.String)">
            <summary>
              Creates and adds a <see cref="T:System.Windows.Forms.TaskDialogRadioButton"/> to the collection.
            </summary>
            <param name="text">The text of the radio button.</param>
            <returns>The created <see cref="T:System.Windows.Forms.TaskDialogRadioButton"/>.</returns>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogRadioButtonCollection.SetItem(System.Int32,System.Windows.Forms.TaskDialogRadioButton)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogRadioButtonCollection.InsertItem(System.Int32,System.Windows.Forms.TaskDialogRadioButton)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogRadioButtonCollection.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogRadioButtonCollection.ClearItems">
            <inheritdoc/>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogResult">
            <summary>
            Specifies identifiers to indicate the return value of a task dialog.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogResult.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogResult.OK">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogResult.Cancel">
            <summary>
            
            </summary>
            <remarks>
            <para>
              Note: Adding a Cancel button will automatically add a close button
              to the task dialog's title bar and will allow to close the dialog by
              pressing ESC or Alt+F4 (just as if you enabled
              <see cref="P:System.Windows.Forms.TaskDialogPage.AllowCancel"/>).
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogResult.Abort">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogResult.Retry">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogResult.Ignore">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogResult.Yes">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogResult.No">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogResult.Close">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogResult.Help">
            <summary>
            
            </summary>
            <remarks>
            <para>
              Note: Clicking this button will not close the dialog, but will raise the
              <see cref="E:System.Windows.Forms.TaskDialogPage.HelpRequest"/> event.
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogResult.TryAgain">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogResult.Continue">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogStandardButton">
            <summary>
              Represents a standard ("common") button of a task dialog whose text and function
              is defined by a <see cref="T:System.Windows.Forms.TaskDialogResult"/> value.
            </summary>
            <remarks>
            <para>
              The text of a <see cref="T:System.Windows.Forms.TaskDialogStandardButton"/> is provided by the operating system,
              depending on the <see cref="T:System.Windows.Forms.TaskDialogResult"/> that the button uses.
            </para>
            <para>
              In contrast to a <see cref="T:System.Windows.Forms.TaskDialogCustomButton"/> that can be shown as regular button
              or as command link, a <see cref="T:System.Windows.Forms.TaskDialogStandardButton"/> is always shown as
              regular button.
            </para>
            <para>
              Showing a <see cref="T:System.Windows.Forms.TaskDialogButton"/> with a <see cref="F:System.Windows.Forms.TaskDialogResult.Cancel"/>
              result in a task dialog will add a close button to the task dialog title bar and will
              allow to close the dialog by pressing ESC or Alt+F4 (just as if
              <see cref="P:System.Windows.Forms.TaskDialogPage.AllowCancel"/> was set to <see langword="true"/>).
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogStandardButton.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogStandardButton"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogStandardButton.#ctor(System.Windows.Forms.TaskDialogResult,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogStandardButton"/> class
              using the specified result.
            </summary>
            <param name="result">The <see cref="T:System.Windows.Forms.TaskDialogResult"/> that is represent by this 
              <see cref="T:System.Windows.Forms.TaskDialogStandardButton"/> and which defines the text of the button.
            </param>
            <param name="enabled">A value indicating whether the button can respond to user interaction.</param>
            <param name="defaultButton">A value that indicates whether this button is the default button
              in the task dialog.
            </param>
            <param name="allowCloseDialog">A value that indicates whether the task dialog should close
              when this button is clicked.
            </param>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogStandardButton.Result">
            <summary>
              Gets or sets the <see cref="T:System.Windows.Forms.TaskDialogResult"/> which is represented by
              this <see cref="T:System.Windows.Forms.TaskDialogStandardButton"/> and which defines the text
              of the button.
            </summary>
            <value>
              The <see cref="T:System.Windows.Forms.TaskDialogResult"/> which is represented by
              this <see cref="T:System.Windows.Forms.TaskDialogStandardButton"/>.
            </value>
            <remarks>
            <para>
              The text of the button will be provided by the operating system depending
              on this value.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogStandardButton.Visible">
            <summary>
              Gets or sets a value that indicates if this
              <see cref="T:System.Windows.Forms.TaskDialogStandardButton"/> should be shown when displaying
              the task dialog.
            </summary>
            <remarks>
            <para>
              Setting this property to <see langword="false"/> allows you to still receive the
              <see cref="E:System.Windows.Forms.TaskDialogButton.Click"/> event (e.g. for the
              <see cref="F:System.Windows.Forms.TaskDialogResult.Cancel"/> button when
              <see cref="P:System.Windows.Forms.TaskDialogPage.AllowCancel"/> is set), or to call the
              <see cref="M:System.Windows.Forms.TaskDialogButton.PerformClick"/> method even if the button
              is not shown.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogStandardButton.ToString">
            <summary>
              Returns a string that represents the current <see cref="T:System.Windows.Forms.TaskDialogRadioButton"/> control.
            </summary>
            <returns>A string that contains the name of the <see cref="T:System.Windows.Forms.TaskDialogResult"/> value.</returns>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogStandardButtonCollection">
            <summary>
              Represents a collection of <see cref="T:System.Windows.Forms.TaskDialogStandardButton"/> objects.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogStandardButtonCollection.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogStandardButtonCollection"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogStandardButtonCollection.op_Implicit(System.Windows.Forms.TaskDialogButtons)~System.Windows.Forms.TaskDialogStandardButtonCollection">
            <summary>
              Converts the specified <see cref="T:System.Windows.Forms.TaskDialogButtons"/> flags into a new
              <see cref="T:System.Windows.Forms.TaskDialogStandardButtonCollection"/> containing an
              <see cref="T:System.Windows.Forms.TaskDialogStandardButton"/> instance for each flag.
            </summary>
            <param name="buttons">The flags to convert.</param>
        </member>
        <member name="P:System.Windows.Forms.TaskDialogStandardButtonCollection.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is equal to or greater than <see cref="!:Count"/>.</exception>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogStandardButtonCollection.Add(System.Windows.Forms.TaskDialogResult,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
              Creates and adds a <see cref="T:System.Windows.Forms.TaskDialogStandardButton"/> to the collection.
            </summary>
            <param name="result">The <see cref="T:System.Windows.Forms.TaskDialogResult"/> that is represented by the
              <see cref="T:System.Windows.Forms.TaskDialogStandardButton"/>.</param>
            <param name="enabled">A value indicating whether the button can respond to user interaction.</param>
            <param name="defaultButton">A value that indicates whether this button is the default button
              in the task dialog.
            </param>
            <param name="allowCloseDialog">A value that indicates whether the task dialog should close
              when this button is clicked.
            </param>
            <returns>The created <see cref="T:System.Windows.Forms.TaskDialogStandardButton"/>.</returns>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogStandardButtonCollection.GetKeyForItem(System.Windows.Forms.TaskDialogStandardButton)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogStandardButtonCollection.SetItem(System.Int32,System.Windows.Forms.TaskDialogStandardButton)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogStandardButtonCollection.InsertItem(System.Int32,System.Windows.Forms.TaskDialogStandardButton)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogStandardButtonCollection.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Windows.Forms.TaskDialogStandardButtonCollection.ClearItems">
            <inheritdoc/>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogStandardIcon">
            <summary>
              Contains constants for predefined icons of a task dialog.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogStandardIcon.None">
            <summary>
              The task dialog does not display an icon.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogStandardIcon.Information">
            <summary>
              The task dialog contains a symbol consisting of a lowercase letter i in a circle.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogStandardIcon.Warning">
            <summary>
              The task dialog contains an icon consisting of an exclamation point in a triangle with a yellow background.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogStandardIcon.Error">
            <summary>
              The task dialog contains an icon consisting of white X in a circle with a red background.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogStandardIcon.Shield">
            <summary>
              The task dialog contains an icon consisting of an user account control (UAC) shield.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogStandardIcon.ShieldBlueBar">
            <summary>
              The task dialog contains an icon consisting of an user account control (UAC) shield and shows a blue bar around the icon.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogStandardIcon.ShieldGrayBar">
            <summary>
              The task dialog contains an icon consisting of an user account control (UAC) shield and shows a gray bar around the icon.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogStandardIcon.ShieldWarningYellowBar">
            <summary>
              The task dialog contains an icon consisting of an exclamation point in a yellow shield and shows a yellow bar around the icon.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogStandardIcon.ShieldErrorRedBar">
            <summary>
              The task dialog contains an icon consisting of white X in a red shield and shows a red bar around the icon.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogStandardIcon.ShieldSuccessGreenBar">
            <summary>
              The task dialog contains an icon consisting of white tick in a green shield and shows a green bar around the icon.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TaskDialogStartupLocation">
            <summary>
            Specifies the position that a task dialog will be shown in when it is first opened.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogStartupLocation.CenterScreen">
            <summary>
              The startup location of the task dialog is the center of the screen.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TaskDialogStartupLocation.CenterParent">
            <summary>
              The startup location of the task dialog is the center of the window that owns it,
              as specified by the <c>owner</c> parameter.
            </summary>
            <remarks>
            <para>
              This value will only have an effect when showing a modal dialog.
            </para>
            </remarks>
        </member>
        <member name="T:System.Windows.Forms.TextBox">
            <summary>
             Represents a Windows text box control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextBox.acceptsReturn">
            <summary>
             Controls whether or not the edit box consumes/respects ENTER key
             presses.  While this is typically desired by multiline edits, this
             can interfere with normal key processing in a dialog.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextBox.passwordChar">
            <summary>
             Indicates what the current special password character is.  This is
             displayed instead of any other text the user might enter.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextBox.characterCasing">
            <summary>
             Controls whether or not the case of characters entered into the edit
             box is forced to a specific case.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextBox.scrollBars">
            <summary>
             Controls which scrollbars appear by default.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextBox.textAlign">
            <summary>
             Controls text alignment in the edit box.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextBox.selectionSet">
            <summary>
             True if the selection has been set by the user.  If the selection has
             never been set and we get focus, we focus all the text in the control
             so we mimic the Windows dialog manager.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextBox.autoCompleteMode">
            <summary>
             This stores the value for the autocomplete mode which can be either
             None, AutoSuggest, AutoAppend or AutoSuggestAppend.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextBox.autoCompleteSource">
            <summary>
             This stores the value for the autoCompleteSource mode which can be one of the values
             from AutoCompleteSource enum.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextBox.autoCompleteCustomSource">
            <summary>
             This stores the custom StringCollection required for the autoCompleteSource when its set to CustomSource.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBox.AcceptsReturn">
            <summary>
             Gets or sets a value indicating whether pressing ENTER
             in a multiline <see cref='T:System.Windows.Forms.TextBox'/>
             control creates a new line of text in the control or activates the default button
             for the form.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBox.AutoCompleteMode">
            <summary>
             This is the AutoCompleteMode which can be either
             None, AutoSuggest, AutoAppend or AutoSuggestAppend.
             This property in conjunction with AutoCompleteSource enables the AutoComplete feature for TextBox.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBox.AutoCompleteSource">
            <summary>
             This is the AutoCompleteSource which can be one of the
             values from AutoCompleteSource enumeration.
             This property in conjunction with AutoCompleteMode enables the AutoComplete feature for TextBox.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBox.AutoCompleteCustomSource">
            <summary>
             This is the AutoCompleteCustomSource which is custom StringCollection used when the
             AutoCompleteSource is CustomSource.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBox.CharacterCasing">
            <summary>
             Gets or sets whether the TextBox control
             modifies the case of characters as they are typed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBox.PasswordProtect">
            <summary>
             Determines if the control is in password protect mode.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBox.CreateParams">
            <summary>
             Returns the parameters needed to create the handle. Inheriting classes
             can override this to provide extra functionality. They should not,
             however, forget to call base.getCreateParams() first to get the struct
             filled up with the basic info.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBox.PasswordChar">
            <summary>
             Gets or sets the character used to mask characters in a single-line text box
             control used to enter passwords.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBox.ScrollBars">
            <summary>
             Gets or sets which scroll bars should
             appear in a multiline <see cref='T:System.Windows.Forms.TextBox'/>
             control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBox.Text">
            <summary>
             Gets or sets
             the current text in the text box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBox.TextAlign">
            <summary>
             Gets or sets how text is
             aligned in a <see cref='T:System.Windows.Forms.TextBox'/>
             control.
             Note: This code is duplicated in MaskedTextBox for simplicity.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBox.UseSystemPasswordChar">
            <summary>
             Indicates if the text in the edit control should appear as
             the default password character. This property has precedence
             over the PasswordChar property.  Whenever the UseSystemPasswordChar
             is set to true, the default system password character is used,
             any character set into PasswordChar is ignored.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
             Overridden to handle RETURN key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBox.OnGotFocus(System.EventArgs)">
            <summary>
             Overrideen to focus the text on first focus.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBox.OnHandleCreated(System.EventArgs)">
            <summary>
             Overridden to update the newly created handle with the settings of the
             PasswordChar properties.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
             Process a command key.
             Native "EDIT" control does not support "Select All" shorcut represented by Ctrl-A keys, when in multiline mode,
             Winforms TextBox supports this in .NET.
            </summary>
            <param name="m">The current windows message.</param>
            <param name="keyData">The bitmask containing one or more keys.</param>
        </member>
        <member name="M:System.Windows.Forms.TextBox.Paste(System.String)">
            <summary>
             Replaces the portion of the text specified by startPos and length with the one passed in,
             without resetting the undo buffer (if any).
             This method is provided as an alternative to SelectedText which clears the undo buffer.
             Observe that this method does not honor the MaxLength property as the parameter-less base's
             Paste does
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBox.SelectInternal(System.Int32,System.Int32,System.Int32)">
            <summary>
             Performs the actual select without doing arg checking.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBox.SetAutoComplete(System.Boolean)">
            <summary>
             Sets the AutoComplete mode in TextBox.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBox.ResetAutoComplete(System.Boolean)">
            <summary>
             Resets the AutoComplete mode in TextBox.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBox.PlaceholderText">
            <summary>
             Gets or sets the text that is displayed when the control has no text and does not have the focus.
            </summary>
            <value>The text that is displayed when the control has no text and does not have the focus.</value>
        </member>
        <member name="M:System.Windows.Forms.TextBox.DrawPlaceholderText(System.Drawing.Graphics)">
            <summary>
             Draws the <see cref="P:System.Windows.Forms.TextBox.PlaceholderText"/> in the client area of the <see cref="T:System.Windows.Forms.TextBox"/> using the default font and color.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
             The edits window procedure.  Inheritng classes can override this
             to add extra functionality, but should not forget to call
             base.wndProc(m); to ensure the combo continues to function properly.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxAutoCompleteSourceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Gets a collection of standard values for the data type this validator is
             designed for.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TextBoxBase">
            <summary>
             Implements the basic functionality required by text
             controls.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextBoxBase.borderStyle">
            <summary>
             The current border for this edit control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextBoxBase.maxLength">
            <summary>
             Controls the maximum length of text in the edit control.
             Matches the Windows limit.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextBoxBase.requestedHeight">
            <summary>
             Used by the autoSizing code to help figure out the desired height of
             the edit box.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TextBoxBase.doubleClickFired">
            <summary>
             Controls firing of click event (Left click).
             This is used by TextBox, RichTextBox and MaskedTextBox, code was moved down from TextBox/RichTextBox
             but cannot make it as default behavior to avoid introducing breaking changes.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.#ctor">
            <summary>
             Creates a new TextBox control.  Uses the parent's current font and color
             set.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.AcceptsTab">
            <summary>
             Gets or sets
             a value indicating whether pressing the TAB key
             in a multiline text box control types
             a TAB character in the control instead of moving the focus to the next control
             in the tab order.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.ShortcutsEnabled">
            <summary>
             Gets or sets a value indicating whether the following shortcuts should be enabled or not:
             Ctrl-Z, Ctrl-C, Ctrl-X, Ctrl-V, Ctrl-A, Ctrl-L, Ctrl-R, Ctrl-E, Ctrl-I, Ctrl-Y,
             Ctrl-BackSpace, Ctrl-Del, Shift-Del, Shift-Ins.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
             Implements the <see cref='P:System.Windows.Forms.TextBoxBase.ShortcutsEnabled'/> property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.AutoSize">
             <summary>
              Gets or sets a value indicating whether the size
              of the control automatically adjusts when the font assigned to the control
              is changed.
            
              Note: this works differently than other Controls' AutoSize, so we're hiding
              it to avoid confusion.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.BackColor">
            <summary>
             Gets or sets the background color of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.BorderStyle">
            <summary>
             Gets or sets the border type
             of the text box control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.CanEnableIme">
            <summary>
             Specifies whether the ImeMode can be enabled - See also ImeModeBase.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.CanUndo">
            <summary>
             Gets a value
             indicating whether the user can undo the previous operation in a text box control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.CreateParams">
            <summary>
             Returns the parameters needed to create the handle. Inheriting classes
             can override this to provide extra functionality. They should not,
             however, forget to call base.getCreateParams() first to get the struct
             filled up with the basic info.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.DoubleBuffered">
            <summary>
             This property is overridden and hidden from statement completion
             on controls that are based on Win32 Native Controls.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.ForeColor">
            <summary>
             Gets or sets the foreground color of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.HideSelection">
            <summary>
             Gets or sets a value indicating whether the selected
             text in the text box control remains highlighted when the control loses focus.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.ImeModeBase">
            <summary>
             Internal version of ImeMode property.  The ImeMode of TextBoxBase controls depend on its IME restricted
             mode which is determined by the CanEnableIme property which checks whether the control is in Password or
             ReadOnly mode.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.Lines">
            <summary>
             Gets or
             sets the lines of text in an text box control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.MaxLength">
            <summary>
             Gets or sets the maximum number of
             characters the user can type into the text box control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.Modified">
            <summary>
             Gets or sets a value that indicates that the text box control has been modified by the user since
             the control was created or its contents were last set.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.Multiline">
            <summary>
             Gets or sets a value indicating whether this
             is a multiline text box control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.PasswordProtect">
            <summary>
             Determines if the control is in password protect mode.  This is overridden in TextBox and
             MaskedTextBox and is false by default so RichTextBox that doesn't support Password doesn't
             have to care about this.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.PreferredHeight">
            <summary>
             Returns the preferred
             height for a single-line text box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.GetSelectionStartAndLength(System.Int32@,System.Int32@)">
            <summary>
             Get the currently selected text start position and length.  Use this method internally
             to avoid calling SelectionStart + SelectionLength each of which does essentially the
             same (save one message round trip).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.ReadOnly">
            <summary>
             Gets or sets a value indicating whether text in the text box is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.SelectedText">
            <summary>
             The currently selected text in the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.SetSelectedTextInternal(System.String,System.Boolean)">
            <summary>
             Replaces the selected text with the one passed in.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.SelectionLength">
            <summary>
             Gets or sets the number of characters selected in the text
             box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.SelectionStart">
            <summary>
             Gets or sets the starting
             point of text selected in the text
             box.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.Text">
            <summary>
             Gets or sets
             the current text in the text box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.ForceWindowText(System.String)">
            <summary>
             In certain circumstances we might have to force
             text into the window whether or not the text is the same.
             Make this a method on TextBoxBase rather than RichTextBox (which is the only
             control that needs this at this point), since we need to set codeUpdateText.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxBase.WordWrap">
            <summary>
             Gets or sets a value indicating whether a
             multiline text box control automatically wraps words to the beginning of the next
             line when necessary.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.AdjustHeight(System.Boolean)">
            <summary>
             Adjusts the height of a single-line edit control to match the height of
             the control's font.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.AppendText(System.String)">
            <summary>
             Append text to the current text of text box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.Clear">
            <summary>
             Clears all text from the text box control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.ClearUndo">
            <summary>
             Clears information about the most recent operation
             from the undo buffer of the text box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.Copy">
            <summary>
             Copies the current selection in the text box to the Clipboard.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.Cut">
            <summary>
             Moves the current selection in the text box to the Clipboard.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.GetEndPosition">
            <summary>
             Returns the text end position (one past the last input character).  This property is virtual to allow MaskedTextBox
             to set the last input char position as opposed to the last char position which may be a mask character.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
             Overridden to handle TAB key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.OnHandleCreated(System.EventArgs)">
            <summary>
             Overridden to update the newly created handle with the settings of the
             MaxLength and PasswordChar properties.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.Paste">
            <summary>
             Replaces the current selection in the text box with the contents of the Clipboard.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.TextBoxBase.Paint">
            <summary>
             TextBox / RichTextBox Onpaint.
            </summary>
            <hideinheritance/>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the MouseUp event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.GetCharFromPosition(System.Drawing.Point)">
            <summary>
             Returns the character nearest to the given point.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.GetCharIndexFromPosition(System.Drawing.Point)">
            <summary>
             Returns the index of the character nearest to the given point.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.GetLineFromCharIndex(System.Int32)">
            <summary>
             Returns the number of the line containing a specified character position
             in a textbox. Note that this returns the physical line number
             and not the conceptual line number. For example, if the first conceptual
             line (line number 0) word-wraps and extends to the second line, and if
             you pass the index of a overflowed character, GetLineFromCharIndex would
             return 1 and not 0.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.GetPositionFromCharIndex(System.Int32)">
            <summary>
             Returns the location of the character at the given index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.GetFirstCharIndexFromLine(System.Int32)">
            <summary>
             Returns the index of the first character of a given line. Returns -1 of lineNumber is invalid.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.GetFirstCharIndexOfCurrentLine">
            <summary>
             Returns the index of the first character of the line where the caret is.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.ScrollToCaret">
            <summary>
             Ensures that the caret is visible in the TextBox window, by scrolling the
             TextBox control surface if necessary.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.DeselectAll">
            <summary>
             Sets the SelectionLength to 0.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.Select(System.Int32,System.Int32)">
            <summary>
             Selects a range of text in the text box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.SelectInternal(System.Int32,System.Int32,System.Int32)">
             <summary>
              Performs the actual select without doing arg checking.
            
              Send in -1 for the textLen parameter if you don't have the text
              length cached when calling this method. It will be computed.
              But if you do have it cached, please pass it in. This will avoid
              the expensive call to the TextLength property.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.SelectAll">
            <summary>
             Selects all text in the text box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Overrides Control.setBoundsCore to enforce autoSize.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.ToUnicodeOffsets(System.String,System.Int32@,System.Int32@)">
            <summary>
             Converts byte offsset to unicode offsets.
             When procssing WM_GETSEL/WM_SETSEL, EDIT control works with byte offsets instead of character positions
             as opposed to RICHEDIT which does it always as character positions.
             This method is used when handling the WM_GETSEL message.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.ToDbcsOffsets(System.String,System.Int32@,System.Int32@)">
            <summary>
             Converts unicode offsset to byte offsets.
             When procssing WM_GETSEL/WM_SETSEL, EDIT control works with byte offsets instead of character positions
             as opposed to RICHEDIT which does it always as character positions.
             This method is used when handling the WM_SETSEL message.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.ToString">
            <summary>
             Provides some interesting information for the TextBox control in
             String form.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.Undo">
            <summary>
             Undoes the last edit operation in the text box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.WmTextBoxContextMenu(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_CONTEXTMENU message based on this
             table:
             ShortcutsEnabled    #1      #2      #3
             Yes                 strip   context system
             No                  strip   context N/A
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxBase.WndProc(System.Windows.Forms.Message@)">
            <summary>
             The control's window procedure.  Inheriting classes can override this
             to add extra functionality, but should not forget to call
             base.wndProc(m); to ensure the control continues to function properly.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TextBoxRenderer">
            <summary>
             This is a rendering class for the TextBox control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TextBoxRenderer.IsSupported">
            <summary>
             Returns true if this class is supported for the current OS and user/application settings,
             otherwise returns false.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxRenderer.DrawTextBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.TextBoxState)">
            <summary>
             Renders a TextBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxRenderer.DrawTextBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Windows.Forms.VisualStyles.TextBoxState)">
            <summary>
             Renders a TextBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxRenderer.DrawTextBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.TextBoxState)">
            <summary>
             Renders a TextBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxRenderer.DrawTextBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Windows.Forms.TextFormatFlags,System.Windows.Forms.VisualStyles.TextBoxState)">
            <summary>
             Renders a TextBox control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TextBoxRenderer.DrawTextBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Windows.Forms.TextFormatFlags,System.Windows.Forms.VisualStyles.TextBoxState)">
            <summary>
             Renders a TextBox control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TextDataFormat">
            <summary>
             Specifies the formats that can be used with Clipboard.GetText and
             Clipboard.SetText methods
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TextImageRelation">
            <summary>
             Defined in such a way that you can cast the relation to an AnchorStyle and
             the direction of the AnchorStyle points to where the image goes.
             (e.g., (AnchorStyle)ImageBeforeText -> Left))
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThreadExceptionDialog">
            <summary>
             Implements a dialog box that is displayed when an unhandled exception occurs in
             a thread.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ThreadExceptionDialog.#ctor(System.Exception)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.ThreadExceptionDialog'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ThreadExceptionDialog.AutoSize">
            <summary>
             Hide the property
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ThreadExceptionDialog.DetailsClick(System.Object,System.EventArgs)">
            <summary>
             Called when the details button is clicked.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TickStyle">
            <summary>
             Specifies the location of tick marks in a <see cref='T:System.Windows.Forms.TrackBar'/>
             control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TickStyle.None">
            <summary>
             No tick marks appear in the control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TickStyle.TopLeft">
            <summary>
             Tick marks are located on the top of horizontal control or on the
             left of a vertical control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TickStyle.BottomRight">
            <summary>
             Tick marks are located on the bottom of a horizontal control or on the
             right side of a vertical control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TickStyle.Both">
            <summary>
             Tick marks are located on both sides of the control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Timer">
            <summary>
             Implements a Windows-based timer that raises an event at user-defined intervals.
             This timer is optimized for use in Win Forms applications and must be used in a window.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Timer.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Timer'/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.Timer'/> class with the specified container.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Timer.Tick">
            <summary>
             Occurs when the specified timer interval has elapsed and the timer is enabled.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Timer.Dispose(System.Boolean)">
            <summary>
             Disposes of the resources (other than memory) used by the timer.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Timer.Enabled">
            <summary>
             Indicates whether the timer is running.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Timer.Interval">
            <summary>
             Indicates the time, in milliseconds, between timer ticks.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Timer.Tick'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Timer.Start">
            <summary>
             Starts the timer.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Timer.Stop">
            <summary>
             Stops the timer.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Timer.TimerNativeWindow.GetInvokeRequired(System.IntPtr)">
            <summary>
             Returns true if we need to marshal across threads to access this timer's HWND.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.Timer.TimerNativeWindow.RestartTimer(System.Int32)" -->
        <member name="M:System.Windows.Forms.Timer.TimerNativeWindow.StopTimer(System.IntPtr,System.Boolean)">
            <summary>
             Stop the timer and optionally destroy the HWND.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Timer.TimerNativeWindow.DestroyHandle">
            <summary>
             Destroy the handle, stopping the timer first.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStrip">
            <summary>
             ToolStrip control.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStrip.#ctor" -->
        <member name="P:System.Windows.Forms.ToolStrip.AllowDrop">
            <summary>
             Summary of AllowDrop.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.AllowItemReorder">
            <summary>
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.AllowMerge">
            <summary>
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.BackColor">
            <summary>
             Just here so we can implement ShouldSerializeBackColor
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.CanOverflow">
            <summary>
             Summary of CanOverflow.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.CanHotTrack">
            <summary> we can only shift selection when we're not focused (someone mousing over us)
              or we are focused and one of our toolstripcontrolhosts do not have focus.
              SCENARIO: put focus in combo box, move the mouse over another item... selectioni
              should not shift until the combobox relinquishes its focus.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStrip.CursorChanged">
            <summary>
             Hide browsable property
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.ToolStrip.DefaultSize" -->
        <member name="P:System.Windows.Forms.ToolStrip.Dock">
            <summary>
             Just here so we can add the default value attribute
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.DropDownOwnerWindow">
            <summary>
             Returns an owner window that can be used to
             own a drop down.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.DropTargetManager">
            <summary>
             Returns the drop target manager that all the hwndless
             items and this ToolStrip share.  this is necessary as
             RegisterDragDrop requires an HWND.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.DisplayedItems">
            <summary>
             Just here so we can add the default value attribute
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.DisplayRectangle">
            <summary>
             Retreives the current display rectangle. The display rectangle
             is the virtual display area that is used to layout components.
             The position and dimensions of the Form's display rectangle
             change during autoScroll.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.ForeColor">
            <summary>
             Forecolor really has no meaning for ToolStrips - so lets hide it
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStrip.ForeColorChanged">
            <summary>
             [ToolStrip ForeColorChanged event, overriden to turn browsing off.]
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.Grip">
            <summary>
             Summary of ToolStripGrip.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.GripStyle">
            <summary>
             Summary of GripStyle.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.GripDisplayStyle">
            <summary>
             Summary of GripStyle.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.GripMargin">
            <summary>
             The external spacing between the grip and the padding of the ToolStrip and the first item in the collection
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.GripRectangle">
            <summary>
             The boundaries of the grip on the ToolStrip.  If it is invisible - returns Rectangle.Empty.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.HorizontalScroll">
            <summary>
             Gets the Horizontal Scroll bar for this ScrollableControl.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.ImageList">
            <summary>
             Gets or sets the <see cref='T:System.Windows.Forms.ImageList'/> that contains the <see cref='T:System.Drawing.Image'/> displayed on a label control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.IsMnemonicsListenerAxSourced">
            <summary>
             Specifies whether the control is willing to process mnemonics when hosted in an container ActiveX (Ax Sourcing).
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.IsCurrentlyDragging">
            <summary> indicates whether the user is currently
             moving the toolstrip from one toolstrip container
             to another
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.IsLocationChanging">
            <summary>
             indicates if the SetBoundsCore is called thru Locationchanging.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.Items">
            <summary>
             The items that belong to this ToolStrip.
             Note - depending on space and layout preferences, not all items
             in this collection will be displayed.  They may not even be displayed
             on this ToolStrip (say in the case where we're overflowing the item).
             The collection of _Displayed_ items is the DisplayedItems collection.
             The displayed items collection also includes things like the OverflowButton
             and the Grip.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStrip.ItemClicked">
            <summary>
             Occurs when the control is clicked.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.ToolStrip.ItemHdcInfo" -->
        <member name="P:System.Windows.Forms.ToolStrip.IsDropDown">
            <summary> handy check for painting and sizing </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.ItemReorderDropTarget">
             <summary>
              The OnDrag[blah] methods that will be called if AllowItemReorder is true.
            
              This allows us to have methods that handle drag/drop of the ToolStrip items
              without calling back on the user's code
             </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.ItemReorderDropSource">
             <summary>
              The OnQueryContinueDrag and OnGiveFeedback methods that will be called if
              AllowItemReorder is true.
            
              This allows us to have methods that handle drag/drop of the ToolStrip items
              without calling back on the user's code
             </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.LayoutStyle">
            <summary>
             Specifies whether we're horizontal or vertical
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.OverflowButton">
            <summary>
             Summary of OverflowButton.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.Renderer">
            <summary>
             The renderer is used to paint the hwndless ToolStrip items.  If someone wanted to
             change the "Hot" look of all of their buttons to be a green triangle, they should
             create a class that derives from ToolStripRenderer, assign it to this property and call
             invalidate.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.ShowKeyboardCuesInternal">
            <summary>
             ToolStripItems need to access this to determine if they should be showing underlines
             for their accelerators.  Since they are not HWNDs, and this method is protected on control
             we need a way for them to get at it.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.Shortcuts">
            <summary> internal lookup table for shortcuts... intended to speed search time </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.TabStop">
            <summary>
             Indicates whether the user can give the focus to this control using the TAB
             key. This property is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.ToolTip">
            <summary> this is the ToolTip used for the individual items
             it only works if ShowItemToolTips = true
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStrip.VerticalScroll">
            <summary>
             Gets the Vertical Scroll bar for this ScrollableControl.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.ClearAllSelections">
            <summary>
             Summary of ClearAllSelections.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStrip.ClearAllSelectionsExcept(System.Windows.Forms.ToolStripItem)" -->
        <member name="M:System.Windows.Forms.ToolStrip.Dispose(System.Boolean)">
            <summary>
             Clean up any resources being used.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.GetNextItem(System.Windows.Forms.ToolStripItem,System.Windows.Forms.ArrowDirection)">
            <summary>
             Gets the next item from the given start item in the direction specified.
             - This function wraps if at the end
             - This function will only surf the items in the current container
             - Overriding this function will change the tab ordering and accessible child ordering.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.GetNextItemHorizontal(System.Windows.Forms.ToolStripItem,System.Boolean)">
            <remarks>
             Helper function for GetNextItem - do not directly call this.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.GetNextItemVertical(System.Windows.Forms.ToolStripItem,System.Boolean)">
            <remarks>
             Helper function for GetNextItem - do not directly call this.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.GetSelectedItem">
            <summary>
             Summary of GetSelectedItem.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.GetToolStripState(System.Int32)">
            <summary>
             Retrieves the current value of the specified bit in the control's state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.GetOwnerControl">
             In the case of a
             toolstrip -> toolstrip
             contextmenustrip -> the control that is showing it
             toolstripdropdown -> top most toolstrip
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.HandleItemClick(System.Windows.Forms.ToolStripItem)">
            <summary>
             Summary of HandleItemClick.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStrip.IsInputKey(System.Windows.Forms.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStrip.IsInputChar(System.Char)" -->
        <member name="M:System.Windows.Forms.ToolStrip.InvokePaintItem(System.Windows.Forms.ToolStripItem)">
            <summary> Force an item to be painted immediately, rather than waiting for WM_PAINT to occur. </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.ImageListRecreateHandle(System.Object,System.EventArgs)">
            <summary>
             Gets or sets the <see cref='T:System.Windows.Forms.ImageList'/> that contains the <see cref='T:System.Drawing.Image'/> displayed on a label control
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
             This override fires the LocationChanging event if
             1) We are not currently Rafting .. since this cause this infinite times...
             2) If we havent been called once .. Since the "LocationChanging" is listened to by the RaftingCell and calls "JOIN" which may call us back.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStrip.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" -->
        <member name="M:System.Windows.Forms.ToolStrip.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
             Processes a dialog key. Overrides Control.processDialogKey(). This
             method implements handling of the TAB, LEFT, RIGHT, UP, and DOWN
             keys in dialogs.
             The method performs no processing on keys that include the ALT or
             CONTROL modifiers. For the TAB key, the method selects the next control
             on the form. For the arrow keys,
             !!!
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStrip.ProcessMnemonic(System.Char)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStrip.ProcessTabKey(System.Boolean)" -->
        <member name="M:System.Windows.Forms.ToolStrip.ProcessArrowKey(System.Windows.Forms.Keys)">
            <summary>
             Summary of ProcessArrowKey: this is more useful than overriding ProcessDialogKey because usually
             the difference between ToolStrip/ToolStripDropDown is arrow key handling.  ProcessDialogKey first gives
             the selected ToolStripItem the chance to process the message... so really a proper inheritor would
             call down to the base first. Unfortunately doing this would cause the the arrow keys would be eaten
             in the base class.  Instead we're providing a separate place to override all arrow key handling.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.ProcessLeftRightArrowKey(System.Boolean)">
            <summary>
             Process an arrowKey press by selecting the next control in the group
             that the activeControl belongs to.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStrip.NotifySelectionChange(System.Windows.Forms.ToolStripItem)" -->
        <member name="M:System.Windows.Forms.ToolStrip.OnEnabledChanged(System.EventArgs)">
            <summary>
             Summary of OnEnabledChanged.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.OnHandleCreated(System.EventArgs)">
            <summary>
             Summary of OnHandleCreated.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.OnHandleDestroyed(System.EventArgs)">
            <summary>
             Summary of OnHandleDestroyed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.OnItemClicked(System.Windows.Forms.ToolStripItemClickedEventArgs)">
            <summary>
             Called when an item has been clicked on the ToolStrip.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Delegate mouse down to the ToolStrip and its affected items
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Delegate mouse moves to the ToolStrip and its affected items
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.OnMouseLeave(System.EventArgs)">
            <summary>
             Delegate mouse leave to the ToolStrip and its affected items
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Delegate mouse up to the ToolStrip and its affected items
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Inheriting classes should override this method to handle the erase
             background request from windows. It is not necessary to call
             base.onPaintBackground, however if you do not want the default
             Windows behavior you must set event.handled to true.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.OnPaintGrip(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Summary of OnPaint.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.RescaleConstantsForDpi(System.Int32,System.Int32)">
            <summary>
             When overridden in a derived class, handles rescaling of any magic numbers used in control painting.
             Must call the base class method to get the current DPI values. This method is invoked only when
             Application opts-in into the Per-monitor V2 support, targets .NETFX 4.7 and has
             EnableDpiChangedMessageHandling and EnableDpiChangedHighDpiImprovements config switches turned on.
            </summary>
            <param name="deviceDpiOld">Old DPI value</param>
            <param name="deviceDpiNew">New DPI value</param>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.ResetScaling(System.Int32)">
            <summary>
             Resets the scaling (only in PerMonitorV2 scenarios).
            </summary>
            <param name="newDpi">The new DPI passed by WmDpiChangedBeforeParent.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStrip.PaintInsertionMark(System.Drawing.Graphics)" -->
        <member name="M:System.Windows.Forms.ToolStrip.PaintInsertionMark(System.Drawing.Rectangle)">
            <summary>
             Paints the I beam when items are being reordered
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.GetItemAt(System.Int32,System.Int32)">
            <summary>
             Finds the ToolStripItem contained within a specified client coordinate point
             If item not found - returns null
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.GetItemAt(System.Drawing.Point)">
            <summary>
             Finds the ToolStripItem contained within a specified client coordinate point
             If item not found - returns null
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.RestoreFocusInternal">
            <summary> RestoreFocus - returns focus to the control who activated us
             See comment on SnapFocus
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStrip.SetItemLocation(System.Windows.Forms.ToolStripItem,System.Drawing.Point)" -->
        <member name="M:System.Windows.Forms.ToolStrip.SetItemParent(System.Windows.Forms.ToolStripItem,System.Windows.Forms.ToolStrip)">
            <summary>
             This is needed so that people doing custom layout engines can change the "Parent" property of the item.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStrip.Select(System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStrip.SelectNextToolStripItem(System.Windows.Forms.ToolStripItem,System.Boolean)" -->
        <member name="M:System.Windows.Forms.ToolStrip.SetAutoScrollMargin(System.Int32,System.Int32)">
            <summary>
             Sets the size of the auto-scroll margins.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.SetDisplayedItems">
            <summary>
             Afer we've performed a layout we need to reset the DisplayedItems and the OverflowItems collection.
             OverflowItems are not supported in layouts other than ToolStripSplitStack
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.SetToolStripState(System.Int32,System.Boolean)">
            <summary>
             Sets the current value of the specified bit in the control's state.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.SnapFocus(System.IntPtr)">
             <summary> SnapFocus
              When get focus to the toolstrip (and we're not participating in the tab order)
              it's probably cause someone hit the ALT key. We need to remember who that was
              so when we're done here we can RestoreFocus back to it.
            
              We're called from WM_SETFOCUS, and otherHwnd is the HWND losing focus.
            
              Required checks
              - make sure it's not a dropdown
              - make sure it's not a child control of this control.
              - make sure the control is on this window
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStrip.WndProc(System.Windows.Forms.Message@)" -->
        <member name="M:System.Windows.Forms.ToolStrip.ToolStripAccessibleObject.HitTest(System.Int32,System.Int32)">
            <summary>
             Return the child object at the given screen coordinates.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.ToolStripAccessibleObject.GetChild(System.Int32)">
            <summary>
             When overridden in a derived class, gets the accessible child corresponding to the specified
             index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStrip.ToolStripAccessibleObject.GetChildCount">
            <summary>
             When overridden in a derived class, gets the number of children
             belonging to an accessible object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MouseHoverTimer.Cancel(System.Windows.Forms.ToolStripItem)">
            <summary> cancels if and only if this item was the one that
              requested the timer
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Windows.Forms.ToolStripSplitStackDragDropHandler" -->
        <member name="P:System.Windows.Forms.ToolStripButton.Checked">
            <summary>
             Gets or sets a value indicating whether the item is checked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripButton.CheckState">
            <summary>
             Gets or sets a value indicating whether the check box is checked.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripButton.CheckedChanged">
            <summary>
             Occurs when the value of the <see cref='P:System.Windows.Forms.CheckBox.Checked'/> property changes.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripButton.CheckStateChanged">
            <summary>
             Occurs when the value of the <see cref='P:System.Windows.Forms.CheckBox.CheckState'/> property changes.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripButton.DeviceDpi">
            <remarks>
             This gets called via ToolStripItem.RescaleConstantsForDpi.
             It's practically calling Initialize on DpiChanging with the new Dpi value.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.ToolStripButton.Initialize">
            <summary>
             Called by all constructors of ToolStripButton.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripButton.OnCheckedChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.ToolStripMenuItem.CheckedChanged'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripButton.OnCheckStateChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.ToolStripMenuItem.CheckStateChanged'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripButton.ToolStripButtonAccessibleObject">
            <summary>
             An implementation of AccessibleChild for use with ToolStripItems
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripComboBox.DefaultMargin">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripComboBox.Items">
            <summary>
             Collection of the items contained in this ComboBox.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripComboBox.ToolStripComboBoxControl.CreateAccessibilityInstance">
            <summary>
             Constructs the new instance of the accessibility object for this ToolStripComboBoxControl.
            </summary>
            <returns>
             The new instance of the accessibility object for this ToolStripComboBoxControl item
            </returns>
        </member>
        <member name="P:System.Windows.Forms.ToolStripContainer.Controls">
            <summary>
             Controls Collection...
             This is overriden so that the Controls.Add ( ) is not Code Gened...
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripContentPanel.AutoSizeMode">
            <summary>
             Allows the control to optionally shrink when AutoSize is true.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripContentPanelRenderEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.ToolStripContentPanel)">
            <summary>
             This class represents all the information to render the toolStrip
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripContentPanelRenderEventArgs.Graphics">
            <summary>
             The graphics object to draw with
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripContentPanelRenderEventArgs.ToolStripContentPanel">
            <summary>
             Represents which toolStrip was affected by the click
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripContentPanelRenderEventHandler">
            <summary>
             Called when the background of the ToolStripPanel is being rendered
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripControlHost">
            <summary>
             ToolStripItem that can host Controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.#ctor(System.Windows.Forms.Control)">
            <summary>
             Constructs a ToolStripControlHost
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripControlHost.BackgroundImage">
            <summary>
             Gets or sets the image that is displayed on a <see cref='T:System.Windows.Forms.Label'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripControlHost.CanSelect">
            <summary>
             Overriden to return value from Control.CanSelect.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripControlHost.Control">
            <summary>
             The control that this item is hosting.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripControlHost.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.ToolStripControlHost.DoubleClickEnabled" -->
        <member name="E:System.Windows.Forms.ToolStripControlHost.LostFocus">
            <summary>
             Occurs when the control loses focus.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripControlHost.KeyDown">
            <summary>
             Occurs when a key is pressed down while the control has focus.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripControlHost.KeyPress">
            <summary>
             Occurs when a key is pressed while the control has focus.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripControlHost.KeyUp">
            <summary>
             Occurs when a key is released while the control has focus.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripControlHost.RightToLeft">
            <summary>
             This is used for international applications where the language
             is written from RightToLeft. When this property is true,
             control placement and text will be from right to left.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripControlHost.Site">
            <summary>
             Overriden to set the Site for the control hosted. This is set at DesignTime when the component is added to the Container.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripControlHost.Text">
            <summary>
             Overriden to modify hosted control's text.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.Dispose(System.Boolean)">
            <summary>
             Cleans up and destroys the hosted control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.HandleClick(System.Object,System.EventArgs)">
             Handle* wrappers:
             We sync the event from the hosted control and call resurface it on ToolStripItem.
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.OnGotFocus(System.EventArgs)">
            <summary>
             called when the control has lost focus
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.OnLostFocus(System.EventArgs)">
            <summary>
             called when the control has lost focus
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.OnBoundsChanged">
            <summary>
             Called when the items bounds are changed.  Here, we update the Control's bounds.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Called when the control fires its Paint event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.OnParentChanged(System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStrip)">
            <summary>
             Called when the item's parent has been changed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.OnSubscribeControlEvents(System.Windows.Forms.Control)">
            <summary>
             The events from the hosted control are subscribed here.
             Override to add/prevent syncing of control events.
             NOTE: if you override and hook up events here, you should unhook in OnUnsubscribeControlEvents.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.OnUnsubscribeControlEvents(System.Windows.Forms.Control)">
            <summary>
             The events from the hosted control are unsubscribed here.
             Override to unhook events subscribed in OnSubscribeControlEvents.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.SyncControlParent">
            <remarks>
             Ensures the hosted Control is parented to the ToolStrip hosting this ToolStripItem.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.CreateAccessibilityInstance">
            <summary>
                Constructs the new instance of the accessibility object for this ToolStripControlHost ToolStrip item.
            </summary>
            <returns>
                The new instance of the accessibility object for this ToolStripControlHost ToolStrip item
            </returns>
        </member>
        <member name="T:System.Windows.Forms.ToolStripControlHost.StubSite">
            <remarks>
             Our implementation of ISite:
             Since the Control which is wrapped by ToolStripControlHost is a runtime instance, there is no way of knowing
             whether the control is in runtime or designtime.
             This implementation of ISite would be set to Control.Site when ToolStripControlHost.Site is set at DesignTime. (Refer to Site property on ToolStripControlHost)
             This implementation just returns the DesigMode property to be ToolStripControlHost's DesignMode property.
             Everything else is pretty much default implementation.
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.ToolStripControlHost.StubSite.System#ComponentModel#ISite#Component">
            <summary>
             When implemented by a class, gets the component associated with the <see cref='T:System.ComponentModel.ISite'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripControlHost.StubSite.System#ComponentModel#ISite#Container">
            <summary>
             When implemented by a class, gets the container associated with the <see cref='T:System.ComponentModel.ISite'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripControlHost.StubSite.System#ComponentModel#ISite#DesignMode">
            <summary>
             When implemented by a class, determines whether the component is in design mode.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripControlHost.StubSite.System#ComponentModel#ISite#Name">
            <summary>
             When implemented by a class, gets or sets the name of
             the component associated with the <see cref='T:System.ComponentModel.ISite'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.StubSite.System#IServiceProvider#GetService(System.Type)">
            <summary>
             Returns the requested service.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.StubSite.System#ComponentModel#Design#IDictionaryService#GetKey(System.Object)">
            <summary>
             Retrieves the key corresponding to the given value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.StubSite.System#ComponentModel#Design#IDictionaryService#GetValue(System.Object)">
            <summary>
             Retrieves the value corresponding to the given key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.StubSite.System#ComponentModel#Design#IDictionaryService#SetValue(System.Object,System.Object)">
            <summary>
             Stores the given key-value pair in an object's site.  This key-value
             pair is stored on a per-object basis, and is a handy place to save
             additional information about a component.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripControlHost.ToolStripControlHostAccessibleObject">
            <summary>
             Defines the ToolStripControlHost AccessibleObject.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.ToolStripControlHostAccessibleObject.#ctor(System.Windows.Forms.ToolStripControlHost)">
            <summary>
             Initializes the new instance of ToolStripControlHostAccessibleObject.
            </summary>
            <param name="ownerItem">The owning ToolStripControlHost.</param>
        </member>
        <member name="P:System.Windows.Forms.ToolStripControlHost.ToolStripControlHostAccessibleObject.DefaultAction">
            <summary>
             Gets a description of the default action for an object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.ToolStripControlHostAccessibleObject.DoDefaultAction">
            <summary>
             Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripControlHost.ToolStripControlHostAccessibleObject.Role">
            <summary>
             Gets the role of this accessible object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.ToolStripControlHostAccessibleObject.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Request to return the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="P:System.Windows.Forms.ToolStripControlHost.ToolStripControlHostAccessibleObject.FragmentRoot">
            <summary>
             Return the element that is the root node of this fragment of UI.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripControlHost.ToolStripHostedControlAccessibleObject">
            <summary>
             Represents the ToolStrip hosted control accessible object which is responsible
             for accessible navigation within the ToolStrip standard items and hosted controls
             like TextBox, ComboBox, ProgressBar, etc.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripControlHost.ToolStripHostedControlAccessibleObject.#ctor(System.Windows.Forms.Control,System.Windows.Forms.ToolStripControlHost)">
            <summary>
             Creates the new instance of ToolStripHostedControlAccessibleObject.
            </summary>
            <param name="toolStripHostedControl">The ToolStrip control hosted in the ToolStripControlHost container.</param>
            <param name="toolStripControlHost">The ToolStripControlHost container which hosts the control.</param>
        </member>
        <member name="T:System.Windows.Forms.ToolStripDropDown">
            <summary>
             Summary of ToolStripDropDown.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripDropDown.AllowTransparency">
             <summary>
            
              Gets or sets
              a value indicating whether the opacity of the form can be
              adjusted.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripDropDown.AutoClose">
            <summary>
             specifies whether the dropdown should automatically close when the dropdown has lost
             activation.  If you want a dropdown that always stays open, specify AutoClose = false;
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripDropDown.CreateParams">
            <summary>
             This is called when creating a window. Inheriting classes can overide
             this to add extra functionality, but should not forget to first call
             base.CreateParams() to make sure the control continues to work
             correctly.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripDropDown.DefaultShowItemToolTips">
            <summary> We want this to default to true... This way tooltips on overflows and custom dropdowns will show.
             Since menu items don't show tooltips by default we can savely leave it on </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripDropDown.DockChanged">
             changed the browsable attribute
        </member>
        <member name="P:System.Windows.Forms.ToolStripDropDown.DropDownOwnerWindow">
            <summary>
             Returns an owner window that can be used to
             own a drop down.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripDropDown.IsAutoGenerated">
            <summary>
             determines whether this dropdown was autogenerated.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripDropDown.Location">
            <summary>
             Override Location to make it hidden from the user in the designer
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripDropDown.Opened">
            <summary>
             Occurs when the control is clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripDropDown.Opacity">
            <summary>
             Determines the opacity of the form. This can only be set on top level controls.
             Opacity requires Windows 2000 or later, and is ignored on earlier operating systems.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripDropDown.OwnerItem">
            <summary>
             Summary of OwnerItem.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripDropDown.Region">
            <summary>
             Hide the Region Property
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripDropDown.TabIndex">
             Override base TabIndex property in order to avoid serialization
             (since a dropdown shouldn't participate in the taborder...)
        </member>
        <member name="P:System.Windows.Forms.ToolStripDropDown.Visible">
             Override base Visible property in order to control serialization by setting default value
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDown.GetDropDownBounds(System.Drawing.Rectangle)">
            <summary>
             Summary of GetBaseDropDownBounds.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDown.GetToplevelOwnerToolStrip">
            <summary>
             Returns the ToolStrip from which all the dropdowns started from.  This can be null.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDown.Initialize">
            <summary>
             Set some common properties
            </summary>	
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDown.OnHandleCreated(System.EventArgs)">
            <summary>
             When our handle is being created, suspend the deactivation
             portion of the WndProc, as we'll never be shown.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStripDropDown.OnOpened(System.EventArgs)" -->
        <member name="M:System.Windows.Forms.ToolStripDropDown.ProcessArrowKey(System.Windows.Forms.Keys)">
            <summary>
             this is where we handle navigation between the File,Edit,View dropdowns
             if you have one of these dropdowns showing and you hit the arrow key
             and it's not processed by the menu item
             </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDown.ScaleCore(System.Single,System.Single)">
            <devdoc>
                VERY similar to Form.ScaleCore
            </devdoc>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDown.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Scale this form.  Form overrides this to enforce a maximum / minimum size.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDown.SetAutoGeneratedInternal(System.Boolean)">
            <summary>
             This is called when the ToolStripDropDownItem sets the DropDown property using CreateDefaultDropDown.
             In this case, the IsAutoGenerated should return true.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDown.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Sync sizes with the ToolStripDropDown
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDown.UpdateLayered">
            <summary>
             Updates the layered window attributes if the control
             is in layered mode.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDown.Show(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary> show relative to control coordinates </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDown.Show(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary> show relative to control coordinates </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDown.Show(System.Drawing.Point)">
            <summary> show relative to screen coordinates </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDown.Show(System.Int32,System.Int32)">
            <summary> show relative to screen coordinates </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDown.WmNCActivate(System.Windows.Forms.Message@)">
            <summary>
             If someone clicks on a child control of the toolstrip dropdown, we want
             the title bar to continue appearing active.  Normally we just show without
             taking window activation (ShowWindow(SHOWNOACTIVATE)) but we cant stop
             child controls from taking focus.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripDropDown.IsFirstDropDown">
            <summary>
             Determines if this is the first dropDown in the dropDown chain
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDown.GetFirstDropDown">
            <summary>
             returns the root dropdown in the chain.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripDropDownButton">
            <summary>
             A ToolStripButton that can display a popup.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownButton.#ctor">
            <summary>
             Constructs a ToolStripButton that can display a popup.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownButton.CreateInternalLayout">
            <summary>
             Creates an instance of the object that defines how image and text
             gets laid out in the ToolStripItem
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownButton.Initialize">
            <summary>
             Called by all constructors of ToolStripButton.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Overriden to invoke displaying the popup.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripDropDownButton.ToolStripDropDownButtonAccessibleObject">
            <summary>
             An implementation of Accessibleobject for use with ToolStripDropDownButton
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripDropDownItem">
            <summary>
             Base class for ToolStripItems that display DropDown windows.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownItem.#ctor">
            <summary>
             Protected ctor so you can't create one of these without deriving from it.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripDropDownItem.DropDown">
            <summary>
             The ToolStripDropDown that will be displayed when this item is clicked.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripDropDownItem.DropDownClosed">
            <summary>
             Occurs when the dropdown is closed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripDropDownItem.DropDownOpened">
            <summary>
             Occurs when the dropdown is opened
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripDropDownItem.DropDownItems">
            <summary>
             Returns the DropDown's items collection.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripDropDownItem.DropDownItemClicked">
            <summary>
             Occurs when the dropdown is opened
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownItem.Dispose(System.Boolean)">
            <summary>
             Make sure we unhook dropdown events.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownItem.HideDropDown">
            <summary>
             Hides the DropDown, if it is visible.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownItem.OnDropDownHide(System.EventArgs)">
            <summary>
             Called as a response to HideDropDown
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownItem.OnDropDownShow(System.EventArgs)">
            <summary>
             Last chance to stick in the DropDown before it is shown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownItem.OnDropDownOpened(System.EventArgs)">
            <summary>
             called when the default item is clicked
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownItem.OnDropDownClosed(System.EventArgs)">
            <summary>
             called when the default item is clicked
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownItem.OnDropDownItemClicked(System.Windows.Forms.ToolStripItemClickedEventArgs)">
            <summary>
             called when the default item is clicked
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownItem.ShowDropDown">
            <summary>
             Shows the DropDown, if one is set.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownItemAccessibleObject.GetChildFragmentCount">
            <summary>
             Gets the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children.</returns>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownMenu.#ctor">
            <summary>
             Summary of ToolStripDropDown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownMenu.#ctor(System.Windows.Forms.ToolStripItem,System.Boolean)">
            <devdoc>
             Constructor to autogenerate
            </devdoc>
        </member>
        <member name="P:System.Windows.Forms.ToolStripDropDownMenu.ImageRectangle">
            <summary>
             the rectangle representing
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripDropDownMenu.ImageMargin">
            <summary>
             the rectangle representing the color stripe in the menu - this will appear as AffectedBounds
             in the ToolStripRenderEventArgs
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripDropDownMenu.FromHMenu(System.IntPtr,System.Windows.Forms.IWin32Window)">
            <summary>
             this takes a native menu and builds up a managed toolstrip around it.
             Scenario: showing the items from the SystemMenu.
             targetWindow is the window to send WM_COMMAND, WM_SYSCOMMAND to
             hmenu is a handle to the native menu.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripDropTargetManager">
            <summary>
             RegisterDropTarget requires an HWND to back it's IDropTargets. Since some ToolStripItems
             do not have HWNDS, this guy's got to figure out who the event was really supposed
             to go to and pass it on to it.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStripDropTargetManager.#ctor(System.Windows.Forms.ToolStrip)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStripDropTargetManager.EnsureRegistered(System.Windows.Forms.IDropTarget)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStripDropTargetManager.EnsureUnRegistered(System.Windows.Forms.IDropTarget)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStripDropTargetManager.FindItemAtPoint(System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStripDropTargetManager.OnDragEnter(System.Windows.Forms.DragEventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStripDropTargetManager.OnDragOver(System.Windows.Forms.DragEventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStripDropTargetManager.OnDragLeave(System.EventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStripDropTargetManager.OnDragDrop(System.Windows.Forms.DragEventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStripDropTargetManager.SetAcceptDrops(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStripDropTargetManager.UpdateDropTarget(System.Windows.Forms.IDropTarget,System.Windows.Forms.DragEventArgs)" -->
        <member name="P:System.Windows.Forms.ToolStripGrip.DefaultMargin">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripGrip.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            </summary>
            <param name="mea"></param>
        </member>
        <member name="M:System.Windows.Forms.ToolStripGrip.OnMouseLeave(System.EventArgs)">
            <summary>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.ToolStripGripRenderEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.ToolStrip)">
            <summary>
             This class represents all the information to render the toolStrip
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripGripRenderEventArgs.GripBounds">
            <summary>
             The graphics object to draw with
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripGripRenderEventArgs.GripDisplayStyle">
            <summary>
             Vertical or horizontal
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripGripRenderEventArgs.GripStyle">
            <summary>
             Visible or hidden
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripGripRenderEventHandler">
            <summary>
             Called when the background of a ToolStrip item is being rendered
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ToolStripItem.EventMouseDown">
            
              Adding a new event??  Make sure you dont need to add to ToolStripControlHost.cs
            
        </member>
        <member name="F:System.Windows.Forms.ToolStripItem.PropName">
            
              Adding a new event??  Make sure you dont need to add to ToolStripControlHost.cs
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStripItem.#ctor" -->
        <member name="P:System.Windows.Forms.ToolStripItem.AccessibilityObject">
            <summary>
             The Accessibility Object for this Control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.AccessibleDefaultActionDescription">
            <summary>
             The default action description of the control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.AccessibleDescription">
            <summary>
             The accessible description of the control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.AccessibleName">
            <summary>
             The accessible name of the control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.AccessibleRole">
            <summary>
             The accessible role of the control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Alignment">
            <summary>
             Determines if the item aligns towards the beginning or end of the ToolStrip.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.AllowDrop">
            <summary>
             Determines if this item can be dragged.
             This is EXACTLY like Control.AllowDrop - setting this to true WILL call
             the droptarget handlers.  The ToolStripDropTargetManager is the one that
             handles the routing of DropTarget events to the ToolStripItem's IDropTarget
             methods.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.AutoSize">
            <summary>
             Determines whether we set the ToolStripItem to its preferred size
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.AutoToolTip">
             <summary>
              !!!!This property ONLY works when toolStrip.ShowItemToolTips = true!!!!
              if AutoToolTip is set to true we use the Text, if false, we use ToolTipText.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Available">
             <summary>
              as opposed to Visible, which returns whether or not the item and its parent are Visible
              Available returns whether or not the item will be shown.  Setting Available sets Visible and Vice/Versa
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.BackgroundImage">
            <summary>
             Gets or sets the image that is displayed on a <see cref='T:System.Windows.Forms.Label'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.BackColor">
            <summary>
             The BackColor of the item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Bounds">
            <summary>
             The bounds of the item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.CanSelect">
            <summary>
             Determines whether or not the item can be selected.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripItem.Click">
            <summary>
             Occurs when the control is clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Dock">
            <summary> This does not show up in the property grid because it only applies to flow and table layouts </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.DefaultAutoToolTip">
            <summary>default setting of auto tooltip when this object is created</summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.DefaultMargin">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.DefaultPadding">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.ToolStripItem.DefaultSize" -->
        <member name="P:System.Windows.Forms.ToolStripItem.DismissWhenClicked">
            <summary>
             specifies the default behavior of these items on ToolStripDropDowns when clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.DisplayStyle">
            <summary>
             DisplayStyle specifies whether the image and text are rendered.  This is not on the base
             item class because different derived things will have different enumeration needs.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripItem.DisplayStyleChanged">
            <summary>
             Occurs when the display style has changed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripItem.DoubleClick">
            <summary>
             Occurs when the control is double clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.DropSource">
             <summary>
              ToolStripItem.DropSource
            
              This represents what we're actually going to drag.  If the parent has set AllowItemReorder to true,
              then the item should call back on the private OnQueryContinueDrag/OnGiveFeedback that is implemented
              in the parent ToolStrip.
            
              Else if the parent does not support reordering of items (Parent.AllowItemReorder = false) -
              then call back on the ToolStripItem's OnQueryContinueDrag/OnGiveFeedback methods.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Enabled">
            <summary>
             Occurs when the control is clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.ForeColor">
            <summary>
             Retrieves the current font for this item. This will be the font used
             by default for painting and text in the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Font">
            <summary>
             Retrieves the current font for this control. This will be the font used
             by default for painting and text in the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Height">
            <summary>
             The height of this control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.System#Windows#Forms#Layout#IArrangedElement#Children">
            <summary>
             ToolStripItems do not have children.  For perf reasons always return a static empty collection.
             Consider creating readonly collection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.System#Windows#Forms#Layout#IArrangedElement#Container">
            <summary>
             Should not be exposed as this returns an unexposed type.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.ImageAlign">
            <summary>
             Gets or sets the alignment of the image on the label control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Image">
            <summary>
             Gets or sets the image that is displayed on a <see cref='T:System.Windows.Forms.Label'/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.ImageIndex">
            <summary>
             Returns the ToolStripItem's currently set image index
             Here for compat only - this is NOT to be visible at DT.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.ImageKey">
            <summary>
             Returns the ToolStripItem's currently set image index
             Here for compat only - this is NOT to be visible at DT.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.InternalLayout">
            <summary>
             This object helps determine where the image and text should be drawn.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.IsInDesignMode">
            <summary>
             This is used by ToolStrip to pass on the mouseMessages for ActiveDropDown.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.IsOnOverflow">
             returns whether the item placement is set to overflow.
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.IsMnemonicsListenerAxSourced">
            <summary>
             Specifies whether the control is willing to process mnemonics when hosted in an container ActiveX (Ax Sourcing).
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripItem.LocationChanged">
            <summary>
             Occurs when the location of the ToolStripItem has been updated -- usually by layout by its
             owner of ToolStrips
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Margin">
            <summary>
             Specifies the external spacing between this item and any other item or the ToolStrip.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.MergeAction">
            <summary>
             Specifies the merge action when merging two ToolStrip.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.MergeIndex">
            <summary>
             Specifies the merge action when merging two ToolStrip.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripItem.MouseDown">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is
             pressed.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripItem.MouseEnter">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripItem.MouseLeave">
            <summary>
             Occurs when the mouse pointer leaves the control.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripItem.MouseHover">
            <summary>
             Occurs when the mouse pointer hovers over the contro.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripItem.MouseMove">
            <summary>
             Occurs when the mouse pointer is moved over the control.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripItem.MouseUp">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is released.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Name">
            <summary>
             Name of this control. The designer will set this to the same
             as the programatic Id "(name)" of the control.  The name can be
             used as a key into the ControlCollection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Owner">
            <summary>
             The owner of this ToolStripItem.  The owner is essentially a backpointer to
             the ToolStrip who contains this item in it's item collection.  Handy for getting
             to things such as the ImageList, which would be defined on the ToolStrip.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.OwnerItem">
            <summary> returns the "parent" item on the preceeding menu which has spawned this item.
             e.g.  File->Open  the OwnerItem of Open is File. </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Parent">
            <summary>
             The parent of this ToolStripItem.  This can be distinct from the owner because
             the item can fall onto another window (overflow).  In this case the overflow
             would be the parent but the original ToolStrip would be the Owner.  The "parent"
             ToolStrip will be firing things like paint events - where as the "owner" ToolStrip
             will be containing shared data like image lists.  Typically the only one who should
             set the parent property is the layout manager on the ToolStrip.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Overflow">
            <summary>
             Specifies whether or not the item is glued to the ToolStrip or overflow or
             can float between the two.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Padding">
            <summary>
             Specifies the internal spacing between the contents and the edges of the item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.ParentInternal">
            <summary>
             This is explicitly a ToolStrip, because only ToolStrips know how to manage ToolStripitems
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Placement">
            <summary>
             Where the item actually ended up.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Properties">
            <summary>
             Retrieves our internal property storage object. If you have a property
             whose value is not always set, you should store it in here to save
             space.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Pressed">
            <summary>
             Returns true if the state of the item is pushed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.RightToLeft">
            <summary>
             This is used for international applications where the language
             is written from RightToLeft. When this property is true,
             control placement and text will be from right to left.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.RightToLeftAutoMirrorImage">
            <summary>
              Mirrors the image when RTL.Yes.
              Note we do not change what is returned back from the Image property as this would cause problems with serialization.
              Instead we only change what is painted - there's an internal MirroredImage property which fills in as
              e.Image in the ToolStripItemImageRenderEventArgs if the item is RTL.Yes and AutoMirrorImage is turned on.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Selected">
             <summary>
              if the item is selected we return true.
            
              FAQ: Why dont we have a Hot or MouseIsOver property?
              After going through the scenarios, we've decided NOT to add a separate MouseIsOver or Hot flag to ToolStripItem.  The thing to use is 'Selected'.
              Why?  While the selected thing can be different than the moused over item, the selected item is ALWAYS the one you want to paint differently
            
              Scenario 1:  Keyboard select an item then select a different item with the mouse.
              -          Do Alt+F to expand your File menu, keyboard down several items.
              -          Mouse over a different item
              -          Notice how two things are never painted hot at the same time, and how the selection changes from the keyboard selected item to the one selected with the mouse.  In  this case the selection should move with the mouse selection.
              -          Notice how if you hit enter when the mouse is over it, it executes the item.  That's selection.
              Scenario 2: Put focus into a combo box, then mouse over a different item
              -          Notice how all the other items you mouse over do not change the way they are painted, if you hit enter, that goes to the combobox, rather than executing the current item.
            
              At first look "MouseIsOver" or "Hot" seems to be the thing people want, but its almost never the desired behavior.  A unified selection model is simpler and seems to meet the scenarios.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Size">
            <summary>The size of the item</summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Tag">
            <summary>Summary for Tag</summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Text">
            <summary>The text of the item</summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.TextAlign">
            <summary>
             Gets or sets the alignment of the text on the label control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.ToolTipText">
            <summary>
             !!!!This property ONLY works when toolStrip.ShowItemToolTips = true!!!!
             if AutoToolTip is set to true we return the Text as the ToolTipText.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Visible">
            <summary>Whether or not the item is visible</summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.Width">
            <summary>
             The width of this ToolStripItem.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.CreateAccessibilityInstance">
            <summary>
             constructs the new instance of the accessibility object for this ToolStripItem. Subclasses
             should not call base.CreateAccessibilityObject.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.CreateInternalLayout">
            <summary>
             Creates an instance of the object that defines how image and text
             gets laid out in the ToolStripItem
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.Dispose(System.Boolean)">
            <summary>
             Disposes this ToolStrip item...
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
            <summary>
             Begins a drag operation. The allowedEffects determine which
             drag operations can occur. If the drag operation needs to interop
             with applications in another process, data should either be
             a base managed class (String, Bitmap, or Metafile) or some Object
             that implements System.Runtime.Serialization.ISerializable. data can also be any Object that
             implements System.Windows.Forms.IDataObject.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.GetCurrentParent">
            <summary> we dont want a public settable property... and usually owner will work
             except for things like the overflow button</summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.Invalidate">
            <summary>
             Invalidates the ToolStripItem
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.Invalidate(System.Drawing.Rectangle)">
            <summary>
             invalidates a rectangle within the ToolStripItem's bounds
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.System#Windows#Forms#IDropTarget#OnDragEnter(System.Windows.Forms.DragEventArgs)">
            
              Explicit support of DropTarget
            
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.System#Windows#Forms#ISupportOleDropSource#OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            
              Explicit support of DropSource
            
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
             Raises the <see cref='!:ToolStripItem.Enter'/> event.
             Inheriting classes should override this method to handle this event.
             Call base.onEnter to send this event to any registered event listeners.
            </summary>
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.onDragEnter to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.onDragOver to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnDragLeave(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.onDragLeave to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.onDragDrop to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnDisplayStyleChanged(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.onGiveFeedback to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
             Call base.onQueryContinueDrag to send this event to any registered event listeners.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnDoubleClick(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnEnabledChanged(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnMouseEnter(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnMouseHover(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnMouseLeave(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnParentChanged(System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStrip)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnParentEnabledChanged(System.EventArgs)">
            <summary>
             Occurs when this.Parent.Enabled changes.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnOwnerFontChanged(System.EventArgs)">
            <summary>
             Occurs when the font property has changed on the parent - used to notify inheritors of the font property that
             the font has changed
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnOwnerChanged(System.EventArgs)">
            <summary>
             Occurs when the owner of an item changes.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnRightToLeftChanged(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.OnVisibleChanged(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.Push(System.Boolean)">
            <summary>
             Pushes the button.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
             See Control.ProcessDialogKey for more info.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
             See Control.ProcessCmdKey for more info.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStripItem.Select" -->
        <member name="M:System.Windows.Forms.ToolStripItem.SetBounds(System.Drawing.Rectangle)">
            <summary>
             Sets the bounds of the item
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sets the bounds of the item
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.SetPlacement(System.Windows.Forms.ToolStripItemPlacement)">
            <summary>
             Sets the placement of the item
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ShouldSerializeBackColor">
            <summary>
             Returns true if the backColor should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ShouldSerializeForeColor">
            <summary>
             Returns true if the foreColor should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ShouldSerializeFont">
            <summary>
             Returns true if the font should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ShouldSerializePadding">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.ToolStripItem.Padding'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ShouldSerializeMargin">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.ToolStripItem.Margin'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ShouldSerializeVisible">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.ToolStripItem.Visible'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ShouldSerializeImage">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.ToolStripItem.Image'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ShouldSerializeImageKey">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.ToolStripItem.Image'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ShouldSerializeImageIndex">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.ToolStripItem.Image'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ShouldSerializeRightToLeft">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.ToolStripItem.RightToLeft'/> property needs to be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ResetBackColor">
            <summary>
             Resets the back color to be based on the parent's back color.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ResetForeColor">
            <summary>
             Resets the fore color to be based on the parent's fore color.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ResetFont">
            <summary>
             Resets the Font to be based on the parent's Font.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ResetImage">
            <summary>
             Resets the back color to be based on the parent's back color.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ResetRightToLeft">
            <summary>
             Resets the RightToLeft to be the default.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ResetTextDirection">
            <summary>
             Resets the TextDirection to be the default.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.TranslatePoint(System.Drawing.Point,System.Windows.Forms.ToolStripPointType,System.Windows.Forms.ToolStripPointType)">
            <summary>
             Translates a point from one coordinate system to another
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ToString">
            <summary>
             ToString support
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.Unselect">
            <summary>
             removes selection bits from item state
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripItem.ToolStripItemAccessibleObject">
            <summary>
             An implementation of AccessibleChild for use with ToolStripItems
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ToolStripItemAccessibleObject.GetPropertyValue(Interop.UiaCore.UIA)">
            <summary>
             Gets the accessible property value.
            </summary>
            <param name="propertyID">The accessible property ID.</param>
            <returns>The accessible property value.</returns>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.ToolStripItemAccessibleObject.Bounds">
            <summary>
             Gets the bounds of the accessible object, in screen coordinates.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.ToolStripItemAccessibleObject.Parent">
            <summary>
             When overridden in a derived class, gets or sets the parent of an accessible object.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItem.ToolStripItemAccessibleObject.FragmentRoot">
            <summary>
             Gets the top level element.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItem.ToolStripItemAccessibleObject.FragmentNavigate(Interop.UiaCore.NavigateDirection)">
            <summary>
             Returns the element in the specified direction.
            </summary>
            <param name="direction">Indicates the direction in which to navigate.</param>
            <returns>Returns the element in the specified direction.</returns>
        </member>
        <member name="T:System.Windows.Forms.ToolStripItemInternalLayout">
            <summary>
             This class helps determine where the image and text should be drawn.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripItemAlignment">
            <summary>
             This enum is used to determine alignment of the ToolStripItem on the ToolStrip.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItemClickedEventArgs.#ctor(System.Windows.Forms.ToolStripItem)">
            <summary>
             This class represents event args a ToolStrip can use when an item has been clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItemClickedEventArgs.ClickedItem">
            <summary>
             Represents the item that was clicked on the toolStrip.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripItemClickedEventHandler">
            <summary>
             Represents a method that will handle the <see cref='E:System.Windows.Forms.Control.MouseDown'/>,
             <see cref='E:System.Windows.Forms.Control.MouseUp'/> or <see cref='E:System.Windows.Forms.Control.MouseMove'/> events of a form,
             control or other component.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripItemCollection">
            <summary>
             Summary description for ToolStripItemCollection.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ToolStripItemCollection.lastAccessedIndex">
             A caching mechanism for key accessor
             We use an index here rather than control so that we don't have lifetime
             issues by holding on to extra references.
             Note this is not Thread Safe - but WinForms has to be run in a STA anyways.
        </member>
        <member name="P:System.Windows.Forms.ToolStripItemCollection.Item(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItemCollection.Item(System.String)">
            <summary>
             Retrieves the child control with the specified key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItemCollection.ContainsKey(System.String)">
            <summary>
             Returns true if the collection contains an item with the specified key, false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItemCollection.Find(System.String,System.Boolean)">
            <summary>
             Searches for Items by their Name property, builds up an array
             of all the controls that match.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItemCollection.FindInternal(System.String,System.Boolean,System.Windows.Forms.ToolStripItemCollection,System.Collections.ArrayList)">
            <summary>
             Searches for Items by their Name property, builds up an array list
             of all the items that match.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItemCollection.IndexOfKey(System.String)">
            <summary>
             The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItemCollection.IsValidIndex(System.Int32)">
            <summary>
             Determines if the index is valid for the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItemCollection.OnAfterRemove(System.Windows.Forms.ToolStripItem)">
            <summary>
             Do proper cleanup of ownership, etc.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItemCollection.RemoveByKey(System.String)">
            <summary>
             Removes the child item with the specified key.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripItemDisplayStyle">
            <summary>
             Specifies what to render for the ToolStripItem
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripItemEventType">
            <summary>
             These methods allow the ToolStrip to route events
             to the ToolStrip item.  Since a ToolStrip is not a ToolStripItem,
             it cannot directly call OnPaint.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItemImageRenderEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.ToolStripItem,System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
             This class represents all the information to render the ToolStrip
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItemImageRenderEventArgs.Image">
            <summary>
             The image to draw
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItemImageRenderEventArgs.ImageRectangle">
            <summary>
             The rectangle to draw the Image in
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItemImageRenderEventArgs.ShiftOnPress">
            <summary>
             Not public as it currently pertains to button &amp; system renderer.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItemImageRenderEventArgs.ImageAttributes">
            <summary>
             Not public as it currently pertains to ToolStripRenderer.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripItemImageRenderEventHandler">
            <summary>
             Called when the background of a ToolStrip item is being rendered
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripItemOverflow">
            <summary>
             This enum is used to determine placement of the ToolStripItem on the ToolStrip.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripItemPlacement">
            <summary>
             This enum represents the current layout of the ToolStripItem.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItemRenderEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.ToolStripItem)">
            <summary>
             This class represents all the information to render the ToolStrip
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItemRenderEventArgs.Graphics">
            <summary>
             The graphics object to draw with
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItemRenderEventArgs.Item">
            <summary>
             The item to draw
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItemRenderEventArgs.ToolStrip">
            <summary>
             The toolstrip the item is currently parented to
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripItemRenderEventHandler">
            <summary>
             Called when the background of a ToolStrip item is being rendered
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripItemTextRenderEventArgs">
            <summary>
             This class represents all the information to render the ToolStrip
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItemTextRenderEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.ToolStripItem,System.String,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Font,System.Windows.Forms.TextFormatFlags)">
            <summary>
             This class represents all the information to render the ToolStrip
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripItemTextRenderEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.ToolStripItem,System.String,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Font,System.Drawing.ContentAlignment)">
            <summary>
             This class represents all the information to render the ToolStrip
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItemTextRenderEventArgs.Text">
            <summary>
             The string to draw
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItemTextRenderEventArgs.TextColor">
            <summary>
             The color to draw the text
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItemTextRenderEventArgs.TextFont">
            <summary>
             The font to draw the text
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItemTextRenderEventArgs.TextRectangle">
            <summary>
             The rectangle to draw the text in
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItemTextRenderEventArgs.TextFormat">
            <summary>
             The rectangle to draw the text in
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripItemTextRenderEventArgs.TextDirection">
            <summary>
             The angle at which the text should be drawn in tenths of degrees.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripItemTextRenderEventHandler">
            <summary>
             Called when the background of a ToolStrip item is being rendered
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripLabel">
            <summary>
             A non selectable ToolStrip item
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripLabel.#ctor">
            <summary>
             A non selectable ToolStrip item
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripLabel.InvalidateLinkFonts">
            <summary>
             Invalidates the current set of fonts we use when painting
             links.  The fonts will be recreated when needed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripLabel.CreateInternalLayout">
            <summary>
             Creates an instance of the object that defines how image and text
             gets laid out in the ToolStripItem
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripLabel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripLabel.ToolStripLabelLayout">
            <summary>
             This class performs internal layout for the "split button button" portion of a split button.
             Its main job is to make sure the inner button has the same parent as the split button, so
             that layout can be performed using the correct graphics context.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripLocationCancelEventArgs">
            <summary>
             Provides Arguments for the Cancelable LocationChanging Event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripLocationCancelEventArgs.#ctor(System.Drawing.Point,System.Boolean)">
            <summary>
             Initializes a new instance of the ToolStripLocationCancelEventArgs with cancel value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripLocationCancelEventArgs.NewLocation">
            <summary>
             Returns the New Location of the ToolStrip.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripLocationCancelEventHandler">
            <summary>
             Represents a method that will handle the event raised when canceling an
             <see cref="M:System.Windows.Forms.ToolStrip.OnLocationChanging(System.Windows.Forms.ToolStripLocationCancelEventArgs)"/> event for <see cref="T:System.Windows.Forms.ToolStrip"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.AddEventHandler(System.Int32,System.Delegate)">
            <summary>Static events only!!!</summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.FindToolStrip(System.String)">
            <summary>
             Find a toolstrip in the weak ref arraylist, return null if nothing was found
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.FindToolStrip(System.Windows.Forms.Form,System.String)">
            <summary>
             Find a toolstrip in the weak ref arraylist, return null if nothing was found
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.PruneToolStripList">
            <summary> removes dead entries from the toolstrip weak reference collection. </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.RemoveEventHandler(System.Int32,System.Delegate)">
            <summary> static events only!!!</summary>
        </member>
        <member name="F:System.Windows.Forms.ToolStripManager.defaultRenderer">
             These are thread static because we want separate instances
             for each thread.  We dont want to guarantee thread safety
             and dont want to have to take locks in painting code.
        </member>
        <member name="P:System.Windows.Forms.ToolStripManager.Renderer">
            <summary> the default renderer for the thread.  When ToolStrip.RenderMode is set to manager - this
             is the property used.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripManager.RenderMode">
            <summary> returns the default toolstrip RenderMode for the thread </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripManager.VisualStylesEnabled">
            <summary> an additional layering of control.  this lets you pick whether your toolbars
             should use visual style information (theming) to render itself.
             potentially you could want a themed app but an unthemed toolstrip. (e.g. Whidbey VS).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.LoadSettings(System.Windows.Forms.Form)">
            <summary>
             Loads settings for the given Form using the form type's fullname as settings key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.LoadSettings(System.Windows.Forms.Form,System.String)">
            <summary>
             Loads settings for the given Form with the given settings key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.SaveSettings(System.Windows.Forms.Form)">
            <summary>
             Saves settings for the given form using the form type's fullname as settings key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.SaveSettings(System.Windows.Forms.Form,System.String)">
            <summary>
             Saves settings for the given form with the given settings key.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripManager.ModalMenuFilter">
              ModalMenuFilter
              - this installs a message filter when a dropdown becomes active.
              - the message filter
              a. eats WM_MOUSEMOVEs so that the window that's underneath
              doesnt get highlight processing/tooltips
              b. detects mouse clicks.  if the click is outside the dropdown, it
              dismisses it.
              c. detects when the active window has changed.  If the active window
              is unexpected, it dismisses all dropdowns.
              d. detects keyboard messages, and redirects them to the active dropdown.
            
              - There should be 1 Message Filter per thread and it should be uninstalled once
              the last dropdown has gone away
              This is not part of ToolStripManager because it's DropDown specific and
              we dont want to publicly expose this message filter.
        </member>
        <member name="P:System.Windows.Forms.ToolStripManager.ModalMenuFilter.ActiveHwnd">
             this is the HWnd that was active when we popped the first dropdown.
        </member>
        <member name="P:System.Windows.Forms.ToolStripManager.ModalMenuFilter.MessageHook">
             This is used in scenarios where windows forms
             does not own the message pump, but needs access
             to the message queue.
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.IsValidShortcut(System.Windows.Forms.Keys)">
            <summary> determines if the key combination is valid for a shortcut.
             must have a modifier key + a regular key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary> this function is called for toplevel controls to process shortcuts.
             this function should be called from the topmost container control only.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.ProcessShortcut(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary> we're halfway to an accellerator table system here.
             each toolstrip maintains a hash of the current shortcuts its using.
             this way the search only takes O(number of toolstrips in the thread)
             ToolStripMenuItem pushes itself into this table as the owner is set or the shortcut changes.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.ProcessMenuKey(System.Windows.Forms.Message@)">
            <summary> this function handles when Alt is pressed.
             if it finds a menustrip to select, it returns true,
             if it doesnt it returns false.
             if it finds a win32 menu is already associated with the control it bails, returning false.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.FindMatch(System.Windows.Forms.ToolStripItem,System.Windows.Forms.ToolStripItemCollection)">
            
              ToolStripManager MenuMerging functions
            
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.Merge(System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStrip)">
            <summary>
             merge two toolstrips
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.Merge(System.Windows.Forms.ToolStrip,System.String)">
            <summary>
             merge two toolstrips
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.RevertMergeInternal(System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStrip,System.Boolean)">
            <summary>
             doesn't do a null check on source... if it's null we unmerge everything
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.RevertMerge(System.Windows.Forms.ToolStrip)">
            <summary>
             unmerge two toolstrips
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.RevertMerge(System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStrip)">
            <summary>
             unmerge two toolstrips
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripManager.RevertMerge(System.String)">
            <summary>
             unmerge two toolstrips
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripMenuItem">
            <summary>
             ToolStripMenuItem
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripMenuItem.#ctor(System.IntPtr,System.Int32,System.Windows.Forms.IWin32Window)">
            <summary> this constructor is only used when we're trying to
             mimic a native menu like the system menu.  In that case
             we've got to go ahead and collect the command id and the
             target window to send WM_COMMAND/WM_SYSCOMMAND messages to.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.ToolStripMenuItem.DefaultSize" -->
        <member name="P:System.Windows.Forms.ToolStripMenuItem.Checked">
            <summary>
             Gets or sets a value indicating whether the item is checked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripMenuItem.CheckedImage">
            <summary>
             Keeps a shared copy of the checked image between all menu items
             Fishes out the appropriate one based on CheckState.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripMenuItem.CheckState">
            <summary>
             Gets
             or sets a value indicating whether the check box is checked.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripMenuItem.CheckedChanged">
            <summary>
             Occurs when the
             value of the <see cref='P:System.Windows.Forms.CheckBox.Checked'/>
             property changes.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripMenuItem.CheckStateChanged">
            <summary>
             Occurs when the
             value of the <see cref='P:System.Windows.Forms.CheckBox.CheckState'/>
             property changes.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripMenuItem.Overflow">
            <summary>
             Specifies whether or not the item is glued to the ToolStrip or overflow or
             can float between the two.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripMenuItem.ShortcutKeys">
            <summary>
             Gets or sets the shortcut keys associated with the menu
             item.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripMenuItem.ShowShortcutKeys">
            <summary>
             Gets or sets a value that indicates whether the shortcut
             keys that are assocaited
             with the menu item are displayed next to the menu item
             caption.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripMenuItem.IsTopLevel">
            <summary>
             An item is toplevel if it is parented to anything other than a ToolStripDropDownMenu
             This implies that a ToolStripMenuItem in an overflow IS a toplevel item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripMenuItem.MdiForm">
            <summary> Tag property for internal use </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripMenuItem.OnCheckedChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.ToolStripMenuItem.CheckedChanged'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripMenuItem.OnCheckStateChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.ToolStripMenuItem.CheckStateChanged'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripMenuItem.OnMenuAutoExpand">
            <devdoc/>
        </member>
        <member name="M:System.Windows.Forms.ToolStripMenuItem.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <devdoc/>
        </member>
        <member name="M:System.Windows.Forms.ToolStripMenuItem.OnMouseEnter(System.EventArgs)">
            <devdoc/>
        </member>
        <member name="M:System.Windows.Forms.ToolStripMenuItem.OnMouseLeave(System.EventArgs)">
            <devdoc/>
        </member>
        <member name="M:System.Windows.Forms.ToolStripMenuItem.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <devdoc/>
        </member>
        <member name="M:System.Windows.Forms.ToolStripMenuItem.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
             handle shortcut keys here.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripMenuItem.SetBounds(System.Drawing.Rectangle)">
            <summary> overridden here so we scooch over when we're in the ToolStripDropDownMenu</summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripMenuItem.SetNativeTargetWindow(System.Windows.Forms.IWin32Window)">
            <summary> this is to support routing to native menu commands </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripMenuItem.SetNativeTargetMenu(System.IntPtr)">
            <summary> this is to support routing to native menu commands </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripMenuItem.ToolStripMenuItemAccessibleObject">
            <summary>
             An implementation of AccessibleChild for use with ToolStripItems
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MenuTimer.Cancel(System.Windows.Forms.ToolStripMenuItem)">
            <summary> cancels if and only if this item was the one that
              requested the timer
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.ToolStripOverflow.LayoutEngine" -->
        <member name="T:System.Windows.Forms.ToolStripOverflowButton">
            <summary>
             ToolStripOverflowButton
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripPanel.AutoSizeChanged">
             Override base AutoSizeChanged to we can change visibility/browsability attributes
        </member>
        <member name="P:System.Windows.Forms.ToolStripPanel.RowsInternal">
            <summary>
             Collection of child controls.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripPanel.Dispose(System.Boolean)">
            <summary>
             Disposes of the resources (other than memory) used by
             the <see cref='T:System.Windows.Forms.ContainerControl'/>
             .
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripPanel.OnParentChanged(System.EventArgs)">
            <summary>
             We want to Set ToolStripPanel at DesignTime when the ToolStripPanel is added to the Form,
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripPanel.PointToRow(System.Drawing.Point)">
            <summary>
             Given a point within the ToolStripPanel client area -
             it returns the row.  If no such row exists, returns null
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection.Item(System.Int32)">
             <summary>
            
             </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection.OnAfterRemove(System.Windows.Forms.ToolStripPanelRow)">
            <summary>
             Do proper cleanup of ownership, etc.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripPanelCell">
             this class is a container for toolstrips on a rafting row.
             you can set layout styles on this container all day long and not
             affect the underlying toolstrip's properties.... so if its
             removed from a rafting container its still got its defaults
             set up for it.
        </member>
        <member name="M:System.Windows.Forms.ToolStripPanelCell.OnToolStripLocationChanging(System.Object,System.Windows.Forms.ToolStripLocationCancelEventArgs)">
            <summary>
             New EventHandler for The LocationChanging so that ToolStripPanelCell Listens to the Location Property on the ToolStrips's being changed.
             The ToolStrip needs to Raft (Join) to the approriate Location Depending on the new Location w.r.t to the oldLocation ...
             Hence the need for this event listener.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripPanelRenderEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.ToolStripPanel)">
            <summary>
             This class represents all the information to render the toolStrip
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripPanelRenderEventArgs.Graphics">
            <summary>
             The graphics object to draw with
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripPanelRenderEventArgs.ToolStripPanel">
            <summary>
             Represents which toolStrip was affected by the click
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripPanelRenderEventHandler">
            <summary>
             Called when the background of the ToolStripPanel is being rendered
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripPanelRow.ControlsInternal">
            <summary>
             Collection of child controls.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripPanelRow.Properties">
            <summary>
             Retrieves our internal property storage object. If you have a property
             whose value is not always set, you should store it in here to save
             space.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripPanelRow.CanMove(System.Windows.Forms.ToolStrip)">
            <summary>
             returns true if there is enough space to "raft" the control
             ow returns false
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripPanelRow.System#Windows#Forms#Layout#IArrangedElement#Container">
            <summary>
             Should not be exposed as this returns an unexposed type.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripPanelRow.ToolStripPanelRowManager.GrowControlsAfter(System.Int32,System.Int32)">
            <summary>
             grows all controls after the index to be their preferred size.
             reports back how much space was used.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripPanelRow.ToolStripPanelRowManager.GrowControlsBefore(System.Int32,System.Int32)">
            <summary>
             grows all controls before the index to be their preferred size.
             reports back how much space was used.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripPanelRow.HorizontalRowManager.CanMove(System.Windows.Forms.ToolStrip)">
            <summary>
             returns true if there is enough space to "raft" the control
             ow returns false
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripPanelRow.VerticalRowManager.CanMove(System.Windows.Forms.ToolStrip)">
            <summary>
             returns true if there is enough space to "raft" the control
             ow returns false
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripPanelRow.ToolStripPanelRowControlCollection">
             <summary>
              ToolStripPanelRowControlCollection
            
              this class represents the collection of controls on a particular row.
              when you add and remove controls from this collection - you also add and remove
              controls to and from the ToolStripPanel.Control's collection (which happens
              to be externally readonly.)
            
              This class is used to represent the IArrangedElement.Children for the ToolStripPanelRow -
              which means that this collection represents the IArrangedElements to layout for
              a particular ToolStripPanelRow.
            
              We need to keep copies of the controls in both the ToolStripPanelRowControlCollection and
              the ToolStripPanel.Control collection  as the ToolStripPanel.Control collection
              is responsible for parenting and unparenting the controls (ToolStripPanelRows do NOT derive from
              Control and thus are NOT hwnd backed).
             </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripPanelRow.ToolStripPanelRowControlCollection.OnAfterRemove(System.Windows.Forms.Control,System.Int32)">
            <summary>
             Do proper cleanup of ownership, etc.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripPanelRow.ToolStripPanelRowControlCollection.ToolStripPanelCellToControlEnumerator">
             We want to pretend like we're only holding controls... so everywhere we've returned controls.
             but the problem is if you do a foreach, you'll get the cells not the controls.  So we've got
             to sort of write a wrapper class around the ArrayList enumerator.
        </member>
        <member name="T:System.Windows.Forms.ToolStripProfessionalRenderer">
            <summary>
             Summary description for ProfessionalToolStripRenderer.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripProfessionalRenderer.OnRenderOverflowButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolStripProfessionalRenderer.uex" path="docs/doc[@for=&quot;ToolStripProfessionalRenderer.OnRenderOverflowButton&quot;]/*" />
        </member>
        <member name="M:System.Windows.Forms.ToolStripProfessionalRenderer.FillWithDoubleGradient(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32,System.Int32,System.Drawing.Drawing2D.LinearGradientMode,System.Boolean)">
            <summary>
              This function paints with three colors, beginning, middle, and end.
              it paints:
              (1)the entire bounds in the middle color
              (2)gradient from beginning to middle of width firstGradientWidth
              (3)gradient from middle to end of width secondGradientWidth
            
              if there isnt enough room to do (2) and (3) it merges into a single gradient from beginning to end.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripProgressBar.ProgressBar">
            <summary>
             Create a strongly typed accessor for the class
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Forms.ToolStripProgressBar.DefaultSize">
            <summary>
             Specify what size you want the item to start out at
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Forms.ToolStripProgressBar.DefaultMargin">
            <summary>
             Specify how far from the edges you want to be
            </summary>
            <value></value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.ToolStripProgressBar.RightToLeftLayout" -->
        <member name="P:System.Windows.Forms.ToolStripProgressBar.Step">
            <summary>
             Wrap some commonly used properties
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Forms.ToolStripProgressBar.Style">
            <summary>
             Wrap some commonly used properties
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Forms.ToolStripProgressBar.Text">
            <summary>
             Hide the property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripProgressBar.Value">
            <summary>
             Wrap some commonly used properties
            </summary>
            <value></value>
        </member>
        <member name="E:System.Windows.Forms.ToolStripProgressBar.KeyDown">
            <summary>
             Hide the event.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripProgressBar.KeyPress">
            <summary>
             Hide the event.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripProgressBar.KeyUp">
            <summary>
             Hide the event.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripProgressBar.LocationChanged">
            <summary>
             Hide the event.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripProgressBar.OwnerChanged">
            <summary>
             Hide the event.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripProgressBar.TextChanged">
            <summary>
             Hide the event.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripProgressBar.Validated">
            <summary>
             Hide the event.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripProgressBar.Validating">
            <summary>
             Hide the event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripRenderer.Events">
            <summary>
             Gets the list of event handlers that are attached to this component.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripRenderer.RenderArrow">
              -----------------------------------------------------------------------------
            
        </member>
        <member name="E:System.Windows.Forms.ToolStripRenderer.RenderToolStripBackground">
            <summary>
             Occurs when the display style has changed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripRenderer.RenderToolStripBorder">
            <summary>
             Occurs when the display style has changed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripRenderer.RenderButtonBackground">
            <summary>
             Occurs when the display style has changed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripRenderer.RenderDropDownButtonBackground">
            <summary>
             Occurs when the display style has changed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripRenderer.RenderOverflowButtonBackground">
            <summary>
             Occurs when the display style has changed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripRenderer.RenderGrip">
            <summary>
             Occurs when the display style has changed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripRenderer.RenderItemBackground">
            <summary>
             Occurs when the display style has changed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripRenderer.RenderItemImage">
            <summary>
             Draws the split button
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripRenderer.RenderItemCheck">
            <summary>
             Draws the checkmark
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripRenderer.RenderItemText">
            <summary>
             Draws the split button
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripRenderer.RenderLabelBackground">
            <summary>
             Occurs when the display style has changed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripRenderer.RenderMenuItemBackground">
            <summary>
             Occurs when the display style has changed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripRenderer.RenderToolStripStatusLabelBackground">
            <summary>
             Draws the split button
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripRenderer.RenderStatusStripSizingGrip">
            <summary>
             Occurs when the display style has changed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripRenderer.RenderSplitButtonBackground">
            <summary>
             Draws the split button
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.AddHandler(System.Object,System.Delegate)">
              -----------------------------------------------------------------------------
            
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.DrawToolStripBackground(System.Windows.Forms.ToolStripRenderEventArgs)">
            <summary>
             Draw the background color
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.DrawGrip(System.Windows.Forms.ToolStripGripRenderEventArgs)">
            <summary>
             Draw the background color
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.DrawItemBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the item's background.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.DrawImageMargin(System.Windows.Forms.ToolStripRenderEventArgs)">
            <summary>
             Draw the background color
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.DrawLabelBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the background color
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.DrawButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the item's background.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.DrawDropDownButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the item's background.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.DrawOverflowButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the item's background.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.DrawItemImage(System.Windows.Forms.ToolStripItemImageRenderEventArgs)">
            <summary>
             Draw image
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.DrawItemCheck(System.Windows.Forms.ToolStripItemImageRenderEventArgs)">
            <summary>
             Draw image
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.DrawItemText(System.Windows.Forms.ToolStripItemTextRenderEventArgs)">
            <summary>
             Draw text
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.DrawMenuItemBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the item's background.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.DrawSplitButton(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the background color
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.DrawToolStripStatusLabelBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the background color
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.DrawSeparator(System.Windows.Forms.ToolStripSeparatorRenderEventArgs)">
            <summary>
             Draw the separator
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.OnRenderArrow(System.Windows.Forms.ToolStripArrowRenderEventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarRenderer.uex" path="docs/doc[@for=&quot;ToolStripRenderer.OnRenderArrow&quot;]/*" />
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.OnRenderToolStripBackground(System.Windows.Forms.ToolStripRenderEventArgs)">
            <summary>
             Draw the ToolStrip background.  ToolStrip users should override this if they want to draw differently.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.OnRenderToolStripBorder(System.Windows.Forms.ToolStripRenderEventArgs)">
            <summary>
             Draw the border around the ToolStrip.  This should be done as the last step.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.OnRenderGrip(System.Windows.Forms.ToolStripGripRenderEventArgs)">
            <summary>
             Draw the grip.  ToolStrip users should override this if they want to draw differently.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.OnRenderItemBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the items background
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.OnRenderImageMargin(System.Windows.Forms.ToolStripRenderEventArgs)">
            <summary>
             Draw the items background
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.OnRenderButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the button background
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.OnRenderDropDownButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the button background
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.OnRenderOverflowButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the button background
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.OnRenderItemImage(System.Windows.Forms.ToolStripItemImageRenderEventArgs)">
            <summary>
             Draw the item'si mage.  ToolStrip users should override this function to change the
             drawing of all images.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.OnRenderItemText(System.Windows.Forms.ToolStripItemTextRenderEventArgs)">
            <summary>
             Draw the item's text.  ToolStrip users should override this function to change the
             drawing of all text.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.OnRenderLabelBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the button background
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.OnRenderMenuItemBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the items background
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.OnRenderSeparator(System.Windows.Forms.ToolStripSeparatorRenderEventArgs)">
            <summary>
             Draws a toolbar separator. ToolStrip users should override this function to change the
             drawing of all separators.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderer.OnRenderSplitButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the item's background.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.ToolStrip)">
            <summary>
             This class represents all the information to render the toolStrip
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripRenderEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.ToolStrip,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
             This class represents all the information to render the toolStrip
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripRenderEventArgs.Graphics">
            <summary>
             The graphics object to draw with
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripRenderEventArgs.AffectedBounds">
            <summary>
             The bounds to draw in
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripRenderEventArgs.ToolStrip">
            <summary>
             Represents which toolStrip was affected by the click
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripRenderEventArgs.BackColor">
            <summary>
             The back color to draw with.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripRenderEventHandler">
            <summary>
             Called when the background of the ToolStrip is being rendered
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripScrollButton">
            <summary>
             A non selectable ToolStrip item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripScrollButton.DefaultMargin">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripSeparator.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripSeparator.ToolStripSeparatorAccessibleObject">
            <summary>
             An implementation of AccessibleChild for use with ToolStripItems
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripSeparatorRenderEventArgs">
            <summary>
             This class represents all the information to render the ToolStrip
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSeparatorRenderEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.ToolStripSeparator,System.Boolean)">
            <summary>
             This class represents all the information to render the ToolStrip
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripSeparatorRenderEventHandler">
            <summary>
             Called when the background of a ToolStrip item is being rendered
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripSettings">
            <summary>
             A settings class used by the ToolStripManager to save toolstrip settings.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripSettingsManager">
            <summary>
             Helper class used by ToolStripManager that implements most of the logic to save out and apply
             settings for toolstrips on a form.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripSettingsManager.SettingsStub">
            <summary>
             Light weight structure that captures the properties we want to save as settings.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSplitButton.#ctor">
            <summary>
             Summary of ToolStripSplitButton.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripSplitButton.ButtonBounds">
            <summary>
             Summary of ToolStripSplitButton.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripSplitButton.ButtonPressed">
            <summary>
             Summary of ButtonPressed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripSplitButton.ButtonSelected">
            <summary>
             Summary of ButtonPressed.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripSplitButton.ButtonClick">
            <summary>
             Occurs when the button portion of a split button is clicked.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripSplitButton.ButtonDoubleClick">
            <summary>
             Occurs when the utton portion of a split button  is double clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripSplitButton.DefaultItem">
            <summary>
             Summary of DefaultItem.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolStripSplitButton.DefaultItemChanged">
            <summary>
             Occurs when the default item has changed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripSplitButton.DismissWhenClicked">
            <summary>
             specifies the default behavior of these items on ToolStripDropDowns when clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripSplitButton.DropDownButtonBounds">
            <summary>
             The bounds of the DropDown in ToolStrip coordinates.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripSplitButton.DropDownButtonPressed">
            <summary>
             Summary of DropDownButtonBounds.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripSplitButton.DropDownButtonSelected">
            <summary>
             Summary of DropDownButtonSelected.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripSplitButton.DropDownButtonWidth">
            <summary>
             Summary of DropDownButtonWidth.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripSplitButton.DefaultDropDownButtonWidth">
            <summary>
             This is here for serialization purposes.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripSplitButton.SplitButtonButton">
            <summary>
             Just used as a convenience to help manage layout
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripSplitButton.SplitButtonButtonLayout">
            <summary>
             Summary of SplitButtonButtonLayout.
            </summary>	
        </member>
        <member name="P:System.Windows.Forms.ToolStripSplitButton.SplitterWidth">
            <summary>
             the width of the separator between the default and drop down button
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripSplitButton.SplitterBounds">
            <summary>
             the boundaries of the separator between the default and drop down button, exposed for custom
             painting purposes.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSplitButton.CalculateLayout">
            <summary>
             Summary of CalculateLayout.
            </summary>	
        </member>
        <member name="M:System.Windows.Forms.ToolStripSplitButton.InvalidateSplitButtonLayout">
            <summary>
             Summary of InvalidateSplitButtonLayout.
            </summary>	
        </member>
        <member name="M:System.Windows.Forms.ToolStripSplitButton.OnButtonClick(System.EventArgs)">
            <summary>
             called when the button portion of a split button is clicked
             if there is a default item, this will route the click to the default item
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSplitButton.OnButtonDoubleClick(System.EventArgs)">
            <summary>
             called when the button portion of a split button is double clicked
             if there is a default item, this will route the double click to the default item
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSplitButton.OnDefaultItemChanged(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSplitButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Summary of OnMouseDown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSplitButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Summary of OnMouseUp.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSplitButton.OnRightToLeftChanged(System.EventArgs)">
            <summary>
             Summary of OnRightToLeftChanged.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.ToolStripSplitButton.OnPaint(System.Windows.Forms.PaintEventArgs)" -->
        <member name="M:System.Windows.Forms.ToolStripSplitButton.ResetDropDownButtonWidth">
            <summary>
             Resets the RightToLeft to be the default.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSplitButton.SetDropDownButtonBounds(System.Drawing.Rectangle)">
            <summary>
             Summary of SetDropDownBounds.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSplitButton.ShouldSerializeDropDownButtonWidth">
            <summary>
             Determines if the <see cref='P:System.Windows.Forms.ToolStripItem.Size'/> property needs to be persisted.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripSplitButton.ToolStripSplitButtonButton">
            <summary>
             This class represents the item to the left of the dropdown [ A |v]  (e.g the "A")
             It exists so that we can use our existing methods for text and image layout
             and have a place to stick certain state information like pushed and selected
             Note since this is NOT an actual item hosted on the ToolStrip - it wont get things
             like MouseOver, wont be laid out by the ToolStrip, etc etc.  This is purely internal
             convenience.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripSplitButton.ToolStripSplitButtonButtonLayout">
            <summary>
             This class performs internal layout for the "split button button" portion of a split button.
             Its main job is to make sure the inner button has the same parent as the split button, so
             that layout can be performed using the correct graphics context.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripSplitStackLayout.BackwardsWalkingIndex">
            <summary>
             This is the index we use to send items to the overflow if we run out of room
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.ToolStripSplitStackLayout.ForwardsWalkingIndex" -->
        <member name="P:System.Windows.Forms.ToolStripSplitStackLayout.ToolStrip">
            <summary>
             The current ToolStrip we're operating over.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSplitStackLayout.CalculatePlacementsHorizontal">
            <summary>
             This method will mark whether items should be placed in the overflow or on the main ToolStrip.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSplitStackLayout.CalculatePlacementsVertical">
            <summary>
             This method will mark whether items should be placed in the overflow or on the main ToolStrip.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSplitStackLayout.SendNextItemToOverflow(System.Int32,System.Boolean)">
            <summary>
             This method is called when we are walking through the item collection and we have realized that we
             need to free up "X" amount of space to be able to fit an item onto the ToolStrip.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolStripStatusLabel">
            <summary>
             A non selectable ToolStrip item
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripStatusLabel.#ctor">
            <summary>
             A non selectable ToolStrip item
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripStatusLabel.CreateAccessibilityInstance">
            <summary>
             Creates a new AccessibleObject for this ToolStripStatusLabel instance.
             The AccessibleObject instance returned by this method supports UIA Live Region feature.
            </summary>
            <returns>
             AccessibleObject for this ToolStripStatusLabel instance.
            </returns>
        </member>
        <member name="M:System.Windows.Forms.ToolStripStatusLabel.CreateInternalLayout">
            <summary>
             Creates an instance of the object that defines how image and text
             gets laid out in the ToolStripItem
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripStatusLabel.Initialize">
            <summary>
             Called by all constructors of ToolStripButton.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripStatusLabel.LiveSetting">
            <summary>
             Indicates the "politeness" level that a client should use
             to notify the user of changes to the live region.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripStatusLabel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Inheriting classes should override this method to handle this event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripStatusLabel.ToolStripStatusLabelAccessibleObject.RaiseLiveRegionChanged">
            <summary>
             Raises the LiveRegionChanged UIA event.
            </summary>
            <returns>True if operation succeeds, False otherwise.</returns>
        </member>
        <member name="T:System.Windows.Forms.ToolStripStatusLabel.ToolStripStatusLabelLayout">
            <summary>
             This class performs internal layout for the "split button button" portion of a split button.
             Its main job is to make sure the inner button has the same parent as the split button, so
             that layout can be performed using the correct graphics context.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripSystemRenderer.VisualStyleRenderer">
            <summary>
             Draw the background color
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.FillBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
             Fill the item's background as bounded by the rectangle
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.GetPen(System.Drawing.Color,System.Drawing.Pen@)">
            <summary>
             returns true if you are required to dispose the pen
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.GetItemState(System.Windows.Forms.ToolStripItem)">
            <summary>
             translates the ToolStrip item state into a toolbar state, which is something the renderer understands
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.GetSplitButtonDropDownItemState(System.Windows.Forms.ToolStripSplitButton)">
            <summary>
             translates the ToolStrip item state into a toolbar state, which is something the renderer understands
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.GetSplitButtonItemState(System.Windows.Forms.ToolStripSplitButton)">
            <summary>
             translates the ToolStrip item state into a toolbar state, which is something the renderer understands
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.GetSplitButtonToolBarState(System.Windows.Forms.ToolStripSplitButton,System.Boolean)">
            <summary>
             translates the ToolStrip item state into a toolbar state, which is something the renderer understands
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.GetToolBarState(System.Windows.Forms.ToolStripItem)">
            <summary>
             translates the ToolStrip item state into a toolbar state, which is something the renderer understands
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.OnRenderToolStripBackground(System.Windows.Forms.ToolStripRenderEventArgs)">
            <summary>
             Draw the ToolStrip background.  ToolStrip users should override this if they want to draw differently.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.OnRenderToolStripBorder(System.Windows.Forms.ToolStripRenderEventArgs)">
            <summary>
             Draw the border around the ToolStrip.  This should be done as the last step.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.OnRenderGrip(System.Windows.Forms.ToolStripGripRenderEventArgs)">
            <summary>
             Draw the grip.  ToolStrip users should override this if they want to draw differently.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.OnRenderItemBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the items background
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.OnRenderImageMargin(System.Windows.Forms.ToolStripRenderEventArgs)">
            <summary>
             Draw the items background
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.OnRenderButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the button background
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.OnRenderDropDownButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the button background
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.OnRenderOverflowButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the button background
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.OnRenderLabelBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the button background
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.OnRenderMenuItemBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the items background
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.OnRenderSeparator(System.Windows.Forms.ToolStripSeparatorRenderEventArgs)">
            <summary>
             Draws a toolbar separator. ToolStrip users should override this function to change the
             drawing of all separators.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.OnRenderSplitButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             Draw the item's background.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.RenderItemInternal(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
             This exists mainly so that buttons, labels and items, etc can share the same implementation.
             If OnRenderButton called OnRenderItem we would never be able to change the implementation
             as it would be a breaking change. If in v1, the user overrode OnRenderItem to draw green triangles
             and in v2 we decided to add a feature to button that would require us to no longer call OnRenderItem -
             the user's version of OnRenderItem would not get called when he upgraded his framework.  Hence
             everyone should just call this private shared method.  Users need to override each item they want
             to change the look and feel of.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolStripSystemRenderer.RenderSeparatorInternal(System.Drawing.Graphics,System.Windows.Forms.ToolStripItem,System.Drawing.Rectangle,System.Boolean)">
            <summary>
             </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolStripTextBox.DefaultMargin">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ToolTip">
            <summary>
             Provides a small pop-up window containing a line of text that describes the purpose of a
             tool or control (usually represented as a graphical object) in a program.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ToolTip._trackPosition">
            <summary>
             Setting TTM_TRACKPOSITION will cause redundant POP and Draw Messages.
             Hence we guard against this by having this private flag.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ToolTip._created">
            <summary>
             Adding a tool twice breaks the ToolTip, so we need to track which
             tools are created to prevent this.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.#ctor(System.ComponentModel.IContainer)">
            <summary>
             Initializes a new instance of the <see cref="T:System.Windows.Forms.ToolTip"/> class, given the container.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:System.Windows.Forms.ToolTip"/> class in its default state.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolTip.Active">
            <summary>
             Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolTip"/> control is currently active.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolTip.AutomaticDelay">
            <summary>
             Gets or sets the time (in milliseconds) that passes before the <see cref="T:System.Windows.Forms.ToolTip"/> appears.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolTip.AutoPopDelay">
            <summary>
             Gets or sets the initial delay for the <see cref="T:System.Windows.Forms.ToolTip"/> control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolTip.BackColor">
            <summary>
             Gets or sets the BackColor for the <see cref="T:System.Windows.Forms.ToolTip"/> control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolTip.CreateParams">
            <summary>
             The CreateParams to create the window.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolTip.ForeColor">
            <summary>
             Gets or sets the ForeColor for the <see cref="T:System.Windows.Forms.ToolTip"/> control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolTip.IsActivatedByKeyboard">
            <summary>
             Shows if the keyboard tooltip is currently active.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolTip.IsBalloon">
            <summary>
             Gets or sets the IsBalloon for the <see cref="T:System.Windows.Forms.ToolTip"/> control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolTip.InitialDelay">
            <summary>
             Gets or sets the initial delay for the <see cref="T:System.Windows.Forms.ToolTip"/> control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolTip.OwnerDraw">
            <summary>
             Indicates whether the ToolTip will be drawn by the system or the user.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolTip.ReshowDelay">
            <summary>
             Gets or sets the length of time (in milliseconds) that it takes subsequent ToolTip
             instances to appear as the mouse pointer moves from one ToolTip region to another.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolTip.ShowAlways">
            <summary>
             Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolTip"/> appears even when its
             parent control is not active.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolTip.StripAmpersands">
            <summary>
             When set to true, any ampersands in the Text property are not displayed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolTip.ToolTipIcon">
            <summary>
             Gets or sets an Icon on the ToolTip.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolTip.ToolTipTitle">
            <summary>
             Gets or sets the title of the ToolTip.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolTip.UseAnimation">
            <summary>
             When set to true, animations are used when tooltip is shown or hidden.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ToolTip.UseFading">
            <summary>
             When set to true, a fade effect is used when tooltips are shown or hidden.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolTip.Draw">
            <summary>
             Fires in OwnerDraw mode when the tooltip needs to be drawn.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.ToolTip.Popup">
            <summary>
             Fires when the tooltip is just about to be shown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.AdjustBaseFromAuto">
            <summary>
             Adjusts the other delay values based on the Automatic value.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.AnnounceText(System.Windows.Forms.Control,System.String)">
            <summary>
             ScreenReader announces ToolTip text for an element
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.OnDraw(System.Windows.Forms.DrawToolTipEventArgs)">
            <summary>
             Fires the Draw event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.OnPopup(System.Windows.Forms.PopupEventArgs)">
            <summary>
             Fires the Popup event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.CanExtend(System.Object)">
            <summary>
             Returns true if the tooltip can offer an extender property to the specified target component.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.CreateHandle">
            <summary>
             Creates the handle for the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.DestroyHandle">
            <summary>
             Destroys the handle for this control.
             Required by Label to destroy the handle for the toolTip added for AutoEllipses.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.Dispose(System.Boolean)">
            <summary>
             Disposes of the <see cref="T:System.Windows.Forms.ToolTip"/> component.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.GetDelayTime(Interop.ComCtl32.TTDT)">
            <summary>
             Returns the delayTime based on the NativeMethods.TTDT_* values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.GetTOOLINFO(System.Windows.Forms.Control,System.String)">
            <summary>
             Returns a detailed TOOLINFO_TOOLTIP structure that represents the specified region.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.GetToolTip(System.Windows.Forms.Control)">
            <summary>
             Retrieves the <see cref="T:System.Windows.Forms.ToolTip"/> text associated with the specified control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.GetWindowFromPoint(System.Drawing.Point,System.Boolean@)">
            <summary>
             Returns the HWND of the window that is at the specified point. This handles special
             cases where one Control owns multiple HWNDs (i.e. ComboBox).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.RemoveAll">
            <summary>
             Removes all of the tooltips currently associated with the <see cref="T:System.Windows.Forms.ToolTip"/> control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.SetDelayTime(Interop.ComCtl32.TTDT,System.Int32)">
            <summary>
             Sets the delayTime based on the NativeMethods.TTDT_* values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.SetToolTip(System.Windows.Forms.Control,System.String)">
            <summary>
             Associates <see cref="T:System.Windows.Forms.ToolTip"/> text with the specified control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.SetToolTipInternal(System.Windows.Forms.Control,System.Windows.Forms.ToolTip.TipInfo)">
            <summary>
             Associates <see cref="T:System.Windows.Forms.ToolTip"/> text with the specified information
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.ShouldSerializeAutomaticDelay">
            <summary>
             Returns true if the AutomaticDelay property should be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.ShouldSerializeAutoPopDelay">
            <summary>
             Returns true if the AutoPopDelay property should be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.ShouldSerializeInitialDelay">
            <summary>
             Returns true if the InitialDelay property should be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.ShouldSerializeReshowDelay">
            <summary>
             Returns true if the ReshowDelay property should be persisted.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.ShowTooltip(System.String,System.Windows.Forms.IWin32Window,System.Int32)">
            <summary>
             Shows a tooltip for specified text, window, and hotspot
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.Show(System.String,System.Windows.Forms.IWin32Window)">
            <summary>
             Associates <see cref="T:System.Windows.Forms.ToolTip"/> with the specified control and displays it.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.Show(System.String,System.Windows.Forms.IWin32Window,System.Int32)">
            <summary>
             Associates <see cref="T:System.Windows.Forms.ToolTip"/> with the specified control and displays it for the
             specified duration.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.Show(System.String,System.Windows.Forms.IWin32Window,System.Drawing.Point)">
            <summary>
             Associates <see cref="T:System.Windows.Forms.ToolTip"/> with the specified control and displays it.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.Show(System.String,System.Windows.Forms.IWin32Window,System.Drawing.Point,System.Int32)">
            <summary>
             Associates <see cref="T:System.Windows.Forms.ToolTip"/> with the specified control and displays it.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.Show(System.String,System.Windows.Forms.IWin32Window,System.Int32,System.Int32)">
            <summary>
             Associates <see cref="T:System.Windows.Forms.ToolTip"/> with the specified control and displays it.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.Show(System.String,System.Windows.Forms.IWin32Window,System.Int32,System.Int32,System.Int32)">
            <summary>
             Associates <see cref="T:System.Windows.Forms.ToolTip"/> with the specified control and displays it.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.SetTrackPosition(System.Int32,System.Int32)">
            <summary>
             Private Function to encapsulate TTM_TRACKPOSITION so that this doesnt fire an extra POP event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.Hide(System.Windows.Forms.IWin32Window)">
            <summary>
             Hides <see cref="T:System.Windows.Forms.ToolTip"/> with the specified control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.StartTimer(System.Windows.Forms.IWin32Window,System.Int32)">
            <summary>
             Starts the timer hiding Positioned ToolTips
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.StopTimer">
            <summary>
             Stops the timer for hiding Positioned ToolTips
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.TimerHandler(System.Object,System.EventArgs)">
            <summary>
             Generates updown events when the timer calls this function.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.Finalize">
            <summary>
             Finalizes garbage collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.WmMove">
            <summary>
             Handles the WM_MOVE message.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.WmMouseActivate(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_MOUSEACTIVATE message.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.WmWindowFromPoint(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_WINDOWFROMPOINT message.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.WmShow">
            <summary>
             Handles the TTN_SHOW message.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.WmWindowPosChanged">
            <summary>
             Handles the WM_WINDOWPOSCHANGED message.
             We need to Hide the window since the native tooltip actually calls SetWindowPos in its TTN_SHOW even if we cancel showing the
             tooltip. Hence we need to listen to the WindowPosChanged message can hide the window ourselves.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.WmWindowPosChanging(System.Windows.Forms.Message@)">
            <summary>
             Handles the WM_WINDOWPOSCHANGING message.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.WmPop">
            <summary>
             Called just before the tooltip is hidden
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ToolTip.WndProc(System.Windows.Forms.Message@)">
            <summary>
             WNDPROC
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ToolTipIcon.None">
            <summary>
             No Icon.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ToolTipIcon.Info">
            <summary>
             A Information Icon.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ToolTipIcon.Warning">
            <summary>
             A Warning Icon.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ToolTipIcon.Error">
            <summary>
             A Error Icon.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TrackBar">
            <summary>
             The TrackBar is a scrollable control similar to the ScrollBar, but
             has a different UI.  You can configure ranges through which it should
             scroll, and also define increments for off-button clicks.  It can be
             aligned horizontally or vertically.  You can also configure how many
             'ticks' are shown for the total range of values
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBar.#ctor">
            <summary>
             Creates a new TrackBar control with a default range of 0..10 and
             ticks shown every value.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TrackBar.AutoSize">
            <summary>
             Indicates if the control is being auto-sized.  If true, the
             TrackBar will adjust either its height or width [depending on
             orientation] to make sure that only the required amount of
             space is used.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TrackBar.CreateParams">
            <summary>
             This is called when creating a window.  Inheriting classes can override
             this to add extra functionality, but should not forget to first call
             base.getCreateParams() to make sure the control continues to work
             correctly.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TrackBar.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TrackBar.DoubleBuffered">
            <summary>
             This property is overridden and hidden from statement completion
             on controls that are based on Win32 Native Controls.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TrackBar.ForeColor">
            <summary>
             The current foreground color of the TrackBar.  Note that users
             are unable to change this.  It is always Color.WINDOWTEXT
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TrackBar.LargeChange">
            <summary>
             The number of ticks by which the TrackBar will change when an
             event considered a "large change" occurs.  These include, Clicking the
             mouse to the side of the button, or using the PgUp/PgDn keys on the
             keyboard.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TrackBar.Maximum">
            <summary>
             The upper limit of the range this TrackBar is working with.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TrackBar.Minimum">
            <summary>
             The lower limit of the range this TrackBar is working with.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TrackBar.Orientation">
            <summary>
             The orientation for this TrackBar. Valid values are from
             the Orientation enumeration. The control currently supports being
             oriented horizontally and vertically.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TrackBar.PreferredDimension">
            <summary>
             Little private routine that helps with auto-sizing.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBar.RedrawControl">
            <summary>
             Redraw control, if the handle's created
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.TrackBar.RightToLeftLayout" -->
        <member name="P:System.Windows.Forms.TrackBar.SmallChange">
            <summary>
             The number of ticks by which the TrackBar will change when an
             event considered a "small change" occurs.  These are most commonly
             seen by using the arrow keys to move the TrackBar thumb around.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TrackBar.TickStyle">
            <summary>
             Indicates how the TrackBar control will draw itself.  This affects
             both where the ticks will be drawn in relation to the moveable thumb,
             and how the thumb itself will be drawn.  values are taken from the
             TickStyle enumeration.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TrackBar.TickFrequency">
            <summary>
             Indicates just how many ticks will be drawn.  For a TrackBar with a
             range of 0..100, it might be impractical to draw all 100 ticks for a
             very small control.  Passing in a value of 5 here would only draw
             20 ticks -- i.e. Each tick would represent 5 units in the TrackBars
             range of values.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TrackBar.Value">
            <summary>
             The current location of the TrackBar thumb.  This value must
             be between the lower and upper limits of the TrackBar range, of course.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.TrackBar.Click">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.TrackBar.DoubleClick">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.TrackBar.MouseClick">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.TrackBar.MouseDoubleClick">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.TrackBar.Paint">
            <summary>
             TrackBar Onpaint.
            </summary>
            <hideinheritance/>
        </member>
        <member name="M:System.Windows.Forms.TrackBar.AdjustSize">
            <summary>
             Enforces autoSizing
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBar.BeginInit">
            <summary>
             Handles tasks required when the control is being initialized.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBar.EndInit">
            <summary>
             Called when initialization of the control is complete.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBar.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
             Handling special input keys, such as pgup, pgdown, home, end, etc...
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBar.OnScroll(System.EventArgs)">
            <summary>
             Actually fires the "scroll" event.  Inheriting classes should override
             this method in favor of actually adding an EventHandler for this
             event.  Inheriting classes should not forget to call
             base.onScroll(e)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBar.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.MouseWheel'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBar.OnValueChanged(System.EventArgs)">
            <summary>
             Actually fires the "valueChanged" event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBar.OnBackColorChanged(System.EventArgs)">
            <summary>
             This method is called by the control when any property changes. Inheriting
             controls can overide this method to get property change notification on
             basic properties. Inherting controls must call base.propertyChanged.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBar.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Overrides Control.setBoundsCore to enforce autoSize.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBar.SetRange(System.Int32,System.Int32)">
            <summary>
             Lets you set the the entire range for the TrackBar control at once.
             The values passed are both the lower and upper limits to the range
             with which the control will work.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBar.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBar.WndProc(System.Windows.Forms.Message@)">
            <summary>
             The button's window procedure.  Inheriting classes can override this
             to add extra functionality, but should not forget to call
             base.wndProc(m); to ensure the button continues to function properly.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TrackBarRenderer">
            <summary>
             This is a rendering class for the TrackBar control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TrackBarRenderer.IsSupported">
            <summary>
             Returns true if this class is supported for the current OS and user/application settings,
             otherwise returns false.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBarRenderer.DrawHorizontalTrack(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Renders a horizontal track.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBarRenderer.DrawVerticalTrack(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Renders a vertical track.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBarRenderer.DrawHorizontalThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.TrackBarThumbState)">
            <summary>
             Renders a horizontal thumb.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBarRenderer.DrawVerticalThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.TrackBarThumbState)">
            <summary>
             Renders a vertical thumb.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBarRenderer.DrawLeftPointingThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.TrackBarThumbState)">
            <summary>
             Renders a constant size left pointing thumb centered in the given bounds.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBarRenderer.DrawRightPointingThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.TrackBarThumbState)">
            <summary>
             Renders a constant size right pointing thumb centered in the given bounds.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBarRenderer.DrawTopPointingThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.TrackBarThumbState)">
            <summary>
             Renders a constant size top pointing thumb centered in the given bounds.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBarRenderer.DrawBottomPointingThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.TrackBarThumbState)">
            <summary>
             Renders a constant size bottom pointing thumb centered in the given bounds.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBarRenderer.DrawHorizontalTicks(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.VisualStyles.EdgeStyle)">
            <summary>
             Renders a horizontal tick.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBarRenderer.DrawVerticalTicks(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.VisualStyles.EdgeStyle)">
            <summary>
             Renders a vertical tick.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBarRenderer.GetLeftPointingThumbSize(System.Drawing.Graphics,System.Windows.Forms.VisualStyles.TrackBarThumbState)">
            <summary>
             Returns the size of a left pointing thumb.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBarRenderer.GetRightPointingThumbSize(System.Drawing.Graphics,System.Windows.Forms.VisualStyles.TrackBarThumbState)">
            <summary>
             Returns the size of a right pointing thumb.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBarRenderer.GetTopPointingThumbSize(System.Drawing.Graphics,System.Windows.Forms.VisualStyles.TrackBarThumbState)">
            <summary>
             Returns the size of a top pointing thumb.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TrackBarRenderer.GetBottomPointingThumbSize(System.Drawing.Graphics,System.Windows.Forms.VisualStyles.TrackBarThumbState)">
            <summary>
             Returns the size of a bottom pointing thumb.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeNode">
            <summary>
             Implements a node of a <see cref='T:System.Windows.Forms.TreeView'/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.#ctor">
            <summary>
             Creates a TreeNode object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.#ctor(System.String)">
            <summary>
             Creates a TreeNode object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.#ctor(System.String,System.Windows.Forms.TreeNode[])">
            <summary>
             Creates a TreeNode object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
             Creates a TreeNode object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.#ctor(System.String,System.Int32,System.Int32,System.Windows.Forms.TreeNode[])">
            <summary>
             Creates a TreeNode object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            Constructor used in deserialization
        </member>
        <member name="P:System.Windows.Forms.TreeNode.BackColor">
            <summary>
             The background color of this node.
             If null, the color used will be the default color from the TreeView control that this
             node is attached to
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.Bounds">
            <summary>
             The bounding rectangle for the node (text area only). The coordinates
             are relative to the upper left corner of the TreeView control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.RowBounds">
            <summary>
             The bounding rectangle for the node (full row). The coordinates
             are relative to the upper left corner of the TreeView control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.Checked">
            <summary>	
             Indicates whether the node's checkbox is checked.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.ContextMenuStrip">
            <summary>
             The contextMenu associated with this tree node. The contextMenu
             will be shown when the user right clicks the mouse on the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.FirstNode">
            <summary>
             The first child node of this node.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.ForeColor">
            <summary>
             The foreground color of this node.
             If null, the color used will be the default color from the TreeView control that this
             node is attached to
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.FullPath">
            <summary>
             Returns the full path of this node.
             The path consists of the labels of each of the nodes from the root to this node,
             each separated by the pathSeperator.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.Handle">
            <summary>
             The HTREEITEM handle associated with this node.  If the handle
             has not yet been created, this will force handle creation.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.ImageIndex">
            <summary>
             The index of the image to be displayed when the node is in the unselected state.
             The image is contained in the ImageList referenced by the imageList property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.ImageKey">
            <summary>
             The index of the image to be displayed when the node is in the unselected state.
             The image is contained in the ImageList referenced by the imageList property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.Index">
            <summary>
             Returns the position of this node in relation to its siblings
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.IsEditing">
            <summary>
             Specifies whether this node is being edited by the user.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.IsExpanded">
            <summary>
             Specifies whether this node is in the expanded state.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.IsSelected">
            <summary>
             Specifies whether this node is in the selected state.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.IsVisible">
            <summary>
             Specifies whether this node is visible.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.LastNode">
            <summary>
             The last child node of this node.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.Level">
            <summary>
             This denotes the depth of nesting of the treenode.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.NextNode">
            <summary>
             The next sibling node.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.NextVisibleNode">
            <summary>
             The next visible node.  It may be a child, sibling,
             or a node from another branch.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.NodeFont">
            <summary>
             The font that will be used to draw this node
             If null, the font used will be the default font from the TreeView control that this
             node is attached to.
             NOTE: If the node font is larger than the default font from the TreeView control, then
             the node will be clipped.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.Parent">
            <summary>
             Retrieves parent node.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.PrevNode">
            <summary>
             The previous sibling node.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.PrevVisibleNode">
            <summary>
             The next visible node.  It may be a parent, sibling,
             or a node from another branch.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.SelectedImageIndex">
            <summary>
             The index of the image displayed when the node is in the selected state.
             The image is contained in the ImageList referenced by the imageList property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.SelectedImageKey">
            <summary>
             The index of the image displayed when the node is in the selected state.
             The image is contained in the ImageList referenced by the imageList property.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.State">
            <summary>
             Retrieve state bits for this node
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.StateImageKey">
            <summary>
             The key of the StateImage that the user want to display.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.Text">
            <summary>
             The label text for the tree node
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.ToolTipText">
            <summary>
             The ToolTip text that will be displayed when the mouse hovers over the node.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.Name">
            <summary>
             The name for the tree node - useful for indexing.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeNode.TreeView">
            <summary>
             Return the TreeView control this node belongs to.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.AddSorted(System.Windows.Forms.TreeNode)">
            <summary>
             Adds a new child node at the appropriate sorted position
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.FromHandle(System.Windows.Forms.TreeView,System.IntPtr)">
            <summary>
             Returns a TreeNode object for the given HTREEITEM handle
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.BeginEdit">
            <summary>
             Initiate editing of the node's label.
             Only effective if LabelEdit property is true.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.Clear">
            <summary>
             Called by the tree node collection to clear all nodes.  We optimize here if
             this is the root node.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.Clone">
            <summary>
             Clone the entire subtree rooted at this node.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.Collapse(System.Boolean)">
            <summary>
             Collapse the node ignoring its children while collapsing the parent
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.Collapse">
            <summary>
             Collapse the node.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.DoCollapse(System.Windows.Forms.TreeView)">
            <summary>
             Windows TreeView doesn't send the proper notifications on collapse, so we do it manually.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.EndEdit(System.Boolean)">
            <summary>
             Terminate the editing of any tree view item's label.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.EnsureCapacity(System.Int32)">
            <summary>
             Makes sure there is enough room to add n children
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.EnsureStateImageValue">
            <summary>
             Ensures the the node's StateImageIndex value is properly set.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.EnsureVisible">
            <summary>
             Ensure that the node is visible, expanding nodes and scrolling the
             TreeView control as necessary.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.Expand">
            <summary>
             Expand the node.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.ExpandAll">
            <summary>
             Expand the node.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.FindTreeView">
            <summary>
             Locate this tree node's containing tree view control by scanning
             up to the virtual root, whose treeView pointer we know to be
             correct
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.GetFullPath(System.Text.StringBuilder,System.String)">
            <summary>
             Helper function for getFullPath().
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.GetNodeCount(System.Boolean)">
            <summary>
             Returns number of child nodes.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.CheckParentingCycle(System.Windows.Forms.TreeNode)">
            <summary>
             Check for any circular reference in the ancestors chain.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.InsertNodeAt(System.Int32,System.Windows.Forms.TreeNode)">
            <summary>
             Helper function to add node at a given index after all validation has been done
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.InvalidateHostTree">
            <summary>
             Invalidates the treeview control that is hosting this node
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.Remove">
            <summary>
             Remove this node from the TreeView control.  Child nodes are also removed from the
             TreeView, but are still attached to this node.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.RemovePropBagIfEmpty">
            <summary>
             Removes the propBag object if it's now devoid of useful data
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.Serialize(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
              Saves this TreeNode object to the given data stream.
             </summary>
              Review: Changing this would break VB users. so suppresing this message.
            
        </member>
        <member name="M:System.Windows.Forms.TreeNode.Toggle">
            <summary>
             Toggle the state of the node. Expand if collapsed or collapse if
             expanded.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.ToString">
            <summary>
             Returns the label text for the tree node
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.UpdateNode(Interop.ComCtl32.TVIF)">
            <summary>
             Tell the TreeView to refresh this node
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNode.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             ISerializable private implementation
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeNodeMouseClickEventArgs">
            <summary>
             Provides data for the <see cref='!:TreeView.TreeNodeMouseClickEventArgs'/>
             or <see cref='M:System.Windows.Forms.TreeView.OnNodeMouseClick(System.Windows.Forms.TreeNodeMouseClickEventArgs)'/> event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeNodeMouseClickEventHandler">
            <summary>
             Represents a method that will handle the <see cref='!:TreeView.OnNodeClick'/>,
            <see cref='!:TreeView.OnNodeClick'/>, <see cref='!:TreeView.OnNodeClick'/>,
             or <see cref='E:System.Windows.Forms.TreeView.BeforeSelect'/> event of a <see cref='T:System.Windows.Forms.TreeView'/>
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeNodeCollection.lastAccessedIndex">
             A caching mechanism for key accessor
             We use an index here rather than control so that we don't have lifetime
             issues by holding on to extra references.
        </member>
        <member name="P:System.Windows.Forms.TreeNodeCollection.Item(System.String)">
            <summary>
             Retrieves the child control with the specified key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.Add(System.String)">
            <summary>
             Creates a new child node under this node.  Child node is positioned after siblings.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String)">
            <summary>
             Creates a new child node under this node.  Child node is positioned after siblings.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32)">
            <summary>
             Creates a new child node under this node.  Child node is positioned after siblings.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String)">
            <summary>
             Creates a new child node under this node.  Child node is positioned after siblings.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32,System.Int32)">
            <summary>
             Creates a new child node under this node.  Child node is positioned after siblings.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String,System.String)">
            <summary>
             Creates a new child node under this node.  Child node is positioned after siblings.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.Add(System.Windows.Forms.TreeNode)">
            <summary>
             Adds a new child node to this node.  Child node is positioned after siblings.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.ContainsKey(System.String)">
            <summary>
             Returns true if the collection contains an item with the specified key, false otherwise.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.IndexOfKey(System.String)">
            <summary>
             The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.Windows.Forms.TreeNode)">
            <summary>
             Inserts a new child node on this node.  Child node is positioned as specified by index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String)">
            <summary>
             Inserts a new child node on this node.  Child node is positioned as specified by index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String)">
            <summary>
             Inserts a new child node on this node.  Child node is positioned as specified by index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32)">
            <summary>
             Inserts a new child node on this node.  Child node is positioned as specified by index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String)">
            <summary>
             Inserts a new child node on this node.  Child node is positioned as specified by index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
             Inserts a new child node on this node.  Child node is positioned as specified by index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
             Inserts a new child node on this node.  Child node is positioned as specified by index.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.IsValidIndex(System.Int32)">
            <summary>
             Determines if the index is valid for the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.Clear">
            <summary>
             Remove all nodes from the tree view.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeCollection.RemoveByKey(System.String)">
            <summary>
             Removes the child control with the specified key.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeNodeConverter">
            <summary>
             TreeNodeConverter is a class that can be used to convert
             TreeNode objects from one data type to another.  Access this
             class through the TypeDescriptor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Gets a value indicating whether this converter can
             convert an object to the given destination type using the context.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeNodeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type.  The most common types to convert
             are to and from a string object.  The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string.  If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeNodeMouseHoverEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.TreeView.OnNodeMouseHover(System.Windows.Forms.TreeNodeMouseHoverEventArgs)'/> event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeNodeMouseHoverEventHandler">
            <summary>
             Represents a method that will handle the <see cref='E:System.Windows.Forms.TreeView.NodeMouseHover'/>
             event of a <see cref='T:System.Windows.Forms.TreeView'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeNodeStates">
            <summary>
             Gives state information about a TreeView node. Used with owner draw.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeView">
            <summary>
             Displays a hierarchical list of items, or nodes. Each
             node includes a caption and an optional bitmap. The user can select a node. If
             it has sub-nodes, the user can collapse or expand the node.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.#ctor">
            <summary>
             Creates a TreeView control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.BackColor">
            <summary>
             The background color for this control. Specifying null for
             this parameter sets the
             control's background color to its parent's background color.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.BorderStyle">
            <summary>
             The border style of the window.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.CheckBoxes">
            <summary>
             The value of the CheckBoxes property. The CheckBoxes
             property determines if check boxes are shown next to node in the
             tree view.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.DoubleBuffered">
            <summary>
             This property is overridden and hidden from statement completion
             on controls that are based on Win32 Native Controls.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.ForeColor">
            <summary>
             The current foreground color for this control, which is the
             color the control uses to draw its text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.FullRowSelect">
            <summary>
             Determines whether the selection highlight spans across the width of the TreeView.
             This property will have no effect if ShowLines is true.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.HideSelection">
            <summary>
             The HideSelection property specifies whether the selected node will
             be highlighted even when the TreeView loses focus.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.HotTracking">
            <summary>
             The value of the HotTracking property. The HotTracking
             property determines if nodes are highlighted as the mousepointer
             passes over them.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.ImageIndex">
            <summary>
             The default image index for nodes in the tree view.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.ImageKey">
            <summary>
             The default image index for nodes in the tree view.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.ImageList">
            <summary>
             Returns the image list control that is bound to the tree view.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.StateImageList">
            <summary>
             Returns the state image list control that is bound to the tree view.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.Indent">
            <summary>
             The indentation level in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.ItemHeight">
            <summary>
             The height of every item in the tree view, in pixels.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.LabelEdit">
            <summary>
             The LabelEdit property determines if the label text
             of nodes in the tree view is editable.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.LineColor">
            <summary>
             This is the color of the lines that connect the nodes of the Treeview.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.Nodes">
            <summary>
             The collection of nodes associated with this TreeView control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.DrawMode">
            <summary>
             Indicates the drawing mode for the tree view.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.PathSeparator">
            <summary>
             The delimeter string used by TreeNode.getFullPath().
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.TreeView.RightToLeftLayout" -->
        <member name="P:System.Windows.Forms.TreeView.SelectedImageIndex">
            <summary>
             The image index that a node will display when selected.
             The index applies to the ImageList referred to by the imageList property,
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.SelectedImageKey">
            <summary>
             The default image index for nodes in the tree view.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.SelectedNode">
            <summary>
             The currently selected tree node, or null if nothing is selected.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.ShowLines">
            <summary>
             The ShowLines property determines if lines are drawn between
             nodes in the tree view.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.ShowNodeToolTips">
            <summary>
             The ShowLines property determines whether or not the tooltips willbe displayed on the nodes
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.ShowPlusMinus">
            <summary>
             The ShowPlusMinus property determines if the "plus/minus"
             expand button is shown next to tree nodes that have children.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.ShowRootLines">
            <summary>
             Determines if lines are draw between nodes at the root of
             the tree view.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.Sorted">
            <summary>
             The Sorted property determines if nodes in the tree view are sorted.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.TreeViewNodeSorter">
            <summary>
             The sorting comparer for this TreeView.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.TopNode">
            <summary>
             The first visible node in the TreeView. Initially
             the first root node is at the top of the TreeView, but if the
             contents have been scrolled another node may be at the top.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeView.VisibleCount">
            <summary>
             The count of fully visible nodes in the tree view.  This number
             may be greater than the number of nodes in the control.
             The control calculates this value by dividing the height of the
             client window by the height of an item
            </summary>
        </member>
        <member name="E:System.Windows.Forms.TreeView.DrawNode">
            <summary>
             Fires when a TreeView node needs to be drawn.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.TreeView.Paint">
            <summary>
             TreeView Onpaint.
            </summary>
            <hideinheritance/>
        </member>
        <member name="M:System.Windows.Forms.TreeView.BeginUpdate">
            <summary>
             Disables redrawing of the tree view. A call to beginUpdate() must be
             balanced by a following call to endUpdate(). Following a call to
             beginUpdate(), any redrawing caused by operations performed on the
             tree view is deferred until the call to endUpdate().
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.CollapseAll">
            <summary>
             Collapses all nodes at the root level.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.DetachImageList(System.Object,System.EventArgs)">
            <summary>
             Resets the imageList to null.  We wire this method up to the imageList's
             Dispose event, so that we don't hang onto an imageList that's gone away.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.DetachStateImageList(System.Object,System.EventArgs)">
            <summary>
             Resets the stateimageList to null.  We wire this method up to the stateimageList's
             Dispose event, so that we don't hang onto an stateimageList that's gone away.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.EndUpdate">
            <summary>
             Reenables redrawing of the tree view. A call to beginUpdate() must be
             balanced by a following call to endUpdate(). Following a call to
             beginUpdate(), any redrawing caused by operations performed on the
             combo box is deferred until the call to endUpdate().
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.ExpandAll">
            <summary>
             Expands all nodes at the root level.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.ForceScrollbarUpdate(System.Boolean)">
            <summary>
             Forces the TreeView to recalculate all its nodes widths so that it updates the
             scrollbars as appropriate.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.SetToolTip(System.Windows.Forms.ToolTip,System.String)">
            <summary>
             Called by ToolTip to poke in that Tooltip into this ComCtl so that the Native ChildToolTip is not exposed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.HitTest(System.Drawing.Point)">
            <summary>
             Gives the information about which part of the treeNode is at the given point.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.HitTest(System.Int32,System.Int32)">
            <summary>
             Gives the information about which part of the treeNode is at the given x, y.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.TreeViewBeforeCheck(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeViewAction)">
            <summary>
             Defined so that a  tree node can use it
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.GetNodeCount(System.Boolean)">
            <summary>
             Returns count of nodes at root, optionally including all subtrees.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.GetNodeAt(System.Drawing.Point)">
            <summary>
             Returns the TreeNode at the given location in tree view coordinates.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.GetNodeAt(System.Int32,System.Int32)">
            <summary>
             Returns the TreeNode at the given location in tree view coordinates.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
             Overridden to handle RETURN key.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.NodeFromHandle(System.IntPtr)">
            <summary>
             Note this can be null - particularly if any windows messages get generated during
             the insertion of a tree node (TVM_INSERTITEM)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnDrawNode(System.Windows.Forms.DrawTreeNodeEventArgs)">
            <summary>
             Fires the DrawNode event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnMouseLeave(System.EventArgs)">
            <summary>
             We keep track of if we've hovered already so we don't fire multiple hover events
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnMouseHover(System.EventArgs)">
            <summary>
             In order for the MouseHover event to fire for each item in a TreeView,
             the node the mouse is hovering over is found. Each time a new node is hovered
             over a new event is raised.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnBeforeLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)">
            <summary>
             Fires the beforeLabelEdit event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnAfterLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)">
            <summary>
             Fires the afterLabelEdit event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnBeforeCheck(System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
             Fires the beforeCheck event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnAfterCheck(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
             Fires the afterCheck event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnBeforeCollapse(System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
             Fires the beforeCollapse event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnAfterCollapse(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
             Fires the afterCollapse event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnBeforeExpand(System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
             Fires the beforeExpand event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnAfterExpand(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
             Fires the afterExpand event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)">
            <summary>
             Fires the ItemDrag event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnNodeMouseHover(System.Windows.Forms.TreeNodeMouseHoverEventArgs)">
            <summary>
             Fires the NodeMouseHover event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnBeforeSelect(System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
             Fires the beforeSelect event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnAfterSelect(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
             Fires the afterSelect event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnNodeMouseClick(System.Windows.Forms.TreeNodeMouseClickEventArgs)">
            <summary>
             Fires the onNodeMouseClick event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnNodeMouseDoubleClick(System.Windows.Forms.TreeNodeMouseClickEventArgs)">
            <summary>
             Fires the onNodeMouseDoubleClick event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
             Handles the OnBeforeCheck / OnAfterCheck for keyboard clicks
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
             Handles the OnBeforeCheck / OnAfterCheck for keyboard clicks
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
             Handles the OnBeforeCheck / OnAfterCheck for keyboard clicks
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.ResetIndent">
            <summary>
             This resets the indentation to the system default.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.ResetItemHeight">
            <summary>
             This resets the item height to the system default.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.ShouldSerializeIndent">
            <summary>
             Retrieves true if the indent should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.ShouldSerializeItemHeight">
            <summary>
             Retrieves true if the itemHeight should be persisted in code gen.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.Sort">
            <summary>
             Updated the sorted order
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.ToString">
            <summary>
             Returns a string representation for this control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.UpdateCheckedState(System.Windows.Forms.TreeNode,System.Boolean)">
            <remarks>
             Setting the ComCtl32.TVS.CHECKBOXES style clears the checked state
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.TreeView.CustomDraw(System.Windows.Forms.Message@)">
            <summary>
             Performs custom draw handling
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.GetItemRenderStyles(System.Windows.Forms.TreeNode,System.Int32)">
            <summary>
             Generates colors for each item. This can be overridden to provide colors on a per state/per node
             basis, rather than using the ForeColor/BackColor/NodeFont properties on TreeNode.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeView.ShowContextMenu(System.Windows.Forms.TreeNode)">
            <summary>
             Shows the context menu for the Treenode.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeViewAction">
            <summary>
             This enum is used to specify the action that caused a TreeViewEventArgs.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewAction.Unknown">
            <summary>
             The action is unknown.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewAction.ByKeyboard">
            <summary>
             The event was caused by a keystroke.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewAction.ByMouse">
            <summary>
             The event was caused by a mouse click.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewAction.Collapse">
            <summary>
             The tree node is collapsing.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewAction.Expand">
            <summary>
             The tree node is expanding.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeViewCancelEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.TreeView.OnBeforeCheck(System.Windows.Forms.TreeViewCancelEventArgs)'/>,
             <see cref='M:System.Windows.Forms.TreeView.OnBeforeCollapse(System.Windows.Forms.TreeViewCancelEventArgs)'/>,
             <see cref='M:System.Windows.Forms.TreeView.OnBeforeExpand(System.Windows.Forms.TreeViewCancelEventArgs)'/>,
             or <see cref='M:System.Windows.Forms.TreeView.OnBeforeSelect(System.Windows.Forms.TreeViewCancelEventArgs)'/> event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeViewCancelEventHandler">
            <summary>
             Represents a method that will handle the <see cref='M:System.Windows.Forms.TreeView.OnBeforeCheck(System.Windows.Forms.TreeViewCancelEventArgs)'/>,
            <see cref='M:System.Windows.Forms.TreeView.OnBeforeCollapse(System.Windows.Forms.TreeViewCancelEventArgs)'/>, <see cref='E:System.Windows.Forms.TreeView.BeforeExpand'/>,
             or <see cref='E:System.Windows.Forms.TreeView.BeforeSelect'/> event of a <see cref='T:System.Windows.Forms.TreeView'/>
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeViewDrawMode">
            <summary>
             Specifies responsibility for drawing TreeView nodes.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewDrawMode.Normal">
            <summary>
             The operating system paints the nodes of the TreeView.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewDrawMode.OwnerDrawText">
            <summary>
             The user needs to paint the text only.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewDrawMode.OwnerDrawAll">
            <summary>
             The user paints the entire row corresponding to a node, including lines and boxes.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeViewEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.TreeView.OnAfterCheck(System.Windows.Forms.TreeViewEventArgs)'/>, <see cref='E:System.Windows.Forms.TreeView.AfterCollapse'/>, <see cref='E:System.Windows.Forms.TreeView.AfterExpand'/>, or <see cref='E:System.Windows.Forms.TreeView.AfterSelect'/> event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeViewEventArgs.Action">
            <summary>
             An event specific action-flag.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeViewEventHandler">
            <summary>
             Represents a method that will handle the <see cref='M:System.Windows.Forms.TreeView.OnAfterCheck(System.Windows.Forms.TreeViewEventArgs)'/>, <see cref='M:System.Windows.Forms.TreeView.OnAfterCollapse(System.Windows.Forms.TreeViewEventArgs)'/>, <see cref='M:System.Windows.Forms.TreeView.OnAfterExpand(System.Windows.Forms.TreeViewEventArgs)'/>, or <see cref='M:System.Windows.Forms.TreeView.OnAfterSelect(System.Windows.Forms.TreeViewEventArgs)'/>
             event of a <see cref='T:System.Windows.Forms.TreeView'/>
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeViewHitTestInfo">
            <summary>
             Specifies the return value for HITTEST on treeview.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeViewHitTestInfo.#ctor(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeViewHitTestLocations)">
            <summary>
             Creates a TreeViewHitTestInfo instance.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeViewHitTestInfo.Location">
            <summary>
             This gives the exact location returned by hit test on treeview.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TreeViewHitTestInfo.Node">
            <summary>
             This gives the node returned by hit test on treeview.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeViewHitTestLocations">
            <summary>
             Specifies the return value for HITTEST on treeview.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewHitTestLocations.None">
            <summary>
             No Information.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewHitTestLocations.Image">
            <summary>
             On Image.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewHitTestLocations.Label">
            <summary>
             On Label.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewHitTestLocations.Indent">
            <summary>
             Indent.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewHitTestLocations.AboveClientArea">
            <summary>
             AboveClientArea.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewHitTestLocations.BelowClientArea">
            <summary>
             BelowClientArea.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewHitTestLocations.LeftOfClientArea">
            <summary>
             LeftOfClientArea.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewHitTestLocations.RightOfClientArea">
            <summary>
             RightOfClientArea.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewHitTestLocations.RightOfLabel">
            <summary>
             RightOfNode.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewHitTestLocations.StateImage">
            <summary>
             StateImage.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.TreeViewHitTestLocations.PlusMinus">
            <summary>
             PlusMinus.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeViewImageIndexConverter">
            <summary>
             TreeViewImageIndexConverter is a class that can be used to convert
             image index values one data type to another.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeViewImageIndexConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
             Converts the given value object to a 32-bit signed integer object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeViewImageIndexConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type.  The most common types to convert
             are to and from a string object.  The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string.  If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeViewImageIndexConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Retrieves a collection containing a set of standard values
             for the data type this validator is designed for.  This
             will return null if the data type does not support a
             standard set of values.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TreeViewImageKeyConverter">
            <summary>
             ImageIndexConverter is a class that can be used to convert
             image index values one data type to another.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.TreeViewImageKeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
             Converts the given object to another type.  The most common types to convert
             are to and from a string object.  The default implementation will make a call
             to ToString on the object if the object is valid and if the destination
             type is string.  If this cannot convert to the desitnation type, this will
             throw a NotSupportedException.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Triangle">
            <summary>
             This class fully encapsulates the painting logic for a triangle.  (Used by DataGrid)
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TypeValidationEventArgs">
            <summary>
             Provides data for the TypeValidationEventHandler event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TypeValidationEventArgs.ValidatingType">
            <summary>
             The position where the test failed the mask constraint.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TypeValidationEventArgs.IsValidInput">
            <summary>
             The exception thrown by the validating object while performing the data validation.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TypeValidationEventArgs.Message">
            <summary>
             A message about the validation operation. Intended to be populated with
             an exception information if any thrown.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TypeValidationEventArgs.ReturnValue">
            <summary>
             The value returned from the Parse method.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.TypeValidationEventArgs.Cancel">
            <summary>
             Specifies whether focus should be allowed to be shifted from the control.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.TypeValidationEventHandler">
            <summary>
             Describes a delegate for an event that has a TypeValidationEventArgs as a parameter.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.UICues">
            <summary>
             Specifies UI state.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.UICues.ShowFocus">
            <summary>
             Focus rectangles are shown after the change.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.UICues.ShowKeyboard">
            <summary>
             Keyboard cues are underlined after the change.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.UICues.ChangeFocus">
            <summary>
             The state of the focus cues has changed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.UICues.ChangeKeyboard">
            <summary>
             The state of the keyboard cues has changed.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.UICuesEventArgs">
            <summary>
             Provides data for the <see cref='E:System.Windows.Forms.Control.ChangeUICues'/> event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UICuesEventArgs.ShowFocus">
            <summary>
             Focus rectangles are shown after the change.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UICuesEventArgs.ShowKeyboard">
            <summary>
             Keyboard cues are underlined after the change.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UICuesEventArgs.ChangeFocus">
            <summary>
             The state of the focus cues has changed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UICuesEventArgs.ChangeKeyboard">
            <summary>
             The state of the keyboard cues has changed.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.UICuesEventHandler">
            <summary>
             Represents a method that will handle the <see cref='E:System.Windows.Forms.Control.ChangeUICues'/> event of a <see cref='T:System.Windows.Forms.Control'/>.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.UnhandledExceptionMode">
            <summary>
             Determines the exception mode of NativeWindow's WndProc method. Pass
             a value of this enum into SetUnhandledExceptionMode to control how
             new NativeWindow objects handle exceptions.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.UpDownBase">
            <summary>
             Implements the basic
             functionality required by an up-down control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.UpDownBase.borderStyle">
            <summary>
             The current border for this edit control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.#ctor">
            <summary>
             Initializes a new instance of the <see cref='T:System.Windows.Forms.UpDownBase'/>
             class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.AutoScroll">
            <hideinheritance/>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.AutoScrollMargin">
            <hideinheritance/>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.AutoScrollMinSize">
            <hideinheritance/>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.AutoSize">
            <summary>
             Override to re-expose AutoSize.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.BackColor">
            <summary>
             Gets or sets the background color for the
             text box portion of the up-down control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.BorderStyle">
            <summary>
             Gets or sets the border style for the up-down control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.ChangingText">
            <summary>
             Gets or sets a value indicating whether the text
             property is being changed internally by its parent class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.CreateParams">
            <summary>
             Returns the parameters needed to create the handle. Inheriting classes
             can override this to provide extra functionality. They should not,
             however, forget to call base.getCreateParams() first to get the struct
             filled up with the basic info.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.DefaultSize">
            <summary>
             Deriving classes can override this to configure a default size for their control.
             This is more efficient than setting the size in the control's constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.Focused">
            <summary>
             Returns true if this control has focus.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.ForeColor">
            <summary>
             Indicates the foreground color for the control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.InterceptArrowKeys">
            <summary>
             Gets or sets a value indicating whether
             the user can use the UP
             ARROW and DOWN ARROW keys to select values.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.UpDownBase.MouseEnter">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.UpDownBase.MouseLeave">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.UpDownBase.MouseHover">
            <hideinheritance/>
        </member>
        <member name="E:System.Windows.Forms.UpDownBase.MouseMove">
            <hideinheritance/>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.PreferredHeight">
            <summary>
             Gets the height of
             the up-down control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.ReadOnly">
            <summary>
             Gets or sets
             a
             value
             indicating whether the text may only be changed by the
             use
             of the up or down buttons.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.Text">
            <summary>
             Gets or sets the text
             displayed in the up-down control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.TextAlign">
            <summary>
             Gets or
             sets the alignment of the text in the up-down
             control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.UpDownAlign">
            <summary>
             Gets
             or sets the
             alignment
             of the up and down buttons on the up-down control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.UserEdit">
            <summary>
             Gets
             or sets a value indicating whether a value has been entered by the
             user.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.DownButton">
            <summary>
             When overridden in a derived class, handles the pressing of the down button
             on the up-down control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.GetAccessibleName(System.String)">
            <summary>
             Gets an accessible name.
            </summary>
            <param name="baseName">The base name.</param>
            <returns>The accessible name.</returns>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.RescaleConstantsForDpi(System.Int32,System.Int32)">
            <summary>
             When overridden in a derived class, handles rescaling of any magic numbers used in control painting.
             For UpDown controls, scale the width of the up/down buttons.
             Must call the base class method to get the current DPI values. This method is invoked only when
             Application opts-in into the Per-monitor V2 support, targets .NETFX 4.7 and has
             EnableDpiChangedMessageHandling config switch turned on.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.OnChanged(System.Object,System.EventArgs)">
            <summary>
             When overridden in a derived class, raises the Changed event.
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.OnHandleCreated(System.EventArgs)">
            <summary>
             Initialize the updown. Adds the upDownEdit and updown buttons.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.OnHandleDestroyed(System.EventArgs)">
            <summary>
             Tear down the updown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Handles painting the buttons on the control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.OnTextBoxKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.KeyDown'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.OnTextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.KeyPress'/>
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.OnTextBoxLostFocus(System.Object,System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.LostFocus'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.OnTextBoxResize(System.Object,System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.Resize'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.OnTextBoxTextChanged(System.Object,System.EventArgs)">
            <summary>
             Raises the TextBoxTextChanged event.
             event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.OnStartTimer">
            <summary>
             Called from the UpDownButtons member. Provided for derived controls to have a finer way to handle the event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Raises the <see cref='M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
             Handle the layout event. The size of the upDownEdit control, and the
             position of the UpDown control must be modified.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.OnFontChanged(System.EventArgs)">
            <summary>
             Raises the FontChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.OnUpDown(System.Object,System.Windows.Forms.UpDownEventArgs)">
             <summary>
            
              Handles UpDown events, which are generated by clicking on
              the updown buttons in the child updown control.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.PositionControls">
            <summary>
             Calculates the size and position of the upDownEdit control and
             the updown buttons.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.Select(System.Int32,System.Int32)">
            <summary>
             Selects a range of
             text in the up-down control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.TranslateMouseEvent(System.Windows.Forms.Control,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Child controls run their
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.UpButton">
            <summary>
             When overridden in a derived class, handles the pressing of the up button on the up-down control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.UpdateEditText">
            <summary>
             When overridden
             in a derived class, updates the text displayed in the up-down control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.ValidateEditText">
            <summary>
             When overridden in a
             derived class, validates the text displayed in the up-down control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.SetToolTip(System.Windows.Forms.ToolTip,System.String)">
            <summary>
             This Function sets the ToolTip for this composite control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.UpDownEdit.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
             <summary>
            
              Handles detecting when the mouse button is released.
            
             </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.UpDownEdit.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.Control.KeyUp'/>
             event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.UpDownBase.UpDownButtons">
             <summary>
            
              Nested class UpDownButtons
            
              A control representing the pair of buttons on the end of the upDownEdit control.
              This class handles drawing the updown buttons, and detecting mouse actions
              on these buttons. Acceleration on the buttons is handled. The control
              sends UpDownEventArgss to the parent UpDownBase class when a button is pressed,
              or when the acceleration determines that another event should be generated.
             </summary>
        </member>
        <member name="E:System.Windows.Forms.UpDownBase.UpDownButtons.UpDown">
             <summary>
            
              Adds a handler for the updown button event.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.UpDownButtons.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
             <summary>
            
              Handles detecting mouse hits on the buttons. This method
              detects which button was hit (up or down), fires a
              updown event, captures the mouse, and starts a timer
              for repeated updown events.
            
             </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.UpDownButtons.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
             <summary>
            
              Handles detecting mouse movement.
            
             </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.UpDownButtons.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
             <summary>
            
              Handles detecting when the mouse button is released.
            
             </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.UpDownButtons.OnMouseLeave(System.EventArgs)">
             <summary>
            
              Handles detecting when the mouse leaves.
            
             </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.UpDownButtons.OnPaint(System.Windows.Forms.PaintEventArgs)">
             <summary>
              Handles painting the buttons on the control.
            
             </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.UpDownButtons.OnUpDown(System.Windows.Forms.UpDownEventArgs)">
            <summary>
             Occurs when the UpDown buttons are pressed and when the acceleration timer tick event is raised.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.UpDownButtons.StartTimer">
            <summary>
             Starts the timer for generating updown events
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.UpDownButtons.StopTimer">
            <summary>
             Stops the timer for generating updown events
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UpDownBase.UpDownButtons.TimerHandler(System.Object,System.EventArgs)">
            <summary>
             Generates updown events when the timer calls this function.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.UpDownButtons.UpDownButtonsAccessibleObject.RuntimeId">
            <summary>
             Gets the runtime ID.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UpDownBase.UpDownButtons.UpDownButtonsAccessibleObject.DirectionButtonAccessibleObject.RuntimeId">
            <summary>
             Gets the runtime ID.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.UpDownEventArgs">
            <summary>
             Provides data for the UpDownEvent
            </summary>
        </member>
        <member name="T:System.Windows.Forms.UpDownEventHandler">
            <summary>
             A delegate for an updown event handler.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.UserControl">
            <summary>
             Represents an empty control that can be used in the Forms Designer to create other  controls.   By extending form, UserControl inherits all of
             the standard positioning and mnemonic handling code that is necessary
             in a user control.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UserControl.#ctor">
            <summary>
             Creates a new UserControl object. A vast majority of people
             will not want to instantiate this class directly, but will be a
             sub-class of it.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UserControl.AutoSize">
            <summary>
             Override to re-expose AutoSize.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.UserControl.AutoSizeChanged">
            <summary>
             Re-expose AutoSizeChanged.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UserControl.AutoSizeMode">
            <summary>
             Allows the control to optionally shrink when AutoSize is true.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UserControl.AutoValidate">
            <summary>
             Indicates whether controls in this container will be automatically validated when the focus changes.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UserControl.BorderStyle">
             <summary>
            
              Indicates the borderstyle for the UserControl.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.UserControl.CreateParams">
            <summary>
             Returns the parameters needed to create the handle.  Inheriting classes
             can override this to provide extra functionality.  They should not,
             however, forget to call base.getCreateParams() first to get the struct
             filled up with the basic info.This is required as we now need to pass the
             styles for appropriate BorderStyle that is set by the user.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.UserControl.DefaultSize">
            <summary>
             The default size for this user control.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.UserControl.Load">
            <summary>
             Occurs before the control becomes visible.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UserControl.ValidateChildren">
            <summary>
             Validates all selectable child controls in the container, including descendants. This is
             equivalent to calling ValidateChildren(ValidationConstraints.Selectable). See <see cref='F:System.Windows.Forms.ValidationConstraints.Selectable'/>
             for details of exactly which child controls will be validated.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UserControl.ValidateChildren(System.Windows.Forms.ValidationConstraints)">
            <summary>
             Validates all the child controls in the container. Exactly which controls are
             validated and which controls are skipped is determined by <paramref name="flags"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UserControl.OnCreateControl">
            <summary>
             Raises the CreateControl event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UserControl.OnLoad(System.EventArgs)">
            <summary>
             The Load event is fired before the control becomes visible for the first time.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.UserControl.OnResize(System.EventArgs)">
            <summary>
             OnResize override to invalidate entire control in Stetch mode
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ValidationConstraints">
            <summary>
             Determines which child controls in a ContainerControl will be validated
             by the <see cref='M:System.Windows.Forms.ContainerControl.ValidateChildren'/> method.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ValidationConstraints.None">
            <summary>
             All child controls and their descendants are validated.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ValidationConstraints.Selectable">
             <summary>
              Child control must be selectable to be validated.
            
              Note: This flag allows validation of a control that has the
              ControlStyles.Selectable style, ie. has the ability to be selected,
              even when that control is currently unselectable because it has been
              disabled or hidden. To prevent validation of selectable controls that
              are currently disabled or hidden,
             </summary>
        </member>
        <member name="F:System.Windows.Forms.ValidationConstraints.Enabled">
            <summary>
             Child control must be enabled to be validated (Control.Enabled = true).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ValidationConstraints.Visible">
            <summary>
             Child control must be visible to be validated (Control.Visible = true).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ValidationConstraints.TabStop">
            <summary>
             Child control must be a tab stops to be validated (Control.TabStop = true).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.ValidationConstraints.ImmediateChildren">
            <summary>
             Only immediate children of container control are validated.
             Descendants are not validated.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.View">
            <summary>
             Specifies how list items are displayed in a <see cref='T:System.Windows.Forms.ListView'/> control.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.View.LargeIcon">
            <summary>
             Each item appears as a full-sized icon with a label below it.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.View.Details">
            <summary>
             Each item appears on a seperate line with further
             information about each item arranged in columns. The left
             most column
             contains a small icon and
             label, and subsequent columns contain subitems as specified by the application. A
             column displays a header which can display a caption for the
             column. The user can resize each column at runtime.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.View.SmallIcon">
            <summary>
             Each item appears as a small icon with a label to its right.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.View.List">
            <summary>
             Each item
             appears as a small icon with a label to its right.
             Items are arranged in columns with no column headers.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.View.Tile">
            <summary>
             Tile view.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.VisualStyles.VisualStyleElement">
            <summary>
             Encapsulates the class, part and state of the "element" you wish to draw using
             the VisualStyleRenderer.
             Usage pattern is something like this: new VisualStyleRenderer(VisualStyleElement.Window.Caption.Active);
            </summary>
        </member>
        <member name="T:System.Windows.Forms.VisualStyles.VisualStyleInformation">
            <summary>
             Provides information about the current visual style.
             
             NOTE:
             
             1) These properties (except SupportByOS, which is always meaningful) are meaningful only
             if visual styles are supported and have currently been applied by the user.
             2) A subset of these use VisualStyleRenderer objects, so they are
             not meaningful unless VisualStyleRenderer.IsSupported is true.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleInformation.IsSupportedByOS">
            <summary>
             Used to find whether visual styles are supported by the current OS. Same as
             using the OSFeature class to see if themes are supported.
             This is always supported on platforms that .NET Core supports.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleInformation.IsEnabledByUser">
            <summary>
             Returns true if a visual style has currently been applied by the user, else false.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleInformation.ColorScheme">
            <summary>
             The current visual style's color scheme name.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleInformation.Size">
            <summary>
             The current visual style's size name.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleInformation.DisplayName">
            <summary>
             The current visual style's display name.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleInformation.Company">
            <summary>
             The current visual style's company.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleInformation.Author">
            <summary>
             The name of the current visual style's author.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleInformation.Copyright">
            <summary>
             The current visual style's copyright information.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleInformation.Url">
            <summary>
             The current visual style's url.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleInformation.Version">
            <summary>
             The current visual style's version.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleInformation.Description">
            <summary>
             The current visual style's description.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleInformation.SupportsFlatMenus">
            <summary>
             Returns true if the current theme supports flat menus, else false.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleInformation.MinimumColorDepth">
            <summary>
             The minimum color depth supported by the current visual style.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleInformation.TextControlBorder">
            <summary>
             Border Color that Windows renders for controls like TextBox and ComboBox.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleInformation.ControlHighlightHot">
            <summary>
             This is the color buttons and tab pages are highlighted with when they are moused over on themed OS.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.VisualStyles.VisualStyleRenderer">
            <summary>
             This class provides full feature parity with UxTheme API.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleRenderer.AreClientAreaVisualStylesSupported">
            <summary>
             Check if visual styles is supported for client area.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleRenderer.IsSupported">
            <summary>
             Returns true if visual styles are 1) supported by the OS 2) enabled in the client area
             and 3) currently applied to this application. Otherwise, it returns false. Note that
             if it returns false, attempting to instantiate/use objects of this class
             will result in exceptions being thrown.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.IsElementDefined(System.Windows.Forms.VisualStyles.VisualStyleElement)">
            <summary>
             Returns true if the element is defined by the current visual style, else false.
             Note:
             1) Throws an exception if IsSupported is false, since it is illegal to call it in that case.
             2) The underlying API does not validate states. So if you pass in invalid state values,
              we might still return true. When you use an invalid state to render, you get the default
              state instead.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.#ctor(System.Windows.Forms.VisualStyles.VisualStyleElement)">
            <summary>
             Constructor takes a VisualStyleElement.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
             Constructor takes weakly typed parameters - left for extensibility (using classes, parts or states
             not defined in the VisualStyleElement class.)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleRenderer.Class">
            <summary>
             Returns the current _class. Use SetParameters to set.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleRenderer.Part">
            <summary>
             Returns the current part. Use SetParameters to set.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleRenderer.State">
            <summary>
             Returns the current state. Use SetParameters to set.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleRenderer.Handle">
            <summary>
             Returns the underlying HTheme handle.
             NOTE: The handle gets invalidated when the theme changes or the user disables theming. When that
              happens, the user should requery this property to get the correct handle. To know when the
              theme changed, hook on to SystemEvents.UserPreferenceChanged and look for ThemeChanged
              category.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.SetParameters(System.Windows.Forms.VisualStyles.VisualStyleElement)">
            <summary>
             Used to set a new VisualStyleElement on this VisualStyleRenderer instance.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.SetParameters(System.String,System.Int32,System.Int32)">
            <summary>
             Used to set the _class, part and state that the VisualStyleRenderer object references.
             These parameters cannot be set individually.
             This method is present for extensibility.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.DrawBackground(System.Drawing.IDeviceContext,System.Drawing.Rectangle)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.DrawBackground(System.Drawing.IDeviceContext,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.DrawEdge(System.Drawing.IDeviceContext,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.Edges,System.Windows.Forms.VisualStyles.EdgeStyle,System.Windows.Forms.VisualStyles.EdgeEffects)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image)">
            <summary>
             [See win32 equivalent.]
             This method uses Graphics.DrawImage as a backup if themed drawing does not work.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ImageList,System.Int32)">
            <summary>
             [See win32 equivalent.]
             This method uses Graphics.DrawImage as a backup if themed drawing does not work.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.DrawParentBackground(System.Drawing.IDeviceContext,System.Drawing.Rectangle,System.Windows.Forms.Control)" -->
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.DrawText(System.Drawing.IDeviceContext,System.Drawing.Rectangle,System.String)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.DrawText(System.Drawing.IDeviceContext,System.Drawing.Rectangle,System.String,System.Boolean)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.DrawText(System.Drawing.IDeviceContext,System.Drawing.Rectangle,System.String,System.Boolean,System.Windows.Forms.TextFormatFlags)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetBackgroundContentRectangle(System.Drawing.IDeviceContext,System.Drawing.Rectangle)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetBackgroundExtent(System.Drawing.IDeviceContext,System.Drawing.Rectangle)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetBackgroundRegion(System.Drawing.IDeviceContext,System.Drawing.Rectangle)">
            <summary>
             Computes the region for a regular or partially transparent background that is bounded by a specified
             rectangle. Return null if the region cannot be created.
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetBoolean(System.Windows.Forms.VisualStyles.BooleanProperty)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetColor(System.Windows.Forms.VisualStyles.ColorProperty)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetEnumValue(System.Windows.Forms.VisualStyles.EnumProperty)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetFilename(System.Windows.Forms.VisualStyles.FilenameProperty)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetFont(System.Drawing.IDeviceContext,System.Windows.Forms.VisualStyles.FontProperty)">
            <summary>
             [See win32 equivalent.]
             Returns null if the returned font was not true type, since GDI+ does not support it.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetInteger(System.Windows.Forms.VisualStyles.IntegerProperty)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetPartSize(System.Drawing.IDeviceContext,System.Windows.Forms.VisualStyles.ThemeSizeType)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetPartSize(System.Drawing.IDeviceContext,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.ThemeSizeType)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetPoint(System.Windows.Forms.VisualStyles.PointProperty)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetMargins(System.Drawing.IDeviceContext,System.Windows.Forms.VisualStyles.MarginProperty)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetString(System.Windows.Forms.VisualStyles.StringProperty)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetTextExtent(System.Drawing.IDeviceContext,System.String,System.Windows.Forms.TextFormatFlags)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetTextExtent(System.Drawing.IDeviceContext,System.Drawing.Rectangle,System.String,System.Windows.Forms.TextFormatFlags)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetTextMetrics(System.Drawing.IDeviceContext)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.HitTestBackground(System.Drawing.IDeviceContext,System.Drawing.Rectangle,System.Drawing.Point,System.Windows.Forms.VisualStyles.HitTestOptions)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.HitTestBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Region,System.Drawing.Point,System.Windows.Forms.VisualStyles.HitTestOptions)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.HitTestBackground(System.Drawing.IDeviceContext,System.Drawing.Rectangle,System.IntPtr,System.Drawing.Point,System.Windows.Forms.VisualStyles.HitTestOptions)">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.IsBackgroundPartiallyTransparent">
            <summary>
             [See win32 equivalent.]
            </summary>
        </member>
        <member name="P:System.Windows.Forms.VisualStyles.VisualStyleRenderer.LastHResult">
            <summary>
             This is similar to GetLastError in Win32.  It returns the last HRESULT returned from a native call
             into theme apis.  We eat the errors and let the user handle any errors that occurred.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.CreateThemeHandleHashtable">
            <summary>
             Instantiates the ThemeHandle cache hashtable.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.OnUserPreferenceChanging(System.Object,Microsoft.Win32.UserPreferenceChangingEventArgs)">
            <summary>
             Handles the ThemeChanged event. Basically, we need to ensure all per-thread theme handle
             caches are refreshed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.RefreshCache">
            <summary>
             Refreshes this thread's theme handle cache.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.GetHandle(System.String,System.Boolean)">
            <summary>
             Retrieves a IntPtr theme handle for the given class from the themeHandle cache. If its not
             present in the cache, it creates a new ThemeHandle object and stores it there.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.VisualStyles.VisualStyleState">
            <summary>
             Determines whether visual styles are enabled.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.VisualStyles.VisualStyleState.NoneEnabled">
            <summary>
             Visual styles are not enabled.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.VisualStyles.VisualStyleState.ClientAreaEnabled">
            <summary>
             Visual styles enabled only for client area.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.VisualStyles.VisualStyleState.NonClientAreaEnabled">
            <summary>
             Visual styles enabled only for non-client area.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.VisualStyles.VisualStyleState.ClientAndNonClientAreasEnabled">
            <summary>
             Visual styles enabled only for client and non-client areas.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.VScrollBar">
            <summary>
             Represents a standard Windows vertical scroll bar.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.VScrollProperties">
            <summary>
             Basic Properties for VScroll.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WebBrowser">
            <summary>
             This is a wrapper over the native WebBrowser control implemented in shdocvw.dll.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.#ctor">
            <summary>
             Creates an instance of the <see cref='T:System.Windows.Forms.WebBrowser'/> control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.AllowNavigation">
            <summary>
             Specifies whether the WebBrowser control may navigate to another page once
             it has been loaded.  NOTE: it will always be able to navigate before being loaded.
             "Loaded" here means setting Url, DocumentText, or DocumentStream.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.AllowWebBrowserDrop">
            <summary>
             Specifies whether the WebBrowser control will receive drop notifcations.
             Maps to IWebBrowser2:RegisterAsDropTarget.
             Note that this does not mean that the WebBrowser control integrates with
             Windows Forms drag/drop i.e. the DragDrop event does not fire.  It does
             control whether you can drag new documents into the browser control.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.ScriptErrorsSuppressed">
            <summary>
             Specifies whether the browser control shows script errors in dialogs or not.
             Maps to IWebBrowser2:Silent.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.WebBrowserShortcutsEnabled">
            <summary>
             Specifies whether the browser control Shortcuts are enabled.
             Maps to IDocHostUIHandler:TranslateAccelerator event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.CanGoBack">
            <summary>
             If true, there is navigation history such that calling GoBack() will succeed.
             Defaults to false.  After that it's value is kept up to date by hooking the
             DWebBrowserEvents2:CommandStateChange.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.CanGoBackInternal">
            <summary>
             Returns the current WEBBROWSERSTATE_canGoBack value so that this value can be accessed
             from child classes.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.CanGoForward">
            <summary>
             If true, there is navigation history such that calling GoForward() will succeed.
             Defaults to false.  After that it's value is kept up to date by hooking the
             DWebBrowserEvents2:CommandStateChange.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.CanGoForwardInternal">
            <summary>
             Returns the current WEBBROWSERSTATE_canGoForward value so that this value can
             be accessed from child classes.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.Document">
            <summary>
             The HtmlDocument for page hosted in the html page.  If no page is loaded, it returns null.
             Maps to IWebBrowser2:Document.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.DocumentStream">
            <summary>
             Get/sets the stream for the html document.
             Uses the IPersisteStreamInit interface on the HtmlDocument to set/retrieve the html stream.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.DocumentText">
            <summary>
             Sets/sets the text of the contained html page.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.DocumentTitle">
            <summary>
             The title of the html page currently loaded. If none are loaded, returns empty string.
             Maps to IWebBrowser2:LocationName.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.DocumentType">
            <summary>
             A string containing the MIME type of the document hosted in the browser control.
             If none are loaded, returns empty string.  Maps to IHTMLDocument2:mimeType.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.EncryptionLevel">
            <summary>
             Initially set to WebBrowserEncryptionLevel.Insecure.
             After that it's kept up to date by hooking the DWebBrowserEvents2:SetSecureLockIcon.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.IsBusy">
            <summary>
             True if the browser is engaged in navigation or download.  Maps to IWebBrowser2:Busy.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.IsOffline">
            <summary>
             Gets the offline state of the browser control. Maps to IWebBrowser2:Offline.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.WebBrowser.IsWebBrowserContextMenuEnabled" -->
        <member name="P:System.Windows.Forms.WebBrowser.ObjectForScripting">
            <summary>
             Allows the host application to provide an object that the contained html
             pages can access programatically in script.  The object specified here
             will be accessible in script as the "window.external" object via IDispatch
             COM interop. Maps to an implementation of the IDocUIHandler.GetExternal event.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.ReadyState">
            <summary>
             Gets the ReadyState of the browser control. (ex.. document loading vs. load complete).
             Maps to IWebBrowser2:ReadyState.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.StatusText">
            <summary>
             The text that would be displayed in the IE status bar.
             There is no direct WebBrowser property that maps to this. This property is
             initially an empty string.  After that the value is kept up to date via the
             DWebBrowserEvents2:StatusTextChange event.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Forms.WebBrowser.Url" -->
        <member name="P:System.Windows.Forms.WebBrowser.Version">
            <summary>
             Returns the version property of IE.
             Determined by reading the file version of mshtml.dll in the %system% directory.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.GoBack">
            <summary>
             Navigates the browser to the previous page in the navigation history list.
             Maps to IWebBrowser2:GoBack.
             Returns true if the operation succeeds, else returns false.  It will return
             false if there is no page in the navigation history to go back to.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.GoForward">
            <summary>
             Navigates the browser to the next page in the navigation history list.
             Maps to IWebBrowser2:GoForward.
             Returns true if the operation succeeds, else returns false.  It will return
             false if there is no page in the navigation history to go forward to.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.GoHome">
            <summary>
             Navigates the browser to user's homepage.  Maps to IWebBrowser2:GoHome.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.GoSearch">
            <summary>
             Navigates the browser to user's default search page.  Maps to IWebBrowser2:GoSearch.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.Navigate(System.Uri)">
            <summary>
             Navigates to the specified Uri's AbsolutePath
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.Navigate(System.String)">
            <summary>
             String overload for Navigate(Uri)
            </summary>
             Note: We intentionally have a string overload (apparently Mort wants one).  We don't have
             string overloads call Uri overloads because that breaks Uris that aren't fully qualified
             (things like "www.microsoft.com") that the underlying objects support and we don't want to
             break.
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.Navigate(System.Uri,System.String)">
            <summary>
             Navigates the specified frame to the specified URL.
             If the frame name is invalid, it opens a new window (not ideal, but it's the current behavior).
             Maps to IWebBrowser2:Navigate.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.Navigate(System.String,System.String)">
            <summary>
             String overload for Navigate(Uri, string)
            </summary>
             Note: We intentionally have a string overload (apparently Mort wants one).  We don't have
             string overloads call Uri overloads because that breaks Uris that aren't fully qualified
             (things like "www.microsoft.com") that the underlying objects support and we don't want to
             break.
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.Navigate(System.Uri,System.Boolean)">
            <summary>
             Opens a new window if newWindow is true, navigating it to the specified URL. Maps to IWebBrowser2:Navigate.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.Navigate(System.String,System.Boolean)">
            <summary>
             String overload for Navigate(Uri, bool)
            </summary>
             Note: We intentionally have a string overload (apparently Mort wants one).  We don't have
             string overloads call Uri overloads because that breaks Uris that aren't fully qualified
             (things like "www.microsoft.com") that the underlying objects support and we don't want to
             break.
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.Navigate(System.Uri,System.String,System.Byte[],System.String)">
            <summary>
             Navigates to the specified Uri's AbsolutePath with specified args
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.Navigate(System.String,System.String,System.Byte[],System.String)">
            <summary>
             String overload for Navigate(Uri, string, byte[], string)
            </summary>
             Note: We intentionally have a string overload (apparently Mort wants one).  We don't have
             string overloads call Uri overloads because that breaks Uris that aren't fully qualified
             (things like "www.microsoft.com") that the underlying objects support and we don't want to
             break.
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.WebBrowser.Print" -->
        <member name="M:System.Windows.Forms.WebBrowser.Refresh">
            <summary>
             Refreshes the current page.  Maps to IWebBrowser2:Refresh.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.Refresh(System.Windows.Forms.WebBrowserRefreshOption)">
            <summary>
             Refreshes the current page w/ the specified refresh option. The refresh option
             controls how much is loaded out of the browser cache vs. rechecking the server for.
             Maps to IWebBrowser2:Refresh2
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.ScrollBarsEnabled">
            <summary>
             Enables/disables the webbrowser's scrollbars.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.WebBrowser.ShowPageSetupDialog" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.WebBrowser.ShowPrintDialog" -->
        <member name="M:System.Windows.Forms.WebBrowser.ShowPrintPreviewDialog">
            <summary>
             Opens the IE print preview dialog.  Maps to IWebBrowser2:ExecWebBrowser w/ IDM_PRINTPREVIEW flag.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.WebBrowser.ShowPropertiesDialog" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.WebBrowser.ShowSaveAsDialog" -->
        <member name="M:System.Windows.Forms.WebBrowser.Stop">
            <summary>
             Stops the current navigation.  Maps to IWebBrowser2:Stop.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.WebBrowser.CanGoBackChanged">
            <summary>
             Occurs when the IE back button would change from enabled to disabled or vice versa.
             Maps to DWebBrowserEvents2:CommandStateChange w/ SHDocVw.CSC.NAVIGATEBACK.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.WebBrowser.CanGoForwardChanged">
            <summary>
             Occurs when the IE forward button would change from enabled to disabled or vice versa.
             Maps to DWebBrowserEvents2:CommandStateChange w/ SHDocVw.CSC.NAVIGATEFORWARD.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.WebBrowser.DocumentCompleted">
            <summary>
             Occurs when the document hosted in the web browser control is fully loaded.
             This is conceptially similar to Form.Load().  You need to wait until this event fires
             before doing anything that manipulates the html page, ex. reading the Document
             property of the webbrowser control. Maps to DWebBrowserEvents2:DocumentComplete.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.WebBrowser.DocumentTitleChanged">
            <summary>
             Occurs whenever the title text changes. The Title is the html page title
             or the file path/url if not title is available. This is the text you see as
             the title of the IE window preceeding "Microsoft Internet Explorer".
             Maps to DWebBrowserEvents2:TitleChange.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.WebBrowser.EncryptionLevelChanged">
            <summary>
             Occurs whenever encryption level changes.
             Can be used to set a custom security lock icon similar to what IE shows when
             you go to an https site. Maps to DWebBrowserEvents2:SetSecureLockIcon.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.WebBrowser.FileDownload">
            <summary>
             Occurs when a file download occurs.
             Can be used to cancel file downloads. Maps to DWebBrowserEvents2:FileDownload.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.WebBrowser.Navigated">
            <summary>
             Occurs after browser control navigation occurs.
             Fires after browser navigation is complete. Maps to DWebBrowserEvents2:NavigateComplete.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.WebBrowser.Navigating">
            <summary>
             Occurs before browser control navigation occurs.
             Fires before browser navigation occurs. Allows navigation to be canceled if
             NavigatingEventArgs.Cancel is set to false. Maps to DWebBrowserEvents2:BeforeNavigate2.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.WebBrowser.NewWindow">
            <summary>
             Occurs when a new browser window is created.
             Can be used to cancel the creation of the new browser window. Maps to DWebBrowserEvents2:NewWindow2.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.WebBrowser.ProgressChanged">
            <summary>
             Occurs when an update to the progress of a download occurs.
             Fires whenever the browser control has updated info on the download. Can be
             used to provide a download status bar and display the number of bytes downloaded.
             Maps to DWebBrowserEvents2:ProgressChange.
            </summary>
        </member>
        <member name="E:System.Windows.Forms.WebBrowser.StatusTextChanged">
            <summary>
             Occurs whenever the status text changes.
             Can be used to keep a status bar populated with uptodate text.
             Maps to DWebBrowserEvents2:StatusTextChange.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.Focused">
            <summary>
             Returns true if this control (or any of its child windows) has focus.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowser.DefaultSize">
            <summary>
             Overrides the default size property of Control to specify a bigger default size of 250 x 250.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.AttachInterfaces(System.Object)">
            <summary>
             Retrieves IWebBrowser2 from the native object. Overriding classes should first call base.AttachInterfaces.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.DetachInterfaces">
            <summary>
             Discards the IWebBrowser2 reference. Overriding classes should call base.DetachInterfaces.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.CreateWebBrowserSiteBase">
            <summary>
             Returns a WebBrowserSite object.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.CreateSink">
            <summary>
             Attaches to the DWebBrowserEvents2 connection point.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.DetachSink">
            <summary>
             Releases the DWebBrowserEvents2 connection point.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.OnCanGoBackChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.WebBrowser.CanGoBackChanged'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.OnCanGoForwardChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.WebBrowser.CanGoForwardChanged'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.OnDocumentCompleted(System.Windows.Forms.WebBrowserDocumentCompletedEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.WebBrowser.DocumentCompleted'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.OnDocumentTitleChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.WebBrowser.DocumentTitleChanged'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.OnEncryptionLevelChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.WebBrowser.EncryptionLevelChanged'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.OnFileDownload(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.WebBrowser.FileDownload'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.OnNavigated(System.Windows.Forms.WebBrowserNavigatedEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.WebBrowser.Navigated'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.OnNavigating(System.Windows.Forms.WebBrowserNavigatingEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.WebBrowser.Navigating'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.OnNewWindow(System.ComponentModel.CancelEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.WebBrowser.NewWindow'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.OnProgressChanged(System.Windows.Forms.WebBrowserProgressChangedEventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.WebBrowser.ProgressChanged'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.OnStatusTextChanged(System.EventArgs)">
            <summary>
             Raises the <see cref='E:System.Windows.Forms.WebBrowser.StatusTextChanged'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.ShowContextMenu(System.Int32,System.Int32)">
            <summary>
             Returns TRUE if there is a context menu to show
             Returns FALSE otherwise
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WebBrowser.WebBrowserSite">
            <summary>
             Provides a default WebBrowserSite implementation for use in the CreateWebBrowserSite
             method in the WebBrowser class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowser.WebBrowserSite.#ctor(System.Windows.Forms.WebBrowser)">
            <summary>
             Creates an instance of the <see cref='T:System.Windows.Forms.WebBrowser.WebBrowserSite'/> class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Windows.Forms.WebBrowserBase" -->
        <member name="M:System.Windows.Forms.WebBrowserBase.#ctor(System.String)">
            <summary>
             Creates a new instance of a WinForms control which wraps an ActiveX control
             given by the clsid parameter.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowserBase.ActiveXInstance">
            <summary>
             Returns the native webbrowser object that this control wraps.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowserBase.CreateWebBrowserSiteBase">
            <summary>
             Returns an object that will be set as the site for the native ActiveX control.
             Implementors of the site can derive from <see cref='T:System.Windows.Forms.WebBrowserSiteBase'/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowserBase.AttachInterfaces(System.Object)">
            <summary>
             This will be called when the native ActiveX control has just been created.
             Inheritors of this class can override this method to cast the nativeActiveXObject
             parameter to the appropriate interface. They can then cache this interface
             value in a member variable. However, they must release this value when
             DetachInterfaces is called (by setting the cached interface variable to null).
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowserBase.DetachInterfaces">
            <summary>
             See AttachInterfaces for a description of when to override DetachInterfaces.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowserBase.CreateSink">
            <summary>
             This will be called when we are ready to start listening to events.
             Inheritors can override this method to hook their own connection points.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowserBase.DetachSink">
            <summary>
             This will be called when it is time to stop listening to events.
             This is where inheritors have to disconnect their connection points.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowserBase.OnBoundsUpdate(System.Int32,System.Int32,System.Int32,System.Int32)">
            <remarks>
            We have to resize the ActiveX control when our size changes.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.WebBrowserBase.WndProc(System.Windows.Forms.Message@)">
            <remarks>
            Certain messages are forwarder directly to the ActiveX control,
            others are first processed by the wndproc of Control
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.WebBrowserBase.OnHandleCreated(System.EventArgs)">
            <summary>
             Inheriting classes should override this method to find out when the
             handle has been created. Call base.OnHandleCreated first.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowserBase.ImeMode">
            <summary>
             Hide ImeMode: it doesn't make sense for this control
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WebBrowserBase.WebBrowserBaseNativeWindow">
            <summary>
             Defines a window that the ActiveX window is attached to so that we can override it's wndproc.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowserBase.WebBrowserBaseNativeWindow.WndProc(System.Windows.Forms.Message@)">
            <summary>
             Pass messages on to the NotifyIcon object's wndproc handler.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WebBrowserDocumentCompletedEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.WebBrowser.OnDocumentCompleted(System.Windows.Forms.WebBrowserDocumentCompletedEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowserDocumentCompletedEventArgs.#ctor(System.Uri)">
            <summary>
             Creates an instance of the <see cref='T:System.Windows.Forms.WebBrowserDocumentCompletedEventArgs'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowserDocumentCompletedEventArgs.Url">
            <summary>
             Url of the Document.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WebBrowserDocumentCompletedEventHandler">
            <summary>
             Delegate to the WebBrowser DocumentCompleted event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WebBrowserEncryptionLevel">
            <summary>
             Specifies the EncryptionLevel of the document in the WebBrowser control.
             Returned by the <see cref='P:System.Windows.Forms.WebBrowser.EncryptionLevel'/> property.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WebBrowserHelper">
            <summary>
             This class contains static properties/methods that are internal.
             It also has types that make sense only for ActiveX hosting classes.
             In other words, this is a helper class for the ActiveX hosting classes.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowserHelper.GetClipRect">
            <remarks>
             Returns a big clip RECT.
            </remarks>
        </member>
        <member name="T:System.Windows.Forms.WebBrowserNavigatedEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.WebBrowser.OnNavigated(System.Windows.Forms.WebBrowserNavigatedEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowserNavigatedEventArgs.#ctor(System.Uri)">
            <summary>
             Creates an instance of the <see cref='T:System.Windows.Forms.WebBrowserNavigatedEventArgs'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowserNavigatedEventArgs.Url">
            <summary>
             Url the browser navigated to.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WebBrowserNavigatedEventHandler">
            <summary>
             Delegate to the WebBrowser Navigated event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WebBrowserNavigatingEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.WebBrowser.OnNavigating(System.Windows.Forms.WebBrowserNavigatingEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowserNavigatingEventArgs.#ctor(System.Uri,System.String)">
            <summary>
             Creates an instance of the <see cref='T:System.Windows.Forms.WebBrowserNavigatingEventArgs'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowserNavigatingEventArgs.Url">
            <summary>
             Url the browser is navigating to.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowserNavigatingEventArgs.TargetFrameName">
            <summary>
             In case an individual frame is about to be navigated, this contains the frame name.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WebBrowserNavigatingEventHandler">
            <summary>
             Delegate to the WebBrowser Navigating event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WebBrowserProgressChangedEventArgs">
            <summary>
             Provides data for the <see cref='M:System.Windows.Forms.WebBrowser.OnProgressChanged(System.Windows.Forms.WebBrowserProgressChangedEventArgs)'/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowserProgressChangedEventArgs.#ctor(System.Int64,System.Int64)">
            <summary>
             Creates an instance of the <see cref='T:System.Windows.Forms.WebBrowserProgressChangedEventArgs'/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowserProgressChangedEventArgs.CurrentProgress">
            <summary>
             Specifies current number of bytes donwloaded. CurrentProgress/MaximumProgress*100 = progress percentage.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowserProgressChangedEventArgs.MaximumProgress">
            <summary>
             Specifies total number of bytes of item being downloaded.
             CurrentProgress/MaximumProgress*100 = progress percentage.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WebBrowserProgressChangedEventHandler">
            <summary>
             Delegate to the WebBrowser ProgressChanged event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WebBrowserReadyState">
            <summary>
             Specifies the ReadyState of the WebBrowser control.
             Returned by the <see cref='P:System.Windows.Forms.WebBrowser.ReadyState'/> property.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WebBrowserRefreshOption">
            <summary>
             Specifies the RefreshOptions in the <see cref='M:System.Windows.Forms.WebBrowser.Refresh'/> method.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WebBrowserSiteBase">
             <summary>
              This class implements the necessary interfaces required for an ActiveX site.
            
              This class is public, but has an internal constructor so that external
              users can only reference the Type (cannot instantiate it directly).
              Other classes have to inherit this class and expose it to the outside world.
            
              This class does not have any public property/method/event by itself.
              All implementations of the site interface methods are private, which
              means that inheritors who want to override even a single method of one
              of these interfaces will have to implement the whole interface.
             </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowserSiteBase.Dispose">
            <summary>
             Dispose(release the cookie)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WebBrowserSiteBase.Dispose(System.Boolean)">
            <summary>
             Release the cookie if we're disposing
            </summary>
        </member>
        <member name="P:System.Windows.Forms.WebBrowserSiteBase.Host">
            <summary>
             Retrieves the WebBrowserBase object set in the constructor.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WinCategoryAttribute">
            <summary>
             CategoryAttribute that can access WinForms localized strings.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WinCategoryAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref='T:System.ComponentModel.CategoryAttribute'/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WinCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
             This method is called the first time the category property
             is accessed.  It provides a way to lookup a localized string for
             the given category.  Classes may override this to add their
             own localized names to categories.  If a localized string is
             available for the given value, the method should return it.
             Otherwise, it should return null.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WindowsFormsSynchronizationContext">
            <summary>
             SynchronizationContext subclass used by the Windows Forms package.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WindowSubclassHandler">
            <summary>
              Allows to subclass individual windows.
            </summary>
            <remarks>
            <para>
              To actually subclass the window, call <see cref="M:System.Windows.Forms.WindowSubclassHandler.Open"/>. To ensure the
              subclassing is correctly undone, you must call <see cref="M:System.Windows.Forms.WindowSubclassHandler.Dispose"/> before the
              window is destroyed.
            </para>
            <para>
              See https://docs.microsoft.com/en-us/windows/desktop/winmsg/about-window-procedures#instance-subclassing
              for more information about subclassing.
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.WindowSubclassHandler._windowProcDelegate">
            <summary>
              The delegate for the callback handler (that calls
              <see cref="!:WndProc(int, IntPtr, IntPtr)"/> from which the native function
              pointer <see cref="F:System.Windows.Forms.WindowSubclassHandler._windowProcDelegatePtr"/> is created. 
            </summary>
            <remarks>
            <para>
              We must store this delegate (and prevent it from being garbage-collected)
              to ensure the function pointer doesn't become invalid.
            </para>
            <para>
              Note: We create a new delegate (and native function pointer) for each
              instance because even though creation will be slower (and requires a
              bit of memory to store the native code) it will be faster when the window
              procedure is invoked, because otherwise we would need to use a dictionary
              to map the hWnd to the instance, as the window procedure doesn't allow
              to store reference data. However, creating a new delegate for each instance
              is also the way that the <see cref="T:System.Windows.Forms.NativeWindow"/> class does it.
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Forms.WindowSubclassHandler._windowProcDelegatePtr">
            <summary>
              The function pointer created from <see cref="F:System.Windows.Forms.WindowSubclassHandler._windowProcDelegate"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WindowSubclassHandler.#ctor(System.IntPtr)">
            <summary>
              Initializes a new instance of the <see cref="T:System.Windows.Forms.WindowSubclassHandler"/> class.
            </summary>
            <param name="handle">The window handle of the window to subclass.</param>
        </member>
        <member name="M:System.Windows.Forms.WindowSubclassHandler.Open">
            <summary>
              Subclasses the window.
            </summary>
            <remarks>
            <para>
              You must call <see cref="M:System.Windows.Forms.WindowSubclassHandler.Dispose"/> to undo the subclassing before
              the window is destroyed.
            </para>
            </remarks>
            <exception cref="T:System.ComponentModel.Win32Exception">The window could not be subclassed.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:System.Windows.Forms.WindowSubclassHandler.Open"/> was already called.</exception>
        </member>
        <member name="M:System.Windows.Forms.WindowSubclassHandler.Dispose">
            <summary>
              Releases all resources used by the <see cref="T:System.Windows.Forms.WindowSubclassHandler"/>.
            </summary>
            <remarks>
            <para>
              This method undoes the subclassing that was initiated by calling <see cref="M:System.Windows.Forms.WindowSubclassHandler.Open"/>.
              You must call this method before the window that was subclassed is destroyed.
            </para>
            <para>
              If undoing the subclassing fails, this method will throw an exception. In that case,
              you should call <see cref="M:System.Windows.Forms.WindowSubclassHandler.KeepCallbackDelegateAlive"/> after the window is destroyed
              to ensure the managed callback delegate is kept alive until the window procedure will
              no longer be called.
            </para>
            </remarks>
            <exception cref="T:System.ComponentModel.Win32Exception">The subclassing could not be undone.</exception>
            <exception cref="T:System.InvalidOperationException">The current window procedure is not the
            expected one.</exception>
        </member>
        <member name="M:System.Windows.Forms.WindowSubclassHandler.KeepCallbackDelegateAlive">
            <summary>
              Keeps the managed callback delegate alive from which the native function pointer
              for the window procedure is created.
            </summary>
            <remarks>
            <para>
              When subclassing a window, a native function pointer is created from a managed
              callback delegate which is then set as the window procedure. The callback is 
              automatically kept alive until <see cref="M:System.Windows.Forms.WindowSubclassHandler.Dispose"/> is called to undo the
              subclassing.
            </para>
            <para>
              However, if <see cref="M:System.Windows.Forms.WindowSubclassHandler.Dispose"/> fails (indicated by throwing an exception),
              e.g. because the current window procedure pointer is not the expected one,
              you should call this method after the window is actually destroyed, to ensure
              the callback delegate is kept alive up to that time. Failing to do this might
              result in undefined behavior.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.WindowSubclassHandler.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.WindowSubclassHandler"/> and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">The subclassing could not be undone.</exception>
            <exception cref="T:System.InvalidOperationException">The current window procedure is not the
            expected one.</exception>
        </member>
        <member name="M:System.Windows.Forms.WindowSubclassHandler.WndProc(System.Windows.Forms.Message@)">
            <summary>
              Processes Windows messages for the subclassed window.
            </summary>
            <param name="m">The message to process.</param>
        </member>
        <member name="M:System.Windows.Forms.WindowSubclassHandler.CanCatchWndProcException(System.Exception)">
            <summary>
              Determines if the specified <paramref name="exception"/> that was thrown
              by <see cref="M:System.Windows.Forms.WindowSubclassHandler.WndProc(System.Windows.Forms.Message@)"/> shall be caught and passed to
              <see cref="M:System.Windows.Forms.WindowSubclassHandler.HandleWndProcException(System.Exception)"/>.
            </summary>
            <param name="exception"></param>
            <returns><see langword="true"/> to catch the exception, or <see langword="false"/>
            to let it bubble up to the caller.</returns>
        </member>
        <member name="M:System.Windows.Forms.WindowSubclassHandler.HandleWndProcException(System.Exception)">
            <summary>
              Called when an exception thrown by <see cref="M:System.Windows.Forms.WindowSubclassHandler.WndProc(System.Windows.Forms.Message@)"/> was caught.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> that was caught.</param>
        </member>
        <member name="P:System.Windows.Forms.WindowsFormsUtils.LastCursorPoint">
            <summary>
             The GetMessagePos function retrieves the cursor position for the last message
             retrieved by the GetMessage function.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WindowsFormsUtils.CreateMeasurementGraphics">
            <remarks>
             this graphics requires disposal.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.WindowsFormsUtils.ContainsMnemonic(System.String)" -->
        <member name="M:System.Windows.Forms.WindowsFormsUtils.ConstrainToScreenBounds(System.Drawing.Rectangle)">
            <summary>
             Given a rectangle, constrain it to fit onto the current screen.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.WindowsFormsUtils.EscapeTextWithAmpersands(System.String)" -->
        <member name="M:System.Windows.Forms.WindowsFormsUtils.GetControlInformation(System.IntPtr)">
            <summary>
             helper function for generating information about a particular control
             use AssertControlInformation if sticking in an assert - then the work
             to figure out the control info will only be done when the assertion is false.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.WindowsFormsUtils.GetMnemonic(System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.WindowsFormsUtils.TextWithoutMnemonics(System.String)" -->
        <member name="M:System.Windows.Forms.WindowsFormsUtils.TranslatePoint(System.Drawing.Point,System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
             Translates a point from one control's coordinate system to the other
             same as:
             controlTo.PointToClient(controlFrom.PointToScreen(point))
             but slightly more performant.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.WindowsFormsUtils.SafeCompareStrings(System.String,System.String,System.Boolean)">
             <summary>
              Compares the strings using invariant culture for Turkish-I support. Returns true if they match.
            
              If your strings are symbolic (returned from APIs, not from user) the following calls
              are faster than this method:
            
              String.Equals(s1, s2, StringComparison.Ordinal)
              String.Equals(s1, s2, StringComparison.OrdinalIgnoreCase)
             </summary>
        </member>
        <member name="M:System.Windows.Forms.WindowsFormsUtils.EnumValidator.IsValidContentAlignment(System.Drawing.ContentAlignment)">
            <summary>
             Valid values are 0x001,0x002,0x004, 0x010,0x020,0x040, 0x100, 0x200,0x400
             Method for verifying
             Verify that the number passed in has only one bit on
             Verify that the bit that is on is a valid bit by bitwise anding it to a mask.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.Forms.WindowsFormsUtils.EnumValidator.IsEnumWithinShiftedRange(System.Enum,System.Int32,System.Int32,System.Int32)" -->
        <member name="T:System.Windows.Forms.WindowsFormsUtils.ReadOnlyControlCollection">
            <summary>
             This is a ControlCollection which can be made readonly. In readonly mode, this
             ControlCollection throws NotSupportedExceptions for any operation that attempts
             to modify the collection.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WindowsFormsUtils.TypedControlCollection">
            <summary>
             This control collection only allows a specific type of control
             into the controls collection. It optionally supports readonlyness.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.WindowsFormsUtils.DCMapping">
             <summary>
              DCMapping is used to change the mapping and clip region of the
              the specified device context to the given bounds. When the
              DCMapping is disposed, the original mapping and clip rectangle
              are restored.
            
              Example:
            
              using(WindowsFormsUtils.DCMapping mapping = new WindowsFormsUtils.DCMapping(hDC, new Rectangle(10,10, 50, 50) {
              // inside here the hDC's mapping of (0,0) is inset by (10,10) and
              // all painting is clipped at (0,0) - (50,50)
              }
            
              To use with GDI+ you can get the hDC from the Graphics object. You'd want to do this in a situation where
              you're handing off a graphics object to someone, and you want the world translated some amount X,Y. This
              works better than g.TranslateTransform(x,y) - as if someone calls g.GetHdc and does a GDI operation - their
              world is NOT transformed.
            
              HandleRef hDC = new HandleRef(this, originalGraphics.GetHdc());
              try {
              using(WindowsFormsUtils.DCMapping mapping = new WindowsFormsUtils.DCMapping(hDC, new Rectangle(10,10, 50, 50) {
            
              // DO NOT ATTEMPT TO USE originalGraphics here - you'll get an Object Busy error
              // rather ask the mapping object for a graphics object.
              mapping.Graphics.DrawRectangle(Pens.Black, rect);
              }
              }
              finally { g.ReleaseHdc(hDC);}
            
              PERF: DCMapping is a structure so that it will allocate on the stack rather than in GC managed
              memory. This way disposing the object does not force a GC. Since DCMapping objects aren't
              likely to be passed between functions rather used and disposed in the same one, this reduces
              overhead.
             </summary>
        </member>
        <member name="P:System.Windows.Forms.WindowsFormsUtils.DCMapping.Graphics">
            <summary>
             Allows you to get the graphics object based off of the translated HDC.
             Note this will be disposed when the DCMapping object is disposed.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RTLAwareMessageBox">
            <summary>
             The Show method displays a message box that can contain text, buttons, and symbols that inform and instruct the user.
             This MessageBox will be RTL, if the resources for this dll have been localized to a RTL language.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RTLAwareMessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
            <summary>
             Displays a message box with specified text, caption, and style.
             Makes the dialog RTL if the resources for this dll have been localized to a RTL language.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RTLAwareMessageBox.IsRTLResources">
            <summary>
             Tells whether the current resources for this dll have been localized for a RTL language.
            </summary>
        </member>
        <member name="T:System.Resources.MultitargetUtil">
            <summary>
             Helper class supporting Multitarget type assembly qualified name resolution for ResX API.
             Note: this file is compiled into different assemblies (runtime and VSIP assemblies ...)
            </summary>
        </member>
        <member name="M:System.Resources.MultitargetUtil.GetAssemblyQualifiedName(System.Type,System.Func{System.Type,System.String})">
            <summary>
             This method gets assembly info for the corresponding type. If the delegate
             is provided it is used to get this information.
            </summary>
        </member>
        <member name="T:System.Resources.IAliasResolver">
            <summary>
             Summary of IAliasResolver.
            </summary>
        </member>
        <member name="P:System.Resources.ResXDataNode.Comment">
            <summary>
            </summary>
        </member>
        <member name="P:System.Resources.ResXDataNode.Name">
            <summary>
            </summary>
        </member>
        <member name="M:System.Resources.ResXDataNode.GetNodePosition">
            <summary>
             Might return the position in the resx file of the current node, if known
             otherwise, will return Point(0,0) since point is a struct
            </summary>
        </member>
        <member name="M:System.Resources.ResXDataNode.GetValueTypeName(System.ComponentModel.Design.ITypeResolutionService)">
            <summary>
             Get the FQ type name for this datanode.
             We return typeof(object) for ResXNullRef
            </summary>
        </member>
        <member name="M:System.Resources.ResXDataNode.GetValueTypeName(System.Reflection.AssemblyName[])">
            <summary>
             Get the FQ type name for this datanode
            </summary>
        </member>
        <member name="M:System.Resources.ResXDataNode.GetValue(System.ComponentModel.Design.ITypeResolutionService)">
            <summary>
             Get the value contained in this datanode
            </summary>
        </member>
        <member name="M:System.Resources.ResXDataNode.GetValue(System.Reflection.AssemblyName[])">
            <summary>
             Get the value contained in this datanode
            </summary>
        </member>
        <member name="M:System.Resources.ResXDataNode.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Get the value contained in this datanode
            </summary>
        </member>
        <member name="M:System.Resources.AssemblyNamesTypeResolutionService.IsDotNetAssembly(System.String)">
            <summary>
             This is matching %windir%\Microsoft.NET\Framework*, so both 32bit and 64bit framework will be covered.
            </summary>
        </member>
        <member name="T:System.Resources.ResXFileRef">
            <summary>
             ResX File Reference class. This allows the developer to represent
             a link to an external resource. When the resource manager asks
             for the value of the resource item, the external resource is loaded.
            </summary>
        </member>
        <member name="M:System.Resources.ResXFileRef.#ctor(System.String,System.String)">
            <summary>
             Creates a new ResXFileRef that points to the specified file.
             The type refered to by typeName must support a constructor
             that accepts a System.IO.Stream as a parameter.
            </summary>
        </member>
        <member name="M:System.Resources.ResXFileRef.#ctor(System.String,System.String,System.Text.Encoding)">
            <summary>
             Creates a new ResXFileRef that points to the specified file.
             The type refered to by typeName must support a constructor
             that accepts a System.IO.Stream as a parameter.
            </summary>
        </member>
        <member name="M:System.Resources.ResXFileRef.PathDifference(System.String,System.String,System.Boolean)">
            <summary>
             path1+result = path2
             A string which is the relative path difference between path1 and
             path2 such that if path1 and the calculated difference are used
             as arguments to Combine(), path2 is returned
            </summary>
        </member>
        <member name="T:System.Resources.ResXNullRef">
            <summary>
             ResX Null Reference class.  This class allows ResX to store null values.
             It is a placeholder that is written into the file.  On read, it is replaced
             with null.
            </summary>
        </member>
        <member name="T:System.Resources.ResXResourceReader">
            <summary>
             ResX resource reader.
            </summary>
        </member>
        <member name="P:System.Resources.ResXResourceReader.BasePath">
            <summary>
             BasePath for relatives filepaths with ResXFileRefs.
            </summary>
        </member>
        <member name="P:System.Resources.ResXResourceReader.UseResXDataNodes">
            <summary>
             ResXFileRef's TypeConverter automatically unwraps it, creates the referenced
             object and returns it. This property gives the user control over whether this unwrapping should
             happen, or a ResXFileRef object should be returned. Default is true for backward compat and common case
             scenario.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceReader.Close">
            <summary>
             Closes and files or streams being used by the reader.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceReader.EnsureResData">
            <summary>
             Demand loads the resource data.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceReader.FromFileContents(System.String)">
            <summary>
             Creates a reader with the specified file contents.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceReader.FromFileContents(System.String,System.ComponentModel.Design.ITypeResolutionService)">
            <summary>
             Creates a reader with the specified file contents.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceReader.FromFileContents(System.String,System.Reflection.AssemblyName[])">
            <summary>
             Creates a reader with the specified file contents.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Resources.ResXResourceReader.GetMetadataEnumerator" -->
        <member name="M:System.Resources.ResXResourceReader.GetPosition(System.Xml.XmlReader)">
            <summary>
             Attempts to return the line and column (Y, X) of the XML reader.
            </summary>
        </member>
        <member name="T:System.Resources.ResXResourceSet">
            <summary>
             ResX resource set.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceSet.#ctor(System.String)">
            <summary>
             Creates a resource set for the specified file.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceSet.#ctor(System.IO.Stream)">
            <summary>
             Creates a resource set for the specified stream.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceSet.GetDefaultReader">
            <summary>
             Gets the default reader type associated with this set.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceSet.GetDefaultWriter">
            <summary>
             Gets the default writer type associated with this set.
            </summary>
        </member>
        <member name="T:System.Resources.ResXResourceWriter">
            <summary>
             ResX resource writer. See the text in "ResourceSchema" for more
             information.
            </summary>
        </member>
        <member name="P:System.Resources.ResXResourceWriter.BasePath">
            <summary>
             Base Path for ResXFileRefs.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceWriter.#ctor(System.String)">
            <summary>
             Creates a new ResXResourceWriter that will write to the specified file.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceWriter.#ctor(System.IO.Stream)">
            <summary>
             Creates a new ResXResourceWriter that will write to the specified stream.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceWriter.#ctor(System.IO.TextWriter)">
            <summary>
             Creates a new ResXResourceWriter that will write to the specified TextWriter.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceWriter.AddAlias(System.String,System.Reflection.AssemblyName)">
            <summary>
             Adds aliases to the resource file...
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.Byte[])" -->
        <!-- Badly formed XML comment ignored for member "M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.Object)" -->
        <member name="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Byte[])">
            <summary>
             Adds a blob resource to the resources.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Object)">
            <summary>
             Adds a resource to the resources. If the resource is a string,
             it will be saved that way, otherwise it will be serialized
             and stored as in binary.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.String)">
            <summary>
             Adds a string resource to the resources.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceWriter.AddResource(System.Resources.ResXDataNode)">
            <summary>
             Adds a string resource to the resources.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceWriter.AddDataRow(System.String,System.String,System.Byte[])">
            <summary>
             Adds a blob resource to the resources.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceWriter.AddDataRow(System.String,System.String,System.Object)">
            <summary>
             Adds a resource to the resources. If the resource is a string,
             it will be saved that way, otherwise it will be serialized
             and stored as in binary.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceWriter.AddDataRow(System.String,System.String,System.String)">
            <summary>
             Adds a string resource to the resources.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceWriter.AddDataRow(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Adds a new row to the Resources table. This helper is used because
             we want to always late bind to the columns for greater flexibility.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceWriter.Close">
            <summary>
             Closes any files or streams locked by the writer.
            </summary>
        </member>
        <member name="M:System.Resources.ResXResourceWriter.Generate">
            <summary>
             Writes the resources out to the file or stream.
            </summary>
        </member>
        <member name="T:System.Drawing.Design.IPropertyValueUIService">
            <summary>
             Provides an interface to manage the images, ToolTips, and event handlers for the properties of a component displayed in a property browser.
            </summary>
        </member>
        <member name="E:System.Drawing.Design.IPropertyValueUIService.PropertyUIValueItemsChanged">
             <summary>
             Adds or removes an <see cref='T:System.EventHandler'/> that will be invoked when the global list of <see cref="T:System.Drawing.Design.PropertyValueUIItem"/> is modified.
             </summary>
        </member>
        <member name="M:System.Drawing.Design.IPropertyValueUIService.AddPropertyValueUIHandler(System.Drawing.Design.PropertyValueUIHandler)">
            <summary>
             Adds the specified <see cref="T:System.Drawing.Design.PropertyValueUIHandler" /> to this service.
            </summary>
            <param name="newHandler">The UI handler to add. </param>
        </member>
        <member name="M:System.Drawing.Design.IPropertyValueUIService.GetPropertyUIValueItems(System.ComponentModel.ITypeDescriptorContext,System.ComponentModel.PropertyDescriptor)">
            <summary>
             Gets the <see cref="T:System.Drawing.Design.PropertyValueUIItem" /> objects that match the specified context and property descriptor characteristics.
            </summary>
            <returns>An array of <see cref="T:System.Drawing.Design.PropertyValueUIItem" /> objects that match the specified parameters.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
            <param name="propDesc">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that indicates the property to match with the properties to return. </param>
        </member>
        <member name="M:System.Drawing.Design.IPropertyValueUIService.NotifyPropertyValueUIItemsChanged">
             <summary>
             Notifies the <see cref="T:System.Drawing.Design.IPropertyValueUIService"/> implementation that the global list of <see cref="T:System.Drawing.Design.PropertyValueUIItem"/> has been modified.
             </summary>
        </member>
        <member name="M:System.Drawing.Design.IPropertyValueUIService.RemovePropertyValueUIHandler(System.Drawing.Design.PropertyValueUIHandler)">
            <summary>
             Removes a <see cref='T:System.Drawing.Design.PropertyValueUIHandler'/> from this service.
            </summary>
            <param name="newHandler">The handler to remove.</param>
        </member>
        <member name="T:System.Drawing.Design.PaintValueEventArgs">
            <summary>
             Object passed as an argument to <see cref='M:System.Drawing.Design.UITypeEditor.PaintValue(System.Object,System.Drawing.Graphics,System.Drawing.Rectangle)'/> containing information needed by the editor to paint the given value.
            </summary>
        </member>
        <member name="M:System.Drawing.Design.PaintValueEventArgs.#ctor(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Constructor that accepts the information needed by the editor to paint the given value.
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> in which this value appears in.</param>
            <param name="value">The value to paint.</param>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object with which drawing should be done.</param>
            <param name="bounds">The <see cref="T:System.Drawing.Rectangle"/> that indicates the area in which the drawing should be done.</param>
        </member>
        <member name="P:System.Drawing.Design.PaintValueEventArgs.Bounds">
            <summary>
            <see cref="T:System.Drawing.Rectangle"/> outlining the area in which the painting should be done.
            </summary>
        </member>
        <member name="P:System.Drawing.Design.PaintValueEventArgs.Context">
            <summary>
            <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object for additional information about the context this value appears in.
            </summary>
        </member>
        <member name="P:System.Drawing.Design.PaintValueEventArgs.Graphics">
            <summary>
            <see cref="T:System.Drawing.Graphics"/> object with which painting should be done.
            </summary>
        </member>
        <member name="P:System.Drawing.Design.PaintValueEventArgs.Value">
            <summary>
             Value to paint.
            </summary>
        </member>
        <member name="T:System.Drawing.Design.PropertyValueUIHandler">
            <summary>Represents a delegate to be added to <see cref='T:System.Drawing.Design.IPropertyValueUIService'/>.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to obtain context information. </param>
            <param name="propDesc">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the property being queried. </param>
            <param name="valueUIItemList">An <see cref="T:System.Collections.ArrayList" /> of <see cref="T:System.Drawing.Design.PropertyValueUIItem" /> objects containing the UI items associated with the property. </param>
        </member>
        <member name="T:System.Drawing.Design.PropertyValueUIItem">
            <summary>
             Provides information about the property value UI including the invoke handler, tool tip and glyph icon.
            </summary>
        </member>
        <member name="M:System.Drawing.Design.PropertyValueUIItem.#ctor(System.Drawing.Image,System.Drawing.Design.PropertyValueUIItemInvokeHandler,System.String)">
            <summary>Constructor that accepts the necessary information to display this item.</summary>
            <param name="uiItemImage"><see cref="T:System.Drawing.Image"/> representing the 8 x 8 icon to display.</param>
            <param name="handler">The <see cref="T:System.Drawing.Design.PropertyValueUIItemInvokeHandler"/> to invoke when the item is double clicked.</param>
            <param name="tooltip">The ToolTip to display for this item.</param>
        </member>
        <member name="P:System.Drawing.Design.PropertyValueUIItem.Image">
            <summary>Gets the 8 x 8 pixel image that will be drawn on the properties window.</summary>
        </member>
        <member name="P:System.Drawing.Design.PropertyValueUIItem.InvokeHandler">
            <summary>Gets the handler that will be raised when this item is double clicked.</summary>
        </member>
        <member name="P:System.Drawing.Design.PropertyValueUIItem.ToolTip">
            <summary>Gets the ToolTip to display for this item.</summary>
        </member>
        <member name="M:System.Drawing.Design.PropertyValueUIItem.Reset">
            <summary>Resets the UI item.</summary>
        </member>
        <member name="T:System.Drawing.Design.PropertyValueUIItemInvokeHandler">
            <summary>
             Represents a method that will handle the event raised when an icon in the properties window associated with a <see cref='T:System.Drawing.Design.PropertyValueUIItem'/> is double-clicked.
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> for the property associated with the icon that was double-clicked. </param>
            <param name="descriptor">The property associated with the icon that was double-clicked. </param>
            <param name="invokedItem">The <see cref="T:System.Drawing.Design.PropertyValueUIItem" /> associated with the icon that was double-clicked. </param>
        </member>
        <member name="T:System.Drawing.Design.UITypeEditor">
            <summary>
             Provides a base class for editors that may provide users with a user interface to visually edit the values of the supported type or types.
            </summary>
        </member>
        <member name="P:System.Drawing.Design.UITypeEditor.IsDropDownResizable">
            <summary>
             Determines if drop-down editors should be resizable by the user.
            </summary>
        </member>
        <member name="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)">
            <summary>
             Edits the specified value using the editor style provided by <see cref='M:System.Drawing.Design.UITypeEditor.GetEditStyle'/>.
            </summary>
            <param name="provider">An <see cref="T:System.IServiceProvider" /> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
        </member>
        <member name="M:System.Drawing.Design.UITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
             Edits the specified value using the editor style provided by <see cref='M:System.Drawing.Design.UITypeEditor.GetEditStyle'/>.
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
            <param name="provider">The <see cref="T:System.IServiceProvider" /> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
        </member>
        <member name="M:System.Drawing.Design.UITypeEditor.GetEditStyle">
            <summary>
             Gets the <see cref='T:System.Drawing.Design.UITypeEditorEditStyle'/> of the Edit method.
            </summary>
        </member>
        <member name="M:System.Drawing.Design.UITypeEditor.GetPaintValueSupported">
            <summary>
             Gets a value indicating whether this editor supports painting a representation of an object's value.
            </summary>
        </member>
        <member name="M:System.Drawing.Design.UITypeEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Gets a value indicating whether this editor supports painting a representation of an object's value.
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
        </member>
        <member name="M:System.Drawing.Design.UITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Gets the editing style of the Edit method.
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
        </member>
        <member name="M:System.Drawing.Design.UITypeEditor.PaintValue(System.Object,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
             Paints a representative value of the specified object to the specified canvas.
            </summary>
            <param name="value">The object whose value this type editor will display. </param>
            <param name="canvas">A drawing canvas on which to paint the representation of the object's value. </param>
            <param name="rectangle">A <see cref="T:System.Drawing.Rectangle" /> within whose boundaries to paint the value. </param>
        </member>
        <member name="M:System.Drawing.Design.UITypeEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
             Paints a representative value of the specified object to the specified canvas.
            </summary>
            <param name="e">A <see cref="T:System.Drawing.Design.PaintValueEventArgs" /> that indicates what to paint and where to paint it. </param>
        </member>
        <member name="T:System.Drawing.Design.UITypeEditorEditStyle">
            <summary>
             Specifies identifiers to indicate the style of a <see cref='T:System.Drawing.Design.UITypeEditor'/>.
            </summary>
        </member>
        <member name="T:System.Drawing.Design.Com2ExtendedUITypeEditor">
            <summary>
             Provides an editor that provides a way to visually edit the values of a COM2 type.
            </summary>
        </member>
        <member name="M:System.Drawing.Design.Com2ExtendedUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
             Edits the given object value using the editor style provided by
             GetEditorStyle.  A service provider is provided so that any
             required editing services can be obtained.
            </summary>
        </member>
        <member name="M:System.Drawing.Design.Com2ExtendedUITypeEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Determines if this editor supports the painting of a representation
             of an object's value.
            </summary>
        </member>
        <member name="M:System.Drawing.Design.Com2ExtendedUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Retrieves the editing style of the Edit method.  If the method
             is not supported, this will return None.
            </summary>
        </member>
        <member name="M:System.Drawing.Design.Com2ExtendedUITypeEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
             Paints a representative value of the given object to the provided
             canvas.  Painting should be done within the boundaries of the
             provided rectangle.
            </summary>
        </member>
        <member name="P:System.SR.AboutBoxDesc">
            <summary>Displays the 'About' box for this component</summary>
        </member>
        <member name="P:System.SR.AccDGCollapse">
            <summary>Collapse</summary>
        </member>
        <member name="P:System.SR.AccDGEdit">
            <summary>Edit</summary>
        </member>
        <member name="P:System.SR.AccDGExpand">
            <summary>Expand</summary>
        </member>
        <member name="P:System.SR.AccDGNavigate">
            <summary>Navigate</summary>
        </member>
        <member name="P:System.SR.AccDGNavigateBack">
            <summary>Navigate Back</summary>
        </member>
        <member name="P:System.SR.AccDGNewRow">
            <summary>(Create New)</summary>
        </member>
        <member name="P:System.SR.AccDGParentRow">
            <summary>Parent Row</summary>
        </member>
        <member name="P:System.SR.AccDGParentRows">
            <summary>Parent Rows</summary>
        </member>
        <member name="P:System.SR.AccessibleActionCheck">
            <summary>Check</summary>
        </member>
        <member name="P:System.SR.AccessibleActionClick">
            <summary>Click</summary>
        </member>
        <member name="P:System.SR.AccessibleActionCollapse">
            <summary>Collapse</summary>
        </member>
        <member name="P:System.SR.AccessibleActionExpand">
            <summary>Expand</summary>
        </member>
        <member name="P:System.SR.AccessibleActionPress">
            <summary>Press</summary>
        </member>
        <member name="P:System.SR.AccessibleActionUncheck">
            <summary>Uncheck</summary>
        </member>
        <member name="P:System.SR.AddDifferentThreads">
            <summary>Controls created on one thread cannot be parented to a control on a different thread.</summary>
        </member>
        <member name="P:System.SR.ApplicationCannotChangeThreadExceptionMode">
            <summary>Thread exception mode cannot be changed once any Controls are created on the thread.</summary>
        </member>
        <member name="P:System.SR.ApplicationCannotChangeApplicationExceptionMode">
            <summary>Application exception mode cannot be changed once any Controls are created in the application.</summary>
        </member>
        <member name="P:System.SR.ApplyCaption">
            <summary>&amp;Apply</summary>
        </member>
        <member name="P:System.SR.ArraysNotSameSize">
            <summary>Arrays '{0}' and '{1}' must be the same size.</summary>
        </member>
        <member name="P:System.SR.AutoCompleteFailure">
            <summary>autoComplete cannot be initialized with given custom source.</summary>
        </member>
        <member name="P:System.SR.AutoCompleteFailureListItems">
            <summary>autoComplete cannot be initialized with the list items.</summary>
        </member>
        <member name="P:System.SR.AXAddInvalidEvent">
            <summary>Event {0} is not valid on this ActiveX control.</summary>
        </member>
        <member name="P:System.SR.AXDuplicateControl">
            <summary>ActiveX control named '{0}' already exists in this container. Change or set the "Name" property for this ActiveX control and try again.</summary>
        </member>
        <member name="P:System.SR.AXEditProperties">
            <summary>Edit ActiveX component properties</summary>
        </member>
        <member name="P:System.SR.AXFontUnitNotPoint">
            <summary>ActiveX controls only accept fonts that are defined in GraphicsUnit.Point.</summary>
        </member>
        <member name="P:System.SR.AxInterfaceNotSupported">
            <summary>Interface is not supported.</summary>
        </member>
        <member name="P:System.SR.AXInvalidArgument">
            <summary>Not a valid argument.</summary>
        </member>
        <member name="P:System.SR.AXInvalidMethodInvoke">
            <summary>Method '{0}' cannot be invoked at this time.</summary>
        </member>
        <member name="P:System.SR.AXInvalidPropertyGet">
            <summary>Property get of '{0}' cannot be invoked at this time.</summary>
        </member>
        <member name="P:System.SR.AXInvalidPropertySet">
            <summary>Property set of '{0}' cannot be invoked at this time.</summary>
        </member>
        <member name="P:System.SR.AXMTAThread">
            <summary>ActiveX control '{0}' cannot be instantiated because the current thread is not in a single-threaded apartment.</summary>
        </member>
        <member name="P:System.SR.AXNoConnectionPoint">
            <summary>Connection point for event interface '{0}' cannot be created.</summary>
        </member>
        <member name="P:System.SR.AXNoConnectionPointContainer">
            <summary>Source object does not expose IConnectionPointContainer.</summary>
        </member>
        <member name="P:System.SR.AXNoEventInterface">
            <summary>Source object does not expose '{0}' event interface.</summary>
        </member>
        <member name="P:System.SR.AXNohWnd">
            <summary>Unable to get the window handle for the '{0}' control. Windowless ActiveX controls are not supported.</summary>
        </member>
        <member name="P:System.SR.AXNoLicenseToUse">
            <summary>You must have a license to use this ActiveX control.</summary>
        </member>
        <member name="P:System.SR.AXNoSinkAdvise">
            <summary>Could not Advise() the event interface '{0}'.</summary>
        </member>
        <member name="P:System.SR.AXNoSinkImplementation">
            <summary>Given 'sink' object does not implement '{0}' event interface.</summary>
        </member>
        <member name="P:System.SR.AXNoThreadInfo">
            <summary>Unable to verify required threading model of apartment or free-threaded. This control cannot be hosted.</summary>
        </member>
        <member name="P:System.SR.AXNotImplemented">
            <summary>Not implemented.</summary>
        </member>
        <member name="P:System.SR.AXNoTopLevelContainerControl">
            <summary>ActiveX control must have at least one ContainerControl in its parent hierarchy to be properly instantiated. Set the ContainingControl property on '{0}' to a non-null value and try again.</summary>
        </member>
        <member name="P:System.SR.AXOcxStateLoaded">
            <summary>ActiveX control cannot be reloaded with an OcxState of a different storage type.</summary>
        </member>
        <member name="P:System.SR.AXProperties">
            <summary>ActiveX - Properties...</summary>
        </member>
        <member name="P:System.SR.AXSingleThreaded">
            <summary>Control is single threaded. It cannot be hosted.</summary>
        </member>
        <member name="P:System.SR.AXTopLevelSource">
            <summary>Top-level Windows Forms control cannot be exposed as an ActiveX control.</summary>
        </member>
        <member name="P:System.SR.AXUnknownError">
            <summary>Unknown error.</summary>
        </member>
        <member name="P:System.SR.AXUnknownImage">
            <summary>Unknown image type.</summary>
        </member>
        <member name="P:System.SR.AXWindowlessControl">
            <summary>ActiveX control is a windowless control. The control is not supported in this version of the .NET.</summary>
        </member>
        <member name="P:System.SR.BadDataSourceForComplexBinding">
            <summary>Complex DataBinding accepts as a data source either an IList or an IListSource.</summary>
        </member>
        <member name="P:System.SR.BindingManagerBadIndex">
            <summary>ListManager for {0} cannot be found.</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorAddNewItemPropDescr">
            <summary>The ToolStripItem on the BindingNavigator that raises the 'Add new' action.</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorAddNewItemText">
            <summary>Add new</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorBindingSourcePropDescr">
            <summary>The BindingSource that the BindingNavigator navigates.</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorCountItemFormat">
            <summary>of {0}</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorCountItemFormatPropDescr">
            <summary>Formatting to apply to count displayed in the CountItem ToolStrip item.</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorCountItemPropDescr">
            <summary>The ToolStripItem on the BindingNavigator that displays the total number of items.</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorCountItemTip">
            <summary>Total number of items</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorDeleteItemPropDescr">
            <summary>The ToolStripItem on the BindingNavigator that raises the 'Delete' action.</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorDeleteItemText">
            <summary>Delete</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorMoveFirstItemPropDescr">
            <summary>The ToolStripItem on the BindingNavigator that raises the 'Move first' action.</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorMoveFirstItemText">
            <summary>Move first</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorMoveLastItemPropDescr">
            <summary>The ToolStripItem on the BindingNavigator that raises the 'Move last' action.</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorMoveLastItemText">
            <summary>Move last</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorMoveNextItemPropDescr">
            <summary>The ToolStripItem on the BindingNavigator that raises the 'Move next' action.</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorMoveNextItemText">
            <summary>Move next</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorMovePreviousItemPropDescr">
            <summary>The ToolStripItem on the BindingNavigator that raises the 'Move previous' action.</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorMovePreviousItemText">
            <summary>Move previous</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorPositionAccessibleName">
            <summary>Position</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorPositionItemPropDescr">
            <summary>The ToolStripItem on the BindingNavigator that displays the current position.</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorPositionItemTip">
            <summary>Current position</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorRefreshItemsEventDescr">
            <summary>Event raised when BindingNavigator ToolStrip items need to be refreshed to reflect current state of data.</summary>
        </member>
        <member name="P:System.SR.BindingNavigatorToolStripName">
            <summary>Binding Navigator</summary>
        </member>
        <member name="P:System.SR.BindingsCollectionAdd1">
            <summary>dataBinding already belongs to this BindingsCollection.</summary>
        </member>
        <member name="P:System.SR.BindingsCollectionAdd2">
            <summary>dataBinding belongs to another BindingsCollection.</summary>
        </member>
        <member name="P:System.SR.BindingsCollectionBadIndex">
            <summary>Binding {0       } cannot be found.</summary>
        </member>
        <member name="P:System.SR.BindingsCollectionDup">
            <summary>This causes two bindings in the collection to bind to the same property.</summary>
        </member>
        <member name="P:System.SR.BindingsCollectionForeign">
            <summary>Binding does not belong to this BindingsCollection.</summary>
        </member>
        <member name="P:System.SR.BindingSourceAddingNewEventHandlerDescr">
            <summary>Event raised when the user calls AddNew on the BindingSource</summary>
        </member>
        <member name="P:System.SR.BindingSourceAllowNewDescr">
            <summary>Determines whether the BindingSource allows new items to be added to the list.</summary>
        </member>
        <member name="P:System.SR.BindingSourceBadSortString">
            <summary>Sort string not valid.</summary>
        </member>
        <member name="P:System.SR.BindingSourceBindingCompleteEventHandlerDescr">
            <summary>Event raised after data has been exchanged between the data source and a control property bound to that data source.</summary>
        </member>
        <member name="P:System.SR.BindingSourceBindingListWrapperAddToReadOnlyList">
            <summary>Item cannot be added to a read-only or fixed-size list.</summary>
        </member>
        <member name="P:System.SR.BindingSourceBindingListWrapperNeedAParameterlessConstructor">
            <summary>AddNew cannot be called on the '{0}' type. This type does not have a public default constructor. You can call AddNew on the '{0}' type if you handle the AddingNew event and create the appropriate object.</summary>
        </member>
        <member name="P:System.SR.BindingSourceBindingListWrapperNeedToSetAllowNew">
            <summary>AddNew cannot be called on the '{0}' type. This type does not have a public default constructor. You can call AddNew on the '{0}' type if you set AllowNew=true and handle the AddingNew event.</summary>
        </member>
        <member name="P:System.SR.BindingSourceCurrentChangedEventHandlerDescr">
            <summary>Event raised when the value of Current changes.</summary>
        </member>
        <member name="P:System.SR.BindingSourceCurrentItemChangedEventHandlerDescr">
            <summary>Event raised when the value of Current changes, or a property of the current item changes.</summary>
        </member>
        <member name="P:System.SR.BindingSourceDataErrorEventHandlerDescr">
            <summary>Event raised when an exception thrown during data binding is handled internally by the CurrencyManager.</summary>
        </member>
        <member name="P:System.SR.BindingSourceDataMemberChangedEventHandlerDescr">
            <summary>Event raised when the DataMember changes.</summary>
        </member>
        <member name="P:System.SR.BindingSourceDataMemberDescr">
            <summary>Indicates a sub-list of the DataSource that the BindingSource is bound to.</summary>
        </member>
        <member name="P:System.SR.BindingSourceDataSourceChangedEventHandlerDescr">
            <summary>Event raised when the DataSource changes.</summary>
        </member>
        <member name="P:System.SR.BindingSourceDataSourceDescr">
            <summary>Indicates the source of data for the BindingSource.</summary>
        </member>
        <member name="P:System.SR.BindingSourceFilterDescr">
            <summary>Indicates a database column expression used to filter the set of rows returned by the data source.</summary>
        </member>
        <member name="P:System.SR.BindingSourceInstanceError">
            <summary>BindingSource unable to create list based on the Type specified in the DataSource property.</summary>
        </member>
        <member name="P:System.SR.BindingSourceItemChangedEventModeDescr">
            <summary>Controls how the BindingSource raises the ListChanged event as a result of changing an item in the BindingSource.</summary>
        </member>
        <member name="P:System.SR.BindingSourceItemTypeIsValueType">
            <summary>Cannot add null to BindingSource if the underlying list stores value types.</summary>
        </member>
        <member name="P:System.SR.BindingSourceItemTypeMismatchOnAdd">
            <summary>Objects added to a BindingSource's list must all be of the same type.</summary>
        </member>
        <member name="P:System.SR.BindingSourceListChangedEventHandlerDescr">
            <summary>Event raised when a change occurs in the BindingSource's list.</summary>
        </member>
        <member name="P:System.SR.BindingSourcePositionChangedEventHandlerDescr">
            <summary>Event raised when the value of Position changes.</summary>
        </member>
        <member name="P:System.SR.BindingSourceRecursionDetected">
            <summary>BindingSource cannot be its own data source. Do not set the DataSource and DataMember properties to values that refer back to BindingSource.</summary>
        </member>
        <member name="P:System.SR.BindingSourceRemoveCurrentNoCurrentItem">
            <summary>Current item cannot be removed from the list because there is no current item.</summary>
        </member>
        <member name="P:System.SR.BindingSourceRemoveCurrentNotAllowed">
            <summary>Current item cannot be removed from the list because the list does not allow removal of items.</summary>
        </member>
        <member name="P:System.SR.BindingSourceSortDescr">
            <summary>Indicates names of database columns used to sort the set of rows returned by the data source.</summary>
        </member>
        <member name="P:System.SR.BindingSourceSortStringPropertyNotInIBindingList">
            <summary>Sort string contains a property that is not in the IBindingList.</summary>
        </member>
        <member name="P:System.SR.BlinkRateMustBeZeroOrMore">
            <summary>BlinkRate must be zero or greater. Negative values are not permitted.</summary>
        </member>
        <member name="P:System.SR.borderStyleDescr">
            <summary>The border style of the control.</summary>
        </member>
        <member name="P:System.SR.ButtonAutoEllipsisDescr">
            <summary>Enables the automatic handling of text that extends beyond the width of the button.</summary>
        </member>
        <member name="P:System.SR.ButtonBorderColorDescr">
            <summary>For buttons whose FlatStyle is FlatStyle.Flat, this property specifies the color of the border around the button.</summary>
        </member>
        <member name="P:System.SR.ButtonBorderSizeDescr">
            <summary>For buttons whose FlatStyle is FlatStyle.Flat, this property specifies the size, in pixels, of the border around the button.</summary>
        </member>
        <member name="P:System.SR.ButtonCheckedBackColorDescr">
            <summary>For buttons whose FlatStyle is FlatStyle.Flat, this property specifies the color of the client area of the button when the button is checked and the mouse pointer is outside the bounds of the control.</summary>
        </member>
        <member name="P:System.SR.ButtonDialogResultDescr">
            <summary>The dialog-box result produced in a modal form by clicking the button.</summary>
        </member>
        <member name="P:System.SR.ButtonFlatAppearance">
            <summary>For buttons whose FlatStyle is FlatStyle.Flat, determines the appearance of the border and the colors used to indicate check state and mouse state.</summary>
        </member>
        <member name="P:System.SR.ButtonFlatAppearanceInvalidBorderColor">
            <summary>ButtonBase controls do not support setting the BorderColor to Transparent.</summary>
        </member>
        <member name="P:System.SR.ButtonFlatStyleDescr">
            <summary>Determines the appearance of the control when a user moves the mouse over the control and clicks.</summary>
        </member>
        <member name="P:System.SR.ButtonImageAlignDescr">
            <summary>The alignment of the image that will be displayed on the control.</summary>
        </member>
        <member name="P:System.SR.ButtonImageDescr">
            <summary>The image that will be displayed on the control.</summary>
        </member>
        <member name="P:System.SR.ButtonImageIndexDescr">
            <summary>The index of the image in the ImageList to display on the control.</summary>
        </member>
        <member name="P:System.SR.ButtonImageListDescr">
            <summary>The ImageList to get the image to display on the control.</summary>
        </member>
        <member name="P:System.SR.ButtonMouseDownBackColorDescr">
            <summary>For buttons whose FlatStyle is FlatStyle.Flat, this property specifies the color of the client area of the button when the mouse is pressed within the bounds of the control.</summary>
        </member>
        <member name="P:System.SR.ButtonMouseOverBackColorDescr">
            <summary>For buttons whose FlatStyle is FlatStyle.Flat, this property specifies the color of the client area of the button when the mouse pointer is within the bounds of the control.</summary>
        </member>
        <member name="P:System.SR.ButtonTextAlignDescr">
            <summary>The alignment of the text that will be displayed on the control.</summary>
        </member>
        <member name="P:System.SR.ButtonTextImageRelationDescr">
            <summary>Specifies the relative location of the image to the text on the button.</summary>
        </member>
        <member name="P:System.SR.ButtonUseMnemonicDescr">
            <summary>If true, the first character preceded by an ampersand (&amp;&amp;) will be used as the button's mnemonic key.</summary>
        </member>
        <member name="P:System.SR.ButtonUseVisualStyleBackColorDescr">
            <summary>Determines whether the background is drawn using visual styles, if visual styles are supported.</summary>
        </member>
        <member name="P:System.SR.CancelCaption">
            <summary>Cancel</summary>
        </member>
        <member name="P:System.SR.CannotActivateControl">
            <summary>Invisible or disabled control cannot be activated</summary>
        </member>
        <member name="P:System.SR.CannotChangePrintedDocument">
            <summary>You cannot alter the document or add to it once you have printed it.</summary>
        </member>
        <member name="P:System.SR.CannotConvertDoubleToDate">
            <summary>Double cannot be converted to a date.</summary>
        </member>
        <member name="P:System.SR.CannotConvertIntToFloat">
            <summary>Integer cannot be converted to a float.</summary>
        </member>
        <member name="P:System.SR.CantNestMessageLoops">
            <summary>Starting a second message loop on a single thread is not a valid operation. Use Form.ShowDialog instead.</summary>
        </member>
        <member name="P:System.SR.CantShowMBServiceWithHelp">
            <summary>Showing a service notification message box with a Help button is not a valid operation.</summary>
        </member>
        <member name="P:System.SR.CantShowMBServiceWithOwner">
            <summary>Showing a service notification message box with an owner window is not a valid operation. Use the Show method that does not take an owner.</summary>
        </member>
        <member name="P:System.SR.CantShowModalOnNonInteractive">
            <summary>Showing a modal dialog box or form when the application is not running in UserInteractive mode is not a valid operation. Specify the ServiceNotification or DefaultDesktopOnly style to display a notification from a service application.</summary>
        </member>
        <member name="P:System.SR.CatAccessibility">
            <summary>Accessibility</summary>
        </member>
        <member name="P:System.SR.CatAction">
            <summary>Action</summary>
        </member>
        <member name="P:System.SR.CatAppearance">
            <summary>Appearance</summary>
        </member>
        <member name="P:System.SR.CatAsynchronous">
            <summary>Asynchronous</summary>
        </member>
        <member name="P:System.SR.CatBehavior">
            <summary>Behavior</summary>
        </member>
        <member name="P:System.SR.CatColors">
            <summary>Colors</summary>
        </member>
        <member name="P:System.SR.CatData">
            <summary>Data</summary>
        </member>
        <member name="P:System.SR.CatDisplay">
            <summary>Display</summary>
        </member>
        <member name="P:System.SR.CatDragDrop">
            <summary>Drag Drop</summary>
        </member>
        <member name="P:System.SR.CatFocus">
            <summary>Focus</summary>
        </member>
        <member name="P:System.SR.CatFolderBrowsing">
            <summary>Folder Browsing</summary>
        </member>
        <member name="P:System.SR.CatItems">
            <summary>Items</summary>
        </member>
        <member name="P:System.SR.CatKey">
            <summary>Key</summary>
        </member>
        <member name="P:System.SR.CatLayout">
            <summary>Layout</summary>
        </member>
        <member name="P:System.SR.CatMouse">
            <summary>Mouse</summary>
        </member>
        <member name="P:System.SR.CatPrivate">
            <summary>Private</summary>
        </member>
        <member name="P:System.SR.CatPropertyChanged">
            <summary>Property Changed</summary>
        </member>
        <member name="P:System.SR.CatWindowStyle">
            <summary>Window Style</summary>
        </member>
        <member name="P:System.SR.CDallowFullOpenDescr">
            <summary>Enables and disables the Define Custom Colors button.</summary>
        </member>
        <member name="P:System.SR.CDanyColorDescr">
            <summary>Indicates whether the dialog box displays all available colors in the set of basic colors.</summary>
        </member>
        <member name="P:System.SR.CDcolorDescr">
            <summary>The color selected in the dialog box.</summary>
        </member>
        <member name="P:System.SR.CDcustomColorsDescr">
            <summary>The custom set of colors shown in the dialog box.</summary>
        </member>
        <member name="P:System.SR.CDfullOpenDescr">
            <summary>Controls whether the custom color section of the dialog box is initially displayed.</summary>
        </member>
        <member name="P:System.SR.CDshowHelpDescr">
            <summary>Controls whether the Help button is displayed.</summary>
        </member>
        <member name="P:System.SR.CDsolidColorOnlyDescr">
            <summary>Indicates whether the dialog box will restrict users to only selecting solid colors.</summary>
        </member>
        <member name="P:System.SR.CheckBoxAppearanceDescr">
            <summary>Controls the appearance of the check box.</summary>
        </member>
        <member name="P:System.SR.CheckBoxAutoCheckDescr">
            <summary>Causes the check box to automatically change state when clicked.</summary>
        </member>
        <member name="P:System.SR.CheckBoxCheckAlignDescr">
            <summary>Determines the location of the check box inside the control.</summary>
        </member>
        <member name="P:System.SR.CheckBoxCheckedDescr">
            <summary>Indicates whether the component is in the checked state.</summary>
        </member>
        <member name="P:System.SR.CheckBoxCheckStateDescr">
            <summary>Indicates the state of the component.</summary>
        </member>
        <member name="P:System.SR.CheckBoxOnAppearanceChangedDescr">
            <summary>Event raised when the value of the Appearance property is changed on CheckBox.</summary>
        </member>
        <member name="P:System.SR.CheckBoxOnCheckedChangedDescr">
            <summary>Occurs whenever the Check property is changed.</summary>
        </member>
        <member name="P:System.SR.CheckBoxOnCheckStateChangedDescr">
            <summary>Occurs whenever the CheckState property is changed.</summary>
        </member>
        <member name="P:System.SR.CheckBoxThreeStateDescr">
            <summary>Indicates whether the CheckBox will allow three check states rather than two.</summary>
        </member>
        <member name="P:System.SR.CheckedListBoxCheckedIndexCollectionIsReadOnly">
            <summary>CheckedListBox.CheckedIndexCollection is read only.</summary>
        </member>
        <member name="P:System.SR.CheckedListBoxCheckedItemCollectionIsReadOnly">
            <summary>CheckedListBox.CheckedItemCollection is read only.</summary>
        </member>
        <member name="P:System.SR.CheckedListBoxCheckOnClickDescr">
            <summary>Indicates if the check box should be toggled with the first click on an item.</summary>
        </member>
        <member name="P:System.SR.CheckedListBoxInvalidSelectionMode">
            <summary>Multi-selection is not supported on CheckedListBox.</summary>
        </member>
        <member name="P:System.SR.CheckedListBoxItemCheckDescr">
            <summary>Indicates that an item is about to have its checked state changed. The value is not updated until after the event occurs.</summary>
        </member>
        <member name="P:System.SR.CheckedListBoxThreeDCheckBoxesDescr">
            <summary>Indicates whether check boxes have a ButtonState of Flat or Normal.</summary>
        </member>
        <member name="P:System.SR.CircularOwner">
            <summary>A circular control reference has been made. A control cannot be owned by or parented to itself.</summary>
        </member>
        <member name="P:System.SR.Clipboard_InvalidPath">
            <summary>Path "{0}" in the argument "{1}" is not valid.</summary>
        </member>
        <member name="P:System.SR.ClipboardOperationFailed">
            <summary>Requested Clipboard operation did not succeed.</summary>
        </member>
        <member name="P:System.SR.ClipboardSecurityException">
            <summary>Due to security restrictions on clipboard, the specified clipboard format cannot be set.</summary>
        </member>
        <member name="P:System.SR.CloseCaption">
            <summary>Close</summary>
        </member>
        <member name="P:System.SR.ClosingWhileCreatingHandle">
            <summary>Value {0}() cannot be called while doing CreateHandle().</summary>
        </member>
        <member name="P:System.SR.collectionChangedEventDescr">
            <summary>Occurs whenever this collection's membership changes.</summary>
        </member>
        <member name="P:System.SR.collectionChangingEventDescr">
            <summary>Occurs whenever this collection's membership is about to change.</summary>
        </member>
        <member name="P:System.SR.CollectionEmptyException">
            <summary>Cannot operate with an empty collection.</summary>
        </member>
        <member name="P:System.SR.ColumnAlignment">
            <summary>Indicates the horizontal alignment of the text displayed in the column header.</summary>
        </member>
        <member name="P:System.SR.ColumnCaption">
            <summary>The text displayed in the column header.</summary>
        </member>
        <member name="P:System.SR.ColumnHeaderBadDisplayIndex">
            <summary>DisplayIndex value is out of bounds. Value must be greater than or equal to 0 and less than or equal to number of columns minus 1.</summary>
        </member>
        <member name="P:System.SR.ColumnHeaderCollectionInvalidArgument">
            <summary>Argument must be of type ColumnHeader.</summary>
        </member>
        <member name="P:System.SR.ColumnHeaderDisplayIndexDescr">
            <summary>The display index of the column</summary>
        </member>
        <member name="P:System.SR.ColumnHeaderNameDescr">
            <summary>The name of the column header.</summary>
        </member>
        <member name="P:System.SR.ColumnWidth">
            <summary>The visual width of the column in pixels.</summary>
        </member>
        <member name="P:System.SR.COM2BadHandlerType">
            <summary>Handler type ({0} != {1}) is not valid.</summary>
        </member>
        <member name="P:System.SR.COM2NamesAndValuesNotEqual">
            <summary>Names and values must be non-null and of same length.</summary>
        </member>
        <member name="P:System.SR.COM2ReadonlyProperty">
            <summary>Property {0} is read-only.</summary>
        </member>
        <member name="P:System.SR.COM2UnhandledVT">
            <summary>Unhandled VT: {0}.</summary>
        </member>
        <member name="P:System.SR.ComboBoxAutoCompleteCustomSourceDescr">
            <summary>The autocomplete custom source, which is a custom StringCollection used when the AutoCompleteSource is CustomSource.</summary>
        </member>
        <member name="P:System.SR.ComboBoxAutoCompleteModeDescr">
            <summary>Indicates the text completion behavior of the combo box.</summary>
        </member>
        <member name="P:System.SR.ComboBoxAutoCompleteModeOnlyNoneAllowed">
            <summary>Only the value AutoCompleteMode.None can be used when DropDownStyle is ComboBoxStyle.DropDownList and AutoCompleteSource is not AutoCompleteSource.ListItems.</summary>
        </member>
        <member name="P:System.SR.ComboBoxAutoCompleteSourceDescr">
            <summary>The source of complete strings used for automatic completion.</summary>
        </member>
        <member name="P:System.SR.ComboBoxAutoCompleteSourceOnlyListItemsAllowed">
            <summary>Only the value AutoCompleteSource.ListItems can be used when DropDownStyle is ComboBoxStyle.DropDownList and AutoCompleteMode is not AutoCompleteMode.None.</summary>
        </member>
        <member name="P:System.SR.ComboBoxDataSourceWithSort">
            <summary>DataSource cannot be set in a combo box that is sorted.</summary>
        </member>
        <member name="P:System.SR.ComboBoxDrawModeDescr">
            <summary>Indicates whether the code or the operating system will handle drawing of elements in the list.</summary>
        </member>
        <member name="P:System.SR.ComboBoxDropDownHeightDescr">
            <summary>The height, in pixels, of the drop-down box in a combo box.</summary>
        </member>
        <member name="P:System.SR.ComboBoxDropDownStyleChangedDescr">
            <summary>Occurs when the value of the DropDownStyle property changes.</summary>
        </member>
        <member name="P:System.SR.ComboBoxDropDownWidthDescr">
            <summary>The width, in pixels, of the drop-down box in a combo box.</summary>
        </member>
        <member name="P:System.SR.ComboBoxDroppedDownDescr">
            <summary>Indicates if the combo box is currently dropped down.</summary>
        </member>
        <member name="P:System.SR.ComboBoxEditDefaultAccessibleName">
            <summary>ComboBox</summary>
        </member>
        <member name="P:System.SR.ComboBoxFlatStyleDescr">
            <summary>Determines the display of the control.</summary>
        </member>
        <member name="P:System.SR.ComboBoxIntegralHeightDescr">
            <summary>Indicates whether the combo box should resize to avoid showing partial items.</summary>
        </member>
        <member name="P:System.SR.ComboBoxItemHeightDescr">
            <summary>The height, in pixels, of items in an owner-draw combo box.</summary>
        </member>
        <member name="P:System.SR.ComboBoxItemOverflow">
            <summary>Too many items in the combo box.</summary>
        </member>
        <member name="P:System.SR.ComboBoxItemsDescr">
            <summary>The items in the combo box.</summary>
        </member>
        <member name="P:System.SR.ComboBoxMaxDropDownItemsDescr">
            <summary>The maximum number of entries to display in the drop-down list.</summary>
        </member>
        <member name="P:System.SR.ComboBoxMaxLengthDescr">
            <summary>Specifies the maximum number of characters that can be entered into the combo box.</summary>
        </member>
        <member name="P:System.SR.ComboBoxOnDropDownClosedDescr">
            <summary>Indicates that the drop-down portion of the combo box has closed.</summary>
        </member>
        <member name="P:System.SR.ComboBoxOnDropDownDescr">
            <summary>Occurs when the drop-down portion of the combo box is shown.</summary>
        </member>
        <member name="P:System.SR.ComboBoxOnTextUpdateDescr">
            <summary>Occurs when the combo box text has changed.</summary>
        </member>
        <member name="P:System.SR.ComboBoxPreferredHeightDescr">
            <summary>The preferred height of this control.</summary>
        </member>
        <member name="P:System.SR.ComboBoxSelectedIndexDescr">
            <summary>The index of the currently selected item of the combo box.</summary>
        </member>
        <member name="P:System.SR.ComboBoxSelectedItemDescr">
            <summary>The currently selected item in the combo box, or null.</summary>
        </member>
        <member name="P:System.SR.ComboBoxSelectedTextDescr">
            <summary>The selected text in the edit component of the combo box.</summary>
        </member>
        <member name="P:System.SR.ComboBoxSelectionLengthDescr">
            <summary>The length of the selected text in the edit component of the combo box.</summary>
        </member>
        <member name="P:System.SR.ComboBoxSelectionStartDescr">
            <summary>The index of the first character in the selected text.</summary>
        </member>
        <member name="P:System.SR.ComboBoxSortedDescr">
            <summary>Specifies whether items in the list portion of the combo box are sorted.</summary>
        </member>
        <member name="P:System.SR.ComboBoxSortWithDataSource">
            <summary>ComboBox that has a DataSource set cannot be sorted. Sort the data using the underlying data model.</summary>
        </member>
        <member name="P:System.SR.ComboBoxStyleDescr">
            <summary>Controls the appearance and functionality of the combo box.</summary>
        </member>
        <member name="P:System.SR.CommandIdNotAllocated">
            <summary>New command ID cannot be allocated.</summary>
        </member>
        <member name="P:System.SR.CommonDialogHelpRequested">
            <summary>Occurs when the user clicks the Help button.</summary>
        </member>
        <member name="P:System.SR.ComponentEditorFormBadComponent">
            <summary>Parameter must be of type IComponent.</summary>
        </member>
        <member name="P:System.SR.ComponentEditorFormProperties">
            <summary>{0} Properties</summary>
        </member>
        <member name="P:System.SR.ComponentEditorFormPropertiesNoName">
            <summary>Properties</summary>
        </member>
        <member name="P:System.SR.ComponentManagerProxyOutOfMemory">
            <summary>Unable to register the IMsoComponent.  The maximum number of registered IMsoComponents has been reached.</summary>
        </member>
        <member name="P:System.SR.Config_base_unrecognized_attribute">
            <summary>Server cannot recognize the attribute {0}.</summary>
        </member>
        <member name="P:System.SR.ConnPointAdviseFailed">
            <summary>IConnectionPoint::Advise did not succeed with hr=0x{0:X} for event interface {1}.</summary>
        </member>
        <member name="P:System.SR.ConnPointCouldNotCreate">
            <summary>Connection point for event interface '{0}' cannot be created.</summary>
        </member>
        <member name="P:System.SR.ConnPointSinkIF">
            <summary>Sink object does not implement the event interface.</summary>
        </member>
        <member name="P:System.SR.ConnPointSourceIF">
            <summary>Source object does not expose the {0} event interface.</summary>
        </member>
        <member name="P:System.SR.ConnPointUnhandledType">
            <summary>Unhandled type {0}.</summary>
        </member>
        <member name="P:System.SR.ContainerControlActiveControlDescr">
            <summary>The currently active control.</summary>
        </member>
        <member name="P:System.SR.ContainerControlAutoScaleModeDescr">
            <summary>Determines how the form or control will scale when screen resolution or fonts change.</summary>
        </member>
        <member name="P:System.SR.ContainerControlAutoValidate">
            <summary>Indicates whether controls in the container will be automatically validated when the focus changes.</summary>
        </member>
        <member name="P:System.SR.ContainerControlBindingContextDescr">
            <summary>The binding manager for the container control.  This manages all bindings of child controls to lists.</summary>
        </member>
        <member name="P:System.SR.ContainerControlInvalidAutoScaleDimensions">
            <summary>The width and height of AutoScaleDimensions must be greater than or equal to zero.</summary>
        </member>
        <member name="P:System.SR.ContainerControlOnAutoValidateChangedDescr">
            <summary>Occurs whenever the AutoValidate property is changed.</summary>
        </member>
        <member name="P:System.SR.ContainerControlParentFormDescr">
            <summary>The parent form of this container control.</summary>
        </member>
        <member name="P:System.SR.ContextMenuStripSourceControlDescr">
            <summary>The last control that caused this context menu strip to be displayed.</summary>
        </member>
        <member name="P:System.SR.ControlAccessibileObjectInvalid">
            <summary>Control's accessible object is in an invalid state.</summary>
        </member>
        <member name="P:System.SR.ControlAccessibilityObjectDescr">
            <summary>The accessibility object for this control.</summary>
        </member>
        <member name="P:System.SR.ControlAccessibleDefaultActionDescr">
            <summary>The default action description of the control.</summary>
        </member>
        <member name="P:System.SR.ControlAccessibleDescriptionDescr">
            <summary>The description that will be reported to accessibility clients.</summary>
        </member>
        <member name="P:System.SR.ControlAccessibleNameDescr">
            <summary>The name that will be reported to accessibility clients.</summary>
        </member>
        <member name="P:System.SR.ControlAccessibleRoleDescr">
            <summary>The role that will be reported to accessibility clients.</summary>
        </member>
        <member name="P:System.SR.ControlAllowDropDescr">
            <summary>Indicates whether the control can accept data that the user drags onto it.</summary>
        </member>
        <member name="P:System.SR.ControlAllowTransparencyDescr">
            <summary>Indicates whether the opacity of the control can be adjusted.</summary>
        </member>
        <member name="P:System.SR.ControlAnchorDescr">
            <summary>Defines the edges of the container to which a certain control is bound. When a control is anchored to an edge, the distance between the control's closest edge and the specified edge will remain constant.</summary>
        </member>
        <member name="P:System.SR.ControlArrayCannotAddComponentArray">
            <summary>Instance '{0}' cannot be added.  This instance is of a ComponentArrayBase type.</summary>
        </member>
        <member name="P:System.SR.ControlArrayCannotPerformAddCopy">
            <summary>Cannot perform ControlArray.AddCopy() because the ControlArray is empty.  Add the control you want copied to the first position in the ControlArray.</summary>
        </member>
        <member name="P:System.SR.ControlArrayCloningException">
            <summary>Instance '{0}' must have a default constructor or one without parameters to be copied by the ControlArray.</summary>
        </member>
        <member name="P:System.SR.ControlArrayDuplicateException">
            <summary>Instance '{0}' cannot be added.  This instance already exists in the ControlArray '{1}'.</summary>
        </member>
        <member name="P:System.SR.ControlArrayValidationException">
            <summary>Type of '{0}' cannot be added to ControlArray.  Type of '{1}', or a type derived from that type, is expected.</summary>
        </member>
        <member name="P:System.SR.ControlAutoRelocateDescr">
            <summary>Specifies whether the control will be auto-relocated in response to the movement of peer controls.</summary>
        </member>
        <member name="P:System.SR.ControlAutoSizeDescr">
            <summary>Specifies whether a control will automatically size itself to fit its contents.</summary>
        </member>
        <member name="P:System.SR.ControlAutoSizeModeDescr">
            <summary>Specifies the mode by which the user interface element automatically resizes itself.</summary>
        </member>
        <member name="P:System.SR.ControlBackColorDescr">
            <summary>The background color of the component.</summary>
        </member>
        <member name="P:System.SR.ControlBackgroundImageDescr">
            <summary>The background image used for the control.</summary>
        </member>
        <member name="P:System.SR.ControlBackgroundImageLayoutDescr">
            <summary>The background image layout used for the component.</summary>
        </member>
        <member name="P:System.SR.ControlBadAsyncResult">
            <summary>Parameter must be of type ThreadMethodEntry.</summary>
        </member>
        <member name="P:System.SR.ControlBadControl">
            <summary>Parameter must be of type Control.</summary>
        </member>
        <member name="P:System.SR.ControlBindingContextDescr">
            <summary>The binding context for the control.</summary>
        </member>
        <member name="P:System.SR.ControlBindingsDescr">
            <summary>The data bindings for the control.</summary>
        </member>
        <member name="P:System.SR.ControlBottomDescr">
            <summary>The bottom of the control, in container coordinates.</summary>
        </member>
        <member name="P:System.SR.ControlBoundsDescr">
            <summary>The bounds of the control, in container coordinates.</summary>
        </member>
        <member name="P:System.SR.ControlCanFocusDescr">
            <summary>Checks if this control can receive the focus.</summary>
        </member>
        <member name="P:System.SR.ControlCannotBeNull">
            <summary>Control cannot be null.</summary>
        </member>
        <member name="P:System.SR.ControlCanSelectDescr">
            <summary>Checks if this control can be selected.</summary>
        </member>
        <member name="P:System.SR.ControlCaptureDescr">
            <summary>Determines if this control is currently capturing all mouse input.</summary>
        </member>
        <member name="P:System.SR.ControlCausesValidationDescr">
            <summary>Indicates whether this component raises validation events.</summary>
        </member>
        <member name="P:System.SR.ControlCheckForIllegalCrossThreadCalls">
            <summary>Indicates whether illegal cross-thread calls raise exceptions. This can be used as a debugging aid.</summary>
        </member>
        <member name="P:System.SR.ControlClientRectangleDescr">
            <summary>Retrieves the rectangle of the inner area of this control.</summary>
        </member>
        <member name="P:System.SR.ControlClientSizeDescr">
            <summary>Determines the size of the inner area of this control.</summary>
        </member>
        <member name="P:System.SR.ControlCompanyNameDescr">
            <summary>Retrieves the company name for this control.</summary>
        </member>
        <member name="P:System.SR.ControlContainsFocusDescr">
            <summary>Determines if this control or one if its children currently has the focus.</summary>
        </member>
        <member name="P:System.SR.ControlContextMenuDescr">
            <summary>The shortcut menu to display when the user right-clicks the control.</summary>
        </member>
        <member name="P:System.SR.ControlContextMenuStripChangedDescr">
            <summary>Occurs when the value of the ContextMenuStrip property changes.</summary>
        </member>
        <member name="P:System.SR.ControlControlsDescr">
            <summary>The collection of child controls within this control.</summary>
        </member>
        <member name="P:System.SR.ControlCreatedDescr">
            <summary>Determines if the control has been fully created.</summary>
        </member>
        <member name="P:System.SR.ControlCursorDescr">
            <summary>The cursor that appears when the pointer moves over the control.</summary>
        </member>
        <member name="P:System.SR.ControlDisplayRectangleDescr">
            <summary>Retrieves the display rectangle of this control.</summary>
        </member>
        <member name="P:System.SR.ControlDisposedDescr">
            <summary>Determines if this control has been disposed.</summary>
        </member>
        <member name="P:System.SR.ControlDisposingDescr">
            <summary>Determines whether this control is in the process of being disposed.</summary>
        </member>
        <member name="P:System.SR.ControlDockDescr">
            <summary>Defines which borders of the control are bound to the container.</summary>
        </member>
        <member name="P:System.SR.ControlDoubleBufferedDescr">
            <summary>Indicates whether the control will be double buffered.</summary>
        </member>
        <member name="P:System.SR.ControlEnabledDescr">
            <summary>Indicates whether the control is enabled.</summary>
        </member>
        <member name="P:System.SR.ControlFocusedDescr">
            <summary>Determines if this control has focus.</summary>
        </member>
        <member name="P:System.SR.ControlFontDescr">
            <summary>The font used to display text in the control.</summary>
        </member>
        <member name="P:System.SR.ControlForeColorDescr">
            <summary>The foreground color of this component, which is used to display text.</summary>
        </member>
        <member name="P:System.SR.ControlHandleCreatedDescr">
            <summary>Indicates whether the control has a handle associated with it.</summary>
        </member>
        <member name="P:System.SR.ControlHandleDescr">
            <summary>The native handle for this control.</summary>
        </member>
        <member name="P:System.SR.ControlHasChildrenDescr">
            <summary>Indicates whether the control contains one or more child controls.</summary>
        </member>
        <member name="P:System.SR.ControlHeightDescr">
            <summary>The height of the user interface element, in pixels.</summary>
        </member>
        <member name="P:System.SR.ControlIMEModeDescr">
            <summary>Determines the IME (Input Method Editor) status of the object when selected.</summary>
        </member>
        <member name="P:System.SR.ControlInvalidLastScalingFactor">
            <summary>Scaling factor cannot be zero or empty.</summary>
        </member>
        <member name="P:System.SR.ControlInvokeRequiredDescr">
            <summary>Determines if Invoke or BeginInvoke should be used to access this control cross-thread.</summary>
        </member>
        <member name="P:System.SR.ControlIsAccessibleDescr">
            <summary>Indicates whether the control is visible to accessibility applications.</summary>
        </member>
        <member name="P:System.SR.ControlIsKeyLockedNumCapsScrollLockKeysSupportedOnly">
            <summary>Specified key is not supported.</summary>
        </member>
        <member name="P:System.SR.ControlLeftDescr">
            <summary>The upper left of the control, in container coordinates.</summary>
        </member>
        <member name="P:System.SR.ControlLocationDescr">
            <summary>The coordinates of the upper-left corner of the control relative to the upper-left corner of its container.</summary>
        </member>
        <member name="P:System.SR.ControlMarginDescr">
            <summary>Specifies space between this control and another control's margin.</summary>
        </member>
        <member name="P:System.SR.ControlMaximumSizeDescr">
            <summary>Specifies the maximum size of the control.</summary>
        </member>
        <member name="P:System.SR.ControlMetaFileDCWrapperSizeInvalid">
            <summary>Size cannot have negative width or height.</summary>
        </member>
        <member name="P:System.SR.ControlMinimumSizeDescr">
            <summary>Specifies the minimum size of the control.</summary>
        </member>
        <member name="P:System.SR.ControlNotChild">
            <summary>'child' is not a child control of this parent.</summary>
        </member>
        <member name="P:System.SR.ControlOnAutoSizeChangedDescr">
            <summary>Occurs when the AutoSize property has changed.</summary>
        </member>
        <member name="P:System.SR.ControlOnBackColorChangedDescr">
            <summary>Event raised when the value of the BackColor property is changed on Control.</summary>
        </member>
        <member name="P:System.SR.ControlOnBackgroundImageChangedDescr">
            <summary>Event raised when the value of the BackgroundImage property is changed on Control.</summary>
        </member>
        <member name="P:System.SR.ControlOnBackgroundImageLayoutChangedDescr">
            <summary>Event raised when the value of the BackgroundImageLayout property is changed on Control.</summary>
        </member>
        <member name="P:System.SR.ControlOnBindingContextChangedDescr">
            <summary>Event raised when the value of the BindingContext property is changed on Control.</summary>
        </member>
        <member name="P:System.SR.ControlOnCausesValidationChangedDescr">
            <summary>Event raised when the value of the CausesValidation property is changed on Control.</summary>
        </member>
        <member name="P:System.SR.ControlOnChangeUICuesDescr">
            <summary>Occurs when focus rectangles and keyboard cue underlines are being shown or hidden.</summary>
        </member>
        <member name="P:System.SR.ControlOnClickDescr">
            <summary>Occurs when the component is clicked.</summary>
        </member>
        <member name="P:System.SR.ControlOnClientSizeChangedDescr">
            <summary>Event raised when the value of the ClientSize property is changed on Control.</summary>
        </member>
        <member name="P:System.SR.ControlOnContextMenuChangedDescr">
            <summary>Occurs when the value of the ContextMenu property changes.</summary>
        </member>
        <member name="P:System.SR.ControlOnControlAddedDescr">
            <summary>Occurs when a control is added to this control.</summary>
        </member>
        <member name="P:System.SR.ControlOnControlRemovedDescr">
            <summary>Occurs when a control is removed from this control.</summary>
        </member>
        <member name="P:System.SR.ControlOnCreateHandleDescr">
            <summary>Occurs when the control's native handle is created.</summary>
        </member>
        <member name="P:System.SR.ControlOnCursorChangedDescr">
            <summary>Event raised when the value of the Cursor property is changed on Control.</summary>
        </member>
        <member name="P:System.SR.ControlOnDestroyHandleDescr">
            <summary>Occurs when the control's native handle is destroyed.</summary>
        </member>
        <member name="P:System.SR.ControlOnDockChangedDescr">
            <summary>Event raised when the value of the Dock property is changed on Control.</summary>
        </member>
        <member name="P:System.SR.ControlOnDoubleClickDescr">
            <summary>Occurs when the component is double-clicked.</summary>
        </member>
        <member name="P:System.SR.ControlOnDragDropDescr">
            <summary>Occurs when a drag-and-drop operation is completed.</summary>
        </member>
        <member name="P:System.SR.ControlOnDragEnterDescr">
            <summary>Occurs when the mouse drags an item into the client area for this Control.</summary>
        </member>
        <member name="P:System.SR.ControlOnDragLeaveDescr">
            <summary>Occurs when an object is dragged out of the control's bounds.</summary>
        </member>
        <member name="P:System.SR.ControlOnDragOverDescr">
            <summary>Occurs when an object is dragged over the control's bounds.</summary>
        </member>
        <member name="P:System.SR.ControlOnEnabledChangedDescr">
            <summary>Occurs when the control's enabled state changes.</summary>
        </member>
        <member name="P:System.SR.ControlOnEnterDescr">
            <summary>Occurs when the control becomes the active control of the form.</summary>
        </member>
        <member name="P:System.SR.ControlOnFontChangedDescr">
            <summary>Event raised when the value of the Font property is changed on Control.</summary>
        </member>
        <member name="P:System.SR.ControlOnForeColorChangedDescr">
            <summary>Event raised when the value of the ForeColor property is changed on Control.</summary>
        </member>
        <member name="P:System.SR.ControlOnGiveFeedbackDescr">
            <summary>Occurs when the mouse drags an item. The system requests that the Control provide feedback to that effect.</summary>
        </member>
        <member name="P:System.SR.ControlOnGotFocusDescr">
            <summary>Occurs when the control gets focus.</summary>
        </member>
        <member name="P:System.SR.ControlOnHelpDescr">
            <summary>Occurs when the user invokes Help for the control.</summary>
        </member>
        <member name="P:System.SR.ControlOnImeModeChangedDescr">
            <summary>Occurs when the control's input method editor (IME) mode changes.</summary>
        </member>
        <member name="P:System.SR.ControlOnInvalidateDescr">
            <summary>Occurs when a control's display requires redrawing.</summary>
        </member>
        <member name="P:System.SR.ControlOnKeyDownDescr">
            <summary>Occurs when a key is first pressed.</summary>
        </member>
        <member name="P:System.SR.ControlOnKeyPressDescr">
            <summary>Occurs when the control has focus and the user presses and releases a key.</summary>
        </member>
        <member name="P:System.SR.ControlOnKeyUpDescr">
            <summary>Occurs when a key is released.</summary>
        </member>
        <member name="P:System.SR.ControlOnLayoutDescr">
            <summary>Occurs when the control is about to lay out its contents.</summary>
        </member>
        <member name="P:System.SR.ControlOnLeaveDescr">
            <summary>Occurs when the control is no longer the active control of the form.</summary>
        </member>
        <member name="P:System.SR.ControlOnLocationChangedDescr">
            <summary>Event raised when the value of the Location property is changed on Control.</summary>
        </member>
        <member name="P:System.SR.ControlOnLostFocusDescr">
            <summary>Occurs when the control loses focus.</summary>
        </member>
        <member name="P:System.SR.ControlOnMarginChangedDescr">
            <summary>Occurs when the Margin property has changed.</summary>
        </member>
        <member name="P:System.SR.ControlOnMouseCaptureChangedDescr">
            <summary>Occurs after the mouse capture is changed.</summary>
        </member>
        <member name="P:System.SR.ControlOnMouseClickDescr">
            <summary>Occurs when the control is clicked by the mouse.</summary>
        </member>
        <member name="P:System.SR.ControlOnMouseDoubleClickDescr">
            <summary>Occurs when the control is double clicked by the mouse.</summary>
        </member>
        <member name="P:System.SR.ControlOnMouseDownDescr">
            <summary>Occurs when the mouse pointer is over the component and a mouse button is pressed.</summary>
        </member>
        <member name="P:System.SR.ControlOnMouseEnterDescr">
            <summary>Occurs when the mouse enters the visible part of the control.</summary>
        </member>
        <member name="P:System.SR.ControlOnMouseHoverDescr">
            <summary>Occurs when the mouse remains stationary inside of the control for an amount of time.</summary>
        </member>
        <member name="P:System.SR.ControlOnMouseLeaveDescr">
            <summary>Occurs when the mouse leaves the visible part of the control.</summary>
        </member>
        <member name="P:System.SR.ControlOnMouseMoveDescr">
            <summary>Occurs when the mouse pointer is moved over the component.</summary>
        </member>
        <member name="P:System.SR.ControlOnMouseUpDescr">
            <summary>Occurs when the mouse pointer is over the component and a mouse button is released.</summary>
        </member>
        <member name="P:System.SR.ControlOnMouseWheelDescr">
            <summary>Occurs when the mouse wheel moves while the control has focus.</summary>
        </member>
        <member name="P:System.SR.ControlOnMoveDescr">
            <summary>Occurs when a control is moved.</summary>
        </member>
        <member name="P:System.SR.ControlOnPaddingChangedDescr">
            <summary>Occurs when the Padding property has changed.</summary>
        </member>
        <member name="P:System.SR.ControlOnPaintDescr">
            <summary>Occurs when a control needs repainting.</summary>
        </member>
        <member name="P:System.SR.ControlOnParentChangedDescr">
            <summary>Event raised when the value of the Parent property is changed on Control.</summary>
        </member>
        <member name="P:System.SR.ControlOnQueryAccessibilityHelpDescr">
            <summary>Occurs when an Accessibility client invokes Help for the control.</summary>
        </member>
        <member name="P:System.SR.ControlOnQueryContinueDragDescr">
            <summary>Occurs when the mouse drags an item. The system requests whether the drag-and-drop operation should be allowed to continue.</summary>
        </member>
        <member name="P:System.SR.ControlOnResizeBeginDescr">
            <summary>Occurs when the control enters the sizing modal loop.</summary>
        </member>
        <member name="P:System.SR.ControlOnResizeDescr">
            <summary>Occurs when a control is resized.</summary>
        </member>
        <member name="P:System.SR.ControlOnResizeEndDescr">
            <summary>Occurs when the control exits the sizing modal loop.</summary>
        </member>
        <member name="P:System.SR.ControlOnRightToLeftChangedDescr">
            <summary>Occurs when the value of the RightToLeft property changes.</summary>
        </member>
        <member name="P:System.SR.ControlOnRightToLeftLayoutChangedDescr">
            <summary>Occurs when the value of the RightToLeftLayout property changes.</summary>
        </member>
        <member name="P:System.SR.ControlOnSizeChangedDescr">
            <summary>Event raised when the value of the Size property is changed on Control.</summary>
        </member>
        <member name="P:System.SR.ControlOnStyleChangedDescr">
            <summary>Event raised when the window style of a Control is changed.</summary>
        </member>
        <member name="P:System.SR.ControlOnSystemColorsChangedDescr">
            <summary>Event raised when the system colors change.</summary>
        </member>
        <member name="P:System.SR.ControlOnTabIndexChangedDescr">
            <summary>Event raised when the value of the TabIndex property is changed.</summary>
        </member>
        <member name="P:System.SR.ControlOnTabStopChangedDescr">
            <summary>Event raised when the value of the TabStop property is changed on Control.</summary>
        </member>
        <member name="P:System.SR.ControlOnTextChangedDescr">
            <summary>Event raised when the value of the Text property is changed on Control.</summary>
        </member>
        <member name="P:System.SR.ControlOnValidatedDescr">
            <summary>Occurs after a control has been successfully validated.</summary>
        </member>
        <member name="P:System.SR.ControlOnValidatingDescr">
            <summary>Occurs when the control is validating.</summary>
        </member>
        <member name="P:System.SR.ControlOnVisibleChangedDescr">
            <summary>Occurs when the control's visibility changes.</summary>
        </member>
        <member name="P:System.SR.ControlPaddingDescr">
            <summary>Specifies the interior spacing of a control.</summary>
        </member>
        <member name="P:System.SR.ControlParentDescr">
            <summary>The parent of this control.</summary>
        </member>
        <member name="P:System.SR.ControlProductNameDescr">
            <summary>Retrieves the name of the product associated with this component.</summary>
        </member>
        <member name="P:System.SR.ControlProductVersionDescr">
            <summary>Retrieves the version of the product associated with this component.</summary>
        </member>
        <member name="P:System.SR.ControlRecreatingHandleDescr">
            <summary>Determines if this control is in the process of recreating its handle.</summary>
        </member>
        <member name="P:System.SR.ControlRegionChangedDescr">
            <summary>Event raised when the value of Region property is changed on Control.</summary>
        </member>
        <member name="P:System.SR.ControlRegionDescr">
            <summary>The region, or shape, of this control.</summary>
        </member>
        <member name="P:System.SR.ControlResizeRedrawDescr">
            <summary>Indicates whether the control should redraw itself when resized.</summary>
        </member>
        <member name="P:System.SR.ControlRightDescr">
            <summary>The distance, in pixels, between the right edge of the control and the left edge of its container's client area.</summary>
        </member>
        <member name="P:System.SR.ControlRightToLeftDescr">
            <summary>Indicates whether the component should draw right-to-left for RTL languages.</summary>
        </member>
        <member name="P:System.SR.ControlRightToLeftLayoutDescr">
            <summary>Indicates whether the control layout is right-to-left when the RightToLeft property is set to Yes.</summary>
        </member>
        <member name="P:System.SR.ControlSizeDescr">
            <summary>The size of the control in pixels.</summary>
        </member>
        <member name="P:System.SR.ControlTabIndexDescr">
            <summary>Determines the index in the TAB order that this control will occupy.</summary>
        </member>
        <member name="P:System.SR.ControlTabStopDescr">
            <summary>Indicates whether the user can use the TAB key to give focus to the control.</summary>
        </member>
        <member name="P:System.SR.ControlTagDescr">
            <summary>User-defined data associated with the object.</summary>
        </member>
        <member name="P:System.SR.ControlTextDescr">
            <summary>The text associated with the control.</summary>
        </member>
        <member name="P:System.SR.ControlTopDescr">
            <summary>The top of the control, in container coordinates.</summary>
        </member>
        <member name="P:System.SR.ControlTopLevelControlDescr">
            <summary>Retrieves the top-level control that contains this control.</summary>
        </member>
        <member name="P:System.SR.ControlUnsupportedProperty">
            <summary>Getting value of property '{0}' is not supported by this method.</summary>
        </member>
        <member name="P:System.SR.ControlUserPreferenceChangedDescr">
            <summary>Event raised when SystemInformation UserPreference changed event is raised</summary>
        </member>
        <member name="P:System.SR.ControlUserPreferenceChangingDescr">
            <summary>Event raised when SystemInformation UserPreferenceChanging event is raised</summary>
        </member>
        <member name="P:System.SR.ControlUseWaitCursorDescr">
            <summary>When this property is true, the Cursor property of the control and its child controls is set to WaitCursor.</summary>
        </member>
        <member name="P:System.SR.ControlVisibleDescr">
            <summary>Determines whether the control is visible or hidden.</summary>
        </member>
        <member name="P:System.SR.ControlWidthDescr">
            <summary>The width of the control, in container coordinates.</summary>
        </member>
        <member name="P:System.SR.ControlWindowTargetDescr">
            <summary>The location where native messages will be routed.</summary>
        </member>
        <member name="P:System.SR.ControlWithScrollbarsPositionDescr">
            <summary>The coordinates of the upper-left corner of the control relative to the upper-left corner of its container.</summary>
        </member>
        <member name="P:System.SR.ControlWithScrollbarsVirtualSizeDescr">
            <summary>The size of the control if the screen were infinitely large.</summary>
        </member>
        <member name="P:System.SR.CurrencyManagerCantAddNew">
            <summary>The list must be an IBindingList to AddNew.</summary>
        </member>
        <member name="P:System.SR.CursorCannotCovertToBytes">
            <summary>System cursors cannot be converted to byte[].</summary>
        </member>
        <member name="P:System.SR.CursorCannotCovertToString">
            <summary>Custom cursors cannot be converted to string.</summary>
        </member>
        <member name="P:System.SR.CursorNonSerializableHandle">
            <summary>Stock cursors cannot be serialized.</summary>
        </member>
        <member name="P:System.SR.DataBindingAddNewNotSupportedOnPropertyManager">
            <summary>AddNew is not supported for property to property binding.</summary>
        </member>
        <member name="P:System.SR.DataBindingCycle">
            <summary>Detected a property binding cycle for the property '{0}'</summary>
        </member>
        <member name="P:System.SR.DataBindingPushDataException">
            <summary>DataBinding cannot find a row in the list that is suitable for all bindings.</summary>
        </member>
        <member name="P:System.SR.DataBindingRemoveAtNotSupportedOnPropertyManager">
            <summary>RemoveAt is not supported for property-to-property binding.</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccButtonCellDefaultAction">
            <summary>Press</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccCellDefaultAction">
            <summary>Edit</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccCheckBoxCellDefaultActionCheck">
            <summary>Press to check</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccCheckBoxCellDefaultActionUncheck">
            <summary>Press to uncheck</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccColumnHeaderCellDefaultAction">
            <summary>Press to sort column</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccColumnHeaderCellSelectDefaultAction">
            <summary>Press to select column</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccDataGridViewCellName">
            <summary>{0} Row {1}</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccEditingControlAccName">
            <summary>Editing Control</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccEditingPanelAccName">
            <summary>Editing Panel</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccHorizontalScrollBarAccName">
            <summary>Horizontal</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccLinkCellDefaultAction">
            <summary>Click</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccNullValue">
            <summary>(null)</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccRowCreateNew">
            <summary>(Create New)</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccRowName">
            <summary>Row {0}</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccSelectedCellsName">
            <summary>Selected Cells</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccSelectedRowCellsName">
            <summary>Selected Row Cells</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccTopLeftColumnHeaderCellDefaultAction">
            <summary>Press to Select All</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccTopLeftColumnHeaderCellName">
            <summary>Top Left Header Cell</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccTopLeftColumnHeaderCellNameRTL">
            <summary>Top Right Header Cell</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccTopRow">
            <summary>Top Row</summary>
        </member>
        <member name="P:System.SR.DataGridView_AccVerticalScrollBarAccName">
            <summary>Vertical</summary>
        </member>
        <member name="P:System.SR.DataGridView_AColumnHasNoCellTemplate">
            <summary>At least one of the DataGridView control's columns has no cell template.</summary>
        </member>
        <member name="P:System.SR.DataGridView_AdvancedCellBorderStyleInvalid">
            <summary>Property {0} cannot be set to the advanced cell border style provided.</summary>
        </member>
        <member name="P:System.SR.DataGridView_AllowUserToAddRowsDescr">
            <summary>Indicates whether the option to add rows is displayed to the user.</summary>
        </member>
        <member name="P:System.SR.DataGridView_AllowUserToDeleteRowsDescr">
            <summary>Indicates whether the user is allowed to delete rows from the DataGridView.</summary>
        </member>
        <member name="P:System.SR.DataGridView_AllowUserToOrderColumnsDescr">
            <summary>Indicates whether manual column repositioning is enabled.</summary>
        </member>
        <member name="P:System.SR.DataGridView_AllowUserToResizeColumnsDescr">
            <summary>Indicates whether users can resize columns.</summary>
        </member>
        <member name="P:System.SR.DataGridView_AllowUserToResizeRowsDescr">
            <summary>Indicates whether users can resize rows.</summary>
        </member>
        <member name="P:System.SR.DataGridView_AlternatingRowsDefaultCellStyleDescr">
            <summary>The default cell style applied to odd-numbered rows.</summary>
        </member>
        <member name="P:System.SR.DataGridView_AtLeastOneColumnIsNull">
            <summary>At least one of the provided columns is null.</summary>
        </member>
        <member name="P:System.SR.DataGridView_AtLeastOneRowIsNull">
            <summary>At least one of the provided rows is null.</summary>
        </member>
        <member name="P:System.SR.DataGridView_AutoSizeColumnsModeDescr">
            <summary>Determines the auto size mode for the visible columns.</summary>
        </member>
        <member name="P:System.SR.DataGridView_AutoSizeRowsModeDescr">
            <summary>Determines the auto size mode for the visible rows.</summary>
        </member>
        <member name="P:System.SR.DataGridView_BeginEditNotReentrant">
            <summary>Operation is not valid because it results in a reentrant call to the BeginEdit function.</summary>
        </member>
        <member name="P:System.SR.DataGridView_BorderStyleDescr">
            <summary>The border style for the DataGridView.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ButtonColumnFlatStyleDescr">
            <summary>The flat style appearance of the button cells in the column.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ButtonColumnTextDescr">
            <summary>The default text displayed on the button cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ButtonColumnUseColumnTextForButtonValueDescr">
            <summary>Indicates whether the DataGridViewButtonColumn.Text property value is displayed as the button text for cells in this column.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CancelRowEditDescr">
            <summary>Occurs when the DataGridView.VirtualMode property of a DataGridView control is true and a row edit should be canceled.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotAddAutoFillColumn">
            <summary>Visible column cannot be added because its AutoSize mode is Fill, and the column is frozen.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotAddAutoSizedColumn">
            <summary>Visible column cannot be added because its AutoSize mode includes its header, and the column headers are invisible.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotAddFrozenColumn">
            <summary>Column cannot be added because it is frozen and placed after an unfrozen column.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotAddFrozenRow">
            <summary>Row cannot be added because it is frozen and placed after an unfrozen row.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotAddIdenticalColumns">
            <summary>At least two provided columns are identical. Each provided column must be unique.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotAddIdenticalRows">
            <summary>At least two provided rows are identical. Each provided row must be unique.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotAddNonFrozenColumn">
            <summary>Column cannot be added because it is unfrozen and placed before a frozen column.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotAddNonFrozenRow">
            <summary>Row cannot be added because it is unfrozen and placed before a frozen row.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotAddUntypedColumn">
            <summary>Column cannot be added because its CellType property is null.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotAlterAutoFillColumnParameter">
            <summary>This operation cannot be performed while an auto-filled column is being resized.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotAlterDisplayIndexWithinAdjustments">
            <summary>This operation cannot be performed while the DisplayIndex of a column is being adjusted.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotAutoFillFrozenColumns">
            <summary>Columns AutoSize mode cannot be set to Fill because at least one visible column would inherit this AutoSize mode and is frozen.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotAutoSizeColumnsInvisibleColumnHeaders">
            <summary>Columns AutoSize mode cannot be based exclusively on the headers because the column headers are invisible and at least one visible column would inherit this AutoSize mode.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotAutoSizeInvisibleColumnHeader">
            <summary>Column AutoSize mode cannot be based exclusively on the header because the column headers are invisible.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotAutoSizeRowInvisibleRowHeader">
            <summary>Row AutoSize mode cannot be based on the row headers alone while they are invisible.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotAutoSizeRowsInvisibleRowHeader">
            <summary>Rows AutoSize mode cannot be based on the row headers alone while they are invisible.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotMakeAutoSizedColumnVisible">
            <summary>Column cannot be made visible because its AutoSize mode includes its header and the column headers are invisible.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotMoveFrozenColumn">
            <summary>Frozen column cannot be moved after an unfrozen column.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotMoveNonFrozenColumn">
            <summary>Unfrozen column cannot be moved before a frozen column.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotSetColumnCountOnDataBoundDataGridView">
            <summary>ColumnCount property cannot be set on a data-bound DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotSetRowCountOnDataBoundDataGridView">
            <summary>RowCount property cannot be set on a data-bound DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotSortDataBoundDataGridViewBoundToNonIBindingList">
            <summary>DataGridView control must be bound to an IBindingList object to be sorted.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotThrowNullException">
            <summary>Exception property is not set to a valid exception. ThrowException cannot be set to true.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CannotUseAComparerToSortDataGridViewWhenDataBound">
            <summary>DataGridView control is data-bound. The control cannot use the comparer to perform the sort operation.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellBeginEditDescr">
            <summary>Occurs when edit mode starts for the selected cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellBorderStyleChangedDescr">
            <summary>Occurs when the border style of a cell changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellBorderStyleDescr">
            <summary>The cell border style for the DataGridView.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellChangeCannotBeCommittedOrAborted">
            <summary>Operation did not succeed because the program cannot commit or quit a cell value change.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellClickDescr">
            <summary>Occurs when any part of the cell is clicked.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellContentClick">
            <summary>Occurs when the content within a cell is clicked.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellContentDoubleClick">
            <summary>Occurs when a user double-clicks a cell's contents.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellContextMenuStripChanged">
            <summary>Occurs when the DataGridViewCell.ContextMenuStrip property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellContextMenuStripNeeded">
            <summary>Occurs when a cell's context menu strip is needed.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellDoesNotBelongToDataGridView">
            <summary>Provided cell does not belong to this DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellDoesNotYetBelongToDataGridView">
            <summary>Operation can only be performed on cells that belong to a DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellDoubleClickDescr">
            <summary>Occurs when the user double-clicks anywhere in a cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellEndEditDescr">
            <summary>Occurs when edit mode stops for the currently selected cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellEnterDescr">
            <summary>Occurs when the cell receives input focus, becoming the current cell in the DataGridView.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellErrorTextChangedDescr">
            <summary>Occurs when the value of the DataGridViewCell.ErrorText property of a cell changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellErrorTextNeededDescr">
            <summary>Occurs when a cell's error text is needed.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellFormattingDescr">
            <summary>Occurs when the contents of a cell need to be formatted for display.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellLeaveDescr">
            <summary>Occurs when a cell loses input focus and is no longer the current cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellMouseClickDescr">
            <summary>Occurs whenever a mouse clicks anywhere on a cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellMouseDoubleClickDescr">
            <summary>Occurs when a cell within the DataGridView is double-clicked.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellMouseDownDescr">
            <summary>Occurs when the user presses a mouse button while the mouse pointer is within the boundaries of a cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellMouseEnterDescr">
            <summary>Occurs when the mouse pointer enters a cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellMouseLeaveDescr">
            <summary>Occurs when the mouse pointer leaves a cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellMouseMoveDescr">
            <summary>Occurs when the mouse pointer moves over the DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellMouseUpDescr">
            <summary>Occurs when the user releases a mouse button while over a cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellNeedsDataGridViewForInheritedStyle">
            <summary>Cell is not in a DataGridView. The cell cannot retrieve the inherited cell style.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellPaintingDescr">
            <summary>Occurs when a cell needs to be drawn.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellParsingDescr">
            <summary>Occurs when the user leaves edit mode, regardless of whether the value of the current cell has been modified.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellStateChangedDescr">
            <summary>Occurs when a cell state changes, such as when the cell loses or gains focus.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellStyleChangedDescr">
            <summary>Occurs when the DataGridViewCell.Style property of a DataGridViewCell changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellStyleContentChangedDescr">
            <summary>Occurs when one of the values of a cell style changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellToolTipTextChangedDescr">
            <summary>Occurs when the DataGridViewCell.ToolTipText property value changes for a cell in the DataGridView.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellToolTipTextDescr">
            <summary>The text displayed by the ToolTip associated with this cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellToolTipTextNeededDescr">
            <summary>Occurs when a cell's ToolTip text is needed.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellValidatedDescr">
            <summary>Occurs after the cell has finished validating.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellValidatingDescr">
            <summary>Occurs when the cell is validating.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellValueChangedDescr">
            <summary>Occurs when the value of a cell changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellValueNeededDescr">
            <summary>Occurs when the DataGridView.VirtualMode property of the DataGridView control is true and the DataGridView requires a value for a cell in order to format and display the cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CellValuePushedDescr">
            <summary>Occurs when the DataGridView.VirtualMode property of the DataGridView control is true, and a cell value has changed and requires storage in the underlying data source.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CheckBoxColumnFalseValueDescr">
            <summary>The underlying value corresponding to a cell value of false, which appears as an unchecked box.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CheckBoxColumnFlatStyleDescr">
            <summary>The flat style appearance of the check box cells.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CheckBoxColumnIndeterminateValueDescr">
            <summary>The underlying value corresponding to an indeterminate or null cell value, which appears as a disabled checkbox.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CheckBoxColumnThreeStateDescr">
            <summary>Indicates whether the hosted check box cells will allow three check states rather than two.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CheckBoxColumnTrueValueDescr">
            <summary>The underlying value corresponding to a cell value of true, which appears as a checked box.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ClipboardCopyModeDescr">
            <summary>Indicates whether users can copy cell text values to the Clipboard and whether row and column header text is included.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnAddedDescr">
            <summary>Occurs when a column is added to the control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnAlreadyBelongsToDataGridView">
            <summary>Provided column already belongs to the DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnBoundToAReadOnlyFieldMustRemainReadOnly">
            <summary>DataGridView column bound to a read-only field must have ReadOnly set to True.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnContextMenuStripChangedDescr">
            <summary>Occurs when the DataGridViewColumn.ContextMenuStrip property of a column changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnContextMenuStripDescr">
            <summary>The shortcut menu for the column.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnDataPropertyNameChangedDescr">
            <summary>Occurs when the value of the DataGridViewColumn.DataPropertyName property for a column changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnDataPropertyNameDescr">
            <summary>The name of the data source property or database column to which the DataGridViewColumn is bound.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnDefaultCellStyleChangedDescr">
            <summary>Occurs when the value of the DataGridViewBand.DefaultCellStyle property for a column changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnDefaultCellStyleDescr">
            <summary>The column's default cell style.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnDisplayIndexChangedDescr">
            <summary>Occurs when the value the DataGridViewColumn.DisplayIndex property for a column changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnDividerDoubleClickDescr">
            <summary>Occurs when the user double-clicks a divider between two columns.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnDividerWidthChangedDescr">
            <summary>Occurs when DataGridViewColumn.DividerWidth changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnDividerWidthDescr">
            <summary>The width of the column divider in pixels.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnDoesNotBelongToDataGridView">
            <summary>Column provided does not belong to this DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnFrozenDescr">
            <summary>Indicates whether a column will move when a user scrolls the DataGridView control horizontally.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnHeaderCellChangedDescr">
            <summary>Occurs when the contents of a column header cell change.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnHeaderMouseClickDescr">
            <summary>Occurs when the user clicks a column header.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnHeaderMouseDoubleClickDescr">
            <summary>Occurs when a column header is double-clicked.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnHeadersBorderStyleChangedDescr">
            <summary>Occurs when the DataGridView.ColumnHeadersBorderStyle property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnHeadersBorderStyleDescr">
            <summary>The border style applied to the column headers.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnHeadersCannotBeInvisible">
            <summary>Column headers cannot be made invisible because at least one column uses its header in its AutoSize mode.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnHeadersDefaultCellStyleDescr">
            <summary>The default column header style.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnHeadersHeightDescr">
            <summary>The height, in pixels, of the column headers row.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnHeadersHeightSizeModeChangedDescr">
            <summary>Occurs when the value of the ColumnHeadersHeightSizeMode property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnHeadersHeightSizeModeDescr">
            <summary>Determines the behavior for adjusting the column headers height.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnHeaderTextDescr">
            <summary>The caption text on the column's header cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnMinimumWidthChangedDescr">
            <summary>Occurs when the value of the DataGridViewColumn.MinimumWidth property for a column changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnMinimumWidthDescr">
            <summary>The minimum width of the column in pixels.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnNameChangedDescr">
            <summary>Occurs when the value of the DataGridViewColumn.Name property for a column changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnNameDescr">
            <summary>The name of the column.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnNeedsToBeDataBoundWhenSortingDataBoundDataGridView">
            <summary>Data-bound DataGridView control can only be sorted on data-bound columns.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnReadOnlyDescr">
            <summary>Indicates whether the user can edit the column's cells.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnRemovedDescr">
            <summary>Occurs when a column is removed from the control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnResizableDescr">
            <summary>Indicates whether the column is resizable.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnSortModeDescr">
            <summary>The sort mode for the column.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnStateChangedDescr">
            <summary>Occurs when a column changes state, such as gaining or losing focus.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnToolTipTextChangedDescr">
            <summary>Occurs when the DataGridViewColumn.ToolTipText property value changes for a column in the DataGridView.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnToolTipTextDescr">
            <summary>The text used for ToolTips.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnVisibleDescr">
            <summary>Indicates whether the column is visible.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnWidthChangedDescr">
            <summary>Occurs when the value of the DataGridViewColumn.Width property for a column changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ColumnWidthDescr">
            <summary>The current width of the column.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ComboBoxColumnAutoCompleteDescr">
            <summary>Indicates whether cells in the column will match the characters being entered in the cell with one from the possible selections.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ComboBoxColumnDataSourceDescr">
            <summary>The data source that populates the selections for the combo boxes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ComboBoxColumnDisplayMemberDescr">
            <summary>A string that specifies the property or column from which to retrieve strings for display in the combo boxes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ComboBoxColumnDisplayStyleDescr">
            <summary>Determines how the combo box is displayed when not editing.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ComboBoxColumnDisplayStyleForCurrentCellOnlyDescr">
            <summary>Indicates if the display style only applies to the current cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ComboBoxColumnDropDownWidthDescr">
            <summary>The width of the drop-down lists of the combo boxes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ComboBoxColumnFlatStyleDescr">
            <summary>The flat style appearance of the column's cells.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ComboBoxColumnItemsDescr">
            <summary>The collection of objects used as selections in the combo boxes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ComboBoxColumnMaxDropDownItemsDescr">
            <summary>The maximum number of items in the drop-down list of the cells in the column.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ComboBoxColumnSortedDescr">
            <summary>Indicates whether the items in the combo box are sorted.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ComboBoxColumnValueMemberDescr">
            <summary>A string that specifies the property or column from which to get values that correspond to the selections in the drop-down list.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CommitFailedCannotCompleteOperation">
            <summary>Operation cannot be completed because the current cell could not be committed.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CurrencyManagerRowCannotBeInvisible">
            <summary>Row associated with the currency manager's position cannot be made invisible.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CurrentCellCannotBeInvisible">
            <summary>Current cell cannot be set to an invisible cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CurrentCellChangedDescr">
            <summary>Occurs when DataGridView.CurrentCell changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CurrentCellDirtyStateChangedDescr">
            <summary>Occurs when the state of a cell changes in relation to a change in its contents.</summary>
        </member>
        <member name="P:System.SR.DataGridView_CustomCellBorderStyleInvalid">
            <summary>Value DataGridViewCellBorderStyle. Custom cannot be used to set the {0} property.</summary>
        </member>
        <member name="P:System.SR.DataGridView_DataBindingCompleteDescr">
            <summary>Event raised whenever the data source list changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_DataErrorDescr">
            <summary>Occurs when an external data-parsing or validation operation throws an exception, or when an attempt to commit data to a data source does not succeed.</summary>
        </member>
        <member name="P:System.SR.DataGridView_DefaultCellStyleDescr">
            <summary>The DataGridViewBand.DefaultCellStyle to be applied to the DataGridView if no other style is set.</summary>
        </member>
        <member name="P:System.SR.DataGridView_DefaultValuesNeededDescr">
            <summary>Occurs when the user enters the row for new records so that it can be populated with default values.</summary>
        </member>
        <member name="P:System.SR.DataGridView_DisabledClipboardCopy">
            <summary>Generating Clipboard content is not supported when the ClipboardCopyMode property is Disable.</summary>
        </member>
        <member name="P:System.SR.DataGridView_EditingControlShowingDescr">
            <summary>Occurs when a control for editing a cell is showing.</summary>
        </member>
        <member name="P:System.SR.DataGridView_EditModeChangedDescr">
            <summary>Occurs when the value of the DataGridView.EditMode property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_EditModeDescr">
            <summary>Identifies the mode that determines how cell editing is started.</summary>
        </member>
        <member name="P:System.SR.DataGridView_EmptyColor">
            <summary>Value '{0}' cannot be set to an empty value.</summary>
        </member>
        <member name="P:System.SR.DataGridView_EnableHeadersVisualStylesDescr">
            <summary>Indicates whether row and column headers use the visual styles of the user's current theme if visual styles are enabled for the application.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ErrorMessageCaption">
            <summary>DataGridView Default Error Dialog</summary>
        </member>
        <member name="P:System.SR.DataGridView_ErrorMessageText_NoException">
            <summary>Exception occurred in the DataGridView.
            
            To replace this default dialog box, handle the DataError event.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ErrorMessageText_WithException">
            <summary>The following exception occurred in the DataGridView:
            
            {0}
            
            To replace this default dialog please handle the DataError event.</summary>
        </member>
        <member name="P:System.SR.DataGridView_FirstDisplayedCellCannotBeAHeaderOrSharedCell">
            <summary>First displayed cell cannot be set to a header or shared cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_FirstDisplayedCellCannotBeInvisible">
            <summary>First displayed cell cannot be set to an invisible cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_FirstDisplayedScrollingColumnCannotBeFrozen">
            <summary>FirstDisplayedScrollingColumnIndex property cannot be set to a frozen column.</summary>
        </member>
        <member name="P:System.SR.DataGridView_FirstDisplayedScrollingColumnCannotBeInvisible">
            <summary>FirstDisplayedScrollingColumnIndex property cannot be set to an invisible column.</summary>
        </member>
        <member name="P:System.SR.DataGridView_FirstDisplayedScrollingRowCannotBeFrozen">
            <summary>FirstDisplayedScrollingRowIndex property cannot be set to a frozen row.</summary>
        </member>
        <member name="P:System.SR.DataGridView_FirstDisplayedScrollingRowCannotBeInvisible">
            <summary>FirstDisplayedScrollingRowIndex property cannot be set to an invisible row.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ForbiddenOperationInEventHandler">
            <summary>Operation cannot be performed in this event handler.</summary>
        </member>
        <member name="P:System.SR.DataGridView_FrozenColumnsPreventFirstDisplayedScrollingColumn">
            <summary>The frozen columns do not leave any room for a scrolling column to be displayed.</summary>
        </member>
        <member name="P:System.SR.DataGridView_FrozenRowsPreventFirstDisplayedScrollingRow">
            <summary>The frozen rows do not leave any room for a scrolling row to be displayed.</summary>
        </member>
        <member name="P:System.SR.DataGridView_HeaderCellReadOnlyProperty">
            <summary>Property {0} of a DataGridViewHeaderCell cell cannot be set.</summary>
        </member>
        <member name="P:System.SR.DataGridView_IBindingListNeedsToSupportSorting">
            <summary>DataGridView control cannot be sorted if it is bound to an IBindingList that does not support sorting.</summary>
        </member>
        <member name="P:System.SR.DataGridView_InvalidDataGridViewElementStateCombination">
            <summary>Parameter {0} is not a valid combination of DataGridViewElementState flags.</summary>
        </member>
        <member name="P:System.SR.DataGridView_InvalidDataGridViewPaintPartsCombination">
            <summary>Parameter {0} is not a valid combination of DataGridViewPaintParts flags.</summary>
        </member>
        <member name="P:System.SR.DataGridView_InvalidEditingControl">
            <summary>EditType property of the current cell does not point to a class that derives from System.Windows.Forms.Control and implements the interface IDataGridViewEditingControl.</summary>
        </member>
        <member name="P:System.SR.DataGridView_InvalidOperationInVirtualMode">
            <summary>Operation is not valid when the DataGridView control is in virtual mode.</summary>
        </member>
        <member name="P:System.SR.DataGridView_InvalidOperationOnSharedCell">
            <summary>Operation cannot be performed on a cell of a shared row.</summary>
        </member>
        <member name="P:System.SR.DataGridView_InvalidOperationOnSharedRow">
            <summary>Operation cannot be performed on a shared row.</summary>
        </member>
        <member name="P:System.SR.DataGridView_InvalidPropertyGetOnSharedCell">
            <summary>Getting the {0} property of a cell in a shared row is not a valid operation.</summary>
        </member>
        <member name="P:System.SR.DataGridView_InvalidPropertyGetOnSharedRow">
            <summary>Getting the {0} property of a shared row is not a valid operation.</summary>
        </member>
        <member name="P:System.SR.DataGridView_InvalidPropertySetOnSharedRow">
            <summary>Setting the {0} property of a shared row is not a valid operation.</summary>
        </member>
        <member name="P:System.SR.DataGridView_LinkColumnActiveLinkColorDescr">
            <summary>The color used to display an active link within cells in the column.</summary>
        </member>
        <member name="P:System.SR.DataGridView_LinkColumnLinkBehaviorDescr">
            <summary>A value that represents the behavior of links within cells in the column.</summary>
        </member>
        <member name="P:System.SR.DataGridView_LinkColumnLinkColorDescr">
            <summary>The color used to display an unselected link within cells in the column.</summary>
        </member>
        <member name="P:System.SR.DataGridView_LinkColumnTextDescr">
            <summary>The link text displayed in all of the column's cells.</summary>
        </member>
        <member name="P:System.SR.DataGridView_LinkColumnTrackVisitedStateDescr">
            <summary>Indicates whether the link changes color if it has been visited.</summary>
        </member>
        <member name="P:System.SR.DataGridView_LinkColumnUseColumnTextForLinkValueDescr">
            <summary>Indicates whether the DataGridViewLinkColumn.Text property value is displayed as the link text.</summary>
        </member>
        <member name="P:System.SR.DataGridView_LinkColumnVisitedLinkColorDescr">
            <summary>The color used to display a link that has been previously visited.</summary>
        </member>
        <member name="P:System.SR.DataGridView_MultiSelectDescr">
            <summary>Indicates whether the user is allowed to select more than one cell, row, or column of the DataGridView at a time.</summary>
        </member>
        <member name="P:System.SR.DataGridView_NeedAutoSizingCriteria">
            <summary>Parameter {0} is not valid for this operation. This parameter value must specify a mode which AutoSizes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_NeedColumnAutoSizingCriteria">
            <summary>Parameter {0} is not valid for this operation. It cannot be NotSet, None or Fill but needs to indicate a sizing criteria.</summary>
        </member>
        <member name="P:System.SR.DataGridView_NewRowNeededDescr">
            <summary>Occurs when the DataGridView.VirtualMode property of the DataGridView is true and the user navigates to the new row at the bottom of the DataGridView.</summary>
        </member>
        <member name="P:System.SR.DataGridView_NoCurrentCell">
            <summary>Operation cannot be performed because there is no current cell. The CurrentCell property needs to be set first.</summary>
        </member>
        <member name="P:System.SR.DataGridView_NoRoomForDisplayedColumns">
            <summary>No room is available to display columns.</summary>
        </member>
        <member name="P:System.SR.DataGridView_NoRoomForDisplayedRows">
            <summary>No room is available to display rows.</summary>
        </member>
        <member name="P:System.SR.DataGridView_OperationDisabledInVirtualMode">
            <summary>Operation is not supported when VirtualMode is set to true.</summary>
        </member>
        <member name="P:System.SR.DataGridView_PreviousModesHasWrongLength">
            <summary>PreviousModes array has the wrong length. Its length must be equal to the number of columns in the DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_PropertyMustBeZero">
            <summary>Property {0} must be set to 0.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ReadOnlyCollection">
            <summary>Operation not supported. Collection is read-only.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ReadOnlyDescr">
            <summary>Indicates whether the user can edit the cells of the DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowAlreadyBelongsToDataGridView">
            <summary>Row provided already belongs to a DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowContextMenuStripChangedDescr">
            <summary>Occurs when DataGridViewRow.ContextMenuStrip changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowContextMenuStripDescr">
            <summary>The shortcut menu for the row.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowContextMenuStripNeededDescr">
            <summary>Occurs when the context menu strip is needed.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowDefaultCellStyleChangedDescr">
            <summary>Occurs when the value of the DataGridViewBand.DefaultCellStyle property for a row changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowDefaultCellStyleDescr">
            <summary>The default cell style to be applied to the DataGridViewRow if no other style is set.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowDirtyStateNeededDescr">
            <summary>Occurs when the DataGridView.VirtualMode property of the DataGridView control is true and the DataGridView needs to determine whether the current row has uncommitted changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowDividerDoubleClickDescr">
            <summary>Occurs when the user double-clicks the divider between two rows.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowDividerHeightChangedDescr">
            <summary>Occurs when the DataGridViewRow.DividerHeight property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowDividerHeightDescr">
            <summary>The height of the row divider in pixels.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowDoesNotBelongToDataGridView">
            <summary>Row provided does not belong to this DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowDoesNotYetBelongToDataGridView">
            <summary>Operation can only be performed on rows that belong to a DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowEnterDescr">
            <summary>Occurs when a row receives input focus and becomes the current row.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowErrorTextChangedDescr">
            <summary>Occurs when the DataGridViewRow.ErrorText property of a row changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowErrorTextDescr">
            <summary>The error message text for row-level errors.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowErrorTextNeededDescr">
            <summary>Occurs when the DataGridView.VirtualMode property of the DataGridView control is true and the DataGridViewRow.ErrorText property for a row requires a value.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowHeaderCellAccDefaultAction">
            <summary>Press to select row</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowHeaderCellChangedDescr">
            <summary>Occurs when the user changes the contents of a row header cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowHeaderMouseClickDescr">
            <summary>Occurs when the user clicks within the boundaries of a row header.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowHeaderMouseDoubleClickDescr">
            <summary>Occurs when a row header is double-clicked.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowHeadersBorderStyleChangedDescr">
            <summary>Occurs when the DataGridView.RowHeadersBorderStyle property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowHeadersBorderStyleDescr">
            <summary>The border style of the row header cells.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowHeadersCannotBeInvisible">
            <summary>Row headers cannot be made invisible because the DataGridView control includes the row headers in its AutoSize mode.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowHeadersDefaultCellStyleDescr">
            <summary>The default style applied to the row header cells.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowHeadersWidthDescr">
            <summary>The width, in pixels, of the column that contains the row headers.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowHeadersWidthSizeModeChangedDescr">
            <summary>Occurs when the value of the RowHeadersWidthSizeMode property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowHeadersWidthSizeModeDescr">
            <summary>Determines the behavior for adjusting the row headers width.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowHeightChangedDescr">
            <summary>Occurs when the value of the DataGridViewRow.Height property for a row changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowHeightDescr">
            <summary>The current height of the row.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowHeightInfoNeededDescr">
            <summary>Occurs when information about row height is requested.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowHeightInfoPushedDescr">
            <summary>Occurs when the user changes the height of a row.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowLeaveDescr">
            <summary>Occurs when a row loses input focus and is no longer the current row.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowMinimumHeightChangedDescr">
            <summary>Occurs when the value of the DataGridViewRow.MinimumHeight property for a row changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowMinimumHeightDescr">
            <summary>The minimum height of the row.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowMustBeUnshared">
            <summary>Row provided must be unshared first.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowPostPaintDescr">
            <summary>Event raised to perform row level painting, after all cell painting has occurred.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowPrePaintDescr">
            <summary>Event raised to perform row level painting, before any cell painting has occurred.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowReadOnlyDescr">
            <summary>Indicates whether the row is read-only.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowResizableDescr">
            <summary>Indicates whether users can resize the row or indicates that the behavior is inherited from the DataGridView.AllowUserToResizeRows property.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowsAddedDescr">
            <summary>Event raised when one or more rows are added to the rows collection.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowsDefaultCellStyleDescr">
            <summary>The default style applied to the row cells of the DataGridView.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowsRemovedDescr">
            <summary>Event raised when one or more rows are removed from the rows collection.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowStateChangedDescr">
            <summary>Occurs when a row changes state, such as losing or gaining input focus.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowTemplateDescr">
            <summary>Identifies the template row whose characteristics are used as the basis for all new implicitly added rows.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowUnsharedDescr">
            <summary>Occurs when a row's state changes from shared to unshared.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowValidatedDescr">
            <summary>Occurs after a row has finished validating.</summary>
        </member>
        <member name="P:System.SR.DataGridView_RowValidatingDescr">
            <summary>Occurs when a row is validating.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ScrollBarsDescr">
            <summary>The type of scroll bars to display for the DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ScrollDescr">
            <summary>Event raised when the grid scrolls horizontally or vertically. Use the ScrollEventArgs.Orientation to determine the direction scrolled.</summary>
        </member>
        <member name="P:System.SR.DataGridView_SelectionChangedDescr">
            <summary>Occurs when the current selection changes.</summary>
        </member>
        <member name="P:System.SR.DataGridView_SelectionModeAndSortModeClash">
            <summary>DataGridView control's SelectionMode cannot be set to {0} while it has a column with SortMode set to DataGridViewColumnSortMode.Automatic.</summary>
        </member>
        <member name="P:System.SR.DataGridView_SelectionModeDescr">
            <summary>Indicates how the cells of the DataGridView can be selected.</summary>
        </member>
        <member name="P:System.SR.DataGridView_SelectionModeReset">
            <summary>{0} The SelectionMode property was reset to its default value {1}.</summary>
        </member>
        <member name="P:System.SR.DataGridView_SetCurrentCellAddressCoreNotReentrant">
            <summary>Operation is not valid because it results in a reentrant call to the SetCurrentCellAddressCore function.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ShowCellErrorsDescr">
            <summary>Indicates whether to show cell errors.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ShowCellToolTipsDescr">
            <summary>Indicates whether or not ToolTips will show when the mouse pointer pauses on a cell.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ShowEditingIconDescr">
            <summary>Indicates whether or not the editing glyph is visible in the row header of the cell being edited.</summary>
        </member>
        <member name="P:System.SR.DataGridView_ShowRowErrorsDescr">
            <summary>Indicates whether row headers will display error glyphs for each row that contains a data entry error.</summary>
        </member>
        <member name="P:System.SR.DataGridView_SizeTooLarge">
            <summary>Width and height of the control cannot be set to values larger than {0}.</summary>
        </member>
        <member name="P:System.SR.DataGridView_SortCompareDescr">
            <summary>Occurs when the DataGridView compares two cell values to perform a sort operation.</summary>
        </member>
        <member name="P:System.SR.DataGridView_SortedDescr">
            <summary>Occurs when the DataGridView compares two cell values to perform a sort operation.</summary>
        </member>
        <member name="P:System.SR.DataGridView_StandardTabDescr">
            <summary>Indicates whether the TAB key moves the focus to the next control in the tab order rather than moving focus to the next cell in the control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_TextBoxColumnMaxInputLengthDescr">
            <summary>Specifies the maximum number of characters that can be entered into the text box.</summary>
        </member>
        <member name="P:System.SR.DataGridView_TransparentColor">
            <summary>Color '{0}' cannot be set to a transparent color.</summary>
        </member>
        <member name="P:System.SR.DataGridView_UserAddedRowDescr">
            <summary>Occurs when the user has finished adding a row to the DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_UserDeletedRowDescr">
            <summary>Occurs when the user has finished deleting a row from the DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_UserDeletingRowDescr">
            <summary>Occurs when the user deletes a row from the DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridView_WeightSumCannotExceedLongMaxValue">
            <summary>Sum of the columns' FillWeight values cannot exceed {0}.</summary>
        </member>
        <member name="P:System.SR.DataGridView_WrongType">
            <summary>Provided {0} must be of type {1} or derive from it.</summary>
        </member>
        <member name="P:System.SR.DataGridViewAlternatingRowsDefaultCellStyleChangedDescr">
            <summary>Occurs when the value of the AlternatingRowsDefaultCellStyle property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewAutoSizeColumnModeChangedDescr">
            <summary>Occurs when the value of the AutoSizeMode property of a column changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewAutoSizeColumnsModeChangedDescr">
            <summary>Occurs when the value of the AutoSizeColumnsMode property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewAutoSizeRowsModeChangedDescr">
            <summary>Occurs when the value of the AutoSizeRowsMode property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewBackgroundColorChangedDescr">
            <summary>Occurs when the value of the DataGridView.BackgroundColor property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewBackgroundColorDescr">
            <summary>The background color of the DataGridView.</summary>
        </member>
        <member name="P:System.SR.DataGridViewBand_CannotSelect">
            <summary>Selected property cannot be altered before this object is added to a DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridViewBand_MinimumHeightSmallerThanOne">
            <summary>Minimum height provided cannot be smaller than {0}.</summary>
        </member>
        <member name="P:System.SR.DataGridViewBand_MinimumWidthSmallerThanOne">
            <summary>Minimum width provided cannot be smaller than {0}.</summary>
        </member>
        <member name="P:System.SR.DataGridViewBand_NewRowCannotBeInvisible">
            <summary>Uncommitted new row cannot be made invisible.</summary>
        </member>
        <member name="P:System.SR.DataGridViewBeginInit">
            <summary>BeginInit() has already been called without an EndInit().</summary>
        </member>
        <member name="P:System.SR.DataGridViewBorderStyleChangedDescr">
            <summary>Occurs when the value of the BorderStyle property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewCell_CannotSetReadOnlyState">
            <summary>ReadOnly property of a cell cannot be set before it is added to a row.</summary>
        </member>
        <member name="P:System.SR.DataGridViewCell_CannotSetSelectedState">
            <summary>Selected property of a cell cannot be set before the cell is added to a DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridViewCell_FormattedValueHasWrongType">
            <summary>Formatted value of the cell has a wrong type.</summary>
        </member>
        <member name="P:System.SR.DataGridViewCell_FormattedValueTypeNull">
            <summary>FormattedValueType property of a cell cannot be null.</summary>
        </member>
        <member name="P:System.SR.DataGridViewCell_ValueTypeNull">
            <summary>ValueType property of a cell in a grid cannot be null.</summary>
        </member>
        <member name="P:System.SR.DataGridViewCellAccessibleObject_OwnerAlreadySet">
            <summary>The owning DataGridViewCell object is already set.</summary>
        </member>
        <member name="P:System.SR.DataGridViewCellAccessibleObject_OwnerNotSet">
            <summary>The owning DataGridViewCell object has not been set.</summary>
        </member>
        <member name="P:System.SR.DataGridViewCellCollection_AtLeastOneCellIsNull">
            <summary>At least one of the provided cells is null.</summary>
        </member>
        <member name="P:System.SR.DataGridViewCellCollection_CannotAddIdenticalCells">
            <summary>At least two provided cells are identical. Each provided cell must be unique.</summary>
        </member>
        <member name="P:System.SR.DataGridViewCellCollection_CellAlreadyBelongsToDataGridView">
            <summary>Cell provided already belongs to a grid. This operation is not valid.</summary>
        </member>
        <member name="P:System.SR.DataGridViewCellCollection_CellAlreadyBelongsToDataGridViewRow">
            <summary>Cell provided already belongs to a row. This operation is not valid.</summary>
        </member>
        <member name="P:System.SR.DataGridViewCellCollection_CellNotFound">
            <summary>Cell provided cannot be found in the collection.</summary>
        </member>
        <member name="P:System.SR.DataGridViewCellCollection_OwningRowAlreadyBelongsToDataGridView">
            <summary>Collection already belongs to a DataGridView control. This operation is no longer valid.</summary>
        </member>
        <member name="P:System.SR.DataGridViewCellStyle_TransparentColorNotAllowed">
            <summary>DataGridViewCellStyle does not support transparent {0}.</summary>
        </member>
        <member name="P:System.SR.DataGridViewCellStyleAlignmentDescr">
            <summary>Indicates the position of the content within a cell.</summary>
        </member>
        <member name="P:System.SR.DataGridViewCheckBoxCell_ClipboardChecked">
            <summary>Selected</summary>
        </member>
        <member name="P:System.SR.DataGridViewCheckBoxCell_ClipboardFalse">
            <summary>False</summary>
        </member>
        <member name="P:System.SR.DataGridViewCheckBoxCell_ClipboardIndeterminate">
            <summary>Indeterminate</summary>
        </member>
        <member name="P:System.SR.DataGridViewCheckBoxCell_ClipboardTrue">
            <summary>True</summary>
        </member>
        <member name="P:System.SR.DataGridViewCheckBoxCell_ClipboardUnchecked">
            <summary>Cleared</summary>
        </member>
        <member name="P:System.SR.DataGridViewCheckBoxCell_InvalidValueType">
            <summary>The value provided for the DataGridViewCheckBoxCell has the wrong type.</summary>
        </member>
        <member name="P:System.SR.DataGridViewColumn_AutoSizeCriteriaCannotUseInvisibleHeaders">
            <summary>Column AutoSize mode cannot be based on the column headers alone while they are invisible.</summary>
        </member>
        <member name="P:System.SR.DataGridViewColumn_AutoSizeModeDescr">
            <summary>Determines the auto size mode for this column.</summary>
        </member>
        <member name="P:System.SR.DataGridViewColumn_CellTemplateRequired">
            <summary>Operation cannot be completed because this DataGridViewColumn does not have a CellTemplate.</summary>
        </member>
        <member name="P:System.SR.DataGridViewColumn_DisplayIndexExceedsColumnCount">
            <summary>The DisplayIndex property of a DataGridViewColumn must be smaller than the number of columns.</summary>
        </member>
        <member name="P:System.SR.DataGridViewColumn_DisplayIndexNegative">
            <summary>DisplayIndex property of a DataGridViewColumn cannot be negative.</summary>
        </member>
        <member name="P:System.SR.DataGridViewColumn_DisplayIndexTooLarge">
            <summary>DisplayIndex property of a DataGridViewColumn must be smaller than {0}.</summary>
        </member>
        <member name="P:System.SR.DataGridViewColumn_DisplayIndexTooNegative">
            <summary>The DisplayIndex property of a detached DataGridViewColumn cannot be smaller than -1.</summary>
        </member>
        <member name="P:System.SR.DataGridViewColumn_FillWeightDescr">
            <summary>The weight that is used when sizing this column in the Fill auto size mode.</summary>
        </member>
        <member name="P:System.SR.DataGridViewColumn_FrozenColumnCannotAutoFill">
            <summary>Column's AutoSize mode cannot be set to Fill when it is also a frozen column.</summary>
        </member>
        <member name="P:System.SR.DataGridViewColumn_SortModeAndSelectionModeClash">
            <summary>Column's SortMode cannot be set to {0} while the DataGridView control's SelectionMode is set to {1}.</summary>
        </member>
        <member name="P:System.SR.DataGridViewColumnCollection_ColumnNotFound">
            <summary>Column named {0} cannot be found.</summary>
        </member>
        <member name="P:System.SR.DataGridViewColumnHeaderCell_SortModeAndSortGlyphDirectionClash">
            <summary>Column header's SortGlyphDirection cannot be set to {0} while the column's SortMode is set to NotSortable.</summary>
        </member>
        <member name="P:System.SR.DataGridViewColumnHeadersDefaultCellStyleChangedDescr">
            <summary>Occurs when the value of the ColumnHeadersDefaultCellStyle property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewColumnHeadersHeightChangedDescr">
            <summary>Occurs when the value of the ColumnHeadersHeight property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewColumnHeadersVisibleDescr">
            <summary>Indicates whether the column headers row is displayed.</summary>
        </member>
        <member name="P:System.SR.DataGridViewColumnSortModeChangedDescr">
            <summary>Occurs when the value of the SortMode property for a column changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewComboBoxCell_DropDownWidthOutOfRange">
            <summary>DropDownWidth value cannot be smaller than {0}.</summary>
        </member>
        <member name="P:System.SR.DataGridViewComboBoxCell_FieldNotFound">
            <summary>Field called {0} does not exist.</summary>
        </member>
        <member name="P:System.SR.DataGridViewComboBoxCell_InvalidValue">
            <summary>DataGridViewComboBoxCell value is not valid.</summary>
        </member>
        <member name="P:System.SR.DataGridViewComboBoxCell_MaxDropDownItemsOutOfRange">
            <summary>MaxDropDownItems value cannot be smaller than {0} or larger than {1}.</summary>
        </member>
        <member name="P:System.SR.DataGridViewDataMemberChangedDescr">
            <summary>Occurs when the value of the DataMember property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewDataMemberDescr">
            <summary>Indicates a sub-list of the DataSource to show in the DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridViewDataSourceChangedDescr">
            <summary>Occurs when the value of the DataSource property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewDataSourceDescr">
            <summary>Indicates the source of data for the DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridViewDefaultCellStyleChangedDescr">
            <summary>Occurs when the value of the DefaultCellStyle property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewElementPaintingEventArgs_ColumnIndexOutOfRange">
            <summary>ColumnIndex property is out of range.</summary>
        </member>
        <member name="P:System.SR.DataGridViewElementPaintingEventArgs_RowIndexOutOfRange">
            <summary>RowIndex property is out of range.</summary>
        </member>
        <member name="P:System.SR.DataGridViewGridColorDescr">
            <summary>The color of the grid lines separating the cells of the DataGridView.</summary>
        </member>
        <member name="P:System.SR.DataGridViewImageColumn_DescriptionDescr">
            <summary>User-defined text associated with the image.</summary>
        </member>
        <member name="P:System.SR.DataGridViewImageColumn_IconDescr">
            <summary>The icon displayed in the cells of this column when the cell's DataGridViewCell.Value property is not set and the cell's DataGridViewImageCell.ValueIsIcon property is set to true.</summary>
        </member>
        <member name="P:System.SR.DataGridViewImageColumn_ImageDescr">
            <summary>The image displayed in the cells of this column when the cell's DataGridViewCell.Value property is not set and the cell's DataGridViewImageCell.ValueIsIcon property is set to false.</summary>
        </member>
        <member name="P:System.SR.DataGridViewImageColumn_ImageLayoutDescr">
            <summary>The image layout in the cells for this column.</summary>
        </member>
        <member name="P:System.SR.DataGridViewImageColumn_PaddingDescr">
            <summary>ImageColumnPadding</summary>
        </member>
        <member name="P:System.SR.DataGridViewImageColumn_ValuesAreIconsDescr">
            <summary>Indicates whether cells in this column display System.Drawing.Icon values.</summary>
        </member>
        <member name="P:System.SR.DataGridViewOnAllowUserToAddRowsChangedDescr">
            <summary>Occurs when the value of the AllowUserToAddRows property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewOnAllowUserToDeleteRowsChangedDescr">
            <summary>Occurs when the value of the AllowUserToDeleteRows property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewOnAllowUserToOrderColumnsChangedDescr">
            <summary>Occurs when the value of the AllowUserToOrderColumns property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewOnAllowUserToResizeColumnsChangedDescr">
            <summary>Occurs when the value of the AllowUserToResizeColumns property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewOnAllowUserToResizeRowsChangedDescr">
            <summary>Occurs when the value of the AllowUserToResizeRows property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewOnGridColorChangedDescr">
            <summary>Occurs when the value of the GridColor property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewOnMultiSelectChangedDescr">
            <summary>Occurs when the value of the MultiSelect property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewOnReadOnlyChangedDescr">
            <summary>Occurs when the value of the ReadOnly property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowAccessibleObject_OwnerAlreadySet">
            <summary>Owning DataGridViewRow object is already set.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowAccessibleObject_OwnerNotSet">
            <summary>Owning DataGridViewRow object has not been set.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowCollection_AddUnboundRow">
            <summary>Rows cannot be programmatically added to the DataGridView's rows collection when the control is data-bound.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowCollection_CannotAddOrInsertSelectedRow">
            <summary>Selected row cannot be added to or inserted into the DataGridView control. The row must be deselected first.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowCollection_CannotDeleteNewRow">
            <summary>Uncommitted new row cannot be deleted.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowCollection_CantClearRowCollectionWithWrongSource">
            <summary>Rows collection cannot be programmatically cleared when the DataGridView control is data-bound to anything else than an IBindingList that supports change notification and allows deletion.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowCollection_CantRemoveRowsWithWrongSource">
            <summary>Rows cannot be programmatically removed unless the DataGridView is data-bound to an IBindingList that supports change notification and allows deletion.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowCollection_CountOutOfRange">
            <summary>Number of copies to create must be strictly positive.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowCollection_EnumFinished">
            <summary>Enumeration already finished.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowCollection_EnumNotStarted">
            <summary>Enumeration has not started. Call MoveNext.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowCollection_IndexDestinationOutOfRange">
            <summary>Index of the destination row is out of range.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowCollection_IndexSourceOutOfRange">
            <summary>Index of the row to copy is out of range.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowCollection_NoColumns">
            <summary>No row can be added to a DataGridView control that does not have columns. Columns must be added first.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowCollection_NoInsertionAfterNewRow">
            <summary>No row can be inserted after the uncommitted new row.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowCollection_NoRowToDuplicate">
            <summary>No row exists to make a copy of. A first row must be added to the DataGridView control before you can add copies of it.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowCollection_RowIndexOutOfRange">
            <summary>Row index provided is out of range.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowCollection_RowTemplateTooManyCells">
            <summary>The RowTemplate row contains more cells than there are columns.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowCollection_TooManyCells">
            <summary>Provided row contains more cells than there are columns.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowHeadersDefaultCellStyleChangedDescr">
            <summary>Occurs when the value of the RowHeadersDefaultCellStyle property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowHeadersVisibleDescr">
            <summary>Indicates whether the column that contains row headers is displayed.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowHeadersWidthChangedDescr">
            <summary>Occurs when the value of the RowHeadersWidth property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewRowsDefaultCellStyleChangedDescr">
            <summary>Occurs when the value of the RowsDefaultCellStyle property changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewTopRowAccessibleObject_OwnerAlreadySet">
            <summary>The owning DataGridView control is already set.</summary>
        </member>
        <member name="P:System.SR.DataGridViewTopRowAccessibleObject_OwnerNotSet">
            <summary>The owning DataGridView control has not been set.</summary>
        </member>
        <member name="P:System.SR.DataGridViewTypeColumn_WrongCellTemplateType">
            <summary>Value provided for CellTemplate must be of type {0} or derive from it.</summary>
        </member>
        <member name="P:System.SR.DataGridViewVirtualModeDescr">
            <summary>Indicates whether you have provided your own data-management operations for the DataGridView control.</summary>
        </member>
        <member name="P:System.SR.DataGridVisibleColumnCountDescr">
            <summary>Returns the count of visible columns in the grid.</summary>
        </member>
        <member name="P:System.SR.DataGridVisibleRowCountDescr">
            <summary>Returns the count of visible rows in the grid.</summary>
        </member>
        <member name="P:System.SR.DataObjectWhitespaceEmptyFormatNotAllowed">
            <summary>Whitespace or empty string is not a valid value for parameter 'format'.</summary>
        </member>
        <member name="P:System.SR.DataObjectDibNotSupported">
            <summary>Bitmap object does not directly support the device-independent bitmap format.  Either specify auto-conversion or perform a SetData with the Bitmap data format.</summary>
        </member>
        <member name="P:System.SR.DataSourceDataMemberPropNotFound">
            <summary>DataMember property '{0}' cannot be found on the DataSource.</summary>
        </member>
        <member name="P:System.SR.DataSourceLocksItems">
            <summary>Items collection cannot be modified when the DataSource property is set.</summary>
        </member>
        <member name="P:System.SR.DataStreamWrite">
            <summary>Requested number of bytes did not get written to the underlying IStream implementation.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerCalendarFontDescr">
            <summary>The font used to display the calendar.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerCalendarForeColorDescr">
            <summary>The color used to display text within a month.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerCalendarMonthBackgroundDescr">
            <summary>The background color displayed within the month.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerCalendarTitleBackColorDescr">
            <summary>The background color displayed in the calendar's title.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerCalendarTitleForeColorDescr">
            <summary>The color used to display text within the calendar's title.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerCalendarTrailingForeColorDescr">
            <summary>The color used to display header day and trailing day text. Header and trailing days are the days from the previous and following months that appear on the current month calendar.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerCheckedDescr">
            <summary>When ShowSelectBox is true, determines if the check box is checked, indicating that the user has selected a value.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerCustomFormatDescr">
            <summary>The custom format string used to format the date and/or time displayed in the control.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerDropDownAlignDescr">
            <summary>Controls how the month drop-down is aligned to the DateTimePicker. Can be LEFT or RIGHT.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerFormatDescr">
            <summary>Determines whether dates and times are displayed using standard or custom formatting.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerMaxDate">
            <summary>DateTimePicker does not support dates after {0}.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerMaxDateDescr">
            <summary>The maximum date that can be selected.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerMinDate">
            <summary>DateTimePicker does not support dates before {0}.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerMinDateDescr">
            <summary>The minimum date that can be selected.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerOnCloseUpDescr">
            <summary>Occurs when the user is finished selecting a date from the drop-down calendar.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerOnDropDownDescr">
            <summary>Occurs when the drop-down calendar is about to drop.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerOnFormatChangedDescr">
            <summary>Event raised when the value of the Format property is changed on DateTimePicker.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerShowNoneDescr">
            <summary>Determines whether a check box is displayed in the control. When the box is unchecked, no value is selected.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerShowUpDownDescr">
            <summary>Indicates whether a spin box rather than a drop-down calendar is displayed for modifying the control value.</summary>
        </member>
        <member name="P:System.SR.DateTimePickerValueDescr">
            <summary>The current date/time value for this control.</summary>
        </member>
        <member name="P:System.SR.DebuggingExceptionOnly">
            <summary>{0} This exception is only raised if a debugger is attached to the process.</summary>
        </member>
        <member name="P:System.SR.DefManifestNotFound">
            <summary>Default manifest file required to enable visual styles cannot be found.</summary>
        </member>
        <member name="P:System.SR.DefaultDataGridViewButtonCellTollTipText">
            <summary>Button</summary>
        </member>
        <member name="P:System.SR.DefaultDataGridViewComboBoxCellTollTipText">
            <summary>ComboBox</summary>
        </member>
        <member name="P:System.SR.DefaultDataGridViewImageCellToolTipText">
            <summary>Image</summary>
        </member>
        <member name="P:System.SR.DefaultDataGridViewLinkCellTollTipText">
            <summary>Link</summary>
        </member>
        <member name="P:System.SR.DefaultDataGridViewTextBoxCellTollTipText">
            <summary>Edit</summary>
        </member>
        <member name="P:System.SR.DescriptionBindingNavigator">
            <summary>Provides a user interface for navigation and manipulation of data bound to controls on a form.</summary>
        </member>
        <member name="P:System.SR.DescriptionBindingSource">
            <summary>Encapsulates a data source for a form and provides navigation, filtering, sorting, and updating capabilities.</summary>
        </member>
        <member name="P:System.SR.DescriptionButton">
            <summary>Raises an event when the user clicks it.</summary>
        </member>
        <member name="P:System.SR.DescriptionCheckBox">
            <summary>Enables the user to select or clear the associated option.</summary>
        </member>
        <member name="P:System.SR.DescriptionCheckedListBox">
            <summary>Displays a list of items with a check box on the left side of each item.</summary>
        </member>
        <member name="P:System.SR.DescriptionColorDialog">
            <summary>Displays available colors along with controls that enable the user to define custom colors.</summary>
        </member>
        <member name="P:System.SR.DescriptionComboBox">
            <summary>Displays an editable text box with a drop-down list of permitted values.</summary>
        </member>
        <member name="P:System.SR.DescriptionContextMenuStrip">
            <summary>Displays a shortcut menu when the user right-clicks the associated control.</summary>
        </member>
        <member name="P:System.SR.DescriptionDataGridView">
            <summary>Displays rows and columns of data in a grid you can customize.</summary>
        </member>
        <member name="P:System.SR.DescriptionDateTimePicker">
            <summary>Enables the user to select a date and time, and to display that date and time in a specified format.</summary>
        </member>
        <member name="P:System.SR.DescriptionDomainUpDown">
            <summary>Displays a single string value that the user selected from a list of items by clicking up and down buttons in the control.</summary>
        </member>
        <member name="P:System.SR.DescriptionErrorProvider">
            <summary>Provides a user interface to indicate to the user that a control on a form has an error associated with it.</summary>
        </member>
        <member name="P:System.SR.DescriptionFlowLayoutPanel">
            <summary>Handles the layout of its components and arranges them in a flow layout automatically.</summary>
        </member>
        <member name="P:System.SR.DescriptionFolderBrowserDialog">
            <summary>Displays a dialog box that prompts the user to select a folder.</summary>
        </member>
        <member name="P:System.SR.DescriptionFontDialog">
            <summary>Displays a dialog box that prompts the user to choose a font from those installed on the local computer.</summary>
        </member>
        <member name="P:System.SR.DescriptionGroupBox">
            <summary>Displays a frame around a group of controls with an optional caption.</summary>
        </member>
        <member name="P:System.SR.DescriptionHelpProvider">
            <summary>Provides pop-up or online Help for controls.</summary>
        </member>
        <member name="P:System.SR.DescriptionHScrollBar">
            <summary>Enables its parent component to scroll content horizontally. Unnecessary if the parent has an autoscroll attribute, and that attribute is enabled.</summary>
        </member>
        <member name="P:System.SR.DescriptionImageList">
            <summary>Manages a collection of images that are typically used by other controls such as ListView, TreeView, or ToolStrip.</summary>
        </member>
        <member name="P:System.SR.DescriptionLabel">
            <summary>Provides run-time information or descriptive text for a control.</summary>
        </member>
        <member name="P:System.SR.DescriptionLinkLabel">
            <summary>Displays a label control that supports hyperlink functionality, formatting, and tracking.</summary>
        </member>
        <member name="P:System.SR.DescriptionListBox">
            <summary>Displays a list from which the user can select items.</summary>
        </member>
        <member name="P:System.SR.DescriptionListView">
            <summary>Displays a collection of items in one of five different views.</summary>
        </member>
        <member name="P:System.SR.DescriptionMaskedTextBox">
            <summary>Uses a mask to distinguish between proper and improper user input.</summary>
        </member>
        <member name="P:System.SR.DescriptionMenuStrip">
            <summary>Displays application commands and options grouped by functionality.</summary>
        </member>
        <member name="P:System.SR.DescriptionMonthCalendar">
            <summary>Displays a monthly calendar from which the user can select a date.</summary>
        </member>
        <member name="P:System.SR.DescriptionNotifyIcon">
            <summary>Displays an icon in the notification area, on the right side of the Windows taskbar, during run time.</summary>
        </member>
        <member name="P:System.SR.DescriptionNumericUpDown">
            <summary>Displays a single numeric value that the user can increment and decrement by clicking up and down buttons on the control.</summary>
        </member>
        <member name="P:System.SR.DescriptionOpenFileDialog">
            <summary>Displays a dialog box that prompts the user to open a file.</summary>
        </member>
        <member name="P:System.SR.DescriptionPageSetupDialog">
            <summary>Displays a dialog box that enables the user to change page-related print settings, including margins and paper orientation.</summary>
        </member>
        <member name="P:System.SR.DescriptionPanel">
            <summary>Enables you to group collections of controls.</summary>
        </member>
        <member name="P:System.SR.DescriptionPictureBox">
            <summary>Displays an image.</summary>
        </member>
        <member name="P:System.SR.DescriptionPrintDialog">
            <summary>Displays a dialog box that enables the user to select a printer and choose other print options such as the number of copies and page orientation.</summary>
        </member>
        <member name="P:System.SR.DescriptionPrintPreviewControl">
            <summary>Represents only the portion of a print preview that shows the document being previewed. Does not contain any dialog boxes or buttons.</summary>
        </member>
        <member name="P:System.SR.DescriptionPrintPreviewDialog">
            <summary>Displays a dialog box that shows the user a preview of what the associated document will look like when printed.</summary>
        </member>
        <member name="P:System.SR.DescriptionProgressBar">
            <summary>Displays a bar that fills to indicate to the user the progress of an operation.</summary>
        </member>
        <member name="P:System.SR.DescriptionPropertyGrid">
            <summary>Provides a user interface for browsing the properties of an object.</summary>
        </member>
        <member name="P:System.SR.DescriptionRadioButton">
            <summary>Enables the user to select a single option from a group of choices when paired with other RadioButtons.</summary>
        </member>
        <member name="P:System.SR.DescriptionRichTextBox">
            <summary>Provides advanced text entry and editing features such as character and paragraph formatting.</summary>
        </member>
        <member name="P:System.SR.DescriptionSaveFileDialog">
            <summary>Displays a dialog box that prompts the user to select a location for saving a file.</summary>
        </member>
        <member name="P:System.SR.DescriptionSplitContainer">
            <summary>Divides a container's display area into two resizable panels to which you can add controls.</summary>
        </member>
        <member name="P:System.SR.DescriptionSplitter">
            <summary>Divides a container's display area into two areas which can be resized.</summary>
        </member>
        <member name="P:System.SR.DescriptionStatusStrip">
            <summary>Displays information to the user about the object being viewed, the object's components, or the object's operation.</summary>
        </member>
        <member name="P:System.SR.DescriptionTabControl">
            <summary>Manages and displays to the user a related collection of tabs that can contain controls and components.</summary>
        </member>
        <member name="P:System.SR.DescriptionTableLayoutPanel">
            <summary>Handles the layout of its components and arranges them in the format of a table automatically.</summary>
        </member>
        <member name="P:System.SR.DescriptionTextBox">
            <summary>Enables the user to enter text, and provides multiline editing and password character masking.</summary>
        </member>
        <member name="P:System.SR.DescriptionTimer">
            <summary>Component that raises an event at user defined intervals</summary>
        </member>
        <member name="P:System.SR.DescriptionToolStrip">
            <summary>Provides toolbars and other user interface elements that support many appearance options, and that support overflow and run-time item reordering.</summary>
        </member>
        <member name="P:System.SR.DescriptionToolTip">
            <summary>Displays information when the user moves the pointer over an associated control.</summary>
        </member>
        <member name="P:System.SR.DescriptionTrackBar">
            <summary>Enables the user to choose between a range of values by sliding a small bar along another bar.</summary>
        </member>
        <member name="P:System.SR.DescriptionTreeView">
            <summary>Displays a hierarchical collection of labeled items to the user that optionally contain an image.</summary>
        </member>
        <member name="P:System.SR.DescriptionVScrollBar">
            <summary>Enables its parent component to scroll content vertically. Unnecessary if the parent has an autoscroll attribute, and the attribute is enabled.</summary>
        </member>
        <member name="P:System.SR.DescriptionWebBrowser">
            <summary>Enables the user to browse Web pages inside your form.</summary>
        </member>
        <member name="P:System.SR.DispInvokeFailed">
            <summary>Operation {0} on the component did not succeed, generating the error code 0x{1:X}.</summary>
        </member>
        <member name="P:System.SR.DomainUpDownItemsDescr">
            <summary>The allowable values of the DomainUpDown.</summary>
        </member>
        <member name="P:System.SR.DomainUpDownOnSelectedItemChangedDescr">
            <summary>Occurs when the selected item in the control changes.</summary>
        </member>
        <member name="P:System.SR.DomainUpDownSelectedIndexDescr">
            <summary>The index of the selected domain value.</summary>
        </member>
        <member name="P:System.SR.DomainUpDownSelectedItemDescr">
            <summary>The currently selected domain value.</summary>
        </member>
        <member name="P:System.SR.DomainUpDownSortedDescr">
            <summary>Controls whether items in the domain list are sorted.</summary>
        </member>
        <member name="P:System.SR.DomainUpDownWrapDescr">
            <summary>Indicates whether values wrap around at either end of the item list.</summary>
        </member>
        <member name="P:System.SR.DragDropRegFailed">
            <summary>DragDrop registration did not succeed.</summary>
        </member>
        <member name="P:System.SR.drawItemEventDescr">
            <summary>Occurs whenever a particular item/area needs to be painted.</summary>
        </member>
        <member name="P:System.SR.ErrorBadInputLanguage">
            <summary>inputLanguage is not recognized by the system.</summary>
        </member>
        <member name="P:System.SR.ErrorCollectionFull">
            <summary>Collection has reached its maximum capacity.</summary>
        </member>
        <member name="P:System.SR.ErrorCreatingHandle">
            <summary>Error creating window handle.</summary>
        </member>
        <member name="P:System.SR.ErrorNoMarshalingThread">
            <summary>Invoke or BeginInvoke cannot be called on a control until the window handle has been created.</summary>
        </member>
        <member name="P:System.SR.ErrorPropertyPageFailed">
            <summary>Component did not succeed to show the property page.</summary>
        </member>
        <member name="P:System.SR.ErrorProviderBlinkRateDescr">
            <summary>The rate in milliseconds at which the error icon blinks.</summary>
        </member>
        <member name="P:System.SR.ErrorProviderBlinkStyleDescr">
            <summary>Controls whether the error icon blinks when an error is set.</summary>
        </member>
        <member name="P:System.SR.ErrorProviderContainerControlDescr">
            <summary>The parent control, usually the form, that contains the data-bound controls on which the ErrorProvider can display error icons.</summary>
        </member>
        <member name="P:System.SR.ErrorProviderDataMemberDescr">
            <summary>Indicates the sub-list of data from the DataSource to bind errors against.</summary>
        </member>
        <member name="P:System.SR.ErrorProviderDataSourceDescr">
            <summary>Indicates the source of data to bind errors against.</summary>
        </member>
        <member name="P:System.SR.ErrorProviderErrorDescr">
            <summary>The error description for a control.</summary>
        </member>
        <member name="P:System.SR.ErrorProviderIconAlignmentDescr">
            <summary>The location of the error icon relative to the control.</summary>
        </member>
        <member name="P:System.SR.ErrorProviderIconDescr">
            <summary>The icon used to indicate an error.</summary>
        </member>
        <member name="P:System.SR.ErrorProviderIconPaddingDescr">
            <summary>The number of pixels to leave between the error icon and the control.</summary>
        </member>
        <member name="P:System.SR.ErrorSettingWindowRegion">
            <summary>Error occurred while trying to set the window region for the MDI client.</summary>
        </member>
        <member name="P:System.SR.ErrorTypeConverterFailed">
            <summary>Component did not succeed to show the editor.</summary>
        </member>
        <member name="P:System.SR.ExceptionCreatingCompEditorControl">
            <summary>ComponentEditorControl: {0} cannot be created.</summary>
        </member>
        <member name="P:System.SR.ExceptionCreatingObject">
            <summary>Exception occurred while trying to create an instance of {0}. The exception was "{1}".</summary>
        </member>
        <member name="P:System.SR.ExDlgCancel">
            <summary>Cancel</summary>
        </member>
        <member name="P:System.SR.ExDlgCaption">
            <summary>Microsoft .NET</summary>
        </member>
        <member name="P:System.SR.ExDlgCaption2">
            <summary>{0}</summary>
        </member>
        <member name="P:System.SR.ExDlgContinue">
            <summary>&amp;Continue</summary>
        </member>
        <member name="P:System.SR.ExDlgContinueErrorText">
            <summary>Unhandled exception has occurred in a component in your application. If you click Continue, the application will ignore this error and attempt to continue.
            
            {0}.</summary>
        </member>
        <member name="P:System.SR.ExDlgDetailsText">
            <summary>Error Text</summary>
        </member>
        <member name="P:System.SR.ExDlgErrorText">
            <summary>Unhandled exception has occurred in your application. If you click Continue, the application will ignore this error and attempt to continue. If you click Quit, the application will close immediately.
            
            {0}.</summary>
        </member>
        <member name="P:System.SR.ExDlgHelp">
            <summary>&amp;Help</summary>
        </member>
        <member name="P:System.SR.ExDlgMsgExceptionSection">
            <summary>Exception Text</summary>
        </member>
        <member name="P:System.SR.ExDlgMsgFooterNonSwitchable">
            <summary>Application does not support Windows Forms just-in-time (JIT)
            debugging. Contact the application author for more
            information.</summary>
        </member>
        <member name="P:System.SR.ExDlgMsgFooterSwitchable">
            <summary></summary>
        </member>
        <member name="P:System.SR.ExDlgMsgHeaderNonSwitchable">
            <summary>Application does not support just-in-time (JIT)
            debugging. See the end of this message for details.</summary>
        </member>
        <member name="P:System.SR.ExDlgMsgHeaderSwitchable">
            <summary>See the end of this message for details on invoking 
            just-in-time (JIT) debugging instead of this dialog box.</summary>
        </member>
        <member name="P:System.SR.ExDlgMsgJITDebuggingSection">
            <summary>JIT Debugging</summary>
        </member>
        <member name="P:System.SR.ExDlgMsgLoadedAssembliesEntry">
            <summary>{0}
                Assembly Version: {1}
                Win32 Version: {2}
                CodeBase: {3}</summary>
        </member>
        <member name="P:System.SR.ExDlgMsgLoadedAssembliesSection">
            <summary>Loaded Assemblies</summary>
        </member>
        <member name="P:System.SR.ExDlgMsgSectionSeperator">
            <summary>************** {0} **************</summary>
        </member>
        <member name="P:System.SR.ExDlgMsgSeperator">
            <summary>----------------------------------------</summary>
        </member>
        <member name="P:System.SR.ExDlgOk">
            <summary>OK</summary>
        </member>
        <member name="P:System.SR.ExDlgQuit">
            <summary>&amp;Quit</summary>
        </member>
        <member name="P:System.SR.ExDlgSecurityContinueErrorText">
            <summary>Application attempted to perform an operation not allowed by the security policy. To grant this application the required permission, contact your system administrator, or use the Microsoft .NET Configuration tool.
            
            If you click Continue, the application wi ...</summary>
        </member>
        <member name="P:System.SR.ExDlgSecurityErrorText">
            <summary>Application attempted to perform an operation not allowed by the security policy. To grant this application the required permission, contact your system administrator, or use the Microsoft .NET Configuration tool.
            
            If you click Continue, the application wi ...</summary>
        </member>
        <member name="P:System.SR.ExDlgShowDetails">
            <summary>&amp;Details</summary>
        </member>
        <member name="P:System.SR.ExDlgWarningText">
            <summary>{0}.</summary>
        </member>
        <member name="P:System.SR.ExternalException">
            <summary>External exception</summary>
        </member>
        <member name="P:System.SR.FDaddExtensionDescr">
            <summary>Controls whether extensions are automatically added to file names.</summary>
        </member>
        <member name="P:System.SR.FDcheckFileExistsDescr">
            <summary>Checks that the specified file exists before returning from the dialog.</summary>
        </member>
        <member name="P:System.SR.FDcheckPathExistsDescr">
            <summary>Checks that the specified path exists before returning from the dialog.</summary>
        </member>
        <member name="P:System.SR.FDdefaultExtDescr">
            <summary>The default file name extension. If the user types a file name, this extension is added at the end of the file name if one is not specified.</summary>
        </member>
        <member name="P:System.SR.FDdereferenceLinksDescr">
            <summary>Controls whether shortcuts are dereferenced before returning from the dialog.</summary>
        </member>
        <member name="P:System.SR.FDfileNameDescr">
            <summary>The file first shown in the dialog box, or the last one selected by the user.</summary>
        </member>
        <member name="P:System.SR.FDFileNamesDescr">
            <summary>Retrieves the file names of all selected files in the dialog box.</summary>
        </member>
        <member name="P:System.SR.FDfileOkDescr">
            <summary>Occurs when the user clicks the Open or Save button in the dialog box.</summary>
        </member>
        <member name="P:System.SR.FDfilterDescr">
            <summary>The file filters to display in the dialog box, for example, "C# files|*.cs|All files|*.*".</summary>
        </member>
        <member name="P:System.SR.FDfilterIndexDescr">
            <summary>The index of the file filter selected in the dialog box. The first item has an index of 1.</summary>
        </member>
        <member name="P:System.SR.FDinitialDirDescr">
            <summary>The initial directory for the dialog box.</summary>
        </member>
        <member name="P:System.SR.FDrestoreDirectoryDescr">
            <summary>Controls whether the dialog box restores the current directory before closing.</summary>
        </member>
        <member name="P:System.SR.FDshowHelpDescr">
            <summary>Enables the Help button.</summary>
        </member>
        <member name="P:System.SR.FDsupportMultiDottedExtensionsDescr">
            <summary>Controls whether multi-dotted extensions are supported.</summary>
        </member>
        <member name="P:System.SR.FDtitleDescr">
            <summary>The string to display in the title bar of the dialog box.</summary>
        </member>
        <member name="P:System.SR.FDvalidateNamesDescr">
            <summary>Controls whether the dialog box ensures that file names do not contain invalid characters or sequences.</summary>
        </member>
        <member name="P:System.SR.FileDialogBufferTooSmall">
            <summary>Too many files selected. Select fewer files and try again.</summary>
        </member>
        <member name="P:System.SR.FileDialogCreatePrompt">
            <summary>File {0} does not exist.
            Do you want to create it?</summary>
        </member>
        <member name="P:System.SR.FileDialogFileNotFound">
            <summary>File {0} does not exist.
            Verify that the correct file name was given.</summary>
        </member>
        <member name="P:System.SR.FileDialogInvalidFileName">
            <summary>File {0} is not a valid file name.</summary>
        </member>
        <member name="P:System.SR.FileDialogInvalidFilter">
            <summary>Filter string you provided is not valid. The filter string must contain a description of the filter, followed by the vertical bar (|) and the filter pattern. The strings for different filtering options must also be separated by the vertical bar. Example: " ...</summary>
        </member>
        <member name="P:System.SR.FileDialogInvalidFilterIndex">
            <summary>Filter index not valid.</summary>
        </member>
        <member name="P:System.SR.FileDialogOverwritePrompt">
            <summary>File {0} already exists.
            Do you want to replace it?</summary>
        </member>
        <member name="P:System.SR.FileDialogSubLassFailure">
            <summary>Attempt to subclass a list box did not succeed. Not enough memory is available.</summary>
        </member>
        <member name="P:System.SR.FilterRequiresIBindingListView">
            <summary>Can only set filter on an IBindingListView where SupportsFiltering is true.</summary>
        </member>
        <member name="P:System.SR.FindKeyMayNotBeEmptyOrNull">
            <summary>Key specified was either empty or null.</summary>
        </member>
        <member name="P:System.SR.FlowPanelFlowDirectionDescr">
            <summary>Specifies the direction in which controls are laid out.</summary>
        </member>
        <member name="P:System.SR.FlowPanelWrapContentsDescr">
            <summary>Indicates whether contents are wrapped or clipped at the control boundary.</summary>
        </member>
        <member name="P:System.SR.FnDallowScriptChangeDescr">
            <summary>Controls whether the character set of the font can be changed.</summary>
        </member>
        <member name="P:System.SR.FnDallowSimulationsDescr">
            <summary>Controls whether GDI font simulations are allowed.</summary>
        </member>
        <member name="P:System.SR.FnDallowVectorFontsDescr">
            <summary>Controls whether vector fonts can be selected.</summary>
        </member>
        <member name="P:System.SR.FnDallowVerticalFontsDescr">
            <summary>Controls whether vertical fonts can be selected.</summary>
        </member>
        <member name="P:System.SR.FnDapplyDescr">
            <summary>Occurs when the user clicks the Apply button.</summary>
        </member>
        <member name="P:System.SR.FnDcolorDescr">
            <summary>The color selected in the dialog box.</summary>
        </member>
        <member name="P:System.SR.FnDfixedPitchOnlyDescr">
            <summary>Controls whether only fixed pitch fonts can be selected.</summary>
        </member>
        <member name="P:System.SR.FnDfontDescr">
            <summary>The font selected in the dialog box.</summary>
        </member>
        <member name="P:System.SR.FnDfontMustExistDescr">
            <summary>Controls whether to report an error if the selected font does not exist.</summary>
        </member>
        <member name="P:System.SR.FnDmaxSizeDescr">
            <summary>The maximum point size that can be Selected (or zero to disable).</summary>
        </member>
        <member name="P:System.SR.FnDminSizeDescr">
            <summary>The minimum point size that can be Selected (or zero to disable).</summary>
        </member>
        <member name="P:System.SR.FnDscriptsOnlyDescr">
            <summary>Controls whether to exclude OEM and Symbol character sets.</summary>
        </member>
        <member name="P:System.SR.FnDshowApplyDescr">
            <summary>Controls whether to show the Apply button.</summary>
        </member>
        <member name="P:System.SR.FnDshowColorDescr">
            <summary>Controls whether to show a color choice.</summary>
        </member>
        <member name="P:System.SR.FnDshowEffectsDescr">
            <summary>Controls whether to show the underline, strikeout, and font color selections.</summary>
        </member>
        <member name="P:System.SR.FnDshowHelpDescr">
            <summary>Controls whether to show the Help button.</summary>
        </member>
        <member name="P:System.SR.FolderBrowserDialogDescription">
            <summary>The string that is displayed above the tree view control in the dialog box. This string can be used to specify instructions to the user.</summary>
        </member>
        <member name="P:System.SR.FolderBrowserDialogNoRootFolder">
            <summary>Unable to retrieve the root folder.</summary>
        </member>
        <member name="P:System.SR.FolderBrowserDialogRootFolder">
            <summary>The location of the root folder from which to start browsing. Only the specified folder and any subfolders that are beneath it will appear in the dialog box.</summary>
        </member>
        <member name="P:System.SR.FolderBrowserDialogSelectedPath">
            <summary>The path of the folder first selected in the dialog or the last one selected by the user.</summary>
        </member>
        <member name="P:System.SR.FolderBrowserDialogShowNewFolderButton">
            <summary>Include the New Folder button in the dialog box.</summary>
        </member>
        <member name="P:System.SR.FormAcceptButtonDescr">
            <summary>The accept button of the form. If this is set, the button is 'clicked' whenever the user presses the 'ENTER' key.</summary>
        </member>
        <member name="P:System.SR.FormActiveMDIChildDescr">
            <summary>The currently active MDI child form.</summary>
        </member>
        <member name="P:System.SR.FormatControlFormatDescr">
            <summary>Indicates the Format object that this control is currently using to format its values.</summary>
        </member>
        <member name="P:System.SR.Formatter_CantConvert">
            <summary>Value '{0}' cannot be converted to type '{1}'.</summary>
        </member>
        <member name="P:System.SR.Formatter_CantConvertNull">
            <summary>Null value cannot be converted to type '{1}'.</summary>
        </member>
        <member name="P:System.SR.FormAutoScaleDescr">
            <summary>If set to true, the form will automatically scale with the screen font.</summary>
        </member>
        <member name="P:System.SR.FormAutoScrollDescr">
            <summary>Indicates whether scroll bars automatically appear when the control contents are larger than its visible area.</summary>
        </member>
        <member name="P:System.SR.FormAutoScrollMarginDescr">
            <summary>The margin around controls during auto scroll.</summary>
        </member>
        <member name="P:System.SR.FormAutoScrollMinSizeDescr">
            <summary>The minimum logical size for the auto scroll region.</summary>
        </member>
        <member name="P:System.SR.FormAutoScrollPositionDescr">
            <summary>The current position of the auto-scrolling scroll bar.</summary>
        </member>
        <member name="P:System.SR.FormBorderStyleDescr">
            <summary>Indicates the appearance and behavior of the border and title bar of the form.</summary>
        </member>
        <member name="P:System.SR.FormCancelButtonDescr">
            <summary>The cancel button of the form. If this property is set, the button is 'clicked' whenever the user presses the 'ESC' key.</summary>
        </member>
        <member name="P:System.SR.FormControlBoxDescr">
            <summary>Determines whether a form has a Control/System menu box.</summary>
        </member>
        <member name="P:System.SR.FormDesktopBoundsDescr">
            <summary>The bounds of this form in desktop coordinates.</summary>
        </member>
        <member name="P:System.SR.FormDesktopLocationDescr">
            <summary>The location of this form in desktop coordinates.</summary>
        </member>
        <member name="P:System.SR.FormDialogResultDescr">
            <summary>The value this form will return if displayed as a dialog box.</summary>
        </member>
        <member name="P:System.SR.FormHelpButtonClickedDescr">
            <summary>Event raised when the help button is clicked.</summary>
        </member>
        <member name="P:System.SR.FormHelpButtonDescr">
            <summary>Determines whether a form has a Help button on the caption bar.</summary>
        </member>
        <member name="P:System.SR.FormIconDescr">
            <summary>Indicates the icon for a form. This icon is displayed in the form's system menu box and when the form is minimized.</summary>
        </member>
        <member name="P:System.SR.FormIsMDIChildDescr">
            <summary>Determines whether the form is a child of a MDI container.</summary>
        </member>
        <member name="P:System.SR.FormIsMDIContainerDescr">
            <summary>Determines whether the form is an MDI container.</summary>
        </member>
        <member name="P:System.SR.FormKeyPreviewDescr">
            <summary>Determines whether keyboard events for controls on the form are registered with the form.</summary>
        </member>
        <member name="P:System.SR.FormMaximizeBoxDescr">
            <summary>Determines whether a form has a maximize box in the upper-right corner of its caption bar.</summary>
        </member>
        <member name="P:System.SR.FormMaximumSizeDescr">
            <summary>The maximum size the form can be resized to.</summary>
        </member>
        <member name="P:System.SR.FormMDIChildrenDescr">
            <summary>Retrieves the MDI children of this form.</summary>
        </member>
        <member name="P:System.SR.FormMDIParentAndChild">
            <summary>Form cannot be both an MDI child and MDI parent.</summary>
        </member>
        <member name="P:System.SR.FormMDIParentCannotAdd">
            <summary>Form cannot be added to the Controls collection that has a valid MDI parent.</summary>
        </member>
        <member name="P:System.SR.FormMDIParentDescr">
            <summary>Retrieves the MDI parent of this form.</summary>
        </member>
        <member name="P:System.SR.FormMenuStripDescr">
            <summary>Specifies the primary MenuStrip for the Form. This property is used for keyboard activation and automatic merging in MDI.</summary>
        </member>
        <member name="P:System.SR.FormMinimizeBoxDescr">
            <summary>Determines whether a form has a minimize box in the upper-right corner of its caption bar.</summary>
        </member>
        <member name="P:System.SR.FormMinimumSizeDescr">
            <summary>The minimum size the form can be resized to.</summary>
        </member>
        <member name="P:System.SR.FormModalDescr">
            <summary>Indicates if this form is currently being displayed as a modal dialog box.</summary>
        </member>
        <member name="P:System.SR.FormOnActivateDescr">
            <summary>Occurs whenever the form is activated.</summary>
        </member>
        <member name="P:System.SR.FormOnClosedDescr">
            <summary>Occurs whenever the user closes the form, after the form has been closed.</summary>
        </member>
        <member name="P:System.SR.FormOnClosingDescr">
            <summary>Occurs whenever the user closes the form, before the form has been closed.</summary>
        </member>
        <member name="P:System.SR.FormOnDeactivateDescr">
            <summary>Occurs whenever the form is deactivated.</summary>
        </member>
        <member name="P:System.SR.FormOnFormClosedDescr">
            <summary>Occurs whenever the user closes the form, after the form has been closed and specifies the close reason.</summary>
        </member>
        <member name="P:System.SR.FormOnFormClosingDescr">
            <summary>Occurs whenever the user closes the form, before the form has been closed and specifies the close reason.</summary>
        </member>
        <member name="P:System.SR.FormOnInputLangChangeDescr">
            <summary>Occurs whenever the language used for input for this form changes.</summary>
        </member>
        <member name="P:System.SR.FormOnInputLangChangeRequestDescr">
            <summary>A request by the system to change the input language for this form. This request can be refused.</summary>
        </member>
        <member name="P:System.SR.FormOnLoadDescr">
            <summary>Occurs whenever the user loads the form.</summary>
        </member>
        <member name="P:System.SR.FormOnMaximizedBoundsChangedDescr">
            <summary>Event raised when the value of the MaximizedBounds property is changed on Form.</summary>
        </member>
        <member name="P:System.SR.FormOnMaximumSizeChangedDescr">
            <summary>Event raised when the value of the MaximumSize property is changed on Form.</summary>
        </member>
        <member name="P:System.SR.FormOnMDIChildActivateDescr">
            <summary>Occurs when an MDI Child window is activated.</summary>
        </member>
        <member name="P:System.SR.FormOnMenuCompleteDescr">
            <summary>Occurs when menu selection is completed and menu modal message loop has exited.</summary>
        </member>
        <member name="P:System.SR.FormOnMenuStartDescr">
            <summary>Occurs when any menu is displayed and menu modal message loop is entered.</summary>
        </member>
        <member name="P:System.SR.FormOnMinimumSizeChangedDescr">
            <summary>Event raised when the value of the MinimumSize property is changed on Form.</summary>
        </member>
        <member name="P:System.SR.FormOnResizeBeginDescr">
            <summary>Occurs when the form enters the sizing modal loop.</summary>
        </member>
        <member name="P:System.SR.FormOnResizeEndDescr">
            <summary>Occurs when the form exits the sizing modal loop.</summary>
        </member>
        <member name="P:System.SR.FormOnShownDescr">
            <summary>Occurs whenever the form is first shown.</summary>
        </member>
        <member name="P:System.SR.FormOpacityDescr">
            <summary>The opacity percentage of the control.</summary>
        </member>
        <member name="P:System.SR.FormOwnedFormsDescr">
            <summary>Array of forms owned by this form.</summary>
        </member>
        <member name="P:System.SR.FormOwnerDescr">
            <summary>The owner of this form.</summary>
        </member>
        <member name="P:System.SR.FormShowIconDescr">
            <summary>Indicates whether an icon is displayed in the title bar of the form.</summary>
        </member>
        <member name="P:System.SR.FormShowInTaskbarDescr">
            <summary>Determines whether the form appears in the Windows Taskbar.</summary>
        </member>
        <member name="P:System.SR.FormSizeGripStyleDescr">
            <summary>Determines when the SizeGrip will be displayed for the form.</summary>
        </member>
        <member name="P:System.SR.FormStartPositionDescr">
            <summary>Determines the position of a form when it first appears.</summary>
        </member>
        <member name="P:System.SR.FormTopMostDescr">
            <summary>Indicates whether the form always appears above all other forms that do not have this property set to true.</summary>
        </member>
        <member name="P:System.SR.FormTransparencyKeyDescr">
            <summary>A color which will appear transparent when painted on the form.</summary>
        </member>
        <member name="P:System.SR.FormWindowStateDescr">
            <summary>Determines the initial visual state of the form.</summary>
        </member>
        <member name="P:System.SR.GridItemDisposed">
            <summary>The GridItem has been disposed and is no longer usable.</summary>
        </member>
        <member name="P:System.SR.GridItemNotExpandable">
            <summary>The GridItem cannot be expanded.</summary>
        </member>
        <member name="P:System.SR.GridPanelCellPositionDescr">
            <summary>Specifies the Row and Column position of the control.</summary>
        </member>
        <member name="P:System.SR.GridPanelColumnDescr">
            <summary>The column position of the specified child control.</summary>
        </member>
        <member name="P:System.SR.GridPanelColumnsDescr">
            <summary>The number of columns on the table.</summary>
        </member>
        <member name="P:System.SR.GridPanelColumnStylesDescr">
            <summary>The column styles of the table.</summary>
        </member>
        <member name="P:System.SR.GridPanelGetAlignmentDescr">
            <summary>The alignment of the control.</summary>
        </member>
        <member name="P:System.SR.GridPanelGetBoxStretchDescr">
            <summary>The box stretch of the control.</summary>
        </member>
        <member name="P:System.SR.GridPanelGetColumnSpanDescr">
            <summary>The column span of the control.</summary>
        </member>
        <member name="P:System.SR.GridPanelGetRowSpanDescr">
            <summary>The row span of the control.</summary>
        </member>
        <member name="P:System.SR.GridPanelRowDescr">
            <summary>The row position of the absolutely positioned element.</summary>
        </member>
        <member name="P:System.SR.GridPanelRowsDescr">
            <summary>The number of rows on the table.</summary>
        </member>
        <member name="P:System.SR.GridPanelRowStylesDescr">
            <summary>The row styles of the table.</summary>
        </member>
        <member name="P:System.SR.HandleAlreadyExists">
            <summary>Window handle already exists.</summary>
        </member>
        <member name="P:System.SR.HelpCaption">
            <summary>Help</summary>
        </member>
        <member name="P:System.SR.HelpInvalidURL">
            <summary>Help URL '{0}' is not valid.</summary>
        </member>
        <member name="P:System.SR.HelpProviderHelpKeywordDescr">
            <summary>Determines the Help keyword associated with this control.</summary>
        </member>
        <member name="P:System.SR.HelpProviderHelpNamespaceDescr">
            <summary>The Help namespace (for example HTML 1.0 Help file) that will be used. It is only used for controls that have the HelpKeyword set.</summary>
        </member>
        <member name="P:System.SR.HelpProviderHelpStringDescr">
            <summary>Determines the Help string associated with this control.</summary>
        </member>
        <member name="P:System.SR.HelpProviderNavigatorDescr">
            <summary>Determines the kind of Help associated with this control.</summary>
        </member>
        <member name="P:System.SR.HelpProviderShowHelpDescr">
            <summary>Determines if Help should be displayed for this control.</summary>
        </member>
        <member name="P:System.SR.HtmlDocumentInvalidDomain">
            <summary>Argument for the Domain property must be a fully qualified domain name using Domain Name System (DNS) conventions.</summary>
        </member>
        <member name="P:System.SR.HtmlElementAttributeNotSupported">
            <summary>The attribute you specified is not supported on this element.</summary>
        </member>
        <member name="P:System.SR.HtmlElementMethodNotSupported">
            <summary>Method is not supported on this type of HtmlElement.</summary>
        </member>
        <member name="P:System.SR.HtmlElementPropertyNotSupported">
            <summary>Property is not supported on this type of HtmlElement.</summary>
        </member>
        <member name="P:System.SR.ICurrencyManagerProviderDescr">
            <summary>Provides custom binding management for components.</summary>
        </member>
        <member name="P:System.SR.IllegalCrossThreadCall">
            <summary>Cross-thread operation not valid: Control '{0}' accessed from a thread other than the thread it was created on.</summary>
        </member>
        <member name="P:System.SR.IllegalCrossThreadCallWithStack">
            <summary>Cross-thread operation not valid: Control '{0}' accessed from a thread other than the thread it was created on.
            Stack trace where the illegal operation occurred was:
            {1}"</summary>
        </member>
        <member name="P:System.SR.IllegalState">
            <summary>Internal state of the {1} class is not valid.</summary>
        </member>
        <member name="P:System.SR.ImageListAddFailed">
            <summary>Image cannot be added to the ImageList.</summary>
        </member>
        <member name="P:System.SR.ImageListAllowMirroringDescr">
            <summary>Indicates whether the images in the list should be mirrored.</summary>
        </member>
        <member name="P:System.SR.ImageListBadImage">
            <summary>Parameter must be of type Image.</summary>
        </member>
        <member name="P:System.SR.ImageListBitmap">
            <summary>Image must be a Bitmap.</summary>
        </member>
        <member name="P:System.SR.ImageListColorDepthDescr">
            <summary>The number of colors to use to render images.</summary>
        </member>
        <member name="P:System.SR.ImageListCreateFailed">
            <summary>Creation of the ImageList handle did not succeed.</summary>
        </member>
        <member name="P:System.SR.ImageListEntryType">
            <summary>Image added to an ImageList must either derive from Image or be an Icon.</summary>
        </member>
        <member name="P:System.SR.ImageListGetFailed">
            <summary>Retrieval of the image from ImageList did not succeed.</summary>
        </member>
        <member name="P:System.SR.ImageListHandleCreatedDescr">
            <summary>Indicates if the native handle has been created for this ImageList.</summary>
        </member>
        <member name="P:System.SR.ImageListHandleDescr">
            <summary>The native handle of the ImageList.</summary>
        </member>
        <member name="P:System.SR.ImageListImagesDescr">
            <summary>The images stored in this ImageList.</summary>
        </member>
        <member name="P:System.SR.ImageListImageStreamDescr">
            <summary>Retrieves an ImageList streamer for persisting images.</summary>
        </member>
        <member name="P:System.SR.ImageListImageTooShort">
            <summary>Image strip shorter than the ImageSize property cannot be added.</summary>
        </member>
        <member name="P:System.SR.ImageListOnRecreateHandleDescr">
            <summary>Occurs when the ImageList needs to recreate its handle.</summary>
        </member>
        <member name="P:System.SR.ImageListRemoveFailed">
            <summary>Removal of the image from ImageList did not succeed.</summary>
        </member>
        <member name="P:System.SR.ImageListReplaceFailed">
            <summary>Replacement of the image in ImageList did not succeed.</summary>
        </member>
        <member name="P:System.SR.ImageListRightToLeftInvalidArgument">
            <summary>'Inherit' is not a valid value for this property.  Must be set to 'Yes' or 'No'.</summary>
        </member>
        <member name="P:System.SR.ImageListSizeDescr">
            <summary>The size of individual images in the ImageList.</summary>
        </member>
        <member name="P:System.SR.ImageListStreamerLoadFailed">
            <summary>Loading of the ImageList did not succeed.</summary>
        </member>
        <member name="P:System.SR.ImageListStreamerSaveFailed">
            <summary>Saving of the ImageList did not succeed.</summary>
        </member>
        <member name="P:System.SR.ImageListStripBadWidth">
            <summary>Width of the image strip must be a positive multiple of ImageSize.Width.</summary>
        </member>
        <member name="P:System.SR.ImageListTransparentColorDescr">
            <summary>The color that is treated as transparent.</summary>
        </member>
        <member name="P:System.SR.IndexOutOfRange">
            <summary>Index {0} is out of range.</summary>
        </member>
        <member name="P:System.SR.Invalid_boolean_attribute">
            <summary>Attribute {0} must be set to true or false.</summary>
        </member>
        <member name="P:System.SR.InvalidArgument">
            <summary>InvalidArgument=Value of '{1}' is not valid for '{0}'.</summary>
        </member>
        <member name="P:System.SR.InvalidBoundArgument">
            <summary>Value of '{1}' is not valid for '{0}'. '{0}' should be between {2} and {3}.</summary>
        </member>
        <member name="P:System.SR.InvalidCrossThreadControlCall">
            <summary>Action being performed on this control is being called from the wrong thread. Marshal to the correct thread using Control.Invoke or Control.BeginInvoke to perform this action.</summary>
        </member>
        <member name="P:System.SR.InvalidExBoundArgument">
            <summary>Value of '{1}' is not valid for '{0}'. '{0}' should be greater than {2} and less than {3}.</summary>
        </member>
        <member name="P:System.SR.InvalidFileFormat">
            <summary>File format is not valid.</summary>
        </member>
        <member name="P:System.SR.InvalidFileType">
            <summary>File type is not valid.</summary>
        </member>
        <member name="P:System.SR.InvalidGDIHandle">
            <summary>Win32 handle passed to {0} is not valid or is the wrong type.</summary>
        </member>
        <member name="P:System.SR.InvalidHighBoundArgument">
            <summary>Value of '{1}' is not valid for '{0}'. '{0}' must be less than {2}.</summary>
        </member>
        <member name="P:System.SR.InvalidHighBoundArgumentEx">
            <summary>Value of '{1}' is not valid for '{0}'. '{0}' must be less than or equal to {2}.</summary>
        </member>
        <member name="P:System.SR.InvalidLowBoundArgument">
            <summary>Value of '{1}' is not valid for '{0}'. '{0}' must be greater than {2}.</summary>
        </member>
        <member name="P:System.SR.InvalidLowBoundArgumentEx">
            <summary>Value of '{1}' is not valid for '{0}'. '{0}' must be greater than or equal to {2}.</summary>
        </member>
        <member name="P:System.SR.InvalidNullArgument">
            <summary>Null is not a valid value for '{0}'.</summary>
        </member>
        <member name="P:System.SR.InvalidNullItemInCollection">
            <summary>One or more items in the collection are null.</summary>
        </member>
        <member name="P:System.SR.InvalidPictureFormat">
            <summary>Image format is not valid. The image file may be corrupted.</summary>
        </member>
        <member name="P:System.SR.InvalidPictureType">
            <summary>Argument '{0}' must be a picture that can be used as a {1}.</summary>
        </member>
        <member name="P:System.SR.InvalidResXBasePathOperation">
            <summary>Property can be changed only before the enumeration.</summary>
        </member>
        <member name="P:System.SR.InvalidResXFile">
            <summary>ResX file {0} cannot be parsed.</summary>
        </member>
        <member name="P:System.SR.InvalidResXFileReaderWriterTypes">
            <summary>ResX input is not valid. Cannot find valid "resheader" tags for the ResX reader and writer type names.</summary>
        </member>
        <member name="P:System.SR.InvalidResXNoType">
            <summary>Could not find a type for a name.  The type name was '{0}'.</summary>
        </member>
        <member name="P:System.SR.InvalidResXResourceNoName">
            <summary>Cannot find a name for the resource with the value '{0}'.</summary>
        </member>
        <member name="P:System.SR.InvalidSendKeysKeyword">
            <summary>Keyword "{0}" is not valid.</summary>
        </member>
        <member name="P:System.SR.InvalidSendKeysRepeat">
            <summary>Specified repeat count is not valid.</summary>
        </member>
        <member name="P:System.SR.InvalidSendKeysString">
            <summary>SendKeys string '{0}' is not valid.</summary>
        </member>
        <member name="P:System.SR.InvalidSingleMonthSize">
            <summary>MonthCalendar size information cannot be retrieved.</summary>
        </member>
        <member name="P:System.SR.InvalidWndClsName">
            <summary>Window class name is not valid.</summary>
        </member>
        <member name="P:System.SR.InvocationException">
            <summary>Type {0} in the data at line {1}, position {2}, cannot be loaded because it threw the following exception during construction: {3}</summary>
        </member>
        <member name="P:System.SR.IsMirroredDescr">
            <summary>Indicates whether the control is mirrored.</summary>
        </member>
        <member name="P:System.SR.ISupportInitializeDescr">
            <summary>Specifies support for transacted initialization.</summary>
        </member>
        <member name="P:System.SR.KeysConverterInvalidKeyCombination">
            <summary>Key combination is not valid.</summary>
        </member>
        <member name="P:System.SR.KeysConverterInvalidKeyName">
            <summary>Key name is not valid.</summary>
        </member>
        <member name="P:System.SR.LabelAutoEllipsisDescr">
            <summary>Enables the automatic handling of text that extends beyond the width of the label control.</summary>
        </member>
        <member name="P:System.SR.LabelAutoSizeDescr">
            <summary>Enables automatic resizing based on font size. Note that this is only valid for label controls that do not wrap text.</summary>
        </member>
        <member name="P:System.SR.LabelBackgroundImageDescr">
            <summary>The background image of this control.</summary>
        </member>
        <member name="P:System.SR.LabelBorderDescr">
            <summary>Determines if the label has a visible border.</summary>
        </member>
        <member name="P:System.SR.LabelOnTextAlignChangedDescr">
            <summary>Event raised when the value of the TextAlign property is changed on Label.</summary>
        </member>
        <member name="P:System.SR.LabelPreferredHeightDescr">
            <summary>The preferred height of this control.</summary>
        </member>
        <member name="P:System.SR.LabelPreferredWidthDescr">
            <summary>The preferred width of this control.</summary>
        </member>
        <member name="P:System.SR.LabelTextAlignDescr">
            <summary>Determines the position of the text within the label.</summary>
        </member>
        <member name="P:System.SR.LabelUseMnemonicDescr">
            <summary>If true, the first character preceded by an ampersand (&amp;&amp;) will be used as the label's mnemonic key.</summary>
        </member>
        <member name="P:System.SR.LayoutEngineUnsupportedType">
            <summary>LayoutEngine cannot arrange objects of type '{0}'.</summary>
        </member>
        <member name="P:System.SR.LinkLabelActiveLinkColorDescr">
            <summary>Determines the color of the hyperlink when the user clicks the link.</summary>
        </member>
        <member name="P:System.SR.LinkLabelAreaLength">
            <summary>LinkArea length cannot be negative.</summary>
        </member>
        <member name="P:System.SR.LinkLabelAreaStart">
            <summary>LinkArea start cannot be negative.</summary>
        </member>
        <member name="P:System.SR.LinkLabelBadLink">
            <summary>Parameter must be of type Link.</summary>
        </member>
        <member name="P:System.SR.LinkLabelDisabledLinkColorDescr">
            <summary>Determines the color of the hyperlink when disabled.</summary>
        </member>
        <member name="P:System.SR.LinkLabelLinkAreaDescr">
            <summary>Portion of the text in the label to render as a hyperlink.</summary>
        </member>
        <member name="P:System.SR.LinkLabelLinkBehaviorDescr">
            <summary>Determines the underline behavior of the hyperlink.</summary>
        </member>
        <member name="P:System.SR.LinkLabelLinkClickedDescr">
            <summary>Occurs when the link is clicked.</summary>
        </member>
        <member name="P:System.SR.LinkLabelLinkColorDescr">
            <summary>Determines the color of the hyperlink in its default state.</summary>
        </member>
        <member name="P:System.SR.LinkLabelLinkVisitedDescr">
            <summary>Determines if the hyperlink should be rendered as visited.</summary>
        </member>
        <member name="P:System.SR.LinkLabelOverlap">
            <summary>Overlapping link regions.</summary>
        </member>
        <member name="P:System.SR.LinkLabelVisitedLinkColorDescr">
            <summary>Determines the color of the hyperlink when the LinkVisited property is set to true.</summary>
        </member>
        <member name="P:System.SR.ListBindingBindField">
            <summary>Cannot bind to the property or column {0} on the DataSource.</summary>
        </member>
        <member name="P:System.SR.ListBindingBindProperty">
            <summary>Cannot bind to the property '{0}' on the target control.</summary>
        </member>
        <member name="P:System.SR.ListBindingBindPropertyReadOnly">
            <summary>Cannot bind to property '{0}' because it is read-only.</summary>
        </member>
        <member name="P:System.SR.ListBindingFormatFailed">
            <summary>Cannot format the value to the desired type.</summary>
        </member>
        <member name="P:System.SR.ListBoxBorderDescr">
            <summary>Controls what type of border is drawn around the ListBox.</summary>
        </member>
        <member name="P:System.SR.ListBoxCantInsertIntoIntegerCollection">
            <summary>ListBox.IntegerCollection is sorted, and items cannot be inserted into it.</summary>
        </member>
        <member name="P:System.SR.ListBoxColumnWidthDescr">
            <summary>Indicates how wide each column should be in a multicolumn ListBox.</summary>
        </member>
        <member name="P:System.SR.ListBoxCustomTabOffsetsDescr">
            <summary>The collection of pixel offsets each corresponding TAB character will be placed from the near edge of the client area.</summary>
        </member>
        <member name="P:System.SR.ListBoxDrawModeDescr">
            <summary>Controls list box painting. Either the system [NORMAL] or the user [OWNERDRAW] paints each item.</summary>
        </member>
        <member name="P:System.SR.ListBoxHorizontalExtentDescr">
            <summary>The width, in pixels, by which a list box can be scrolled horizontally. Only valid if HorizontalScrollBars is true.</summary>
        </member>
        <member name="P:System.SR.ListBoxHorizontalScrollbarDescr">
            <summary>Indicates whether the ListBox will display a horizontal scroll bar for items beyond the right edge of the ListBox.</summary>
        </member>
        <member name="P:System.SR.ListBoxIntegralHeightDescr">
            <summary>Indicates whether the list can contain only complete items.</summary>
        </member>
        <member name="P:System.SR.ListBoxInvalidSelectionMode">
            <summary>Cannot call this method when SelectionMode is SelectionMode.NONE.</summary>
        </member>
        <member name="P:System.SR.ListBoxItemHeightDescr">
            <summary>The height, in pixels, of items in a fixed-height owner-draw list box.</summary>
        </member>
        <member name="P:System.SR.ListBoxItemOverflow">
            <summary>List box contains too many items.</summary>
        </member>
        <member name="P:System.SR.ListBoxItemsDescr">
            <summary>The items in the list box.</summary>
        </member>
        <member name="P:System.SR.ListBoxMultiColumnDescr">
            <summary>Indicates if values should be displayed in columns horizontally.</summary>
        </member>
        <member name="P:System.SR.ListBoxPreferredHeightDescr">
            <summary>The preferred height of this control.</summary>
        </member>
        <member name="P:System.SR.ListBoxScrollIsVisibleDescr">
            <summary>Indicates if the list box should always have a scroll bar present, regardless of how many items are in it.</summary>
        </member>
        <member name="P:System.SR.ListBoxSelectedIndexCollectionIsReadOnly">
            <summary>ListBox.SelectedIndexCollection is read only.</summary>
        </member>
        <member name="P:System.SR.ListBoxSelectedIndexDescr">
            <summary>Retrieves the index of the first selection in the list box, or -1 if there is no selection.</summary>
        </member>
        <member name="P:System.SR.ListBoxSelectedIndicesDescr">
            <summary>A collection of indexes for the currently selected items in the list box.</summary>
        </member>
        <member name="P:System.SR.ListBoxSelectedItemDescr">
            <summary>The currently selected item in the list box, or null.</summary>
        </member>
        <member name="P:System.SR.ListBoxSelectedItemsDescr">
            <summary>A collection of currently selected items.</summary>
        </member>
        <member name="P:System.SR.ListBoxSelectedObjectCollectionIsReadOnly">
            <summary>ListBox.SelectedObjectCollection is read only.</summary>
        </member>
        <member name="P:System.SR.ListBoxSelectionModeDescr">
            <summary>Indicates if the list box is to be single-select, multi-select, or not selectable.</summary>
        </member>
        <member name="P:System.SR.ListBoxSortedDescr">
            <summary>Controls whether the list is sorted.</summary>
        </member>
        <member name="P:System.SR.ListBoxTopIndexDescr">
            <summary>The index of the first visible item in the list box.</summary>
        </member>
        <member name="P:System.SR.ListBoxUseTabStopsDescr">
            <summary>Indicates if TAB characters should be expanded into full spacing.</summary>
        </member>
        <member name="P:System.SR.ListBoxVarHeightMultiCol">
            <summary>ListBox cannot have variable height and be multicolumn. Either make the ListBox owner-draw fixed height, or make the ListBox single column.</summary>
        </member>
        <member name="P:System.SR.ListControlDataSourceDescr">
            <summary>Indicates the list that this control will use to get its items.</summary>
        </member>
        <member name="P:System.SR.ListControlDisplayMemberDescr">
            <summary>Indicates the property to display for the items in this control.</summary>
        </member>
        <member name="P:System.SR.ListControlEmptyValueMemberInSettingSelectedValue">
            <summary>Cannot set the SelectedValue in a ListControl with an empty ValueMember.</summary>
        </member>
        <member name="P:System.SR.ListControlFormatDescr">
            <summary>Event raised to allow you to convert the value to a value suitable for display.</summary>
        </member>
        <member name="P:System.SR.ListControlFormatInfoChangedDescr">
            <summary>Event raised when the value of the FormatInfo property changed.</summary>
        </member>
        <member name="P:System.SR.ListControlFormatStringChangedDescr">
            <summary>Event raised when the value of the FormatString property is changed.</summary>
        </member>
        <member name="P:System.SR.ListControlFormatStringDescr">
            <summary>The format specifier characters that indicate how a value is to be displayed.</summary>
        </member>
        <member name="P:System.SR.ListControlFormattingEnabledChangedDescr">
            <summary>Event raised when the value of the FormattingEnabled property is changed.</summary>
        </member>
        <member name="P:System.SR.ListControlFormattingEnabledDescr">
            <summary>If this property is true, the value of FormatString is used to convert the value of DisplayMember into a value that can be displayed.</summary>
        </member>
        <member name="P:System.SR.ListControlOnDataSourceChangedDescr">
            <summary>Event raised when the value of the DataSource property is changed on ListControl.</summary>
        </member>
        <member name="P:System.SR.ListControlOnDisplayMemberChangedDescr">
            <summary>Event raised when the value of the DisplayMember property is changed on ListControl.</summary>
        </member>
        <member name="P:System.SR.ListControlOnSelectedValueChangedDescr">
            <summary>Event raised when the value of the SelectedValue property is changed on ListControl.</summary>
        </member>
        <member name="P:System.SR.ListControlOnValueMemberChangedDescr">
            <summary>Event raised when the value of the ValueMember property is changed on ListControl.</summary>
        </member>
        <member name="P:System.SR.ListControlSelectedValueDescr">
            <summary>Indicates the actual value of the currently selected item. Setting it will cause the item whose actual value is equal to become selected.</summary>
        </member>
        <member name="P:System.SR.ListControlValueMemberDescr">
            <summary>Indicates the property to use as the actual value for the items in the control.</summary>
        </member>
        <member name="P:System.SR.ListControlWrongDisplayMember">
            <summary>Cannot bind to the new display member.</summary>
        </member>
        <member name="P:System.SR.ListControlWrongValueMember">
            <summary>Cannot bind to the new value member.</summary>
        </member>
        <member name="P:System.SR.ListEnumCurrentOutOfRange">
            <summary>Enumerator's current position is out of the bounds of the list.</summary>
        </member>
        <member name="P:System.SR.ListEnumVersionMismatch">
            <summary>List that this enumerator is bound to has been modified. An enumerator can only be used if the list does not change.</summary>
        </member>
        <member name="P:System.SR.ListManagerBadPosition">
            <summary>Position is either less than 0 or greater than the number of items in the data source.</summary>
        </member>
        <member name="P:System.SR.ListManagerEmptyList">
            <summary>Cannot operate with an empty list.</summary>
        </member>
        <member name="P:System.SR.ListManagerNoValue">
            <summary>Index {0} does not have a value.</summary>
        </member>
        <member name="P:System.SR.ListManagerSetDataSource">
            <summary>Data sources of type {0} are not supported.</summary>
        </member>
        <member name="P:System.SR.ListViewActivationDescr">
            <summary>Indicates the type of action required by the user to activate an item, and the feedback given.</summary>
        </member>
        <member name="P:System.SR.ListViewActivationMustBeOnWhenHotTrackingIsOn">
            <summary>When HotTracking is on, activation must be ItemActivation.OneClick.</summary>
        </member>
        <member name="P:System.SR.ListViewAddColumnFailed">
            <summary>Column cannot be added to ListView.</summary>
        </member>
        <member name="P:System.SR.ListViewAddItemFailed">
            <summary>Item cannot be added to ListView.</summary>
        </member>
        <member name="P:System.SR.ListViewAfterLabelEditDescr">
            <summary>Occurs when the text of an item has been edited by the user.</summary>
        </member>
        <member name="P:System.SR.ListViewAlignmentDescr">
            <summary>Indicates how items are aligned within the ListView.</summary>
        </member>
        <member name="P:System.SR.ListViewAllowColumnReorderDescr">
            <summary>Indicates whether the user can reorder columns in Details view.</summary>
        </member>
        <member name="P:System.SR.ListViewAutoArrangeDescr">
            <summary>Indicates whether items are kept arranged automatically when in LargeIcon or SmallIcon view.</summary>
        </member>
        <member name="P:System.SR.ListViewBackgroundImageTiledDescr">
            <summary>Indicates whether the background image will be tiled to fill the entire background of the control.</summary>
        </member>
        <member name="P:System.SR.ListViewBadListViewSubItem">
            <summary>Parameter must be of type ListViewSubItem.</summary>
        </member>
        <member name="P:System.SR.ListViewBeforeLabelEditDescr">
            <summary>Occurs when the text of an item is about to be edited by the user.</summary>
        </member>
        <member name="P:System.SR.ListViewBeginEditFailed">
            <summary>BeginEdit did not succeed because the LabelEdit property is false.</summary>
        </member>
        <member name="P:System.SR.ListViewCacheVirtualItemsEventDescr">
            <summary>Notifies users of virtual ListView controls that they should prepare their cache.</summary>
        </member>
        <member name="P:System.SR.ListViewCantAccessCheckedItemsCollectionWhenInVirtualMode">
            <summary>Cannot access the checked items collection when the ListView is in virtual mode.</summary>
        </member>
        <member name="P:System.SR.ListViewCantAccessSelectedItemsCollectionWhenInVirtualMode">
            <summary>Cannot access the selected items collection when the ListView is in virtual mode.</summary>
        </member>
        <member name="P:System.SR.ListViewCantAddItemsToAVirtualListView">
            <summary>When the ListView is in virtual mode, you cannot add items to the ListView items collection. Use  the VirtualListSize property instead to change the size of the ListView items collection.</summary>
        </member>
        <member name="P:System.SR.ListViewCantGetEnumeratorInVirtualMode">
            <summary>When the ListView is in virtual mode, you cannot enumerate through the ListView items collection using an enumerator or call GetEnumerator. Use the ListView items indexer instead and access an item by index value.</summary>
        </member>
        <member name="P:System.SR.ListViewCantModifyTheItemCollInAVirtualListView">
            <summary>Cannot modify the items collection in a virtual ListView.</summary>
        </member>
        <member name="P:System.SR.ListViewCantRemoveItemsFromAVirtualListView">
            <summary>When the ListView is in virtual mode, you cannot remove items from the ListView items collection. Use the VirtualListSize property instead to change the size of the ListView items collection.</summary>
        </member>
        <member name="P:System.SR.ListViewCantSetViewToTileViewInVirtualMode">
            <summary>Tile view is not supported in VirtualMode.</summary>
        </member>
        <member name="P:System.SR.ListViewCantSetVirtualModeWhenInTileView">
            <summary>VirtualMode is not supported in Tile view.</summary>
        </member>
        <member name="P:System.SR.ListViewCheckBoxesDescr">
            <summary>Indicates whether check boxes are displayed beside items.</summary>
        </member>
        <member name="P:System.SR.ListViewCheckBoxesNotSupportedInTileView">
            <summary>CheckBoxes are not supported in Tile view. Choose a different view or set CheckBoxes to false.</summary>
        </member>
        <member name="P:System.SR.ListViewColumnClickDescr">
            <summary>Occurs when a column header is clicked.</summary>
        </member>
        <member name="P:System.SR.ListViewColumnInfoSet">
            <summary>ColumnInfo cannot be set.</summary>
        </member>
        <member name="P:System.SR.ListViewColumnReorderedDscr">
            <summary>Occurs when the ListView column header has been reordered.</summary>
        </member>
        <member name="P:System.SR.ListViewColumnsDescr">
            <summary>The columns shown in Details view.</summary>
        </member>
        <member name="P:System.SR.ListViewColumnWidthChangedDscr">
            <summary>Occurs when the user stops dragging the column header divider. Works only in Details mode.</summary>
        </member>
        <member name="P:System.SR.ListViewColumnWidthChangingDscr">
            <summary>Occurs when the user drags the column header divider. Works only in Details mode.</summary>
        </member>
        <member name="P:System.SR.ListViewDrawColumnHeaderEventDescr">
            <summary>Occurs in owner draw mode, when a column header needs to be drawn.</summary>
        </member>
        <member name="P:System.SR.ListViewDrawItemEventDescr">
            <summary>Occurs in owner-draw mode, when an item needs to be drawn.</summary>
        </member>
        <member name="P:System.SR.ListViewDrawSubItemEventDescr">
            <summary>Occurs in owner-draw mode, when a SubItem (Details view only) needs to be drawn.</summary>
        </member>
        <member name="P:System.SR.ListViewFindNearestItemWorksOnlyInIconView">
            <summary>FindNearestItem is supported only when the ListView is in SMALLICON or LARGEICON view.</summary>
        </member>
        <member name="P:System.SR.ListViewFocusedItemDescr">
            <summary>The ListView item that currently has the user focus.</summary>
        </member>
        <member name="P:System.SR.ListViewFullRowSelectDescr">
            <summary>Indicates whether all SubItems are highlighted along with the item when selected.</summary>
        </member>
        <member name="P:System.SR.ListViewGetTopItem">
            <summary>Cannot get the top item in LargeIcon, SmallIcon, or Tile view.</summary>
        </member>
        <member name="P:System.SR.ListViewGridLinesDescr">
            <summary>Displays grid lines around items and SubItems. Only shown when in Details view.</summary>
        </member>
        <member name="P:System.SR.ListViewGroupDefaultGroup">
            <summary>Default</summary>
        </member>
        <member name="P:System.SR.ListViewGroupDefaultHeader">
            <summary>ListViewGroup</summary>
        </member>
        <member name="P:System.SR.ListViewGroupNameDescr">
            <summary>The name of this group.</summary>
        </member>
        <member name="P:System.SR.ListViewGroupsDescr">
            <summary>The groups in the ListView.</summary>
        </member>
        <member name="P:System.SR.ListViewGroupCollectionBadListViewGroup">
            <summary>Parameter must be of type ListViewGroup.</summary>
        </member>
        <member name="P:System.SR.ListViewHeaderStyleDescr">
            <summary>The style of the column headers in Details view.</summary>
        </member>
        <member name="P:System.SR.ListViewHideSelectionDescr">
            <summary>Removes highlighting from the selected item when the control does not have focus.</summary>
        </member>
        <member name="P:System.SR.ListViewHotTrackingDescr">
            <summary>Allows items to appear as hyperlinks when the mouse hovers over them.</summary>
        </member>
        <member name="P:System.SR.ListViewHoverMustBeOnWhenHotTrackingIsOn">
            <summary>When HotTracking is on, HoverSelection must also be enabled.</summary>
        </member>
        <member name="P:System.SR.ListViewHoverSelectDescr">
            <summary>Allows items to be selected by hovering over them with the mouse.</summary>
        </member>
        <member name="P:System.SR.ListViewIndentCountCantBeNegative">
            <summary>IndentCount property on the ListViewItem class does not accept negative values.</summary>
        </member>
        <member name="P:System.SR.ListViewInsertionMarkDescr">
            <summary>Allows insertion mark attributes to be changed.</summary>
        </member>
        <member name="P:System.SR.ListViewItemCheckedDescr">
            <summary>Event raised when the checked property of a ListView item changes.</summary>
        </member>
        <member name="P:System.SR.ListViewItemClickDescr">
            <summary>Occurs when an item is activated.</summary>
        </member>
        <member name="P:System.SR.ListViewItemDragDescr">
            <summary>Occurs when the user begins dragging an item.</summary>
        </member>
        <member name="P:System.SR.ListViewItemImageIndexDescr">
            <summary>The ImageList index value of the image displayed when the list view item is in the unselected state.</summary>
        </member>
        <member name="P:System.SR.ListViewItemImageKeyDescr">
            <summary>The key in the image-list value that represents the image to display. when the list view item is in the unselected state.</summary>
        </member>
        <member name="P:System.SR.ListViewItemIndentCountDescr">
            <summary>Number of indents for a list ListViewItem</summary>
        </member>
        <member name="P:System.SR.ListViewItemMouseHoverDescr">
            <summary>Occurs when the mouse hovers over an item.</summary>
        </member>
        <member name="P:System.SR.ListViewItemsDescr">
            <summary>The items in the ListView.</summary>
        </member>
        <member name="P:System.SR.ListViewItemSelectionChangedDescr">
            <summary>Event raised when the selection state of an item has changed.</summary>
        </member>
        <member name="P:System.SR.ListViewItemSorterDescr">
            <summary>The sorting comparer for this view.</summary>
        </member>
        <member name="P:System.SR.ListViewItemStateImageIndexDescr">
            <summary>The image-list index value of the state image displayed.</summary>
        </member>
        <member name="P:System.SR.ListViewItemStateImageKeyDescr">
            <summary>The key in the image-list value that represents the image to display.</summary>
        </member>
        <member name="P:System.SR.ListViewItemSubItemsDescr">
            <summary>The SubItems for this ListViewItem.</summary>
        </member>
        <member name="P:System.SR.ListViewLabelEditDescr">
            <summary>Allows item labels to be edited in place by the user.</summary>
        </member>
        <member name="P:System.SR.ListViewLabelWrapDescr">
            <summary>Determines whether label text can wrap to a new line.</summary>
        </member>
        <member name="P:System.SR.ListViewLargeImageListDescr">
            <summary>The ImageList control used by the ListView for images in Large Icon View.</summary>
        </member>
        <member name="P:System.SR.ListViewMultiSelectDescr">
            <summary>Allows multiple items to be selected.</summary>
        </member>
        <member name="P:System.SR.ListViewOwnerDrawDescr">
            <summary>Controls whether the system or the user paints items/SubItems.</summary>
        </member>
        <member name="P:System.SR.ListViewRetrieveVirtualItemEventDescr">
            <summary>Retrieves the virtual item from the user.</summary>
        </member>
        <member name="P:System.SR.ListViewScrollableDescr">
            <summary>Indicates whether the control will display scroll bars if it contains more items than can fit in the client area.</summary>
        </member>
        <member name="P:System.SR.ListViewSearchForVirtualItemDescr">
            <summary>Notifies the user that a search is taking place on a virtual ListView.</summary>
        </member>
        <member name="P:System.SR.ListViewSelectedIndexChangedDescr">
            <summary>Occurs whenever the 'SelectedIndex' property for this ListView changes.</summary>
        </member>
        <member name="P:System.SR.ListViewSelectedItemsDescr">
            <summary>A collection of items that are currently selected in the ListView.</summary>
        </member>
        <member name="P:System.SR.ListViewSetTopItem">
            <summary>Cannot set the TopItem in LargeIcon, SmallIcon, or Tile View.</summary>
        </member>
        <member name="P:System.SR.ListViewShowGroupsDescr">
            <summary>Indicates whether the control will display the items in group form.</summary>
        </member>
        <member name="P:System.SR.ListViewShowItemToolTipsDescr">
            <summary>Allows ListViewItems to display ToolTips.</summary>
        </member>
        <member name="P:System.SR.ListViewSmallImageListDescr">
            <summary>The ImageList control used by the ListView for images in all views except for the large icon view.</summary>
        </member>
        <member name="P:System.SR.ListViewSortingDescr">
            <summary>Indicates the manner in which items are to be sorted.</summary>
        </member>
        <member name="P:System.SR.ListViewSortNotAllowedInVirtualListView">
            <summary>Sorting is not allowed in a virtual ListView.</summary>
        </member>
        <member name="P:System.SR.ListViewStartIndexCannotBeLargerThanEndIndex">
            <summary>The startIndex value cannot be larger than the endIndex value.</summary>
        </member>
        <member name="P:System.SR.ListViewStateImageListDescr">
            <summary>The ImageList control used by the ListView for custom states.</summary>
        </member>
        <member name="P:System.SR.ListViewSubItemCollectionInvalidArgument">
            <summary>Argument must be of type ListViewSubItem.</summary>
        </member>
        <member name="P:System.SR.ListViewTileSizeDescr">
            <summary>The size of the tile in Tile view.</summary>
        </member>
        <member name="P:System.SR.ListViewTileSizeMustBePositive">
            <summary>TileSize must be positive.</summary>
        </member>
        <member name="P:System.SR.ListViewTileViewDoesNotSupportCheckBoxes">
            <summary>Tile view does not support CheckBoxes. Choose a different view or set CheckBoxes to false.</summary>
        </member>
        <member name="P:System.SR.ListViewTopItemDescr">
            <summary>The first item that is visible to the user.</summary>
        </member>
        <member name="P:System.SR.ListViewViewDescr">
            <summary>Selects one of five different views that items can be shown in.</summary>
        </member>
        <member name="P:System.SR.ListViewVirtualItemRequired">
            <summary>ListView virtualization requires a valid ListViewItem to be provided by the RetrieveVirtualItem event or in the OnRetrieveVirtualItem method.</summary>
        </member>
        <member name="P:System.SR.ListViewVirtualItemsSelectionRangeChangedDescr">
            <summary>Event raised when the selection state of a range of items has changed. This event in raised only in virtual mode.</summary>
        </member>
        <member name="P:System.SR.ListViewVirtualItemStateChangedDescr">
            <summary>Occurs whenever the state of a virtual item is changed.</summary>
        </member>
        <member name="P:System.SR.ListViewVirtualListSizeDescr">
            <summary>Sets the count of the item collection when the ListView is in virtual mode.</summary>
        </member>
        <member name="P:System.SR.ListViewVirtualListSizeInvalidArgument">
            <summary>Value of '{1}' is not valid for '{0}'. {0} should be greater than or equal to 0.</summary>
        </member>
        <member name="P:System.SR.ListViewVirtualListViewRequiresNoCheckedItems">
            <summary>Cannot set VirtualMode=true on a list whose checked items collection is not empty.</summary>
        </member>
        <member name="P:System.SR.ListViewVirtualListViewRequiresNoItems">
            <summary>Cannot set VirtualMode=true on a ListView that has items.</summary>
        </member>
        <member name="P:System.SR.ListViewVirtualListViewRequiresNoSelectedItems">
            <summary>Cannot set VirtualMode=true on a ListView whose selected items collection is not empty.</summary>
        </member>
        <member name="P:System.SR.ListViewVirtualModeCantAccessSubItem">
            <summary>When in VirtualMode the ListView RetrieveVirtualListItem event needs a list view SubItem for each ListView column.</summary>
        </member>
        <member name="P:System.SR.ListViewVirtualModeDescr">
            <summary>Enables ListView virtual mode.</summary>
        </member>
        <member name="P:System.SR.LoadDLLError">
            <summary>Cannot load the "{0}" DLL into memory.</summary>
        </member>
        <member name="P:System.SR.LoadTextError">
            <summary>Cannot load the text.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxAllowPromptAsInputDescr">
            <summary>Indicates whether the prompt character is valid as input.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxAsciiOnlyDescr">
            <summary>Indicates whether only ASCII characters are accepted as valid input.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxBeepOnErrorDescr">
            <summary>Indicates whether the control will beep when an invalid character is typed.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxCultureDescr">
            <summary>The culture that determines the value of the localizable mask language separators and placeholders.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxCutCopyMaskFormat">
            <summary>Indicates whether the text to be copied to the clipboard includes literals and/or prompt characters.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxHidePromptOnLeaveDescr">
            <summary>Indicates whether prompt characters are displayed when the control does not have focus.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxIncompleteMsg">
            <summary>Mask input is not complete.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxInsertKeyModeDescr">
            <summary>Indicates the masked text box input character typing mode.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxInvalidCharError">
            <summary>Specified character value is not allowed for this property.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxIsOverwriteModeChangedDescr">
            <summary>Occurs when the value of IsOverwriteMode property changes.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxMaskChangedDescr">
            <summary>Occurs when the value of Mask property changes.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxMaskDescr">
            <summary>Sets the string governing the input allowed for this control.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxMaskInputRejectedDescr">
            <summary>Occurs when the input character or text does not comply with the mask specification.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxMaskInvalidChar">
            <summary>Specified mask contains characters that are not valid.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxPasswordAndPromptCharError">
            <summary>PasswordChar and PromptChar values cannot be the same.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxPasswordCharDescr">
            <summary>Indicates the character to display for password input.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxPromptCharDescr">
            <summary>Indicates the character used as the placeholder.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxRejectInputOnFirstFailureDescr">
            <summary>If true, the input text is rejected whenever a character fails to comply with the mask; otherwise, characters in the text are processed one by one as individual inputs.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxResetOnPrompt">
            <summary>Specifies whether to reset and skip the current position if editable, when the input character has the same value as the prompt.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxResetOnSpace">
            <summary>Specifies whether to reset and skip the current position if editable, when the input is the space character.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxSkipLiterals">
            <summary>Specifies whether to skip the current position if non-editable and the input character has the same value as the literal at that position.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxTextMaskFormat">
            <summary>Indicates whether the string returned from the Text property includes literals and/or prompt characters.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxTypeValidationCompletedDescr">
            <summary>Occurs when the ValidatingType object has completed parsing the input text.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxTypeValidationSucceeded">
            <summary>Type validation succeeded.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxUseSystemPasswordCharDescr">
            <summary>Indicates if the text in the edit control should appear as the default password character.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxValidatedValueChangedDescr">
            <summary>Occurs when the ValidatedValue changes after type validation has been completed.</summary>
        </member>
        <member name="P:System.SR.MaskedTextBoxValidatingTypeDescr">
            <summary>Specifies the Type of the object to be used for parsing the input text when the control looses focus.</summary>
        </member>
        <member name="P:System.SR.MDIChildAddToNonMDIParent">
            <summary>MDI child forms can be added only to an MdiClient.</summary>
        </member>
        <member name="P:System.SR.MDIContainerMustBeTopLevel">
            <summary>MDI container forms must be top-level.</summary>
        </member>
        <member name="P:System.SR.MDIMenuMoreWindows">
            <summary>&amp;More Windows...</summary>
        </member>
        <member name="P:System.SR.MDIParentNotContainer">
            <summary>Form that was specified to be the MdiParent for this form is not an MdiContainer.</summary>
        </member>
        <member name="P:System.SR.measureItemEventDescr">
            <summary>Occurs whenever a particular item's height needs to be calculated.</summary>
        </member>
        <member name="P:System.SR.MenuItemShortCutDescr">
            <summary>The shortcut key associated with the menu item.</summary>
        </member>
        <member name="P:System.SR.MenuItemShowShortCutDescr">
            <summary>Indicates whether the shorcut key for the menu item is displayed on the item.</summary>
        </member>
        <member name="P:System.SR.MenuStripMdiWindowListItem">
            <summary>Specifies the item whose DropDown will show the list of MDI windows.</summary>
        </member>
        <member name="P:System.SR.MenuStripMenuActivateDescr">
            <summary>Occurs when the user has started accessing the menu through the keyboard or mouse.</summary>
        </member>
        <member name="P:System.SR.MenuStripMenuDeactivateDescr">
            <summary>Occurs when the user has finished accessing the menu through the keyboard or mouse.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarAnnuallyBoldedDatesDescr">
            <summary>Indicates which annual dates should be boldface.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarBodyAccessibleName">
            <summary>Calendar body</summary>
        </member>
        <member name="P:System.SR.MonthCalendarDimensionsDescr">
            <summary>The number of rows and columns of months in a month calendar.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarFirstDayOfWeekDescr">
            <summary>The first day of the week.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarForeColorDescr">
            <summary>The color used to display text within a month.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarInvalidDimensions">
            <summary>Calendar dimensions ({0}, {1}) are not valid.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarMaxDateDescr">
            <summary>The maximum date that can be selected for a month calendar control.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarMaxSelCount">
            <summary>Unable to set the MonthCalendar maximum selection count to {0}.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarMaxSelectionCountDescr">
            <summary>The total number of days that can be selected for the control.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarMinDateDescr">
            <summary>The minimum date that can be selected for a month calendar control.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarMonthBackColorDescr">
            <summary>The background color displayed within the month.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarMonthlyBoldedDatesDescr">
            <summary>Indicates which monthly dates to bold.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarNextButtonAccessibleName">
            <summary>Next</summary>
        </member>
        <member name="P:System.SR.MonthCalendarOnDateChangedDescr">
            <summary>Occurs when the range of dates changes due to user selection, or through next/previous month navigation.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarOnDateSelectedDescr">
            <summary>Occurs when the user selects a date or a range of dates.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarPreviousButtonAccessibleName">
            <summary>Previous</summary>
        </member>
        <member name="P:System.SR.MonthCalendarRange">
            <summary>Unable to set the MonthCalendar range from {0} to {1}.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarScrollChangeDescr">
            <summary>The number of months that a single click on a next/previous button moves the display by.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarSelectionEndDescr">
            <summary>The end date in a range of dates selected in a month calendar control.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarSelectionRangeDescr">
            <summary>The range of dates selected in a month calendar control.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarSelectionStartDescr">
            <summary>The start date in a range of dates selected in a month calendar control.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarShowTodayCircleDescr">
            <summary>Indicates whether the month calendar control will circle the \"today\" date.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarShowTodayDescr">
            <summary>Indicates whether the month calendar control will display the \"today\" date at the bottom of the control.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarShowWeekNumbersDescr">
            <summary>Indicates whether the month calendar control will display week numbers (1 to 52) to the left of each row of days.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarSingleMonthSizeDescr">
            <summary>The minimum size required to display a full month.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarTitleBackColorDescr">
            <summary>The background color displayed in the calendar's title.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarTitleForeColorDescr">
            <summary>The color used to display text within the calendar's title.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarTodayButtonAccessibleName">
            <summary>Today: {0}</summary>
        </member>
        <member name="P:System.SR.MonthCalendarTodayDateDescr">
            <summary>The current day.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarTodayDateSetDescr">
            <summary>Indicates if the current day has been set.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarTrailingForeColorDescr">
            <summary>The color used to display the previous and following months that appear on the month calendar.</summary>
        </member>
        <member name="P:System.SR.NoAllowNewOnReadOnlyList">
            <summary>AllowNew can only be set to true on an IBindingList or on a read-write list with a default public constructor.</summary>
        </member>
        <member name="P:System.SR.NoAllowRemoveOnReadOnlyList">
            <summary>AllowRemove can only be set to true on an IBindingList or on a read-write list.</summary>
        </member>
        <member name="P:System.SR.NoDefaultConstructor">
            <summary>Type '{0}' must have a public constructor, without parameters, to be serialized.</summary>
        </member>
        <member name="P:System.SR.NoMoreColumns">
            <summary>There are no more columns in the table. Use NextRow() to start printing on the next row.</summary>
        </member>
        <member name="P:System.SR.NonTopLevelCantHaveOwner">
            <summary>Only top-level controls can have an owner.</summary>
        </member>
        <member name="P:System.SR.NotAvailable">
            <summary>n/a</summary>
        </member>
        <member name="P:System.SR.NotifyIconBalloonTipIconDescr">
            <summary>The icon to associate with the balloon ToolTip.</summary>
        </member>
        <member name="P:System.SR.NotifyIconBalloonTipTextDescr">
            <summary>The text to associate with the balloon ToolTip.</summary>
        </member>
        <member name="P:System.SR.NotifyIconBalloonTipTitleDescr">
            <summary>The title of the balloon ToolTip.</summary>
        </member>
        <member name="P:System.SR.NotifyIconEmptyOrNullTipText">
            <summary>Balloon tip text must have a non-empty value.</summary>
        </member>
        <member name="P:System.SR.NotifyIconIconDescr">
            <summary>The icon to display in the system tray.</summary>
        </member>
        <member name="P:System.SR.NotifyIconMenuDescr">
            <summary>The shortcut menu to show when the user right-clicks the icon.</summary>
        </member>
        <member name="P:System.SR.NotifyIconMouseClickDescr">
            <summary>Occurs when the component is clicked with the mouse.</summary>
        </member>
        <member name="P:System.SR.NotifyIconMouseDoubleClickDescr">
            <summary>Occurs when the component is double-clicked with the mouse.</summary>
        </member>
        <member name="P:System.SR.NotifyIconOnBalloonTipClickedDescr">
            <summary>Occurs when a balloon ToolTip is clicked.</summary>
        </member>
        <member name="P:System.SR.NotifyIconOnBalloonTipClosedDescr">
            <summary>Occurs when a balloon ToolTip is closed.</summary>
        </member>
        <member name="P:System.SR.NotifyIconOnBalloonTipShownDescr">
            <summary>Occurs when a balloon tip is shown.</summary>
        </member>
        <member name="P:System.SR.NotifyIconTextDescr">
            <summary>The text that will be displayed when the mouse hovers over the icon.</summary>
        </member>
        <member name="P:System.SR.NotifyIconVisDescr">
            <summary>Determines whether the control is visible or hidden.</summary>
        </member>
        <member name="P:System.SR.NotSerializableType">
            <summary>Item named '{0}' of type '{1}' cannot be added to the resource file because it is not serializable.</summary>
        </member>
        <member name="P:System.SR.NotSupported">
            <summary>The type {0} on line {1}, position {2} threw the following exception while being converted: {3}</summary>
        </member>
        <member name="P:System.SR.NumericUpDownAccelerationCollectionAtLeastOneEntryIsNull">
            <summary>At least one of the NumericUpDownAcceleration elements is null.</summary>
        </member>
        <member name="P:System.SR.NumericUpDownAccelerationCompareException">
            <summary>Argument is null or is not a NumericUpDownAcceleration object.</summary>
        </member>
        <member name="P:System.SR.NumericUpDownDecimalPlacesDescr">
            <summary>Indicates the number of decimal places to display.</summary>
        </member>
        <member name="P:System.SR.NumericUpDownHexadecimalDescr">
            <summary>Indicates whether the numeric up-down should display its value in hexadecimal.</summary>
        </member>
        <member name="P:System.SR.NumericUpDownIncrementDescr">
            <summary>Indicates the amount to increment or decrement on each button click.</summary>
        </member>
        <member name="P:System.SR.NumericUpDownLessThanZeroError">
            <summary>Parameter value must be greater than or equal to 0.</summary>
        </member>
        <member name="P:System.SR.NumericUpDownMaximumDescr">
            <summary>Indicates the maximum value for the numeric up-down control.</summary>
        </member>
        <member name="P:System.SR.NumericUpDownMinimumDescr">
            <summary>Indicates the minimum value for the numeric up-down control.</summary>
        </member>
        <member name="P:System.SR.NumericUpDownOnValueChangedDescr">
            <summary>Occurs when the value in the up-down control changes.</summary>
        </member>
        <member name="P:System.SR.NumericUpDownThousandsSeparatorDescr">
            <summary>Indicates whether the thousands separator will be inserted between every three decimal digits.</summary>
        </member>
        <member name="P:System.SR.NumericUpDownValueDescr">
            <summary>The current value of the numeric up-down control.</summary>
        </member>
        <member name="P:System.SR.ObjectDisposed">
            <summary>Disposed '{0}' can no longer be used.</summary>
        </member>
        <member name="P:System.SR.ObjectHasParent">
            <summary>Object already has a parent.</summary>
        </member>
        <member name="P:System.SR.OFDcheckFileExistsDescr">
            <summary>Indicates whether a warning appears when the user specifies a file that does not exist.</summary>
        </member>
        <member name="P:System.SR.OFDmultiSelectDescr">
            <summary>Controls whether multiple files can be selected in the dialog.</summary>
        </member>
        <member name="P:System.SR.OFDreadOnlyCheckedDescr">
            <summary>The state of the read-only check box in the dialog.</summary>
        </member>
        <member name="P:System.SR.OFDshowReadOnlyDescr">
            <summary>Controls whether to show the read-only check box in the dialog.</summary>
        </member>
        <member name="P:System.SR.OKCaption">
            <summary>OK</summary>
        </member>
        <member name="P:System.SR.OnlyOneControl">
            <summary>Cannot add or insert the item '{0}' in more than one place. You must first remove it from its current location or clone it.</summary>
        </member>
        <member name="P:System.SR.OperationRequiresIBindingList">
            <summary>This operation requires an IBindingList.</summary>
        </member>
        <member name="P:System.SR.OperationRequiresIBindingListView">
            <summary>This operation requires an IBindingListView.</summary>
        </member>
        <member name="P:System.SR.OutOfMemory">
            <summary>Cannot allocate needed memory.</summary>
        </member>
        <member name="P:System.SR.OwnsSelfOrOwner">
            <summary>Form {0} tried to set an ineligible form as its owner. Forms cannot own themselves or their owners.</summary>
        </member>
        <member name="P:System.SR.PaddingAllDescr">
            <summary>Number of pixels along all borders to pad docked controls.</summary>
        </member>
        <member name="P:System.SR.PaddingBottomDescr">
            <summary>Number of pixels along the bottom border to pad docked controls.</summary>
        </member>
        <member name="P:System.SR.PaddingLeftDescr">
            <summary>Number of pixels along the left border to pad docked controls.</summary>
        </member>
        <member name="P:System.SR.PaddingRightDescr">
            <summary>Number of pixels along the right border to pad docked controls.</summary>
        </member>
        <member name="P:System.SR.PaddingTopDescr">
            <summary>Number of pixels along the top border to pad docked controls.</summary>
        </member>
        <member name="P:System.SR.PanelBorderStyleDescr">
            <summary>Indicates whether the panel should have a border.</summary>
        </member>
        <member name="P:System.SR.PBRSDocCommentPaneTitle">
            <summary>Description</summary>
        </member>
        <member name="P:System.SR.PBRSErrorInvalidPropertyValue">
            <summary>Property value is not valid.</summary>
        </member>
        <member name="P:System.SR.PBRSErrorTitle">
            <summary>Properties Window</summary>
        </member>
        <member name="P:System.SR.PBRSFormatExceptionMessage">
            <summary>Drop-down list option is not valid.</summary>
        </member>
        <member name="P:System.SR.PBRSToolTipAlphabetic">
            <summary>Alphabetical</summary>
        </member>
        <member name="P:System.SR.PBRSToolTipCategorized">
            <summary>Categorized</summary>
        </member>
        <member name="P:System.SR.PBRSToolTipEvents">
            <summary>Events</summary>
        </member>
        <member name="P:System.SR.PBRSToolTipProperties">
            <summary>Properties</summary>
        </member>
        <member name="P:System.SR.PBRSToolTipPropertyPages">
            <summary>Property Pages</summary>
        </member>
        <member name="P:System.SR.PDallowCurrentPageDescr">
            <summary>Enables and disables the Current Page option button.</summary>
        </member>
        <member name="P:System.SR.PDallowPagesDescr">
            <summary>Enables and disables the Pages option button.</summary>
        </member>
        <member name="P:System.SR.PDallowPrintToFileDescr">
            <summary>Enables and disables the Print To File check box.</summary>
        </member>
        <member name="P:System.SR.PDallowSelectionDescr">
            <summary>Enables and disables the Selection option button.</summary>
        </member>
        <member name="P:System.SR.PDcantShowWithoutPrinter">
            <summary>PrintDialog needs a PrinterSettings object to display. Set PrintDialog.Document (preferred) or PrintDialog.PrinterSettings.</summary>
        </member>
        <member name="P:System.SR.PDdocumentDescr">
            <summary>The PrintDocument to get printer settings from.</summary>
        </member>
        <member name="P:System.SR.PDpageOutOfRange">
            <summary>Value {0} is out of range.</summary>
        </member>
        <member name="P:System.SR.PDprinterSettingsDescr">
            <summary>The PrinterSettings to use.</summary>
        </member>
        <member name="P:System.SR.PDprintToFileDescr">
            <summary>Determines whether the Print To File check box is selected.</summary>
        </member>
        <member name="P:System.SR.PDshowHelpDescr">
            <summary>Controls whether the Help button is displayed.</summary>
        </member>
        <member name="P:System.SR.PDshowNetworkDescr">
            <summary>Controls whether the Network button is displayed.</summary>
        </member>
        <member name="P:System.SR.PDuseEXDialog">
            <summary>Gets or sets a value indicating whether the print dialog box in the Windows XP style should be shown for systems running Windows XP and later.</summary>
        </member>
        <member name="P:System.SR.PictureBoxBorderStyleDescr">
            <summary>Controls what type of border the PictureBox should have.</summary>
        </member>
        <member name="P:System.SR.PictureBoxCancelAsyncDescr">
            <summary>Attempts to cancel any current image-loading operation.</summary>
        </member>
        <member name="P:System.SR.PictureBoxErrorImageDescr">
            <summary>Image to display when the load of another image fails.</summary>
        </member>
        <member name="P:System.SR.PictureBoxImageDescr">
            <summary>The image displayed in the PictureBox.</summary>
        </member>
        <member name="P:System.SR.PictureBoxImageLocationDescr">
            <summary>Disk or Web location to load image from.</summary>
        </member>
        <member name="P:System.SR.PictureBoxInitialImageDescr">
            <summary>Image to display while another image is loading.</summary>
        </member>
        <member name="P:System.SR.PictureBoxLoad0Descr">
            <summary>Loads the image from the location specified in ImageLocation.</summary>
        </member>
        <member name="P:System.SR.PictureBoxLoad1Descr">
            <summary>Loads the image from the provided location.</summary>
        </member>
        <member name="P:System.SR.PictureBoxLoadAsync0Descr">
            <summary>Initiates asynchronous loading of the image from the location specified in ImageLocation.</summary>
        </member>
        <member name="P:System.SR.PictureBoxLoadAsync1Descr">
            <summary>Initiates asynchronous loading of the image from the provided location.</summary>
        </member>
        <member name="P:System.SR.PictureBoxLoadCompletedDescr">
            <summary>Event raised when loading into a PictureBox finishes.</summary>
        </member>
        <member name="P:System.SR.PictureBoxLoadProgressChangedDescr">
            <summary>Event raised when progress is reported during loading into a PictureBox.</summary>
        </member>
        <member name="P:System.SR.PictureBoxLoadProgressDescr">
            <summary>Indicates the progress of the background download task.</summary>
        </member>
        <member name="P:System.SR.PictureBoxNoImageLocation">
            <summary>ImageLocation must be set.</summary>
        </member>
        <member name="P:System.SR.PictureBoxOnSizeModeChangedDescr">
            <summary>Event raised when the value of the SizeMode property is changed on the PictureBox.</summary>
        </member>
        <member name="P:System.SR.PictureBoxSizeModeDescr">
            <summary>Controls how the PictureBox will handle image placement and control sizing.</summary>
        </member>
        <member name="P:System.SR.PictureBoxWaitOnLoadDescr">
            <summary>Controls whether processing will stop until the image is loaded.</summary>
        </member>
        <member name="P:System.SR.PopupControlBadParentArgument">
            <summary>Cannot set the ParentPopup to be yourself.</summary>
        </member>
        <member name="P:System.SR.PreviewKeyDownDescr">
            <summary>Occurs before the KeyDown event when a key is pressed while focus is on this control.</summary>
        </member>
        <member name="P:System.SR.PrintControllerWithStatusDialog_Cancel">
            <summary>Cancel</summary>
        </member>
        <member name="P:System.SR.PrintControllerWithStatusDialog_Canceling">
            <summary>Canceling Print...</summary>
        </member>
        <member name="P:System.SR.PrintControllerWithStatusDialog_DialogTitlePreview">
            <summary>Generating Previews</summary>
        </member>
        <member name="P:System.SR.PrintControllerWithStatusDialog_DialogTitlePrint">
            <summary>Printing</summary>
        </member>
        <member name="P:System.SR.PrintControllerWithStatusDialog_NowPrinting">
            <summary>Page {0} of {1}</summary>
        </member>
        <member name="P:System.SR.PrintPreviewAntiAliasDescr">
            <summary>Controls if the print preview will be rendered with anti-aliasing. Using AntiAlias provides a more accurate display of the document, but it is slower.</summary>
        </member>
        <member name="P:System.SR.PrintPreviewAutoZoomDescr">
            <summary>Determines whether to automatically adjust zoom to fill available space.</summary>
        </member>
        <member name="P:System.SR.PrintPreviewColumnsDescr">
            <summary>Number of pages across.</summary>
        </member>
        <member name="P:System.SR.PrintPreviewControlZoomNegative">
            <summary>Zoom must be 0 or greater. Negative values are not permitted.</summary>
        </member>
        <member name="P:System.SR.PrintPreviewDialog_PrintPreview">
            <summary>Print preview</summary>
        </member>
        <member name="P:System.SR.PrintPreviewDocumentDescr">
            <summary>PrintDocument to be previewed.</summary>
        </member>
        <member name="P:System.SR.PrintPreviewExceptionPrinting">
            <summary>Document cannot be displayed.</summary>
        </member>
        <member name="P:System.SR.PrintPreviewNoPages">
            <summary>Document does not contain any pages.</summary>
        </member>
        <member name="P:System.SR.PrintPreviewPrintPreviewControlDescr">
            <summary>PrintPreviewControl to use as the dialog's core.</summary>
        </member>
        <member name="P:System.SR.PrintPreviewRowsDescr">
            <summary>The number of pages displayed vertically down the screen.</summary>
        </member>
        <member name="P:System.SR.PrintPreviewStartPageDescr">
            <summary>Indicates the page number to start previewing.</summary>
        </member>
        <member name="P:System.SR.PrintPreviewZoomDescr">
            <summary>Indicates how large the pages will appear.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsButtonCheckedGradientBeginDescr">
            <summary>Starting color of the gradient used when the button is checked.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsButtonCheckedGradientEndDescr">
            <summary>End color of the gradient used when the button is checked.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsButtonCheckedGradientMiddleDescr">
            <summary>Middle color of the gradient used when the button is checked.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsButtonCheckedHighlightBorderDescr">
            <summary>Border color to use with ButtonCheckedHighlight.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsButtonCheckedHighlightDescr">
            <summary>Solid color used when the button is checked.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsButtonPressedBorderDescr">
            <summary>Border color to use with the pressed button gradient colors (ButtonPressedGradient*).</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsButtonPressedGradientBeginDescr">
            <summary>Starting color of the gradient used when the button is pressed.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsButtonPressedGradientEndDescr">
            <summary>End color of the gradient used when the button is pressed.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsButtonPressedGradientMiddleDescr">
            <summary>Middle color of the gradient used when the button is pressed.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsButtonPressedHighlightBorderDescr">
            <summary>Border color to use with ButtonPressedHighlight.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsButtonPressedHighlightDescr">
            <summary>Solid color used when the button is pressed.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsButtonSelectedBorderDescr">
            <summary>Border color to use with the selected button gradient colors (ButtonCheckedGradient*).</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsButtonSelectedGradientBeginDescr">
            <summary>Starting color of the gradient used when the button is selected.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsButtonSelectedGradientEndDescr">
            <summary>End color of the gradient used when the button is selected.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsButtonSelectedGradientMiddleDescr">
            <summary>Middle color of the gradient used when the button is selected.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsButtonSelectedHighlightBorderDescr">
            <summary>Border color to use with ButtonSelectedHighlight.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsButtonSelectedHighlightDescr">
            <summary>Solid color used when the button is selected.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsCheckBackgroundDescr">
            <summary>Solid color to use when the button is checked and gradients are being used.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsCheckPressedBackgroundDescr">
            <summary>Solid color to use when the button is checked and selected and gradients are being used.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsCheckSelectedBackgroundDescr">
            <summary>Solid color to use when the button is checked and selected and gradients are being used.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsGripDarkDescr">
            <summary>Color to use to for shadow effects on the grip.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsGripLightDescr">
            <summary>Color to use to for highlight effects on the grip.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsImageMarginGradientBeginDescr">
            <summary>Starting color of the gradient used in the image margin.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsImageMarginGradientEndDescr">
            <summary>End color of the gradient used in the image margin.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsImageMarginGradientMiddleDescr">
            <summary>Middle color of the gradient used in the image margin.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsImageMarginRevealedGradientBeginDescr">
            <summary>Starting color of the gradient used in the image margin when an item is revealed.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsImageMarginRevealedGradientEndDescr">
            <summary>End color of the gradient used in the image margin when an item is revealed.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsImageMarginRevealedGradientMiddleDescr">
            <summary>Middle color of the gradient used in the image margin when an item is revealed.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsMenuBorderDescr">
            <summary>The border color to use around the edge of a drop-down menu.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsMenuItemBorderDescr">
            <summary>The border color to use with MenuItem.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsMenuItemPressedGradientBeginDescr">
            <summary>Starting color of the gradient used when a top level menu item is pressed.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsMenuItemPressedGradientEndDescr">
            <summary>End color of the gradient used when a top level menu item is pressed.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsMenuItemPressedGradientMiddleDescr">
            <summary>Middle color of the gradient used when a top level menu item is pressed.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsMenuItemSelectedDescr">
            <summary>Solid color to use when a non-top level menu item is selected</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsMenuItemSelectedGradientBeginDescr">
            <summary>Starting color of the gradient used when the menu item is selected.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsMenuItemSelectedGradientEndDescr">
            <summary>End color of the gradient used when the menu item is selected.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsMenuStripGradientBeginDescr">
            <summary>Starting color of the gradient used in the MenuStrip.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsMenuStripGradientEndDescr">
            <summary>Middle color of the gradient used in the MenuStrip.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsOverflowButtonGradientBeginDescr">
            <summary>Starting color of the gradient used in the overflow button.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsOverflowButtonGradientEndDescr">
            <summary>End color of the gradient used in the overflow button.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsOverflowButtonGradientMiddleDescr">
            <summary>Middle color of the gradient used in the overflow button.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsRaftingContainerGradientBeginDescr">
            <summary>Starting color of the gradient used in the RaftingContainer.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsRaftingContainerGradientEndDescr">
            <summary>End color of the gradient used in the RaftingContainer.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsSeparatorDarkDescr">
            <summary>Color to use to for shadow effects on the separator.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsSeparatorLightDescr">
            <summary>Color to use to for highlight effects on the separator.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsStatusStripGradientBeginDescr">
            <summary>Starting color of the gradient used in the StatusStrip.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsStatusStripGradientEndDescr">
            <summary>End color of the gradient used in the StatusStrip.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsToolStripBorderDescr">
            <summary>Border color to use on the bottom edge of the ToolStrip.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsToolStripContentPanelGradientBeginDescr">
            <summary>Starting color of the gradient used in the ToolStripContentPanel.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsToolStripContentPanelGradientEndDescr">
            <summary>End color of the gradient used in the ToolStripContentPanel.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsToolStripDropDownBackgroundDescr">
            <summary>Solid background color of the ToolStripDropDown.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsToolStripGradientBeginDescr">
            <summary>Starting color of the gradient used in the ToolStrip background.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsToolStripGradientEndDescr">
            <summary>End color of the gradient used in the ToolStrip background.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsToolStripGradientMiddleDescr">
            <summary>Middle color of the gradient used in the ToolStrip background.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsToolStripPanelGradientBeginDescr">
            <summary>Starting color of the gradient used in the ToolStripPanel.</summary>
        </member>
        <member name="P:System.SR.ProfessionalColorsToolStripPanelGradientEndDescr">
            <summary>End color of the gradient used in the ToolStripPanel.</summary>
        </member>
        <member name="P:System.SR.ProgressBarIncrementMarqueeException">
            <summary>Increment should not be called if the style is Marquee.</summary>
        </member>
        <member name="P:System.SR.ProgressBarMarqueeAnimationSpeed">
            <summary>The speed of the marquee animation in milliseconds.</summary>
        </member>
        <member name="P:System.SR.ProgressBarMaximumDescr">
            <summary>The upper bound of the range this ProgressBar is working with.</summary>
        </member>
        <member name="P:System.SR.ProgressBarMinimumDescr">
            <summary>The lower bound of the range this ProgressBar is working with.</summary>
        </member>
        <member name="P:System.SR.ProgressBarPerformStepMarqueeException">
            <summary>PerformStep should not be called if the style is Marquee.</summary>
        </member>
        <member name="P:System.SR.ProgressBarStepDescr">
            <summary>The amount to increment the current value of the control by when the PerformStep() method is called.</summary>
        </member>
        <member name="P:System.SR.ProgressBarStyleDescr">
            <summary>This property allows the user to set the style of the ProgressBar.</summary>
        </member>
        <member name="P:System.SR.ProgressBarValueDescr">
            <summary>The current value for the ProgressBar, in the range specified by the minimum and maximum properties.</summary>
        </member>
        <member name="P:System.SR.ProgressBarValueMarqueeException">
            <summary>Value must not be set if the style is Marquee.</summary>
        </member>
        <member name="P:System.SR.PropertyCategoryAppearance">
            <summary>Appearance</summary>
        </member>
        <member name="P:System.SR.PropertyCategoryBehavior">
            <summary>Behavior</summary>
        </member>
        <member name="P:System.SR.PropertyCategoryData">
            <summary>Data</summary>
        </member>
        <member name="P:System.SR.PropertyCategoryDDE">
            <summary>DDE</summary>
        </member>
        <member name="P:System.SR.PropertyCategoryFont">
            <summary>Font</summary>
        </member>
        <member name="P:System.SR.PropertyCategoryList">
            <summary>List</summary>
        </member>
        <member name="P:System.SR.PropertyCategoryMisc">
            <summary>Misc</summary>
        </member>
        <member name="P:System.SR.PropertyCategoryPosition">
            <summary>Position</summary>
        </member>
        <member name="P:System.SR.PropertyCategoryScale">
            <summary>Scale</summary>
        </member>
        <member name="P:System.SR.PropertyCategoryText">
            <summary>Text</summary>
        </member>
        <member name="P:System.SR.PropertyGridBadTabIndex">
            <summary>Tab index not valid.</summary>
        </member>
        <member name="P:System.SR.PropertyGridCanShowCommandsDesc">
            <summary>Sets whether the commands window will be displayed for components with commands.</summary>
        </member>
        <member name="P:System.SR.PropertyGridCanShowVisualStyleGlyphsDesc">
            <summary>Sets whether OS-enabled visual style glyphs can be used for the expansion nodes in the grid area.</summary>
        </member>
        <member name="P:System.SR.PropertyGridCategoryForeColorDesc">
            <summary>The text color used for category headings. The background color is determined by the LineColor property.</summary>
        </member>
        <member name="P:System.SR.PropertyGridCategorySplitterColorDesc">
            <summary>The color of the line that separates categories.</summary>
        </member>
        <member name="P:System.SR.PropertyGridCommandsActiveLinkColorDesc">
            <summary>The color of active links in the hot commands region.</summary>
        </member>
        <member name="P:System.SR.PropertyGridCommandsBackColorDesc">
            <summary>The background color of the hot commands region.</summary>
        </member>
        <member name="P:System.SR.PropertyGridCommandsBorderColorDesc">
            <summary>The color of the border surrounding the hot commands region.</summary>
        </member>
        <member name="P:System.SR.PropertyGridCommandsDisabledLinkColorDesc">
            <summary>The color of disabled links in the hot commands region.</summary>
        </member>
        <member name="P:System.SR.PropertyGridCommandsForeColorDesc">
            <summary>The foreground color of the hot commands region.</summary>
        </member>
        <member name="P:System.SR.PropertyGridCommandsLinkColorDesc">
            <summary>The color of enabled links in the hot commands region.</summary>
        </member>
        <member name="P:System.SR.PropertyGridCommandsVisibleIfAvailable">
            <summary>Show the commands pane if the selected object exposes verbs.</summary>
        </member>
        <member name="P:System.SR.PropertyGridDefaultAccessibleName">
            <summary>Properties Window</summary>
        </member>
        <member name="P:System.SR.PropertyGridDefaultAccessibleNameTemplate">
            <summary>{0} Properties Window</summary>
        </member>
        <member name="P:System.SR.PropertyGridDocCommentAccessibleNameTemplate">
            <summary>{0} Description</summary>
        </member>
        <member name="P:System.SR.PropertyGridDisabledItemForeColorDesc">
            <summary>The foreground color of disabled text in the grid area.</summary>
        </member>
        <member name="P:System.SR.PropertyGridDropDownButtonAccessibleName">
            <summary>Browse...</summary>
        </member>
        <member name="P:System.SR.PropertyGridExceptionInfo">
            <summary>Error Information</summary>
        </member>
        <member name="P:System.SR.PropertyGridExceptionWhilePaintingLabel">
            <summary>Exception has occurred while painting the label for property '{0}'. See below for details."</summary>
        </member>
        <member name="P:System.SR.PropertyGridHelpBackColorDesc">
            <summary>The background color of the description pane.</summary>
        </member>
        <member name="P:System.SR.PropertyGridHelpBorderColorDesc">
            <summary>The color of the border surrounding the description pane.</summary>
        </member>
        <member name="P:System.SR.PropertyGridHelpForeColorDesc">
            <summary>The foreground color of the description pane.</summary>
        </member>
        <member name="P:System.SR.PropertyGridHelpVisibleDesc">
            <summary>Sets whether to show the description pane.</summary>
        </member>
        <member name="P:System.SR.PropertyGridSelectedItemWithFocusBackColorDesc">
            <summary>The background color of selected items that have focus.</summary>
        </member>
        <member name="P:System.SR.PropertyGridSelectedItemWithFocusForeColorDesc">
            <summary>The foreground color of selected items that have focus.</summary>
        </member>
        <member name="P:System.SR.PropertyGridInternalNoProp">
            <summary>Get of properties did not succeed.  Log at {0}</summary>
        </member>
        <member name="P:System.SR.PropertyGridInvalidGridEntry">
            <summary>GridItem specified to PropertyGrid.SelectedGridItem must be a valid GridItem.</summary>
        </member>
        <member name="P:System.SR.PropertyGridLargeButtonsDesc">
            <summary>Sets buttons to large (32x32) on the PropertyGrid tool bar.</summary>
        </member>
        <member name="P:System.SR.PropertyGridLineColorDesc">
            <summary>Sets the color of the borders and grid lines within the grid area.</summary>
        </member>
        <member name="P:System.SR.PropertyGridNoBitmap">
            <summary>Tab '{0}' does not have a bitmap.</summary>
        </member>
        <member name="P:System.SR.PropertyGridPropertySortChangedDescr">
            <summary>Occurs when the PropertySort property on the PropertyGrid has changed.</summary>
        </member>
        <member name="P:System.SR.PropertyGridPropertySortDesc">
            <summary>Sets the type of sorting that the PropertyGrid will use to display properties.</summary>
        </member>
        <member name="P:System.SR.PropertyGridPropertyTabchangedDescr">
            <summary>Occurs when a property tab changes.</summary>
        </member>
        <member name="P:System.SR.PropertyGridPropertyTabCollectionReadOnly">
            <summary>PropertyTabCollection is read-only.</summary>
        </member>
        <member name="P:System.SR.PropertyGridPropertyValueChangedDescr">
            <summary>Occurs when a property value changes.</summary>
        </member>
        <member name="P:System.SR.PropertyGridRemotedObject">
            <summary>Object {0} is being remoted by a proxy that does not support interface discovery.  This type of remoted object is not supported.</summary>
        </member>
        <member name="P:System.SR.PropertyGridRemoveStaticTabs">
            <summary>Static tabs cannot be removed from the PropertyGrid.</summary>
        </member>
        <member name="P:System.SR.PropertyGridResetValue">
            <summary>Reset property '{0}'</summary>
        </member>
        <member name="P:System.SR.PropertyGridSelectedGridItemChangedDescr">
            <summary>Occurs when the selected grid item has changed.</summary>
        </member>
        <member name="P:System.SR.PropertyGridSelectedObjectDesc">
            <summary>Sets the currently selected object that the grid will browse.</summary>
        </member>
        <member name="P:System.SR.PropertyGridSelectedObjectsChangedDescr">
            <summary>Occurs when the SelectedObjects property has changed.</summary>
        </member>
        <member name="P:System.SR.PropertyGridSet">
            <summary>'objs' array must have at least {0} members.</summary>
        </member>
        <member name="P:System.SR.PropertyGridSetNull">
            <summary>Item {0} in the 'objs' array is null.  The array must begin with at least {1} members.</summary>
        </member>
        <member name="P:System.SR.PropertyGridSetValue">
            <summary>Set Property '{0}'</summary>
        </member>
        <member name="P:System.SR.PropertyGridTabName">
            <summary>Tab '{0}' must have a valid name.</summary>
        </member>
        <member name="P:System.SR.PropertyGridTabScope">
            <summary>TabScope must be TabScopeEnum.Component or TabScopeEnum.Document</summary>
        </member>
        <member name="P:System.SR.PropertyGridTitle">
            <summary>PropertyGrid</summary>
        </member>
        <member name="P:System.SR.PropertyGridToolbarAccessibleName">
            <summary>PropertyGrid</summary>
        </member>
        <member name="P:System.SR.PropertyGridToolbarVisibleDesc">
            <summary>Sets whether to display the ToolBar at the top of the PropertyGrid.</summary>
        </member>
        <member name="P:System.SR.PropertyGridViewBackColorDesc">
            <summary>Sets the background color of the grid area.</summary>
        </member>
        <member name="P:System.SR.PropertyGridViewBorderColorDesc">
            <summary>The color of the border surrounding the grid area.</summary>
        </member>
        <member name="P:System.SR.PropertyGridViewEditorCreatedInvalidObject">
            <summary>Editor created an object that is not valid.  The created object must be of type '{0}'.</summary>
        </member>
        <member name="P:System.SR.PropertyGridViewForeColorDesc">
            <summary>Sets the foreground color of the grid area.</summary>
        </member>
        <member name="P:System.SR.PropertyManagerPropDoesNotExist">
            <summary>Property {0} does not exist in {1}.</summary>
        </member>
        <member name="P:System.SR.PropertyValueInvalidEntry">
            <summary>One or more entries are not valid in the IDictionary parameter. Verify that all values match up to the object's properties.</summary>
        </member>
        <member name="P:System.SR.PSDallowMarginsDescr">
            <summary>Enables and disables editing of margins.</summary>
        </member>
        <member name="P:System.SR.PSDallowOrientationDescr">
            <summary>Enables and disables the Orientation radio buttons.</summary>
        </member>
        <member name="P:System.SR.PSDallowPaperDescr">
            <summary>Enables and disables editing of paper size.</summary>
        </member>
        <member name="P:System.SR.PSDallowPrinterDescr">
            <summary>Enables and disables Printer button.</summary>
        </member>
        <member name="P:System.SR.PSDcantShowWithoutPage">
            <summary>PageSetupDialog needs a PageSettings object to display. Set PageSetupDialog.Document (preferred), PageSetupDialog.PrinterSettings, or PageSetupDialog.PageSettings.</summary>
        </member>
        <member name="P:System.SR.PSDenableMetricDescr">
            <summary>Gets or sets a value indicating whether the margin settings, when displayed in millimeters, should be automatically converted to and from hundredths of an inch.</summary>
        </member>
        <member name="P:System.SR.PSDminMarginsDescr">
            <summary>The smallest margins the user is allowed to select.</summary>
        </member>
        <member name="P:System.SR.PSDpageSettingsDescr">
            <summary>The PageSettings the dialog box will modify.</summary>
        </member>
        <member name="P:System.SR.PSDprinterSettingsDescr">
            <summary>The PrinterSettings the dialog box will modify when the user clicks the Printer button.</summary>
        </member>
        <member name="P:System.SR.PSDshowHelpDescr">
            <summary>Controls whether the Help button is displayed.</summary>
        </member>
        <member name="P:System.SR.PSDshowNetworkDescr">
            <summary>Controls whether the Network button is displayed.</summary>
        </member>
        <member name="P:System.SR.RadioButtonAppearanceDescr">
            <summary>Controls whether the RadioButton appears as normal or as a Windows PushButton.</summary>
        </member>
        <member name="P:System.SR.RadioButtonAutoCheckDescr">
            <summary>Causes the radio button to automatically change state when clicked.</summary>
        </member>
        <member name="P:System.SR.RadioButtonCheckAlignDescr">
            <summary>Determines the location of the check box inside the control.</summary>
        </member>
        <member name="P:System.SR.RadioButtonCheckedDescr">
            <summary>Indicates whether the radio button is checked or not.</summary>
        </member>
        <member name="P:System.SR.RadioButtonOnAppearanceChangedDescr">
            <summary>Event raised when the value of the Appearance property is changed on RadioButton.</summary>
        </member>
        <member name="P:System.SR.RadioButtonOnCheckedChangedDescr">
            <summary>Occurs whenever the 'checked' property changes value.</summary>
        </member>
        <member name="P:System.SR.RadioButtonOnStartPageChangedDescr">
            <summary>Event raised when the value of the StartPage property is changed on RadioButton.</summary>
        </member>
        <member name="P:System.SR.RadioButtonOnTextAlignChangedDescr">
            <summary>Occurs when the value of the TextAlign property changes</summary>
        </member>
        <member name="P:System.SR.ReadonlyControlsCollection">
            <summary>Collection is read only.</summary>
        </member>
        <member name="P:System.SR.RegisterCFFailed">
            <summary>Clipboard format registration did not succeed.</summary>
        </member>
        <member name="P:System.SR.RelatedListManagerChild">
            <summary>Child list for field {0} cannot be created.</summary>
        </member>
        <member name="P:System.SR.RestartNotSupported">
            <summary>Restart method is not supported for this application type.</summary>
        </member>
        <member name="P:System.SR.ResXResourceWriterSaved">
            <summary>Resource writer has been saved.  You may not edit it.</summary>
        </member>
        <member name="P:System.SR.RichControlLresult">
            <summary>Lresult for the accessibility object cannot be obtained.</summary>
        </member>
        <member name="P:System.SR.RichTextBox_IDCut">
            <summary>Cut</summary>
        </member>
        <member name="P:System.SR.RichTextBox_IDDelete">
            <summary>Delete</summary>
        </member>
        <member name="P:System.SR.RichTextBox_IDDragDrop">
            <summary>Drag and Drop</summary>
        </member>
        <member name="P:System.SR.RichTextBox_IDPaste">
            <summary>Paste</summary>
        </member>
        <member name="P:System.SR.RichTextBox_IDTyping">
            <summary>Typing</summary>
        </member>
        <member name="P:System.SR.RichTextBox_IDUnknown">
            <summary>Unknown</summary>
        </member>
        <member name="P:System.SR.RichTextBoxAutoWordSelection">
            <summary>Turns on/off automatic word selection.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxBulletIndent">
            <summary>Defines the indent for the bullets in the control.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxCanRedoDescr">
            <summary>Indicates if the rich edit control can redo the previous action.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxContentsResized">
            <summary>Occurs when the control's contents are either smaller or larger than the control's window size.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxDetectURLs">
            <summary>Indicates whether URLs are automatically formatted as links.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxEnableAutoDragDrop">
            <summary>Enable drag/drop of text, pictures, and other data</summary>
        </member>
        <member name="P:System.SR.RichTextBoxHScroll">
            <summary>Occurs when the control's horizontal scroll bar is clicked.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxIMEChange">
            <summary>Occurs when the control's IME conversion status changes. (East Asian versions of OS only.)</summary>
        </member>
        <member name="P:System.SR.RichTextBoxLinkClick">
            <summary>Occurs when a hyperlink in the text is clicked.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxProtected">
            <summary>Occurs when the user takes an action that would change a protected range of text.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxRedoActionNameDescr">
            <summary>The name of the action that will be performed if the user redoes a previous action.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxRightMargin">
            <summary>Defines the right margin dimensions.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxRTF">
            <summary>Defines the rich text-formatted contents of the control.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxScrollBars">
            <summary>Defines the behavior of the scroll bars of the control.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxSelAlignment">
            <summary>Defines the alignment of the currently selected text.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxSelBackColor">
            <summary>Sets the text color for the currently selected text.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxSelBullet">
            <summary>Turns on/off the bullets in front of the currently selected text.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxSelChange">
            <summary>Occurs when the current selection has changed.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxSelCharOffset">
            <summary>Defines the superscript/subscript mode for the characters.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxSelColor">
            <summary>Sets the text color for the currently selected text.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxSelFont">
            <summary>Defines the font of the currently selected text.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxSelHangingIndent">
            <summary>Defines the hanging indent of the currently selected text.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxSelIndent">
            <summary>Defines the indent of the currently selected text.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxSelMargin">
            <summary>Turns on/off the selection margin.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxSelProtected">
            <summary>Turns on/off protection around the contents of the currently selected text.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxSelRightIndent">
            <summary>Defines the right-indent of the currently selected text.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxSelRTF">
            <summary>Defines the rich text formatted contents of the currently selected text.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxSelTabs">
            <summary>Defines the locations of tab stops in the currently selected text.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxSelText">
            <summary>Displays the currently selected text in the control.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxSelTypeDescr">
            <summary>The type of selection.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxUndoActionNameDescr">
            <summary>The name of the action that will be performed if the user undoes a previous edit.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxVScroll">
            <summary>Occurs when the control's vertical scroll bar is clicked.</summary>
        </member>
        <member name="P:System.SR.RichTextBoxZoomFactor">
            <summary>Defines the current scaling factor of the RichTextBox display; 1.0 is normal viewing.</summary>
        </member>
        <member name="P:System.SR.RichTextFindEndInvalid">
            <summary>Value '{0}' is not a valid value for 'end'.  'end' must be greater than or equal to 'start', or -1.</summary>
        </member>
        <member name="P:System.SR.RTL">
            <summary>RTL_False</summary>
        </member>
        <member name="P:System.SR.SafeTopLevelCaptionFormat">
            <summary>{1} - {0} - {2}</summary>
        </member>
        <member name="P:System.SR.SaveFileDialogCreatePrompt">
            <summary>Controls whether to prompt the user when a new file is about to be created. It is only applicable if 'ValidateNames' is set to true.</summary>
        </member>
        <member name="P:System.SR.SaveFileDialogOverWritePrompt">
            <summary>Controls whether to prompt the user when an existing file is about to be overwritten. It is only applicable if 'ValidateNames' is set to true.</summary>
        </member>
        <member name="P:System.SR.SaveTextError">
            <summary>Text is not saved.</summary>
        </member>
        <member name="P:System.SR.ScrollableControlHorizontalScrollDescr">
            <summary>Gets the horizontal scroll bar for this ScrollableControl.</summary>
        </member>
        <member name="P:System.SR.ScrollableControlRaiseMouseEnterLeaveEventsForScrollBarsDescr">
            <summary>Property being set to false will not raise MouseEnter and MouseLeave events until the mouse leaves the client area and the scrollbars.</summary>
        </member>
        <member name="P:System.SR.ScrollableControlVerticalScrollDescr">
            <summary>Gets the vertical scroll bar for this ScrollableControl.</summary>
        </member>
        <member name="P:System.SR.ScrollBarEnableDescr">
            <summary>Gets or sets a Boolean value controlling whether the scrollbar is enabled.</summary>
        </member>
        <member name="P:System.SR.ScrollBarLargeChangeDescr">
            <summary>The amount by which the scroll box position changes when the user clicks in the scroll bar or presses the PAGE UP or PAGE DOWN keys.</summary>
        </member>
        <member name="P:System.SR.ScrollBarMaximumDescr">
            <summary>The upper limit value of the scrollable range.</summary>
        </member>
        <member name="P:System.SR.ScrollBarMinimumDescr">
            <summary>The lower limit value of the scrollable range.</summary>
        </member>
        <member name="P:System.SR.ScrollBarOnScrollDescr">
            <summary>Occurs when the user moves the scroll box.</summary>
        </member>
        <member name="P:System.SR.ScrollBarSmallChangeDescr">
            <summary>The amount by which the scroll box position changes when the user clicks a scroll arrow or presses an arrow key.</summary>
        </member>
        <member name="P:System.SR.ScrollBarValueDescr">
            <summary>The value that the scroll box position represents.</summary>
        </member>
        <member name="P:System.SR.ScrollBarVisibleDescr">
            <summary>Gets or sets a Boolean value controlling whether the scrollbar is showing.</summary>
        </member>
        <member name="P:System.SR.selectedIndexChangedEventDescr">
            <summary>Occurs when the value of the SelectedIndex property changes.</summary>
        </member>
        <member name="P:System.SR.selectedIndexDescr">
            <summary>The index of the currently selected item.</summary>
        </member>
        <member name="P:System.SR.SelectedNotEqualActual">
            <summary>Number of selected items does not match actual selected items.</summary>
        </member>
        <member name="P:System.SR.selectionChangeCommittedEventDescr">
            <summary>Occurs when an item is chosen from the drop-down list and the drop-down list is closed.</summary>
        </member>
        <member name="P:System.SR.SelTabCountRange">
            <summary>SelTabCount out of range.</summary>
        </member>
        <member name="P:System.SR.SendKeysGroupDelimError">
            <summary>Group delimiters are not balanced.</summary>
        </member>
        <member name="P:System.SR.SendKeysHookFailed">
            <summary>Hook cannot be created.</summary>
        </member>
        <member name="P:System.SR.SendKeysKeywordDelimError">
            <summary>Keyword delimiter is missing.</summary>
        </member>
        <member name="P:System.SR.SendKeysNestingError">
            <summary>Only three levels of nesting are supported.</summary>
        </member>
        <member name="P:System.SR.SendKeysNoMessageLoop">
            <summary>SendKeys cannot run inside this application because the application is not handling Windows messages.  Either change the application to handle messages, or use the SendKeys.SendWait method.</summary>
        </member>
        <member name="P:System.SR.SerializationException">
            <summary>Type {0} could not be read from the data in line {1}, position {2}.  The type's internal structure may have changed.  Either implement ISerializable on the type or provide a type converter that can provide a more reliable conversion format, such as text or ...</summary>
        </member>
        <member name="P:System.SR.ShowDialogOnDisabled">
            <summary>Forms that are not enabled cannot be displayed as a modal dialog box. Set the form's enabled property to true before calling {0}.</summary>
        </member>
        <member name="P:System.SR.ShowDialogOnModal">
            <summary>Form that is already displayed modally cannot be displayed as a modal dialog box. Close the form before calling {0}.</summary>
        </member>
        <member name="P:System.SR.ShowDialogOnNonTopLevel">
            <summary>Form that is not a top-level form cannot be displayed as a modal dialog box. Remove the form from any parent form before calling {0}.</summary>
        </member>
        <member name="P:System.SR.ShowDialogOnVisible">
            <summary>Form that is already visible cannot be displayed as a modal dialog box. Set the form's visible property to false before calling {0}.</summary>
        </member>
        <member name="P:System.SR.SortRequiresIBindingList">
            <summary>Sorting requires an IBindingList that supports sorting or an IBindingListView that supports advanced sorting.</summary>
        </member>
        <member name="P:System.SR.SplitContainerFixedPanelDescr">
            <summary>Indicates that a particular SplitContainer's Panel should remain fixed in size during resize events.</summary>
        </member>
        <member name="P:System.SR.SplitContainerIsSplitterFixedDescr">
            <summary>Determines if the splitter can move.</summary>
        </member>
        <member name="P:System.SR.SplitContainerOrientationDescr">
            <summary>Determines if the splitter is vertical or horizontal.</summary>
        </member>
        <member name="P:System.SR.SplitContainerPanel1CollapsedDescr">
            <summary>This determines if Panel1 is collapsed.</summary>
        </member>
        <member name="P:System.SR.SplitContainerPanel1Descr">
            <summary>The Left or Top panel in the SplitContainer.</summary>
        </member>
        <member name="P:System.SR.SplitContainerPanel1MinSizeDescr">
            <summary>Determines the minimum distance of pixels of the splitter from the left or the top edge of Panel1.</summary>
        </member>
        <member name="P:System.SR.SplitContainerPanel2CollapsedDescr">
            <summary>This determines if Panel2 is collapsed.</summary>
        </member>
        <member name="P:System.SR.SplitContainerPanel2Descr">
            <summary>The Right or Bottom panel in the SplitContainer.</summary>
        </member>
        <member name="P:System.SR.SplitContainerPanel2MinSizeDescr">
            <summary>Determines the minimum distance of pixels of the splitter from the right or the bottom edge of Panel2.</summary>
        </member>
        <member name="P:System.SR.SplitContainerPanelHeight">
            <summary>The SplitterPanel's height cannot be set explicitly. Set the SplitterDistance on the SplitContainer instead.</summary>
        </member>
        <member name="P:System.SR.SplitContainerPanelWidth">
            <summary>The SplitterPanel's width cannot be set explicitly. Set the SplitterDistance on the SplitContainer instead.</summary>
        </member>
        <member name="P:System.SR.SplitContainerSplitterDistanceDescr">
            <summary>Determines pixel distance of the splitter from the left or top edge.</summary>
        </member>
        <member name="P:System.SR.SplitContainerSplitterIncrementDescr">
            <summary>Determines the number of pixels the splitter moves in increments. Default is 1.</summary>
        </member>
        <member name="P:System.SR.SplitContainerSplitterRectangleDescr">
            <summary>Determines the rectangle bounds of the splitter.</summary>
        </member>
        <member name="P:System.SR.SplitContainerSplitterWidthDescr">
            <summary>Determines the thickness of the splitter.</summary>
        </member>
        <member name="P:System.SR.SplitterBorderStyleDescr">
            <summary>The border type of the control.</summary>
        </member>
        <member name="P:System.SR.SplitterDistanceNotAllowed">
            <summary>SplitterDistance must be between Panel1MinSize and Width - Panel2MinSize.</summary>
        </member>
        <member name="P:System.SR.SplitterInvalidDockEnum">
            <summary>Splitter control must be docked left, right, top, or bottom.</summary>
        </member>
        <member name="P:System.SR.SplitterMinExtraDescr">
            <summary>Specifies the minimum size of the undocked area.</summary>
        </member>
        <member name="P:System.SR.SplitterMinSizeDescr">
            <summary>Specifies the minimum size of the control being resized.</summary>
        </member>
        <member name="P:System.SR.SplitterSplitPositionDescr">
            <summary>The current position of the splitter, or -1 if it is not bound to a control.</summary>
        </member>
        <member name="P:System.SR.SplitterSplitterMovedDescr">
            <summary>Occurs when the splitter is done being moved.</summary>
        </member>
        <member name="P:System.SR.SplitterSplitterMovingDescr">
            <summary>Occurs when the splitter is being moved.</summary>
        </member>
        <member name="P:System.SR.StatusBarAddFailed">
            <summary>Adding the panel to the native status bar control has not succeeded.</summary>
        </member>
        <member name="P:System.SR.StatusBarBadStatusBarPanel">
            <summary>Parameter must be of type StatusBarPanel.</summary>
        </member>
        <member name="P:System.SR.StatusBarDrawItem">
            <summary>Occurs whenever a panel in the StatusBar needs to be painted.</summary>
        </member>
        <member name="P:System.SR.StatusBarOnPanelClickDescr">
            <summary>Occurs when a panel within the status bar is clicked.</summary>
        </member>
        <member name="P:System.SR.StatusBarPanelAlignmentDescr">
            <summary>The alignment of the panel's text.</summary>
        </member>
        <member name="P:System.SR.StatusBarPanelAutoSizeDescr">
            <summary>Determines how a panel will resize when the parent changes size.</summary>
        </member>
        <member name="P:System.SR.StatusBarPanelBorderStyleDescr">
            <summary>Determines what type of border a panel has.</summary>
        </member>
        <member name="P:System.SR.StatusBarPanelIconDescr">
            <summary>Determines what icon is displayed in the panel.</summary>
        </member>
        <member name="P:System.SR.StatusBarPanelMinWidthDescr">
            <summary>The minimum width of the panel.</summary>
        </member>
        <member name="P:System.SR.StatusBarPanelNameDescr">
            <summary>The name of the panel.</summary>
        </member>
        <member name="P:System.SR.StatusBarPanelsDescr">
            <summary>The panels in the status bar.</summary>
        </member>
        <member name="P:System.SR.StatusBarPanelStyleDescr">
            <summary>The style of the panel.</summary>
        </member>
        <member name="P:System.SR.StatusBarPanelTextDescr">
            <summary>The text displayed in the panel.</summary>
        </member>
        <member name="P:System.SR.StatusBarPanelToolTipTextDescr">
            <summary>The panel's ToolTip text.</summary>
        </member>
        <member name="P:System.SR.StatusBarPanelWidthDescr">
            <summary>The width of the panel.</summary>
        </member>
        <member name="P:System.SR.StatusBarShowPanelsDescr">
            <summary>Determines if a status bar displays panels, or if it displays a single line of text.</summary>
        </member>
        <member name="P:System.SR.StatusBarSizingGripDescr">
            <summary>Determines whether a status bar has a sizing grip.</summary>
        </member>
        <member name="P:System.SR.StatusStripPanelBorderSidesDescr">
            <summary>Specifies the sides of the panel that should display borders.</summary>
        </member>
        <member name="P:System.SR.StatusStripPanelBorderStyleDescr">
            <summary>Specifies the border style for the panel.</summary>
        </member>
        <member name="P:System.SR.StatusStripSizingGripDescr">
            <summary>Determines whether a StatusStrip has a sizing grip.</summary>
        </member>
        <member name="P:System.SR.SystemInformationFeatureNotSupported">
            <summary>Feature not supported with this operating system.</summary>
        </member>
        <member name="P:System.SR.TabBaseAlignmentDescr">
            <summary>Determines whether the tabs appear on the top, bottom, left, or right side of the Control (left or right are implicitly multilined).</summary>
        </member>
        <member name="P:System.SR.TabBaseAppearanceDescr">
            <summary>Indicates whether the tabs are painted as buttons or regular tabs.</summary>
        </member>
        <member name="P:System.SR.TabBaseDrawModeDescr">
            <summary>Indicates whether the user or the system paints the captions.</summary>
        </member>
        <member name="P:System.SR.TabBaseHotTrackDescr">
            <summary>Indicates whether the tabs visually change when the mouse passes over them.</summary>
        </member>
        <member name="P:System.SR.TabBaseImageListDescr">
            <summary>The ImageList object from which this tab takes its images.</summary>
        </member>
        <member name="P:System.SR.TabBaseItemSizeDescr">
            <summary>Determines the width of fixed-width or owner-draw tabs and the height of all tabs.</summary>
        </member>
        <member name="P:System.SR.TabBaseMultilineDescr">
            <summary>Indicates if more than one row of tabs is allowed.</summary>
        </member>
        <member name="P:System.SR.TabBasePaddingDescr">
            <summary>Indicates how much extra space should be added around the text/image in the tab.</summary>
        </member>
        <member name="P:System.SR.TabBaseRowCountDescr">
            <summary>The number of rows currently being displayed in the tab strip.</summary>
        </member>
        <member name="P:System.SR.TabBaseShowToolTipsDescr">
            <summary>Indicates whether ToolTips should be shown for tabs that have their ToolTips set.</summary>
        </member>
        <member name="P:System.SR.TabBaseSizeModeDescr">
            <summary>Indicates how tabs are sized.</summary>
        </member>
        <member name="P:System.SR.TabBaseTabCountDescr">
            <summary>The number of tabs in the tab strip.</summary>
        </member>
        <member name="P:System.SR.TabControlDeselectedEventDescr">
            <summary>Occurs after a tab page is deselected as the topmost tab page.</summary>
        </member>
        <member name="P:System.SR.TabControlDeselectingEventDescr">
            <summary>Occurs when a tab page is being deselected.</summary>
        </member>
        <member name="P:System.SR.TabControlInvalidTabPageType">
            <summary>Cannot add '{0}' to TabControl.  Only TabPages can be directly added to TabControls.</summary>
        </member>
        <member name="P:System.SR.TabControlSelectedEventDescr">
            <summary>Occurs after a tab page is selected as the topmost tab page.</summary>
        </member>
        <member name="P:System.SR.TabControlSelectedTabDescr">
            <summary>The currently selected tab page.</summary>
        </member>
        <member name="P:System.SR.TabControlSelectingEventDescr">
            <summary>Occurs when a tab page is being selected.</summary>
        </member>
        <member name="P:System.SR.TabControlTabPageNotOnTabControl">
            <summary>TabPage cannot be added to a '{0}'.  TabPages can only be added to TabControls.</summary>
        </member>
        <member name="P:System.SR.TabControlTabPageOnTabPage">
            <summary>TabPage cannot be added to another TabPage.  TabPages can only be added to TabControls.</summary>
        </member>
        <member name="P:System.SR.TabControlTabsDescr">
            <summary>The TabPages in the TabControl.</summary>
        </member>
        <member name="P:System.SR.TabItemImageIndexDescr">
            <summary>Identifies the image displayed on the tab.</summary>
        </member>
        <member name="P:System.SR.TabItemToolTipTextDescr">
            <summary>The text that is shown when the mouse hovers over this tab.</summary>
        </member>
        <member name="P:System.SR.TabItemUseVisualStyleBackColorDescr">
            <summary>Determines if the background is drawn using visual styles, if supported.</summary>
        </member>
        <member name="P:System.SR.TableBeginMustBeCalledPrior">
            <summary>TableBegin() must be called before using this method.</summary>
        </member>
        <member name="P:System.SR.TableBeginNotCalled">
            <summary>No table is currently being printing.  TableBegin() has not been called.</summary>
        </member>
        <member name="P:System.SR.TableLayoutPanelCellBorderStyleDescr">
            <summary>Indicates the appearance of cell borders in a table.</summary>
        </member>
        <member name="P:System.SR.TableLayoutPanelFullDesc">
            <summary>Additional Rows or Columns cannot be created.  TableLayoutPanel is full and GrowStyle is 'FixedSize'.</summary>
        </member>
        <member name="P:System.SR.TableLayoutPanelGrowStyleDescr">
            <summary>Indicates whether a TableLayoutPanel will expand to include new cells when all existing cells are occupied.</summary>
        </member>
        <member name="P:System.SR.TableLayoutPanelOnPaintCellDescr">
            <summary>Occurs when a cell needs repainting.</summary>
        </member>
        <member name="P:System.SR.TableLayoutPanelSpanDesc">
            <summary>TableLayoutPanel cannot expand to contain the control, because the panel's GrowStyle property is set to 'FixedSize'.</summary>
        </member>
        <member name="P:System.SR.TableLayoutSettingSettingsIsNotSupported">
            <summary>Directly setting TableLayoutSettings is not supported.  Use individual properties instead.</summary>
        </member>
        <member name="P:System.SR.TableLayoutSettingsGetCellPositionDescr">
            <summary>Indicates the row and column of the cell.</summary>
        </member>
        <member name="P:System.SR.TableLayoutSettingsSetCellPositionDescr">
            <summary>Sets the row and column of the cell.</summary>
        </member>
        <member name="P:System.SR.TablePrintLayoutFromDifferentDocument">
            <summary>TablePrintLayout instance specified was constructed for a different document.</summary>
        </member>
        <member name="P:System.SR.TextBoxAcceptsReturnDescr">
            <summary>Indicates if return characters are accepted as input for multiline edit controls.</summary>
        </member>
        <member name="P:System.SR.TextBoxAcceptsTabDescr">
            <summary>Indicates if tab characters are accepted as input for multiline edit controls.</summary>
        </member>
        <member name="P:System.SR.TextBoxAutoCompleteCustomSourceDescr">
            <summary>The StringCollection to use when the AutoCompleteSource property is set to CustomSource.</summary>
        </member>
        <member name="P:System.SR.TextBoxAutoCompleteModeDescr">
            <summary>Indicates the text completion behavior of the text box.</summary>
        </member>
        <member name="P:System.SR.TextBoxAutoCompleteSourceDescr">
            <summary>The autocomplete source, which can be one of the values from AutoCompleteSource enumeration.</summary>
        </member>
        <member name="P:System.SR.TextBoxAutoCompleteSourceNoItems">
            <summary>The value AutoCompleteSource.ListItems is not applicable to the TextBox control.</summary>
        </member>
        <member name="P:System.SR.TextBoxAutoSizeDescr">
            <summary>Enables automatic resizing based on font size for single-line edit controls.</summary>
        </member>
        <member name="P:System.SR.TextBoxBaseOnAcceptsTabChangedDescr">
            <summary>Occurs when the value of the AcceptsTab property changes.</summary>
        </member>
        <member name="P:System.SR.TextBoxBaseOnAutoSizeChangedDescr">
            <summary>Event raised when the value of the AutoSize property is changed on TextBoxBase.</summary>
        </member>
        <member name="P:System.SR.TextBoxBaseOnBorderStyleChangedDescr">
            <summary>Occurs when the value of the BorderStyle property changes.</summary>
        </member>
        <member name="P:System.SR.TextBoxBaseOnHideSelectionChangedDescr">
            <summary>Occurs when the value of the HideSelection property changes.</summary>
        </member>
        <member name="P:System.SR.TextBoxBaseOnModifiedChangedDescr">
            <summary>Occurs when the value of the Modified property changes.</summary>
        </member>
        <member name="P:System.SR.TextBoxBaseOnMultilineChangedDescr">
            <summary>Occurs when the value of the Multiline property changes.</summary>
        </member>
        <member name="P:System.SR.TextBoxBaseOnReadOnlyChangedDescr">
            <summary>Occurs when the value of the ReadOnly property changes.</summary>
        </member>
        <member name="P:System.SR.TextBoxBorderDescr">
            <summary>Indicates whether the edit control should have a border.</summary>
        </member>
        <member name="P:System.SR.TextBoxCanUndoDescr">
            <summary>Indicates if the edit control can undo the previous action.</summary>
        </member>
        <member name="P:System.SR.TextBoxCharacterCasingDescr">
            <summary>Indicates if all characters should be left alone or converted to uppercase or lowercase.</summary>
        </member>
        <member name="P:System.SR.TextBoxHideSelectionDescr">
            <summary>Indicates that the selection should be hidden when the edit control loses focus.</summary>
        </member>
        <member name="P:System.SR.TextBoxLinesDescr">
            <summary>The lines of text in a multiline edit, as an array of String values.</summary>
        </member>
        <member name="P:System.SR.TextBoxMaxLengthDescr">
            <summary>Specifies the maximum number of characters that can be entered into the edit control.</summary>
        </member>
        <member name="P:System.SR.TextBoxModifiedDescr">
            <summary>Indicates if the text in the edit control has been modified by the user.</summary>
        </member>
        <member name="P:System.SR.TextBoxMultilineDescr">
            <summary>Controls whether the text of the edit control can span more than one line.</summary>
        </member>
        <member name="P:System.SR.TextBoxPasswordCharDescr">
            <summary>Indicates the character to display for password input for single-line edit controls.</summary>
        </member>
        <member name="P:System.SR.TextBoxPreferredHeightDescr">
            <summary>The preferred height of this control.</summary>
        </member>
        <member name="P:System.SR.TextBoxReadOnlyDescr">
            <summary>Controls whether the text in the edit control can be changed or not.</summary>
        </member>
        <member name="P:System.SR.TextBoxScrollBarsDescr">
            <summary>Indicates, for multiline edit controls, which scroll bars will be shown for this control.</summary>
        </member>
        <member name="P:System.SR.TextBoxSelectedTextDescr">
            <summary>The currently selected text.</summary>
        </member>
        <member name="P:System.SR.TextBoxSelectionLengthDescr">
            <summary>The length of the currently selected text.</summary>
        </member>
        <member name="P:System.SR.TextBoxSelectionStartDescr">
            <summary>The beginning of the currently selected text.</summary>
        </member>
        <member name="P:System.SR.TextBoxShortcutsEnabledDescr">
            <summary>Indicates whether shortcuts defined for the control are enabled.</summary>
        </member>
        <member name="P:System.SR.TextBoxTextAlignDescr">
            <summary>Indicates how the text should be aligned for edit controls.</summary>
        </member>
        <member name="P:System.SR.TextBoxUseSystemPasswordCharDescr">
            <summary>Indicates if the text in the edit control should appear as the default password character.</summary>
        </member>
        <member name="P:System.SR.TextBoxWordWrapDescr">
            <summary>Indicates if lines are automatically word-wrapped for multiline edit controls.</summary>
        </member>
        <member name="P:System.SR.TextParseFailedFormat">
            <summary>Parse of Text("{0}") expected text in the format "{1}" did not succeed.</summary>
        </member>
        <member name="P:System.SR.ThreadMustBeSTA">
            <summary>Current thread must be set to single thread apartment (STA) mode before OLE calls can be made. Ensure that your Main function has STAThreadAttribute marked on it.</summary>
        </member>
        <member name="P:System.SR.ThreadNoLongerValid">
            <summary>An error occurred invoking the method.  The destination thread no longer exists.</summary>
        </member>
        <member name="P:System.SR.ThreadNotPumpingMessages">
            <summary>An error occurred invoking the method.  A message loop is required to marshal the thread call.</summary>
        </member>
        <member name="P:System.SR.TimerEnabledDescr">
            <summary>Enables generation of Elapsed events.</summary>
        </member>
        <member name="P:System.SR.TimerIntervalDescr">
            <summary>The frequency of Elapsed events in milliseconds.</summary>
        </member>
        <member name="P:System.SR.TimerInvalidInterval">
            <summary>Value '{0}' is not a valid value for Interval. Interval must be greater than {1}.</summary>
        </member>
        <member name="P:System.SR.TimerTimerDescr">
            <summary>Occurs whenever the specified interval time elapses.</summary>
        </member>
        <member name="P:System.SR.ToolStripAllowItemReorderAndAllowDropCannotBeSetToTrue">
            <summary>AllowItemReorder and AllowDrop cannot both be true.</summary>
        </member>
        <member name="P:System.SR.ToolStripAllowItemReorderDescr">
            <summary>Allows the items to be reordered when the ALT key is pressed.</summary>
        </member>
        <member name="P:System.SR.ToolStripAllowMergeDescr">
            <summary>Allow the items to be merged.</summary>
        </member>
        <member name="P:System.SR.ToolStripBackColorDescr">
            <summary>Specifies the background color of the ToolStrip.</summary>
        </member>
        <member name="P:System.SR.ToolStripButtonCheckedDescr">
            <summary>Indicates whether the ToolStripButton is pressed in or not pressed in.</summary>
        </member>
        <member name="P:System.SR.ToolStripButtonCheckOnClickDescr">
            <summary>Indicates whether the item should toggle its selected state when clicked.</summary>
        </member>
        <member name="P:System.SR.ToolStripCanOnlyPositionItsOwnItems">
            <summary>ToolStrip cannot position another ToolStrip's items.</summary>
        </member>
        <member name="P:System.SR.ToolStripCanOverflowDescr">
            <summary>Indicates whether items can be sent to an overflow menu.</summary>
        </member>
        <member name="P:System.SR.ToolStripCollectionMustInsertAndRemove">
            <summary>You must explicitly insert one item and remove the other.</summary>
        </member>
        <member name="P:System.SR.ToolStripContainerBottomToolStripPanelDescr">
            <summary>The bottom panel of the ToolStripContainer.  This area is used for moving ToolStrips, MenuStrips and StatusStrips.</summary>
        </member>
        <member name="P:System.SR.ToolStripContainerBottomToolStripPanelVisibleDescr">
            <summary>Specifies the visibility of the bottom panel of the ToolStripContainer.</summary>
        </member>
        <member name="P:System.SR.ToolStripContainerContentPanelDescr">
            <summary>The center panel of the ToolStripContainer.</summary>
        </member>
        <member name="P:System.SR.ToolStripContainerDesc">
            <summary>Provides panels on each side of the form that can contain one or more ToolStrip, MenuStrip, or StatusStrip controls.</summary>
        </member>
        <member name="P:System.SR.ToolStripContainerLeftToolStripPanelDescr">
            <summary>The left panel of the ToolStripContainer.  This area is used for moving ToolStrips, MenuStrips and StatusStrips.</summary>
        </member>
        <member name="P:System.SR.ToolStripContainerLeftToolStripPanelVisibleDescr">
            <summary>Specifies the visibility of the left panel of the ToolStripContainer.</summary>
        </member>
        <member name="P:System.SR.ToolStripContainerRightToolStripPanelDescr">
            <summary>The right panel of the ToolStripContainer.  This area is used for moving ToolStrips, MenuStrips and StatusStrips.</summary>
        </member>
        <member name="P:System.SR.ToolStripContainerRightToolStripPanelVisibleDescr">
            <summary>Specifies the visibility of the right panel of the ToolStripContainer.</summary>
        </member>
        <member name="P:System.SR.ToolStripContainerTopToolStripPanelDescr">
            <summary>The top panel of the ToolStripContainer.  This area is used for moving ToolStrips, MenuStrips and StatusStrips.</summary>
        </member>
        <member name="P:System.SR.ToolStripContainerTopToolStripPanelVisibleDescr">
            <summary>Specifies the visibility of the top panel of the ToolStripContainer.</summary>
        </member>
        <member name="P:System.SR.ToolStripContainerUseContentPanel">
            <summary>Adding controls directly to the ToolStripContainer is not supported.  Use the 'ContentPanel.Controls' property instead.</summary>
        </member>
        <member name="P:System.SR.ToolStripContentPanelOnLoadDescr">
            <summary>Occurs whenever the content panel loads.</summary>
        </member>
        <member name="P:System.SR.ToolStripDefaultDropDownDirectionDescr">
            <summary>Specifies the default direction for DropDowns to open.</summary>
        </member>
        <member name="P:System.SR.ToolStripDoesntSupportAutoScroll">
            <summary>ToolStrip doesn't support the AutoScroll property.</summary>
        </member>
        <member name="P:System.SR.ToolStripDropDownAutoCloseDescr">
            <summary>Specifies whether the DropDown automatically closes through user action.</summary>
        </member>
        <member name="P:System.SR.ToolStripDropDownButtonShowDropDownArrowDescr">
            <summary>Specifies whether or not an arrow should be shown on the drop down button.</summary>
        </member>
        <member name="P:System.SR.ToolStripDropDownClosedDecr">
            <summary>Occurs when the DropDown has closed.</summary>
        </member>
        <member name="P:System.SR.ToolStripDropDownClosingDecr">
            <summary>Occurs when the DropDown is about to close.</summary>
        </member>
        <member name="P:System.SR.ToolStripDropDownDescr">
            <summary>Specifies a ToolStripDropDown to show when the item is clicked.</summary>
        </member>
        <member name="P:System.SR.ToolStripDropDownItemDropDownDirectionDescr">
            <summary>Specifies the direction in which to drop the drop down.</summary>
        </member>
        <member name="P:System.SR.ToolStripDropDownItemsDescr">
            <summary>Specifies a ToolStripItem to display when the item is clicked.</summary>
        </member>
        <member name="P:System.SR.ToolStripDropDownMenuShowCheckMarginDescr">
            <summary>Specifies whether the check margin will be shown.</summary>
        </member>
        <member name="P:System.SR.ToolStripDropDownMenuShowImageMarginDescr">
            <summary>Specifies whether the image margin will be shown.</summary>
        </member>
        <member name="P:System.SR.ToolStripDropDownOpenedDescr">
            <summary>Occurs when the DropDown has opened.</summary>
        </member>
        <member name="P:System.SR.ToolStripDropDownOpeningDescr">
            <summary>Occurs when the DropDown is opening.</summary>
        </member>
        <member name="P:System.SR.ToolStripDropDownPreferredWidthDescr">
            <summary>Specifies the PreferredWidth of the ToolStripDropDown when it is shown.</summary>
        </member>
        <member name="P:System.SR.ToolStripGripAccessibleName">
            <summary>Grip</summary>
        </member>
        <member name="P:System.SR.ToolStripDropDownsCantBeRafted">
            <summary>ToolStripDropDown does not support rafting.</summary>
        </member>
        <member name="P:System.SR.ToolStripGripDisplayStyleDescr">
            <summary>Specifies the orientation of the grip on the ToolStrip.</summary>
        </member>
        <member name="P:System.SR.ToolStripGripMargin">
            <summary>Specifies the external spacing between the grip and the padding of the ToolStrip and the displayed item.</summary>
        </member>
        <member name="P:System.SR.ToolStripGripStyleDescr">
            <summary>Specifies visibility of the grip on the ToolStrip.</summary>
        </member>
        <member name="P:System.SR.ToolStripImageListDescr">
            <summary>Specifies the ImageList on the ToolStrip.</summary>
        </member>
        <member name="P:System.SR.ToolStripImageScalingSizeDescr">
            <summary>Specifies the size of images on items.  To control the scaling of items, use the 'ToolStripItem.ImageScaling' property.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemAccessibilityObjectDescr">
            <summary>The AccessibleObject assigned to the control.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemAccessibleDefaultActionDescr">
            <summary>The default action description of the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemAccessibleDescriptionDescr">
            <summary>The description that will be reported to accessibility clients.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemAccessibleNameDescr">
            <summary>The name that will be reported to accessibility clients.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemAccessibleRoleDescr">
            <summary>The role that will be reported to accessibility clients.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemAddedDescr">
            <summary>Occurs when a ToolStripItem has been added to the ToolStrip's item collection.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemAlignment">
            <summary>The alignment of the item with respect to it's owner ToolStrip.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemAlignmentDescr">
            <summary>Indicates whether the item aligns toward the beginning or end of the ToolStrip.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemAllowDropDescr">
            <summary>Determines if the item will receive drag-drop notifications.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemAutoSizeDescr">
            <summary>Determines whether the item should automatically size based on its image and text.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemAutoToolTipDescr">
            <summary>Specifies whether to use the Text or ToolTipText property to display on the ToolTip.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemAvailableDescr">
            <summary>Specifies whether or not an item should be placed on a ToolStrip.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemBackColorDescr">
            <summary>The background color used to display text and graphics in the control.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemCircularReference">
            <summary>Cannot add owner item to the drop-down items collection.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemCollectionIsReadOnly">
            <summary>Collection of ToolStripItems is read-only.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemDisplayStyleDescr">
            <summary>Specifies whether the image and text are rendered.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemDoubleClickedEnabledDescr">
            <summary>Specifies whether the DoubleClick event will occur.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemDrawModeDescr">
            <summary>Specifies the drawing mode of the ToolStrip item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemEnabledChangedDescr">
            <summary>Occurs when the enabled state of the item has changed.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemEnabledDescr">
            <summary>Indicates whether the control is enabled.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemFontDescr">
            <summary>The font used to display text in the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemForeColorDescr">
            <summary>The foreground color used to display text and graphics in the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemImageAlignDescr">
            <summary>The alignment of the image that will be displayed on the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemImageDescr">
            <summary>The image that will be displayed on the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemImageIndexDescr">
            <summary>The index of the image in the ImageList to display on the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemImageKeyDescr">
            <summary>The key representing the image in the ImageList to display on the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemImageList">
            <summary>The ImageList to get the image to display on the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemImageScalingDescr">
            <summary>Specifies whether the image on the item will size to fit on the ToolStrip.  To control the image size, use the 'ToolStrip.ImageScalingSize' property.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemImageTransparentColorDescr">
            <summary>Specifies the transparent color on the item's image for images that support transparency.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemMarginDescr">
            <summary>Specifies the spacing between this item and an adjacent item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnAvailableChangedDescr">
            <summary>Occurs when the value of the Available property changes.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnBackColorChangedDescr">
            <summary>Occurs when the value of the BackColor property is changed on the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnClickDescr">
            <summary>Occurs when the item is clicked.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnDragDropDescr">
            <summary>Occurs when the mouse drags an item and the user releases the mouse indicating that the item should be 'dropped' into this item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnDragEnterDescr">
            <summary>Occurs when the mouse drags an item into the client area for this item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnDragLeaveDescr">
            <summary>Occurs when the mouse drags an item and is no longer over the client area for this item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnDragOverDescr">
            <summary>Occurs when the mouse drags an item over the client area for this item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnForeColorChangedDescr">
            <summary>Occurs when the value of the BackColor property is changed on the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnGiveFeedbackDescr">
            <summary>Occurs when the mouse drags an item. The system requests that the Item provide feedback to that effect.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnGotFocusDescr">
            <summary>Occurs when the control gets focus.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnLocationChangedDescr">
            <summary>Occurs when the location of a ToolStripItem is updated.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnLostFocusDescr">
            <summary>Occurs when the control loses focus.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnMouseDownDescr">
            <summary>Occurs when a mouse button is pressed.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnMouseEnterDescr">
            <summary>Occurs when the mouse enters the visible part of the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnMouseHoverDescr">
            <summary>Occurs when the mouse remains stationary inside of the item for an amount of time.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnMouseLeaveDescr">
            <summary>Occurs when the mouse leaves the visible part of the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnMouseMoveDescr">
            <summary>Occurs when the mouse is moved.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnMouseUpDescr">
            <summary>Occurs when a mouse button is released.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnPaintDescr">
            <summary>Occurs when an item needs repainting.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnQueryAccessibilityHelpDescr">
            <summary>Occurs when an Accessibility client invokes help for the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnQueryContinueDragDescr">
            <summary>Occurs when the mouse drags an item. The system requests whether the drag-and-drop operation should be allowed to continue.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnRightToLeftChangedDescr">
            <summary>Event raised when the value of the RightToLeft property is changed on this item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnTextChangedDescr">
            <summary>Occurs when the Text property is changed on the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOnVisibleChangedDescr">
            <summary>Occurs when the visibility of an item has changed.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOverflow">
            <summary>Specifies whether an item will always be sent to the overflow, never be sent to the overflow, or sent to the overflow as needed.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOverflowDescr">
            <summary>Specifies whether the item will always move to the overflow, move to the overflow as needed, or never move to the overflow.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemOwnerChangedDescr">
            <summary>Occurs when the value of the Owner property changes.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemPaddingDescr">
            <summary>Specifies the internal spacing within this item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemRemovedDescr">
            <summary>Occurs when a ToolStripItem has been removed from the ToolStrip's item collection.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemRightToLeftAutoMirrorImageDescr">
            <summary>Specifies whether the image should mirror when the RightToLeft property equals RightToLeft.Yes.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemRightToLeftDescr">
            <summary>Indicates whether the item should draw right-to-left for RTL languages.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemsDescr">
            <summary>Collection of items to display on the ToolStrip.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemSize">
            <summary>The size of the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemSizeDescr">
            <summary>The size of the item in pixels.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemTagDescr">
            <summary>User-defined data associated with the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemTextAlignDescr">
            <summary>The alignment of the text that will be displayed on the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemTextDescr">
            <summary>The text to display on the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemTextImageRelationDescr">
            <summary>Specifies the relative location of the image to the text on the item.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemToolTipTextDescr">
            <summary>Specifies the text to show on the ToolTip.</summary>
        </member>
        <member name="P:System.SR.ToolStripItemVisibleDescr">
            <summary>Determines whether the item is visible or hidden.</summary>
        </member>
        <member name="P:System.SR.ToolStripLabelActiveLinkColorDescr">
            <summary>Specifies the color of the link when the link is active.</summary>
        </member>
        <member name="P:System.SR.ToolStripLabelIsLinkDescr">
            <summary>Specifies whether the label acts as a link.</summary>
        </member>
        <member name="P:System.SR.ToolStripLabelLinkBehaviorDescr">
            <summary>The underlining behavior of the link.</summary>
        </member>
        <member name="P:System.SR.ToolStripLabelLinkColorDescr">
            <summary>Specifies the color of the link.</summary>
        </member>
        <member name="P:System.SR.ToolStripLabelLinkVisitedDescr">
            <summary>Determines if the hyperlink should be rendered as visited.</summary>
        </member>
        <member name="P:System.SR.ToolStripLabelVisitedLinkColorDescr">
            <summary>Specifies the color of the link when the link has been visited.</summary>
        </member>
        <member name="P:System.SR.ToolStripLayoutCompleteDescr">
            <summary>Occurs after layout and placement of items on the ToolStrip.</summary>
        </member>
        <member name="P:System.SR.ToolStripLayoutStyle">
            <summary>Specifies the layout orientation of the ToolStrip.</summary>
        </member>
        <member name="P:System.SR.ToolStripLayoutStyleChangedDescr">
            <summary>Occurs when the layout style of the ToolStrip has changed.</summary>
        </member>
        <member name="P:System.SR.ToolStripMenuItemShortcutKeyDisplayStringDescr">
            <summary>The string to be displayed as the shortcut key.</summary>
        </member>
        <member name="P:System.SR.ToolStripMergeActionDescr">
            <summary>Specifies what action to take if match is successful.</summary>
        </member>
        <member name="P:System.SR.ToolStripMergeImpossibleIdentical">
            <summary>Operation impossible. Source and target are identical.</summary>
        </member>
        <member name="P:System.SR.ToolStripMergeIndexDescr">
            <summary>Used for matching and positioning within target ToolStrip.</summary>
        </member>
        <member name="P:System.SR.ToolStripMustSupplyItsOwnComboBox">
            <summary>Call the empty ToolStripComboBox constructor, which will provide a ComboBox.</summary>
        </member>
        <member name="P:System.SR.ToolStripMustSupplyItsOwnTextBox">
            <summary>Call the empty ToolStripTextBox constructor, which will provide a TextBox.</summary>
        </member>
        <member name="P:System.SR.ToolStripOnBeginDrag">
            <summary>Occurs when the ToolStrip has started to move within a ToolStripPanel.</summary>
        </member>
        <member name="P:System.SR.ToolStripOnEndDrag">
            <summary>Occurs when the ToolStrip has stopped moving within a ToolStripPanel.</summary>
        </member>
        <member name="P:System.SR.ToolStripOptions">
            <summary>ToolBar Options</summary>
        </member>
        <member name="P:System.SR.ToolStripPaintGripDescr">
            <summary>Occurs when the move handle needs repainting.</summary>
        </member>
        <member name="P:System.SR.ToolStripPanelRowsDescr">
            <summary>A collection of rows in the panel.</summary>
        </member>
        <member name="P:System.SR.ToolStripPanelRowControlCollectionIncorrectIndexLength">
            <summary>Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.</summary>
        </member>
        <member name="P:System.SR.ToolStripRendererChanged">
            <summary>Occurs when the value of the Renderer property changes.</summary>
        </member>
        <member name="P:System.SR.ToolStripRenderModeDescr">
            <summary>The painting styles applied to the control.</summary>
        </member>
        <member name="P:System.SR.ToolStripRenderModeUseRendererPropertyInstead">
            <summary>The RenderMode property cannot directly be set to 'Custom', to use a custom ToolStripRenderer, set the Renderer property instead.</summary>
        </member>
        <member name="P:System.SR.ToolStripSaveSettingsDescr">
            <summary>Specifies whether the ToolStrip should persist user settings via IPersistComponentSettings.</summary>
        </member>
        <member name="P:System.SR.ToolStripSettingsKeyDescr">
            <summary>Specifies the settings key to use to save settings.</summary>
        </member>
        <member name="P:System.SR.ToolStripShowDropDownInvalidOperation">
            <summary>DropDown is the same as the Parent ToolStrip. Cannot Drop Down.</summary>
        </member>
        <member name="P:System.SR.ToolStripShowItemToolTipsDescr">
            <summary>Specifies whether to display ToolTips on items.</summary>
        </member>
        <member name="P:System.SR.ToolStripSplitButtonDropDownButtonWidthDescr">
            <summary>Specifies how much space to give to the DropDownButton portion of the ToolStripSplitButton.</summary>
        </member>
        <member name="P:System.SR.ToolStripSplitButtonOnButtonClickDescr">
            <summary>Occurs when the button portion of the split button has been clicked.</summary>
        </member>
        <member name="P:System.SR.ToolStripSplitButtonOnButtonDoubleClickDescr">
            <summary>Occurs when the button portion of the split button has been double clicked.</summary>
        </member>
        <member name="P:System.SR.ToolStripSplitButtonOnDefaultItemChangedDescr">
            <summary>Occurs when the DefaultItem property has changed.</summary>
        </member>
        <member name="P:System.SR.ToolStripSplitButtonSplitterWidthDescr">
            <summary>Specifies the width of the split section between the default and drop-down button.</summary>
        </member>
        <member name="P:System.SR.ToolStripSplitStackLayoutContainerMustBeAToolStrip">
            <summary>Container must be a ToolStrip.</summary>
        </member>
        <member name="P:System.SR.ToolStripStatusLabelBorderSidesDescr">
            <summary>Specifies the sides of the panel that should display borders.</summary>
        </member>
        <member name="P:System.SR.ToolStripStatusLabelBorderStyleDescr">
            <summary>Specifies the border style for the panel.</summary>
        </member>
        <member name="P:System.SR.ToolStripStatusLabelSpringDescr">
            <summary>Specifies whether the item fills up the remaining space.</summary>
        </member>
        <member name="P:System.SR.ToolStripStretchDescr">
            <summary>Specifies whether the ToolStrip stretches from end to end in the rafting container.</summary>
        </member>
        <member name="P:System.SR.ToolStripTextBoxTextBoxTextAlignChangedDescr">
            <summary>Occurs when the value of the TextBoxTextAlign property changes.</summary>
        </member>
        <member name="P:System.SR.ToolStripTextDirectionDescr">
            <summary>Specifies the direction to draw the text on the item.</summary>
        </member>
        <member name="P:System.SR.ToolTipActiveDescr">
            <summary>Determines if the ToolTip is active. A tip will only appear if the ToolTip has been activated.</summary>
        </member>
        <member name="P:System.SR.ToolTipAddFailed">
            <summary>Adding the tip to the native ToolTip control did not succeed.</summary>
        </member>
        <member name="P:System.SR.ToolTipAutomaticDelayDescr">
            <summary>Sets the values of AutoPopDelay, InitialDelay, and ReshowDelay to the appropriate values.</summary>
        </member>
        <member name="P:System.SR.ToolTipAutoPopDelayDescr">
            <summary>Determines the length of time the ToolTip window remains visible if the pointer is stationary inside a ToolTip region.</summary>
        </member>
        <member name="P:System.SR.ToolTipBackColorDescr">
            <summary>The background color of the ToolTip control.</summary>
        </member>
        <member name="P:System.SR.ToolTipDrawEventDescr">
            <summary>Occurs in OwnerDraw mode when the ToolTip needs to be drawn.</summary>
        </member>
        <member name="P:System.SR.ToolTipEmptyColor">
            <summary>Value '{0}' cannot be set to an empty value.</summary>
        </member>
        <member name="P:System.SR.ToolTipForeColorDescr">
            <summary>The foreground color of the ToolTip control.</summary>
        </member>
        <member name="P:System.SR.ToolTipInitialDelayDescr">
            <summary>Determines the length of time the pointer must remain stationary within a ToolTip region before the ToolTip window appears.</summary>
        </member>
        <member name="P:System.SR.ToolTipIsBalloonDescr">
            <summary>Indicates whether the ToolTip will take on a balloon form.</summary>
        </member>
        <member name="P:System.SR.ToolTipOwnerDrawDescr">
            <summary>Controls whether the system or the user paints items/sub items.</summary>
        </member>
        <member name="P:System.SR.ToolTipPopupEventDescr">
            <summary>Occurs whenever a ToolTip is about to be shown.</summary>
        </member>
        <member name="P:System.SR.ToolTipReshowDelayDescr">
            <summary>Determines the length of time it takes for subsequent ToolTip windows to appear as the pointer moves from one ToolTip region to another.</summary>
        </member>
        <member name="P:System.SR.ToolTipShowAlwaysDescr">
            <summary>Determines if the tool tip will be displayed always, even if the parent window is not active.</summary>
        </member>
        <member name="P:System.SR.ToolTipStripAmpersandsDescr">
            <summary>When set to true, any ampersands (&amp;) in the Text property are not displayed.</summary>
        </member>
        <member name="P:System.SR.ToolTipTitleDescr">
            <summary>Determines the title of the ToolTip.</summary>
        </member>
        <member name="P:System.SR.ToolTipToolTipDescr">
            <summary>Determines the ToolTip shown when the mouse hovers over the control.</summary>
        </member>
        <member name="P:System.SR.ToolTipToolTipIconDescr">
            <summary>Determines the icon that is shown on the ToolTip.</summary>
        </member>
        <member name="P:System.SR.ToolTipUseAnimationDescr">
            <summary>When set to true, animations are used when the ToolTip is shown or hidden.</summary>
        </member>
        <member name="P:System.SR.ToolTipUseFadingDescr">
            <summary>When set to true, a fade effect is used when ToolTips are shown or hidden.</summary>
        </member>
        <member name="P:System.SR.TooManyResumeUpdateMenuHandles">
            <summary>Too many calls to ResumeUpdateMenuHandles.</summary>
        </member>
        <member name="P:System.SR.TopLevelControlAdd">
            <summary>Top-level control cannot be added to a control.</summary>
        </member>
        <member name="P:System.SR.TopLevelNotAllowedIfActiveX">
            <summary>TopLevel property cannot be set to true for ActiveX controls.</summary>
        </member>
        <member name="P:System.SR.TopLevelParentedControl">
            <summary>Top-level style of a parented control cannot be changed.</summary>
        </member>
        <member name="P:System.SR.toStringAlt">
            <summary>Alt</summary>
        </member>
        <member name="P:System.SR.toStringBack">
            <summary>Back</summary>
        </member>
        <member name="P:System.SR.toStringControl">
            <summary>Ctrl</summary>
        </member>
        <member name="P:System.SR.toStringDefault">
            <summary>(default)</summary>
        </member>
        <member name="P:System.SR.toStringDelete">
            <summary>Del</summary>
        </member>
        <member name="P:System.SR.toStringEnd">
            <summary>End</summary>
        </member>
        <member name="P:System.SR.toStringEnter">
            <summary>Enter</summary>
        </member>
        <member name="P:System.SR.toStringHome">
            <summary>Home</summary>
        </member>
        <member name="P:System.SR.toStringInsert">
            <summary>Ins</summary>
        </member>
        <member name="P:System.SR.toStringNone">
            <summary>(none)</summary>
        </member>
        <member name="P:System.SR.toStringPageDown">
            <summary>PgDn</summary>
        </member>
        <member name="P:System.SR.toStringPageUp">
            <summary>PgUp</summary>
        </member>
        <member name="P:System.SR.toStringShift">
            <summary>Shift</summary>
        </member>
        <member name="P:System.SR.TrackBarAutoSizeDescr">
            <summary>Indicates whether the control will resize itself automatically based on a computation of the default scroll bar dimensions.</summary>
        </member>
        <member name="P:System.SR.TrackBarLargeChangeDescr">
            <summary>The number of positions the slider moves in response to mouse clicks or the PAGE UP and PAGE DOWN keys.</summary>
        </member>
        <member name="P:System.SR.TrackBarLargeChangeError">
            <summary>LargeChange: Value '{0}' must be greater than or equal to 0.</summary>
        </member>
        <member name="P:System.SR.TrackBarMaximumDescr">
            <summary>The maximum value for the position of the slider on the TrackBar.</summary>
        </member>
        <member name="P:System.SR.TrackBarMinimumDescr">
            <summary>The minimum value for the position of the slider on the TrackBar.</summary>
        </member>
        <member name="P:System.SR.TrackBarOnScrollDescr">
            <summary>Occurs when the TrackBar slider moves.</summary>
        </member>
        <member name="P:System.SR.TrackBarOrientationDescr">
            <summary>The orientation of the control.</summary>
        </member>
        <member name="P:System.SR.TrackBarSmallChangeDescr">
            <summary>The number of positions the slider moves in response to keyboard input (arrow keys).</summary>
        </member>
        <member name="P:System.SR.TrackBarSmallChangeError">
            <summary>SmallChange: Value '{0}' must be greater than or equal to 0.</summary>
        </member>
        <member name="P:System.SR.TrackBarTickFrequencyDescr">
            <summary>The number of positions between tick marks.</summary>
        </member>
        <member name="P:System.SR.TrackBarTickStyleDescr">
            <summary>Indicates where the ticks appear on the TrackBar.</summary>
        </member>
        <member name="P:System.SR.TrackBarValueDescr">
            <summary>The position of the slider.</summary>
        </member>
        <member name="P:System.SR.TransparentBackColorNotAllowed">
            <summary>Control does not support transparent background colors.</summary>
        </member>
        <member name="P:System.SR.TrayIcon_TextTooLong">
            <summary>Text length must be less than 64 characters long.</summary>
        </member>
        <member name="P:System.SR.TreeNodeBackColorDescr">
            <summary>The background color of tree node.</summary>
        </member>
        <member name="P:System.SR.TreeNodeBeginEditFailed">
            <summary>BeginEdit did not succeed because LabelEdit property is false.</summary>
        </member>
        <member name="P:System.SR.TreeNodeCheckedDescr">
            <summary>Indicates whether the tree node is in a checked state.</summary>
        </member>
        <member name="P:System.SR.TreeNodeCollectionBadTreeNode">
            <summary>Parameter must be of type TreeNode.</summary>
        </member>
        <member name="P:System.SR.TreeNodeForeColorDescr">
            <summary>The foreground color of tree node.</summary>
        </member>
        <member name="P:System.SR.TreeNodeImageIndexDescr">
            <summary>The ImageList index value of the image displayed when the tree node is in the unselected state.</summary>
        </member>
        <member name="P:System.SR.TreeNodeImageKeyDescr">
            <summary>Identifies the image to display on the node when it is not selected.</summary>
        </member>
        <member name="P:System.SR.TreeNodeIndexDescr">
            <summary>The position of the tree node in the tree node collection.</summary>
        </member>
        <member name="P:System.SR.TreeNodeNodeFontDescr">
            <summary>The font used to display the text on the tree node's label.</summary>
        </member>
        <member name="P:System.SR.TreeNodeNodeNameDescr">
            <summary>The name of the object.</summary>
        </member>
        <member name="P:System.SR.TreeNodeNoParent">
            <summary>Full path can only be retrieved when a TreeNode has been added to a TreeView. This TreeNode has not been added to a TreeView.</summary>
        </member>
        <member name="P:System.SR.TreeNodeSelectedImageIndexDescr">
            <summary>The key in the image-list value that represents the image to display when the tree node is in the selected state.</summary>
        </member>
        <member name="P:System.SR.TreeNodeSelectedImageKeyDescr">
            <summary>The key in the ImageList value that represents the image to display when the tree node is in the selected state.</summary>
        </member>
        <member name="P:System.SR.TreeNodeStateImageIndexDescr">
            <summary>The index in the StateImageList displayed when CheckBoxes is set to false on the TreeView.</summary>
        </member>
        <member name="P:System.SR.TreeNodeStateImageKeyDescr">
            <summary>Identifies the image to display on the node to indicate its current state.</summary>
        </member>
        <member name="P:System.SR.TreeNodeTextDescr">
            <summary>The text displayed in the label of the tree node.</summary>
        </member>
        <member name="P:System.SR.TreeNodeToolTipTextDescr">
            <summary>The ToolTip text that will be displayed when the mouse hovers over the node.</summary>
        </member>
        <member name="P:System.SR.TreeViewAfterCheckDescr">
            <summary>Occurs when a check box on a tree node has been checked or unchecked.</summary>
        </member>
        <member name="P:System.SR.TreeViewAfterCollapseDescr">
            <summary>Occurs when a node has been collapsed.</summary>
        </member>
        <member name="P:System.SR.TreeViewAfterEditDescr">
            <summary>Occurs when the text of a node has been edited by the user.</summary>
        </member>
        <member name="P:System.SR.TreeViewAfterExpandDescr">
            <summary>Occurs when a node has been expanded.</summary>
        </member>
        <member name="P:System.SR.TreeViewAfterSelectDescr">
            <summary>Occurs when the selection has been changed.</summary>
        </member>
        <member name="P:System.SR.TreeViewBeforeCheckDescr">
            <summary>Occurs when a check box on a tree node is about to be checked or unchecked.</summary>
        </member>
        <member name="P:System.SR.TreeViewBeforeCollapseDescr">
            <summary>Occurs when a node is about to be collapsed.</summary>
        </member>
        <member name="P:System.SR.TreeViewBeforeEditDescr">
            <summary>Occurs when the text of a node is about to be edited by the user.</summary>
        </member>
        <member name="P:System.SR.TreeViewBeforeExpandDescr">
            <summary>Occurs when a node is about to be expanded.</summary>
        </member>
        <member name="P:System.SR.TreeViewBeforeSelectDescr">
            <summary>Occurs when the selection is about to change.</summary>
        </member>
        <member name="P:System.SR.TreeViewCheckBoxesDescr">
            <summary>Indicates whether check boxes are displayed beside nodes.</summary>
        </member>
        <member name="P:System.SR.TreeViewDrawModeDescr">
            <summary>Controls whether the system or the user paints the nodes.</summary>
        </member>
        <member name="P:System.SR.TreeViewDrawNodeEventDescr">
            <summary>Occurs in owner-draw mode, when a node needs to be drawn.</summary>
        </member>
        <member name="P:System.SR.TreeViewFullRowSelectDescr">
            <summary>Indicates whether the highlight spans the width of the TreeView.</summary>
        </member>
        <member name="P:System.SR.TreeViewHideSelectionDescr">
            <summary>Removes highlight from the selected node when control does not have focus.</summary>
        </member>
        <member name="P:System.SR.TreeViewHotTrackingDescr">
            <summary>Indicates whether nodes give feedback when the mouse is moved over them.</summary>
        </member>
        <member name="P:System.SR.TreeViewImageIndexDescr">
            <summary>The default image index for nodes.</summary>
        </member>
        <member name="P:System.SR.TreeViewImageKeyDescr">
            <summary>The default image key for nodes.</summary>
        </member>
        <member name="P:System.SR.TreeViewImageListDescr">
            <summary>The ImageList control from which node images are taken.</summary>
        </member>
        <member name="P:System.SR.TreeViewIndentDescr">
            <summary>The indentation width of child nodes in pixels.</summary>
        </member>
        <member name="P:System.SR.TreeViewItemHeightDescr">
            <summary>The height of every node in the TreeView.</summary>
        </member>
        <member name="P:System.SR.TreeViewLabelEditDescr">
            <summary>Indicates whether the user can edit the label text of nodes.</summary>
        </member>
        <member name="P:System.SR.TreeViewLineColorDescr">
            <summary>The color of the lines that connect the nodes of the TreeView.</summary>
        </member>
        <member name="P:System.SR.TreeViewNodeMouseClickDescr">
            <summary>Occurs when a node is clicked with the mouse.</summary>
        </member>
        <member name="P:System.SR.TreeViewNodeMouseDoubleClickDescr">
            <summary>Occurs when a node is double-clicked with the mouse.</summary>
        </member>
        <member name="P:System.SR.TreeViewNodeMouseHoverDescr">
            <summary>Occurs when the mouse hovers over a TreeNode.</summary>
        </member>
        <member name="P:System.SR.TreeViewNodesDescr">
            <summary>The root nodes in the TreeView control.</summary>
        </member>
        <member name="P:System.SR.TreeViewNodeSorterDescr">
            <summary>The sorting comparer for the TreeView.</summary>
        </member>
        <member name="P:System.SR.TreeViewPathSeparatorDescr">
            <summary>The string delimiter used for the path returned by a node's FullPath property.</summary>
        </member>
        <member name="P:System.SR.TreeViewScrollableDescr">
            <summary>Indicates whether the control will display scroll bars if it contains more nodes than can fit in the visible area.</summary>
        </member>
        <member name="P:System.SR.TreeViewSelectedImageIndexDescr">
            <summary>The default image index for selected nodes.</summary>
        </member>
        <member name="P:System.SR.TreeViewSelectedImageKeyDescr">
            <summary>The default image for selected nodes.</summary>
        </member>
        <member name="P:System.SR.TreeViewSelectedNodeDescr">
            <summary>The currently selected node, or null if no node is selected.</summary>
        </member>
        <member name="P:System.SR.TreeViewShowLinesDescr">
            <summary>Indicates whether lines are displayed between sibling nodes and between parent and child nodes.</summary>
        </member>
        <member name="P:System.SR.TreeViewShowPlusMinusDescr">
            <summary>Indicates if plus/minus buttons are shown next to parent nodes.</summary>
        </member>
        <member name="P:System.SR.TreeViewShowRootLinesDescr">
            <summary>Indicates whether lines are displayed between root nodes.</summary>
        </member>
        <member name="P:System.SR.TreeViewShowShowNodeToolTipsDescr">
            <summary>Indicates whether ToolTips will be displayed on the nodes.</summary>
        </member>
        <member name="P:System.SR.TreeViewSortedDescr">
            <summary>Indicates whether nodes are sorted.</summary>
        </member>
        <member name="P:System.SR.TreeViewStateImageListDescr">
            <summary>The ImageList control used by the TreeView for custom states.</summary>
        </member>
        <member name="P:System.SR.TreeViewTopNodeDescr">
            <summary>The first visible node in the TreeView.</summary>
        </member>
        <member name="P:System.SR.TreeViewVisibleCountDescr">
            <summary>The number of visible nodes in the TreeView.</summary>
        </member>
        <member name="P:System.SR.TypedControlCollectionShouldBeOfType">
            <summary>Controls added to this collection must be of type '{0}'.</summary>
        </member>
        <member name="P:System.SR.TypedControlCollectionShouldBeOfTypes">
            <summary>Controls added to this collection must be of type '{0}' or '{1}'.</summary>
        </member>
        <member name="P:System.SR.TYPEINFOPROCESSORGetDocumentationFailed">
            <summary>ITypeInfo::GetDocumentation for DISPID 0x{0:X} returned hr=0x{1:X}, which will cause this property to be ignored. S_OK must be returned. Component={2}</summary>
        </member>
        <member name="P:System.SR.TYPEINFOPROCESSORGetRefTypeInfoFailed">
            <summary>ITypeInfo::GetRefTypeInfo returned hr={0:X}, so the data type cannot be retrieved.</summary>
        </member>
        <member name="P:System.SR.TYPEINFOPROCESSORGetTypeAttrFailed">
            <summary>ITypeInfo::GetTypeAttr returned hr={0:X}, so the data type cannot be retrieved.</summary>
        </member>
        <member name="P:System.SR.TypeLoadException">
            <summary>Type {0} in the data at line {1}, position {2} cannot be located.</summary>
        </member>
        <member name="P:System.SR.TypeLoadExceptionShort">
            <summary>Type {0} cannot be located.</summary>
        </member>
        <member name="P:System.SR.UnableToInitComponent">
            <summary>Unable to initialize component.</summary>
        </member>
        <member name="P:System.SR.UnableToSetPanelText">
            <summary>Unable to set the panel text.</summary>
        </member>
        <member name="P:System.SR.UnknownAttr">
            <summary>Unknown ATTRIBUTE type.</summary>
        </member>
        <member name="P:System.SR.UnknownInputLanguageLayout">
            <summary>Unknown layout</summary>
        </member>
        <member name="P:System.SR.UnsafeNativeMethodsNotImplemented">
            <summary>Not implemented.</summary>
        </member>
        <member name="P:System.SR.UpDownBaseAlignmentDescr">
            <summary>Indicates how the up-down control will position the up and down buttons relative to its edit box.</summary>
        </member>
        <member name="P:System.SR.UpDownBaseBorderStyleDescr">
            <summary>Indicates the border style of the up-down control.</summary>
        </member>
        <member name="P:System.SR.UpDownBaseDownButtonAccName">
            <summary>Down</summary>
        </member>
        <member name="P:System.SR.UpDownBaseInterceptArrowKeysDescr">
            <summary>Indicates whether the up-down control will increment and decrement the value when the UP ARROW and DOWN ARROW keys are pressed.</summary>
        </member>
        <member name="P:System.SR.UpDownBasePreferredHeightDescr">
            <summary>The preferred height of this control.</summary>
        </member>
        <member name="P:System.SR.UpDownBaseReadOnlyDescr">
            <summary>Indicates whether the edit box is read-only.</summary>
        </member>
        <member name="P:System.SR.UpDownBaseTextAlignDescr">
            <summary>Indicates how the text should be aligned in the edit box.</summary>
        </member>
        <member name="P:System.SR.UpDownBaseUpButtonAccName">
            <summary>Up</summary>
        </member>
        <member name="P:System.SR.UseCompatibleTextRenderingDescr">
            <summary>Specifies whether text rendering should be compatible with previous releases of Windows Forms.</summary>
        </member>
        <member name="P:System.SR.UserControlBorderStyleDescr">
            <summary>Indicates whether the panel should have a border.</summary>
        </member>
        <member name="P:System.SR.UserControlOnLoadDescr">
            <summary>Occurs whenever the user control loads.</summary>
        </member>
        <member name="P:System.SR.valueChangedEventDescr">
            <summary>Occurs when the value of the control changes.</summary>
        </member>
        <member name="P:System.SR.VisualStyleHandleCreationFailed">
            <summary>Visual Style handle creation operation did not succeed.</summary>
        </member>
        <member name="P:System.SR.VisualStyleNotActive">
            <summary>Visual Styles-related operation resulted in an error because no visual style is currently active.</summary>
        </member>
        <member name="P:System.SR.VisualStylesDisabledInClientArea">
            <summary>Visual Styles-related operation resulted in an error because visual styles are currently disabled in the client area.</summary>
        </member>
        <member name="P:System.SR.VisualStylesInvalidCombination">
            <summary>Given combination of Class, Part, and State is not defined by the current visual style.</summary>
        </member>
        <member name="P:System.SR.WebBrowserAllowDropNotSupported">
            <summary>The WebBrowser control does not support AllowDrop.  Use AllowWebBrowserDrop to allow the WebBrowser to process drag/drop.</summary>
        </member>
        <member name="P:System.SR.WebBrowserAllowNavigationDescr">
            <summary>Specifies whether the WebBrowser control can browse to another page after initially loading.</summary>
        </member>
        <member name="P:System.SR.WebBrowserAllowWebBrowserDropDescr">
            <summary>Specifies whether the WebBrowser control will receive drop notifications.</summary>
        </member>
        <member name="P:System.SR.WebBrowserBackgroundImageLayoutNotSupported">
            <summary>The WebBrowser control does not support the BackgroundImageLayout property.</summary>
        </member>
        <member name="P:System.SR.WebBrowserBackgroundImageNotSupported">
            <summary>The WebBrowser control does not support the BackgroundImage property.</summary>
        </member>
        <member name="P:System.SR.WebBrowserCanGoBackChangedDescr">
            <summary>Occurs when the availability of a previous page in the Web browser navigation history changes.</summary>
        </member>
        <member name="P:System.SR.WebBrowserCanGoForwardChangedDescr">
            <summary>Occurs when the availability of a next page in the Web browser navigation history changes.</summary>
        </member>
        <member name="P:System.SR.WebBrowserCursorNotSupported">
            <summary>The WebBrowser control does not support the Cursor property.</summary>
        </member>
        <member name="P:System.SR.WebBrowserDocumentCompletedDescr">
            <summary>Occurs when the document hosted in the Web browser control is fully loaded.</summary>
        </member>
        <member name="P:System.SR.WebBrowserDocumentTitleChangedDescr">
            <summary>Occurs whenever the title text changes.</summary>
        </member>
        <member name="P:System.SR.WebBrowserEnabledNotSupported">
            <summary>The WebBrowser control does not support the Enabled property.</summary>
        </member>
        <member name="P:System.SR.WebBrowserEncryptionLevelChangedDescr">
            <summary>Occurs whenever encryption level changes.</summary>
        </member>
        <member name="P:System.SR.WebBrowserFileDownloadDescr">
            <summary>Occurs when a file download occurs.</summary>
        </member>
        <member name="P:System.SR.WebBrowserInIENotSupported">
            <summary>Adding a WebBrowser control in Internet Explorer is not supported.</summary>
        </member>
        <member name="P:System.SR.WebBrowserIsOfflineDescr">
            <summary>Determines whether the Web browser control operates in offline mode.</summary>
        </member>
        <member name="P:System.SR.WebBrowserIsWebBrowserContextMenuEnabledDescr">
            <summary>Indicates whether to use the context menu of the native web browser.</summary>
        </member>
        <member name="P:System.SR.WebBrowserNavigateAbsoluteUri">
            <summary>Navigation to a relative URL unsuccessful.</summary>
        </member>
        <member name="P:System.SR.WebBrowserNavigatedDescr">
            <summary>Occurs after WebBrowser navigation occurs.</summary>
        </member>
        <member name="P:System.SR.WebBrowserNavigatingDescr">
            <summary>Occurs before WebBrowser navigation occurs.</summary>
        </member>
        <member name="P:System.SR.WebBrowserNewWindowDescr">
            <summary>Occurs when a new window is created for the WebBrowser.</summary>
        </member>
        <member name="P:System.SR.WebBrowserNoCastToIWebBrowser2">
            <summary>IWebBrowser2 get from the native ActiveX control did not succeed.</summary>
        </member>
        <member name="P:System.SR.WebBrowserObjectForScriptingComVisibleOnly">
            <summary>ObjectForScripting's class must be visible to COM.  Verify that the object is public, or consider adding the ComVisible attribute to your class.</summary>
        </member>
        <member name="P:System.SR.WebBrowserProgressChangedDescr">
            <summary>Occurs when an update to the progress of a download occurs.</summary>
        </member>
        <member name="P:System.SR.WebBrowserRightToLeftNotSupported">
            <summary>The WebBrowser control does not support the RightToLeft property.</summary>
        </member>
        <member name="P:System.SR.WebBrowserScriptErrorsSuppressedDescr">
            <summary>Specifies whether the WebBrowser control shows script errors in dialogs boxes.</summary>
        </member>
        <member name="P:System.SR.WebBrowserScrollBarsEnabledDescr">
            <summary>Specifies whether the WebBrowser control should have scrollbars or not.</summary>
        </member>
        <member name="P:System.SR.WebBrowserSecurityLevelDescr">
            <summary>The level of security permissions the hosted documents are granted.</summary>
        </member>
        <member name="P:System.SR.WebBrowserStatusTextChangedDescr">
            <summary>Occurs whenever the status text changes.</summary>
        </member>
        <member name="P:System.SR.WebBrowserTextNotSupported">
            <summary>The WebBrowser control does not support the Text property.</summary>
        </member>
        <member name="P:System.SR.WebBrowserUrlDescr">
            <summary>Specifies the URL that the Web browser control has navigated to.</summary>
        </member>
        <member name="P:System.SR.WebBrowserUseWaitCursorNotSupported">
            <summary>The WebBrowser control does not support the UseWaitCursor property.</summary>
        </member>
        <member name="P:System.SR.WebBrowserWebBrowserShortcutsEnabledDescr">
            <summary>Specifies whether some accelerator keys are enabled in the WebBrowser control.</summary>
        </member>
        <member name="P:System.SR.WidthGreaterThanMinWidth">
            <summary>Width must be greater than MinWidth.</summary>
        </member>
        <member name="P:System.SR.Win32WindowAlreadyCreated">
            <summary>SetCompatibleTextRenderingDefault must be called before the first IWin32Window object is created in the application.</summary>
        </member>
        <member name="P:System.SR.WindowsFormsSetEvent">
            <summary>Setting event '{0}'</summary>
        </member>
        <member name="P:System.SR.ControlOnDpiChangedBeforeParentDescr">
            <summary>Occurs when the top level parent of this control is moved to a monitor with a different resolution and scaling level, or when parent's monitor scaling level is changed in Windows settings. Child windows receive this message before parent window receives Dp ...</summary>
        </member>
        <member name="P:System.SR.ControlOnDpiChangedAfterParentDescr">
            <summary>Occurs when the top level parent of this control is moved to a monitor with a different resolution and scaling level, or when parent's monitor scaling level is changed in Windows settings. Child windows receive this message after parent window receives Dpi ...</summary>
        </member>
        <member name="P:System.SR.FormOnDpiChangedDescr">
            <summary>Occurs when form is moved to a monitor with a different resolution and scaling level, or when form's monitor scaling level is changed in the Windows settings.</summary>
        </member>
        <member name="P:System.SR.MDIChildSystemMenuItemAccessibleName">
            <summary>System</summary>
        </member>
        <member name="P:System.SR.MonthCalendarSingleDateSelected">
            <summary>{0} selected.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarSingleYearSelected">
            <summary>Year {0} selected.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarYearRangeSelected">
            <summary>Year {0} to {1} selected.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarSingleDecadeSelected">
            <summary>Decade {0} selected.</summary>
        </member>
        <member name="P:System.SR.MonthCalendarRangeSelected">
            <summary>{0} to {1} selected.</summary>
        </member>
        <member name="P:System.SR.PropertyGridDropDownButtonComboBoxAccessibleName">
            <summary>Open</summary>
        </member>
        <member name="P:System.SR.CombinationOfAccessibilitySwitchesNotSupported">
            <summary>Desktop applications are required to opt in to all earlier accessibility improvements to get the later improvements. To do this, ensure that if the AppContext switch 'Switch.UseLegacyAccessibilityFeatures.N' is set to 'false', then 'Switch.UseLegacyAccessi ...</summary>
        </member>
        <member name="P:System.SR.DateTimePickerLocalizedControlType">
            <summary>date and time picker</summary>
        </member>
        <member name="P:System.SR.SpinnerAccessibleName">
            <summary>Spinner</summary>
        </member>
        <member name="P:System.SR.LiveRegionAutomationLiveSettingDescr">
            <summary>The politeness level that a client should use to notify the user of changes to this live region.</summary>
        </member>
        <member name="P:System.SR.AccessibleObjectLiveRegionNotSupported">
            <summary>The corresponding UI element is not a live region.</summary>
        </member>
        <member name="P:System.SR.OwnerControlIsNotALiveRegion">
            <summary>Owner control of the accessible object must implement IAutomationLiveRegion interface.</summary>
        </member>
        <member name="P:System.SR.StandardOleMarshalObjectGetMarshalerFailed">
            <summary>Failed to get marshaler for IID {0}.</summary>
        </member>
        <member name="P:System.SR.NotSortedAccessibleStatus">
            <summary>Not sorted.</summary>
        </member>
        <member name="P:System.SR.SortedAscendingAccessibleStatus">
            <summary>Sorted ascending.</summary>
        </member>
        <member name="P:System.SR.SortedDescendingAccessibleStatus">
            <summary>Sorted descending.</summary>
        </member>
        <member name="P:System.SR.DataGridViewSortedAscendingAccessibleStatusFormat">
            <summary>Sorted ascending by {0}.</summary>
        </member>
        <member name="P:System.SR.DataGridViewSortedDescendingAccessibleStatusFormat">
            <summary>Sorted descending by {0}.</summary>
        </member>
        <member name="P:System.SR.PropertyGridPropertyValueSelectedFormat">
            <summary>{0} selected.</summary>
        </member>
        <member name="P:System.SR.KeyboardToolTipDisplayBehaviorRequiresAccessibilityImprovementsLevel3">
            <summary>ToolTips display on keyboard focus requires the following AppContextSwitchOverrides: 'Switch.UseLegacyAccessibilityFeatures.3' and 'Switch.System.Windows.Forms.UseLegacyToolTipDisplay'</summary>
        </member>
        <member name="P:System.SR.ControlDpiChangeScale">
            <summary>Enable or disable automatic scaling of this control when dpi changes.</summary>
        </member>
        <member name="P:System.SR.DataGridViewEditingPanelUiaProviderDescription">
            <summary>DataGridView EditingPanel UI Automation provider</summary>
        </member>
        <member name="P:System.SR.ComboBoxValueSelectedFormat">
            <summary>{0} selected</summary>
        </member>
        <member name="P:System.SR.UnexpectedClipboardType">
            <summary>Clipboard contains an unexpected type.</summary>
        </member>
        <member name="P:System.SR.UnexpectedTypeForClipboardFormat">
            <summary>The specified Clipboard format is not compatible with '{0}' type.</summary>
        </member>
        <member name="P:System.SR.FolderBrowserDialogUseDescriptionForTitle">
            <summary>A value that indicates whether to use the value of the Description property as the dialog title for Vista style dialogs. This property has no effect on old style dialogs.</summary>
        </member>
        <member name="P:System.SR.TextBoxPlaceholderTextDescr">
            <summary>Specifies the PlaceholderText of the TextBox control. The PlaceholderText is displayed in the control when the Text property is null or empty and can be used to guide the user what input is expected by the control.</summary>
        </member>
        <member name="P:System.SR.TreeNodeCircularReference">
            <summary>A circular reference has been made. A TreeNode cannot be added as a descendant of itself.</summary>
        </member>
        <member name="P:System.SR.DefaultNumericUpDownAccessibleName">
            <summary>NumericUpDown</summary>
        </member>
        <member name="P:System.SR.DefaultDomainUpDownAccessibleName">
            <summary>DomainUpDown</summary>
        </member>
        <member name="P:System.SR.DefaultUpDownButtonsAccessibleName">
            <summary>UpDown</summary>
        </member>
        <member name="P:System.SR.Win32SetParentFailed">
            <summary>Failed to set Win32 parent window of the Control.</summary>
        </member>
        <member name="P:System.SR.ErrorProviderDefaultAccessibleName">
            <summary>Error provider</summary>
        </member>
        <member name="P:System.SR.TaskDialogButtonTextMustNotBeNull">
            <summary>The text of a custom button must not be null or an empty string.</summary>
        </member>
        <member name="P:System.SR.TaskDialogCannotNavigateClosedDialog">
            <summary>Cannot navigate the dialog when it has already closed.</summary>
        </member>
        <member name="P:System.SR.TaskDialogCannotNavigateWithinNavigationEventHandler">
            <summary>Cannot navigate the dialog from an event handler that is called from within navigation.</summary>
        </member>
        <member name="P:System.SR.TaskDialogCannotNavigateWithinRadioButtonCheckedChanged">
            <summary>Cannot navigate the dialog from within the {0} event of one of the radio buttons of the current task dialog.</summary>
        </member>
        <member name="P:System.SR.TaskDialogCannotRemoveProgressBarWhileDialogIsShown">
            <summary>Cannot remove the progress bar while the task dialog is shown.</summary>
        </member>
        <member name="P:System.SR.TaskDialogCannotSetPropertyOfBoundPage">
            <summary>Cannot set this property or call this method while the page is bound to a task dialog.</summary>
        </member>
        <member name="P:System.SR.TaskDialogCannotSetPropertyOfShownDialog">
            <summary>Cannot set this property while the task dialog is shown.</summary>
        </member>
        <member name="P:System.SR.TaskDialogCannotSetRadioButtonCheckedWithinCheckedChangedEvent">
            <summary>Cannot set the {0} property from within the {1} event of one of the radio buttons of the current task dialog.</summary>
        </member>
        <member name="P:System.SR.TaskDialogCannotUncheckRadioButtonWhileBound">
            <summary>Cannot uncheck a radio button while it is bound to a task dialog.</summary>
        </member>
        <member name="P:System.SR.TaskDialogCannotUpdateAfterNavigation">
            <summary>Cannot manipulate the task dialog immediately after navigating it. Please wait for the {0} event of the next page to occur.</summary>
        </member>
        <member name="P:System.SR.TaskDialogCannotUpdateIconType">
            <summary>Cannot update the icon from a handle icon type to a non-handle icon type, and vice versa.</summary>
        </member>
        <member name="P:System.SR.TaskDialogCanUpdateStateOnlyWhenShown">
            <summary>Can only update the state of a task dialog while it is shown.</summary>
        </member>
        <member name="P:System.SR.TaskDialogCollectionAlreadyBound">
            <summary>One of the collections of this {0} is already bound to a {1} instance.</summary>
        </member>
        <member name="P:System.SR.TaskDialogControlAlreadyAddedToCollection">
            <summary>This control has already been added to the collection.</summary>
        </member>
        <member name="P:System.SR.TaskDialogControlAlreadyBound">
            <summary>One of the controls of this {0} is already bound to a {1} instance.</summary>
        </member>
        <member name="P:System.SR.TaskDialogControlIsPartOfOtherCollection">
            <summary>This control is already part of a different collection.</summary>
        </member>
        <member name="P:System.SR.TaskDialogControlNotBound">
            <summary>This control is not currently bound to a task dialog.</summary>
        </member>
        <member name="P:System.SR.TaskDialogControlNotCreated">
            <summary>The control has not been created.</summary>
        </member>
        <member name="P:System.SR.TaskDialogInstanceAlreadyShown">
            <summary>This {0} instance is already being shown.</summary>
        </member>
        <member name="P:System.SR.TaskDialogNavigationNotCompleted">
            <summary>Navigation of the task dialog did not complete yet. Please wait for the {0} event to occur.</summary>
        </member>
        <member name="P:System.SR.TaskDialogVisualStylesNotEnabled">
            <summary>Visual styles are not enabled. Please call {0} before showing the task dialog.</summary>
        </member>
        <member name="P:System.SR.TaskDialogOnlySingleButtonCanBeDefault">
            <summary>Only a single button can be set as default button.</summary>
        </member>
        <member name="P:System.SR.TaskDialogOnlySingleRadioButtonCanBeChecked">
            <summary>Only a single radio button can be set as checked.</summary>
        </member>
        <member name="P:System.SR.TaskDialogPageIsAlreadyBound">
            <summary>This {0} instance is already bound to a {1} instance.</summary>
        </member>
        <member name="P:System.SR.TaskDialogRadioButtonTextMustNotBeNull">
            <summary>The text of a radio button must not be null or an empty string.</summary>
        </member>
        <member name="P:System.SR.TaskDialogTooManyButtonsAdded">
            <summary>Too many custom buttons or radio buttons have been added.</summary>
        </member>
    </members>
</doc>
